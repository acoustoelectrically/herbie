[{"memory":[[27264,27264]],"time":0.044921875,"type":"start"},{"compiler":[[27,19]],"memory":[[4447248,12583600]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":54.218994140625,"type":"analyze"},{"bogosity":[{"invalid":0.499308382889549,"precondition":0.4942799140699208,"valid":0.006411703040530234}],"memory":[[-234229752,1658028704]],"mixsample":[[103.005126953125,"adjust",800],[231.74560546875,"ival-add",0],[269.790283203125,"ival-mult",0],[239.5029296875,"ival-fabs",0],[16.155517578125,"ival-assert",0],[213.1826171875,"ival-sub",0],[635.615966796875,"ival-tan",0],[122.457763671875,"ival-and",0],[0.04150390625,"ival-sub",400],[632.79736328125,"const",0],[0.556396484375,"ival-tan",400],[54.491455078125,"exact",0],[407.978759765625,"ival-<=",0],[195.982177734375,"ival-<",0]],"outcomes":[[527.3984375,1,"valid",2842],[3144.989990234375,0,"invalid",26084],[583.333251953125,0,"valid",5414]],"time":5923.64697265625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[217,4,1,34]],"explanations":[["-.f64","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","cancellation",218,11,[],[[]]]],"fperrors":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",221,1,[-3.4710351095614406e-252,1.1798180499542788e-254],4,[-4.429856025258877e-256,5.417516371359353e-258]],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(tan.f64 x)",0,0,false,0,false],["(tan.f64 (+.f64 x eps))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,218],[0,38]],"maybe-confusion":[[217,4,0,1,7,27]],"memory":[[-5434800,39260384]],"mixsample":[[0.47705078125,"ival-tan",2000],[0.01806640625,"ival-tan",800],[6.1298828125,"adjust",800],[4.69580078125,"ival-add",0],[0.272216796875,"ival-assert",0],[4.0517578125,"ival-sub",0],[0.053955078125,"adjust",2800],[12.7001953125,"ival-tan",0],[0.628173828125,"ival-true",0],[0.01708984375,"ival-sub",400],[0.266845703125,"ival-tan",400],[0.05810546875,"adjust",2000]],"outcomes":[[28.01416015625,1,"valid",184],[1.0087890625,3,"valid",2],[21.23095703125,0,"valid",326]],"time":116.97021484375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,183,7,0.001035587],[10,183,7,0.000912923],[9,175,7,0.000901218],[8,159,7,0.000962622],[7,110,7,0.000757066],[6,80,7,0.000818817],[5,47,7,0.000468397],[4,32,7,0.000376679],[3,24,7,0.000181423],[2,18,7,0.00013758],[1,13,7,0.000129758],[0,10,7,0.000142737],[0,6,7,0.000104826]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"memory":[[-189888,15721616]],"method":["egg-herbie"],"outputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":159.685791015625,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.13720703125,"type":"eval"},{"alts":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","next",24.61062264534191,"binary64"]],"compiler":[[7,6]],"memory":[[313728,313728]],"time":0.517822265625,"type":"prune"},{"egraph":[[0,183,18,0.000641792],[10,183,18,0.000762283],[9,175,18,0.000962544],[8,159,18,0.000935925],[7,110,18,0.000777981],[6,80,18,0.000786214],[5,47,18,0.000448839],[4,32,18,0.000230524],[3,24,18,0.00018346],[2,18,18,0.000133798],[1,13,18,0.000122277],[0,10,18,0.000136904],[0,6,18,9.8936e-5]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(tan.f64 x)"]],"locations":[["(tan.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(tan.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","cost-diff",0]],"memory":[[820256,820256]],"method":["egg-herbie"],"outputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(tan.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","(tan.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.5341796875,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(tan.f64 x)","accuracy",0.01171875],["(tan.f64 (+.f64 x eps))","accuracy",0.015625],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","accuracy",24.60278075742854]],"memory":[[487360,8506480]],"mixsample":[[0.1748046875,"ival-tan",2000],[0.006103515625,"ival-tan",800],[2.1376953125,"adjust",800],[1.76806640625,"ival-add",0],[0.10546875,"ival-assert",0],[1.593505859375,"ival-sub",0],[0.017822265625,"adjust",2800],[4.636474609375,"ival-tan",0],[0.1943359375,"ival-true",0],[0.006103515625,"ival-sub",400],[0.086669921875,"ival-tan",400],[0.01806640625,"adjust",2000]],"outcomes":[[10.254150390625,1,"valid",92],[0.344970703125,3,"valid",1],[8.194580078125,0,"valid",163]],"time":27.536865234375,"type":"localize"},{"count":[[4,31]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(+.f64 x eps)","(tan.f64 x)"]],"memory":[[4269904,4269904]],"outputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(* x (+ 1 (/ eps x)))","(/ (sin x) (cos x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(* eps (+ 1 (/ x eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[1.739013671875,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","eps","-inf"],[2.277099609375,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","eps","inf"],[3.023193359375,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","eps","0"],[1.47412109375,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","x","-inf"],[1.55712890625,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","x","inf"],[2.15087890625,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","x","0"]],"time":13.276123046875,"type":"series"},{"count":[[31,29]],"egraph":[[0,8335,686,0.091085682],[3,6077,710,0.026626743],[2,1539,873,0.020802333],[1,464,884,0.00559121],[0,157,950,0.001520999]],"inputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(* x (+ 1 (/ eps x)))","(/ (sin x) (cos x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(* eps (+ 1 (/ x eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[1394224,42965456]],"method":["egg-herbie"],"outputs":[["(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 eps) (sin.f64 eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (+.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal -1/3 binary64))) #s(literal 1/2 binary64))) x (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)) #s(literal 1 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 eps) (sin.f64 eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) #s(literal -1/3 binary64))) x) x (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)) #s(literal 1 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+ eps x)","(+.f64 eps x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":297.599853515625,"type":"simplify"},{"count":[[4,255]],"egraph":[[0,8166,16,0.064477433],[3,6137,16,0.043279618],[2,402,16,0.019640216],[1,50,16,0.001470294],[0,10,16,0.000552275],[0,6,16,9.0622e-5]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(+.f64 x eps)","(tan.f64 x)"]],"memory":[[1455328,47656288]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (fma.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (sin.f64 (+.f64 (+.f64 eps x) x))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(*.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(*.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (*.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 (tan.f64 x)) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x))","(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (tan.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))) (+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (*.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (neg.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(/.f64 (neg.f64 (sin.f64 (-.f64 (+.f64 eps x) x))) (neg.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (tan.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (sin.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (sin.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x))) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x)))) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (sin.f64 (+.f64 eps x)) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (cos.f64 (+.f64 eps x)) #s(literal 1 binary64))) (*.f64 (cos.f64 (+.f64 eps x)) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (cos.f64 x) (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))))) (*.f64 (cos.f64 x) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 (+.f64 eps x))) (*.f64 (cos.f64 x) (neg.f64 (sin.f64 (+.f64 eps x))))) (*.f64 (cos.f64 x) (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (*.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (cos.f64 x) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 eps x)) (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (cos.f64 (+.f64 eps x))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 (+.f64 eps x))))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (fma.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (*.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)))))","(/.f64 (fma.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (neg.f64 (cos.f64 x)) (+.f64 (tan.f64 eps) (tan.f64 x)))) (*.f64 (neg.f64 (cos.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x) (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 (+.f64 eps x)))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (cos.f64 x) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x)))","(/.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (neg.f64 (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (neg.f64 (cos.f64 x))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (cos.f64 x) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (cos.f64 x)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (cos.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (sin.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(/.f64 (fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 (fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (neg.f64 (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (fma.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x)))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (fma.f64 (sin.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (tan.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (+.f64 (+.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (neg.f64 (tan.f64 x)) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 (tan.f64 x)) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (sin.f64 (-.f64 (+.f64 eps x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 eps) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (tan.f64 eps) (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (sin.f64 (+.f64 (+.f64 eps x) x))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 eps x)))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (tan.f64 eps) (tan.f64 x)) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(fma.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))) (neg.f64 (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (+.f64 eps x)))) (neg.f64 (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (tan.f64 (+.f64 eps x)))","(fma.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (tan.f64 (+.f64 eps x)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 x) (neg.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (tan.f64 (+.f64 eps x)))","(fma.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (tan.f64 (+.f64 eps x)))","(fma.f64 (tan.f64 x) #s(literal -1 binary64) (tan.f64 (+.f64 eps x)))","(fma.f64 (tan.f64 (+.f64 eps x)) (/.f64 (tan.f64 (+.f64 eps x)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (tan.f64 (+.f64 eps x)) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(-.f64 (+.f64 (tan.f64 (+.f64 eps x)) #s(literal 0 binary64)) (tan.f64 x))","(-.f64 (/.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))) (/.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(-.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x)))","(+.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 eps) (tan.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (tan.f64 eps) (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (tan.f64 eps) (tan.f64 x)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 (+.f64 eps x)))","(*.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (+.f64 eps x)))))","(*.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)))","(*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 1 binary64))","(/.f64 (+.f64 (tan.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (tan.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))) (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (tan.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (tan.f64 x) (tan.f64 eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x)))) (neg.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 eps x)))) (neg.f64 (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 1 binary64)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 (+.f64 eps x)) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (tan.f64 x) (tan.f64 eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)))))","(/.f64 (+.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))))","(/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(neg.f64 (tan.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps))))","(neg.f64 (tan.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(neg.f64 (tan.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps)))))","(neg.f64 (tan.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (cos.f64 (+.f64 eps x))))","(neg.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (sin.f64 (+.f64 eps x)) (neg.f64 (cos.f64 (+.f64 eps x)))))","(tan.f64 (+.f64 eps x))","(exp.f64 (*.f64 (log.f64 (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 (+.f64 eps x)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 2 binary64)))) (-.f64 (*.f64 x x) (*.f64 (-.f64 eps x) eps)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 (-.f64 eps x) eps) (-.f64 (*.f64 (-.f64 eps x) eps) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (*.f64 (-.f64 x eps) (+.f64 eps x)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x eps))))","(*.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(*.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (/.f64 (+.f64 eps x) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (*.f64 (+.f64 eps x) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 eps x))","(*.f64 (+.f64 eps x) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 eps x) (*.f64 (-.f64 x eps) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 eps x)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 eps eps (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))))","(/.f64 (*.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) #s(literal 1 binary64)) (-.f64 x eps))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 x (/.f64 x (-.f64 x eps)))) (*.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))))) (fma.f64 x (/.f64 x (-.f64 x eps)) (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 3 binary64))) (fma.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 x (/.f64 x (-.f64 x eps))) (fma.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))) (*.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)))) (neg.f64 (neg.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (*.f64 x x)) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (*.f64 (-.f64 x eps) (-.f64 x eps)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 x eps) (fma.f64 eps eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 x eps) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 eps x))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 eps x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 eps x)))","(neg.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (/.f64 (*.f64 x x) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 x (/.f64 x (-.f64 x eps)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 eps x))) #s(literal -1 binary64)))","(+.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(+.f64 eps x)","(+.f64 x eps)","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal -1 binary64))","(pow.f64 (tan.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(neg.f64 (neg.f64 (tan.f64 x)))","(tan.f64 x)","(exp.f64 (*.f64 (log.f64 (tan.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 x))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":249.151123046875,"type":"rewrite"},{"compiler":[[7565,1005]],"memory":[[-150336,25815760]],"time":33.079833984375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","fresh",42.01618822295535,"binary64"],["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","next",24.600734920205984,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",24.61062264534191,"binary64"],["(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","fresh",41.61666065167192,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","next",25.223336585668438,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","fresh",0.23591148119509497,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","next",0.6641487035889624,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","next",0.0078125,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","next",0.0838697224426992,"binary64"]],"compiler":[[27,13],[14,9],[7,6],[17,11],[13,12],[20,14],[13,10],[68,29],[31,19],[27,13],[14,9],[17,11],[13,12],[20,14],[13,10],[68,29],[31,19]],"count":[[277,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[276,8],"picked":[1,1]}],"memory":[[-1703248,14183344]],"min-error":[[0.0078125,"binary64"]],"time":10.051025390625,"type":"prune"},{"egraph":[[0,8167,580,0.085067599],[5,6825,597,0.025158648],[4,3951,597,0.021878852],[3,828,618,0.013030535],[2,276,618,0.002811531],[1,139,622,0.001267227],[0,87,625,0.000791727],[0,49,641,0.000585491]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(sin.f64 x)","x","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","#s(literal 1 binary64)","#s(literal -1/3 binary64)","eps","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (sin.f64 x) eps)","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","eps","(cos.f64 eps)","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(-.f64 (+.f64 eps x) x)","(+.f64 eps x)","eps","x","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 (+.f64 eps x))","(cos.f64 x)","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","(*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64))","(log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","#s(literal 1 binary64)","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(tan.f64 (+.f64 eps x))","(+.f64 eps x)","eps","x","(tan.f64 x)","#s(literal -1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(sin.f64 x)","x","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (sin.f64 x) eps)","eps"]],"locations":[["(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","cost-diff",0],["(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","cost-diff",0],["(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","cost-diff",1],["(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","cost-diff",0],["(log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","cost-diff",1],["(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","cost-diff",2],["(*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64))","cost-diff",3],["(+.f64 eps x)","cost-diff",0],["(sin.f64 (-.f64 (+.f64 eps x) x))","cost-diff",0],["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","cost-diff",0],["(-.f64 (+.f64 eps x) x)","cost-diff",4],["(cos.f64 eps)","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["(/.f64 (sin.f64 eps) (cos.f64 eps))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","cost-diff",0],["(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","cost-diff",1],["(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","cost-diff",1],["(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","cost-diff",8]],"memory":[[-1184064,44024096]],"method":["egg-herbie"],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 eps (*.f64 #s(literal 1/3 binary64) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps))","(*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(*.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 eps (*.f64 #s(literal 1/3 binary64) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps)","(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 eps (*.f64 #s(literal 1/3 binary64) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","(*.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(fma.f64 #s(literal 1/3 binary64) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(sin.f64 x)","x","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","(fma.f64 (*.f64 #s(literal -1/3 binary64) (sin.f64 x)) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","#s(literal 1 binary64)","#s(literal -1/3 binary64)","eps","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x))","(*.f64 (sin.f64 x) eps)","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","eps","(cos.f64 eps)","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(sin.f64 eps)","(-.f64 (+.f64 eps x) x)","eps","(+.f64 eps x)","eps","x","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 (+.f64 eps x))","(cos.f64 x)","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64))","(log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))","#s(literal 1 binary64)","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(tan.f64 (+.f64 eps x))","(+.f64 eps x)","eps","x","(tan.f64 x)","#s(literal -1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(*.f64 (fma.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(sin.f64 x)","x","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x))","(*.f64 (sin.f64 x) eps)","eps"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":324.93896484375,"type":"simplify"},{"compiler":[[572,50]],"locations":[["(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","accuracy",0.0078125],["(*.f64 (sin.f64 x) eps)","accuracy",0.0078125],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","accuracy",0.01953125],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","accuracy",0.0799634724426992],["(tan.f64 x)","accuracy",0.01171875],["(tan.f64 (+.f64 eps x))","accuracy",0.015625],["(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","accuracy",5.852769766574619],["(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","accuracy",24.60278075742854],["(cos.f64 x)","accuracy",0.0],["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","accuracy",0.0078125],["(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","accuracy",0.015625],["(-.f64 (+.f64 eps x) x)","accuracy",24.59963623377593],["(/.f64 (sin.f64 eps) (cos.f64 eps))","accuracy",0.0],["(sin.f64 eps)","accuracy",0.0],["(cos.f64 eps)","accuracy",0.0],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","accuracy",0.6641487035889624],["(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","accuracy",0.015625],["(pow.f64 (sin.f64 x) #s(literal 4 binary64))","accuracy",0.017910009768442016],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","accuracy",0.01953125],["(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","accuracy",0.32421875]],"memory":[[1153712,65281408]],"mixsample":[[0.203125,"ival-tan",2000],[14.90673828125,"ival-div",0],[12.04736328125,"adjust",800],[6.4853515625,"ival-exp",0],[0.01708984375,"ival-div",400],[0.153564453125,"ival-assert",0],[6.36572265625,"ival-sub",0],[8.773193359375,"ival-tan",0],[6.230712890625,"ival-cos",0],[0.02587890625,"ival-sub",400],[6.489013671875,"const",0],[0.169677734375,"ival-tan",400],[0.095947265625,"adjust",2000],[7.68017578125,"ival-pow",0],[0.007080078125,"ival-tan",800],[9.96435546875,"ival-add",0],[25.507568359375,"ival-mult",0],[7.097412109375,"ival-sin",0],[0.093994140625,"adjust",2800],[6.3427734375,"ival-log",0],[0.332763671875,"ival-true",0],[0.761474609375,"exact",0],[3.84130859375,"ival-pow2",0]],"outcomes":[[90.589599609375,1,"valid",91],[1.427978515625,3,"valid",1],[74.041748046875,0,"valid",164]],"time":224.43603515625,"type":"localize"},{"count":[[30,165]],"inputs":[["(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","(cos.f64 eps)","(-.f64 (+.f64 eps x) x)","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(+.f64 eps x)","(*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","(log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 x)","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(tan.f64 (+.f64 eps x))","(tan.f64 x)","(*.f64 (sin.f64 x) eps)","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))"]],"memory":[[7663904,51698496]],"outputs":[["(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","1/3","(+ 1/3 (* 4/3 (pow x 2)))","(+ 1/3 (* (pow x 2) (+ 4/3 (* 17/9 (pow x 2)))))","(+ 1/3 (* (pow x 2) (+ 4/3 (* (pow x 2) (+ 17/9 (* 248/135 (pow x 2)))))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(sin eps)","(+ eps x)","(* -1 (log (/ (cos eps) (sin eps))))","(+ (* -1 (log (/ (cos eps) (sin eps)))) (/ (* x (sin eps)) (cos eps)))","(+ (* -1 (log (/ (cos eps) (sin eps)))) (* x (+ (* -1/2 (* x (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (/ (sin eps) (cos eps)))))","(+ (* -1 (log (/ (cos eps) (sin eps)))) (* x (+ (* x (+ (* -1/2 (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* -1/6 (* x (+ (* -6 (/ (* (sin eps) (+ (* -1 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (+ (* -1 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (* (pow (cos eps) 2) (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (pow (sin eps) 2)))))) (cos eps))) (+ (* -6 (/ (* (pow (sin eps) 2) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (pow (cos eps) 2))) (* -2 (/ (pow (sin eps) 3) (pow (cos eps) 3))))))))) (/ (sin eps) (cos eps)))))","(log (/ (cos eps) (sin eps)))","(+ (log (/ (cos eps) (sin eps))) (* -1 (/ (* x (sin eps)) (cos eps))))","(+ (log (/ (cos eps) (sin eps))) (* x (+ (* -1 (/ (sin eps) (cos eps))) (* 1/2 (* x (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))))","(+ (log (/ (cos eps) (sin eps))) (* x (+ (* -1 (/ (sin eps) (cos eps))) (* x (+ (* 1/6 (* x (+ (* -6 (/ (* (sin eps) (+ (* -1 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (+ (* -1 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (* (pow (cos eps) 2) (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (pow (sin eps) 2)))))) (cos eps))) (+ (* -6 (/ (* (pow (sin eps) 2) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (pow (cos eps) 2))) (* -2 (/ (pow (sin eps) 3) (pow (cos eps) 3))))))) (* 1/2 (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))))))","(/ (cos eps) (sin eps))","(+ (* -1 x) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps))))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (+ (* -1 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (* (pow (cos eps) 2) (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (pow (sin eps) 2))))))) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps))))) 1)) (/ (cos eps) (sin eps)))","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(* 1/3 eps)","(+ (* 1/3 eps) (* 4/3 (* eps (pow x 2))))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* 17/9 (* eps (pow x 2))))))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* (pow x 2) (+ (* 248/135 (* eps (pow x 2))) (* 17/9 eps))))))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","-1/3","(- (* -1/3 (pow x 2)) 1/3)","(- (* (pow x 2) (- (* -2/9 (pow x 2)) 1/3)) 1/3)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/135 (pow x 2)) 2/9)) 1/3)) 1/3)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* eps x)","(* x (+ eps (* -1/6 (* eps (pow x 2)))))","(* x (+ eps (* (pow x 2) (+ (* -1/6 eps) (* 1/120 (* eps (pow x 2)))))))","(* x (+ eps (* (pow x 2) (+ (* -1/6 eps) (* (pow x 2) (+ (* -1/5040 (* eps (pow x 2))) (* 1/120 eps)))))))","(* x (+ 1 (* 5/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 5/6 (* 61/120 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 5/6 (* (pow x 2) (+ 61/120 (* 277/1008 (pow x 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (* eps (sin x)) (cos x)))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(* x (+ 1 (/ eps x)))","(* -1 (log (/ 1 (- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x))))))","(log (/ 1 (- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))))","(/ 1 (- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x))))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(pow (cos x) 2)","(pow (sin x) 4)","(* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* (cos x) (cos (+ eps x)))","(cos x)","(/ (sin (+ eps x)) (cos (+ eps x)))","(/ (sin x) (cos x))","(* eps (sin x))","(/ (sin x) (pow (cos x) 2))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (log (/ 1 (- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x))))))","(log (/ 1 (- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))))","(/ 1 (- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x))))","(* (cos x) (cos (- eps (* -1 x))))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(/ eps (pow (cos x) 2))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps))))","(+ (* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))) (/ (* eps (sin x)) (cos x)))","(+ (* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))) (* eps (+ (* -1/2 (* eps (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (sin x) (cos x)))))","(+ (* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))) (* eps (+ (* eps (+ (* -1/2 (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* -1/6 (* eps (+ (* -6 (* (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))) (cos x))) (+ (* -1 (/ (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (* (cos x) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -6 (/ (* (sin x) (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -2 (/ (pow (sin x) 3) (pow (cos x) 3))))))))) (/ (sin x) (cos x)))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -1 (log eps)) (* -1 (/ (* eps (sin x)) (cos x)))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -1 (log eps)) (* eps (+ (* -1 (/ (sin x) (cos x))) (* 1/2 (* eps (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -1 (log eps)) (* eps (+ (* -1 (/ (sin x) (cos x))) (* eps (+ (* 1/6 (* eps (+ (* -6 (* (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))) (cos x))) (+ (* -1 (/ (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (* (cos x) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -6 (/ (* (sin x) (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -2 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* 1/2 (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))))))","(/ 1 (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(/ (+ (* -1 (/ (* eps (sin x)) (* (cos x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps)","(/ (+ (* eps (- (* -1 (* eps (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))))) (/ (sin x) (* (cos x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps)","(/ (+ (* eps (- (* eps (- (* -1 (* eps (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))) (cos x))) (+ (* -1 (/ (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (* (cos x) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))))))) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))))) (/ (sin x) (* (cos x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps)","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(/ (* eps (sin x)) (cos x))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(* eps (+ 1 (/ x eps)))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(sin (neg (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(* -1 (log (/ 1 (- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x))))))","(log (/ 1 (- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))))","(/ 1 (- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x))))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(* (cos x) (cos (- x (* -1 eps))))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))"]],"series":[[34.393798828125,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1) (exp (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1)) (log (/ 1 (- (tan (+ eps x)) (tan x)))) (/ 1 (- (tan (+ eps x)) (tan x))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (cos x) 2) (pow (sin x) 4) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (* (cos (+ eps x)) (cos x)) (cos x) (- (tan (+ eps x)) (tan x)) (tan (+ eps x)) (tan x) (* (sin x) eps) (/ (sin x) (pow (cos x) 2)))","eps","-inf"],[61.35009765625,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1) (exp (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1)) (log (/ 1 (- (tan (+ eps x)) (tan x)))) (/ 1 (- (tan (+ eps x)) (tan x))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (cos x) 2) (pow (sin x) 4) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (* (cos (+ eps x)) (cos x)) (cos x) (- (tan (+ eps x)) (tan x)) (tan (+ eps x)) (tan x) (* (sin x) eps) (/ (sin x) (pow (cos x) 2)))","eps","inf"],[18.617919921875,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1) (exp (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1)) (log (/ 1 (- (tan (+ eps x)) (tan x)))) (/ 1 (- (tan (+ eps x)) (tan x))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (cos x) 2) (pow (sin x) 4) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (* (cos (+ eps x)) (cos x)) (cos x) (- (tan (+ eps x)) (tan x)) (tan (+ eps x)) (tan x) (* (sin x) eps) (/ (sin x) (pow (cos x) 2)))","eps","0"],[41.010009765625,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1) (exp (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1)) (log (/ 1 (- (tan (+ eps x)) (tan x)))) (/ 1 (- (tan (+ eps x)) (tan x))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (cos x) 2) (pow (sin x) 4) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (* (cos (+ eps x)) (cos x)) (cos x) (- (tan (+ eps x)) (tan x)) (tan (+ eps x)) (tan x) (* (sin x) eps) (/ (sin x) (pow (cos x) 2)))","x","-inf"],[61.052978515625,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1) (exp (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1)) (log (/ 1 (- (tan (+ eps x)) (tan x)))) (/ 1 (- (tan (+ eps x)) (tan x))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (cos x) 2) (pow (sin x) 4) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (* (cos (+ eps x)) (cos x)) (cos x) (- (tan (+ eps x)) (tan x)) (tan (+ eps x)) (tan x) (* (sin x) eps) (/ (sin x) (pow (cos x) 2)))","x","inf"],[9.637939453125,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1) (exp (* (log (/ 1 (- (tan (+ eps x)) (tan x)))) -1)) (log (/ 1 (- (tan (+ eps x)) (tan x)))) (/ 1 (- (tan (+ eps x)) (tan x))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (cos x) 2) (pow (sin x) 4) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (* (cos (+ eps x)) (cos x)) (cos x) (- (tan (+ eps x)) (tan x)) (tan (+ eps x)) (tan x) (* (sin x) eps) (/ (sin x) (pow (cos x) 2)))","x","0"]],"time":231.379150390625,"type":"series"},{"count":[[165,163]],"egraph":[[0,8032,5373,0.107015143],[1,2353,5627,0.03047832],[0,722,6089,0.008262085]],"inputs":[["(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","1/3","(+ 1/3 (* 4/3 (pow x 2)))","(+ 1/3 (* (pow x 2) (+ 4/3 (* 17/9 (pow x 2)))))","(+ 1/3 (* (pow x 2) (+ 4/3 (* (pow x 2) (+ 17/9 (* 248/135 (pow x 2)))))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(sin eps)","(+ eps x)","(* -1 (log (/ (cos eps) (sin eps))))","(+ (* -1 (log (/ (cos eps) (sin eps)))) (/ (* x (sin eps)) (cos eps)))","(+ (* -1 (log (/ (cos eps) (sin eps)))) (* x (+ (* -1/2 (* x (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (/ (sin eps) (cos eps)))))","(+ (* -1 (log (/ (cos eps) (sin eps)))) (* x (+ (* x (+ (* -1/2 (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* -1/6 (* x (+ (* -6 (/ (* (sin eps) (+ (* -1 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (+ (* -1 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (* (pow (cos eps) 2) (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (pow (sin eps) 2)))))) (cos eps))) (+ (* -6 (/ (* (pow (sin eps) 2) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (pow (cos eps) 2))) (* -2 (/ (pow (sin eps) 3) (pow (cos eps) 3))))))))) (/ (sin eps) (cos eps)))))","(log (/ (cos eps) (sin eps)))","(+ (log (/ (cos eps) (sin eps))) (* -1 (/ (* x (sin eps)) (cos eps))))","(+ (log (/ (cos eps) (sin eps))) (* x (+ (* -1 (/ (sin eps) (cos eps))) (* 1/2 (* x (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))))","(+ (log (/ (cos eps) (sin eps))) (* x (+ (* -1 (/ (sin eps) (cos eps))) (* x (+ (* 1/6 (* x (+ (* -6 (/ (* (sin eps) (+ (* -1 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (+ (* -1 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (* (pow (cos eps) 2) (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (pow (sin eps) 2)))))) (cos eps))) (+ (* -6 (/ (* (pow (sin eps) 2) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (pow (cos eps) 2))) (* -2 (/ (pow (sin eps) 3) (pow (cos eps) 3))))))) (* 1/2 (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))))))","(/ (cos eps) (sin eps))","(+ (* -1 x) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps))))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (+ (* -1 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (* (pow (cos eps) 2) (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (pow (sin eps) 2))))))) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps))))) 1)) (/ (cos eps) (sin eps)))","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(* 1/3 eps)","(+ (* 1/3 eps) (* 4/3 (* eps (pow x 2))))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* 17/9 (* eps (pow x 2))))))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* (pow x 2) (+ (* 248/135 (* eps (pow x 2))) (* 17/9 eps))))))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","-1/3","(- (* -1/3 (pow x 2)) 1/3)","(- (* (pow x 2) (- (* -2/9 (pow x 2)) 1/3)) 1/3)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/135 (pow x 2)) 2/9)) 1/3)) 1/3)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* eps x)","(* x (+ eps (* -1/6 (* eps (pow x 2)))))","(* x (+ eps (* (pow x 2) (+ (* -1/6 eps) (* 1/120 (* eps (pow x 2)))))))","(* x (+ eps (* (pow x 2) (+ (* -1/6 eps) (* (pow x 2) (+ (* -1/5040 (* eps (pow x 2))) (* 1/120 eps)))))))","(* x (+ 1 (* 5/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 5/6 (* 61/120 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 5/6 (* (pow x 2) (+ 61/120 (* 277/1008 (pow x 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (* eps (sin x)) (cos x)))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(* x (+ 1 (/ eps x)))","(* -1 (log (/ 1 (- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x))))))","(log (/ 1 (- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))))","(/ 1 (- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x))))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(pow (cos x) 2)","(pow (sin x) 4)","(* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* (cos x) (cos (+ eps x)))","(cos x)","(/ (sin (+ eps x)) (cos (+ eps x)))","(/ (sin x) (cos x))","(* eps (sin x))","(/ (sin x) (pow (cos x) 2))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (log (/ 1 (- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x))))))","(log (/ 1 (- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))))","(/ 1 (- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x))))","(* (cos x) (cos (- eps (* -1 x))))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(/ eps (pow (cos x) 2))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps))))","(+ (* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))) (/ (* eps (sin x)) (cos x)))","(+ (* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))) (* eps (+ (* -1/2 (* eps (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (sin x) (cos x)))))","(+ (* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))) (* eps (+ (* eps (+ (* -1/2 (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* -1/6 (* eps (+ (* -6 (* (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))) (cos x))) (+ (* -1 (/ (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (* (cos x) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -6 (/ (* (sin x) (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -2 (/ (pow (sin x) 3) (pow (cos x) 3))))))))) (/ (sin x) (cos x)))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -1 (log eps)) (* -1 (/ (* eps (sin x)) (cos x)))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -1 (log eps)) (* eps (+ (* -1 (/ (sin x) (cos x))) (* 1/2 (* eps (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -1 (log eps)) (* eps (+ (* -1 (/ (sin x) (cos x))) (* eps (+ (* 1/6 (* eps (+ (* -6 (* (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))) (cos x))) (+ (* -1 (/ (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (* (cos x) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -6 (/ (* (sin x) (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -2 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* 1/2 (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))))))","(/ 1 (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(/ (+ (* -1 (/ (* eps (sin x)) (* (cos x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps)","(/ (+ (* eps (- (* -1 (* eps (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))))) (/ (sin x) (* (cos x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps)","(/ (+ (* eps (- (* eps (- (* -1 (* eps (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))) (cos x))) (+ (* -1 (/ (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (* (cos x) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))))))) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))))) (/ (sin x) (* (cos x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps)","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(/ (* eps (sin x)) (cos x))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(* eps (+ 1 (/ x eps)))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(sin (neg (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(* -1 (log (/ 1 (- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x))))))","(log (/ 1 (- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))))","(/ 1 (- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x))))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(* (cos x) (cos (- x (* -1 eps))))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))"]],"memory":[[-7017424,55659040]],"method":["egg-herbie"],"outputs":[["(+ 1 (* 1/3 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(fma.f64 eps x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* 4/3 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 4/3 binary64) #s(literal 1/3 binary64))","(+ 1/3 (* (pow x 2) (+ 4/3 (* 17/9 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 17/9 binary64) (*.f64 x x) #s(literal 4/3 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(+ 1/3 (* (pow x 2) (+ 4/3 (* (pow x 2) (+ 17/9 (* 248/135 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 248/135 binary64) (*.f64 x x) #s(literal 17/9 binary64)) (*.f64 x x) #s(literal 4/3 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","1","#s(literal 1 binary64)","(+ 1 (* eps x))","(fma.f64 eps x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) eps) x) x eps) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64))","(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 eps)) (/.f64 x (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 x (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 #s(literal 2/3 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps))) (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (-.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(sin eps)","(sin.f64 eps)","(+ eps x)","(+.f64 eps x)","(* -1 (log (/ (cos eps) (sin eps))))","(neg.f64 (log.f64 (/.f64 (cos.f64 eps) (sin.f64 eps))))","(+ (* -1 (log (/ (cos eps) (sin eps)))) (/ (* x (sin eps)) (cos eps)))","(-.f64 (*.f64 (sin.f64 eps) (/.f64 x (cos.f64 eps))) (log.f64 (/.f64 (cos.f64 eps) (sin.f64 eps))))","(+ (* -1 (log (/ (cos eps) (sin eps)))) (* x (+ (* -1/2 (* x (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (/ (sin eps) (cos eps)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) (/.f64 (sin.f64 eps) (cos.f64 eps))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1/2 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps))) x (neg.f64 (log.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)))))","(+ (* -1 (log (/ (cos eps) (sin eps)))) (* x (+ (* x (+ (* -1/2 (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* -1/6 (* x (+ (* -6 (/ (* (sin eps) (+ (* -1 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (+ (* -1 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (* (pow (cos eps) 2) (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (pow (sin eps) 2)))))) (cos eps))) (+ (* -6 (/ (* (pow (sin eps) 2) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (pow (cos eps) 2))) (* -2 (/ (pow (sin eps) 3) (pow (cos eps) 3))))))))) (/ (sin eps) (cos eps)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 #s(literal -6 binary64) (fma.f64 (-.f64 (neg.f64 (fma.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))) (/.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) (/.f64 (sin.f64 eps) (cos.f64 eps))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1/2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))) x (neg.f64 (log.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)))))","(log (/ (cos eps) (sin eps)))","(log.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)))","(+ (log (/ (cos eps) (sin eps))) (* -1 (/ (* x (sin eps)) (cos eps))))","(fma.f64 (neg.f64 x) (/.f64 (sin.f64 eps) (cos.f64 eps)) (log.f64 (/.f64 (cos.f64 eps) (sin.f64 eps))))","(+ (log (/ (cos eps) (sin eps))) (* x (+ (* -1 (/ (sin eps) (cos eps))) (* 1/2 (* x (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (*.f64 (neg.f64 (sin.f64 eps)) (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)))) (cos.f64 eps))) x (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) x (log.f64 (/.f64 (cos.f64 eps) (sin.f64 eps))))","(+ (log (/ (cos eps) (sin eps))) (* x (+ (* -1 (/ (sin eps) (cos eps))) (* x (+ (* 1/6 (* x (+ (* -6 (/ (* (sin eps) (+ (* -1 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (+ (* -1 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (* (pow (cos eps) 2) (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (pow (sin eps) 2)))))) (cos eps))) (+ (* -6 (/ (* (pow (sin eps) 2) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (pow (cos eps) 2))) (* -2 (/ (pow (sin eps) 3) (pow (cos eps) 3))))))) (* 1/2 (+ (* -2 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) (fma.f64 #s(literal -6 binary64) (fma.f64 (-.f64 (neg.f64 (fma.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))) (/.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (*.f64 (neg.f64 (sin.f64 eps)) (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)))) (cos.f64 eps)))) x (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) x (log.f64 (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/ (cos eps) (sin eps))","(/.f64 (cos.f64 eps) (sin.f64 eps))","(+ (* -1 x) (/ (cos eps) (sin eps)))","(-.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) x)","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps))))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (neg.f64 x) (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (+ (* -1 (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps)))) (cos eps))) (* -1 (/ (* (pow (cos eps) 2) (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (pow (sin eps) 2))))))) (+ (* -1 (/ (sin eps) (cos eps))) (/ (* (cos eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (sin eps))))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (-.f64 (neg.f64 (fma.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) x (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))))) x #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","(+ eps (* (pow eps 2) x))","(fma.f64 (*.f64 eps x) eps eps)","(+ eps (* x (+ (* eps x) (pow eps 2))))","(fma.f64 (*.f64 eps (+.f64 eps x)) x eps)","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 4/3 binary64) eps) x (*.f64 eps eps)) x eps)","(+ 1 (* x (+ eps x)))","(fma.f64 (+.f64 eps x) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(* 1/3 eps)","(*.f64 #s(literal 1/3 binary64) eps)","(+ (* 1/3 eps) (* 4/3 (* eps (pow x 2))))","(fma.f64 (*.f64 (*.f64 x x) eps) #s(literal 4/3 binary64) (*.f64 #s(literal 1/3 binary64) eps))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* 17/9 (* eps (pow x 2))))))","(fma.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) eps) #s(literal 17/9 binary64) (*.f64 #s(literal 4/3 binary64) eps)) x) x (*.f64 #s(literal 1/3 binary64) eps))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* (pow x 2) (+ (* 248/135 (* eps (pow x 2))) (* 17/9 eps))))))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) eps) #s(literal 248/135 binary64) (*.f64 #s(literal 17/9 binary64) eps)) x) x (*.f64 #s(literal 4/3 binary64) eps)) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps))","(+ 1 (* -1 (pow x 2)))","(fma.f64 (neg.f64 x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -34/945 binary64) (*.f64 x x) #s(literal 1/5 binary64)) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","-1/3","#s(literal -1/3 binary64)","(- (* -1/3 (pow x 2)) 1/3)","(fma.f64 #s(literal -1/3 binary64) (*.f64 x x) #s(literal -1/3 binary64))","(- (* (pow x 2) (- (* -2/9 (pow x 2)) 1/3)) 1/3)","(fma.f64 (fma.f64 #s(literal -2/9 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal -1/3 binary64))","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/135 (pow x 2)) 2/9)) 1/3)) 1/3)","(fma.f64 (fma.f64 (fma.f64 #s(literal -17/135 binary64) (*.f64 x x) #s(literal -2/9 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal -1/3 binary64))","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(fma.f64 (neg.f64 (sin.f64 eps)) x (cos.f64 eps))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(fma.f64 (neg.f64 (fma.f64 (cos.f64 eps) x (sin.f64 eps))) x (cos.f64 eps))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 2/3 binary64) (neg.f64 (cos.f64 eps))) x (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 eps)) (/.f64 x (cos.f64 eps)) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/6 binary64))) (neg.f64 x) (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))) x (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal 1 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(* eps x)","(*.f64 eps x)","(* x (+ eps (* -1/6 (* eps (pow x 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) eps) #s(literal -1/6 binary64) eps) x)","(* x (+ eps (* (pow x 2) (+ (* -1/6 eps) (* 1/120 (* eps (pow x 2)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/120 binary64) (*.f64 #s(literal -1/6 binary64) eps)) (*.f64 x x) eps) x)","(* x (+ eps (* (pow x 2) (+ (* -1/6 eps) (* (pow x 2) (+ (* -1/5040 (* eps (pow x 2))) (* 1/120 eps)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 (*.f64 x x) eps) (*.f64 #s(literal 1/120 binary64) eps)) x) x (*.f64 #s(literal -1/6 binary64) eps)) (*.f64 x x) eps) x)","(* x (+ 1 (* 5/6 (pow x 2))))","(*.f64 (fma.f64 #s(literal 5/6 binary64) (*.f64 x x) #s(literal 1 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 5/6 (* 61/120 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 61/120 binary64) (*.f64 x x) #s(literal 5/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 5/6 (* (pow x 2) (+ 61/120 (* 277/1008 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 277/1008 binary64) (*.f64 x x) #s(literal 61/120 binary64)) (*.f64 x x) #s(literal 5/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))","(+ 1 (/ (* eps (sin x)) (cos x)))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(* x (+ 1 (/ eps x)))","(fma.f64 (/.f64 eps x) x x)","(* -1 (log (/ 1 (- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x))))))","(log.f64 (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x))))","(log (/ 1 (- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))))","(neg.f64 (log.f64 (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))))","(/ 1 (- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x))))","(/.f64 #s(literal 1 binary64) (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x))))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps)","(pow (cos x) 2)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(pow (sin x) 4)","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))","(* (cos x) (cos (+ eps x)))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos x)","(cos.f64 x)","(/ (sin (+ eps x)) (cos (+ eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))","(* eps (sin x))","(*.f64 (sin.f64 x) eps)","(/ (sin x) (pow (cos x) 2))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(fma.f64 (/.f64 eps (neg.f64 x)) (neg.f64 x) x)","(* -1 (log (/ 1 (- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x))))))","(log.f64 (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x))))","(log (/ 1 (- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))))","(neg.f64 (log.f64 (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))))","(/ 1 (- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x))))","(/.f64 #s(literal 1 binary64) (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x))))","(* (cos x) (cos (- eps (* -1 x))))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (neg.f64 eps) (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) eps (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (+ 1 (* 1/3 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (*.f64 eps eps) #s(literal 1 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (*.f64 eps eps) #s(literal 1 binary64)) eps)","(* eps (+ 1 (* -1/6 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) eps) eps #s(literal 1 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/120 binary64) eps) eps #s(literal -1/6 binary64)) (*.f64 eps eps) #s(literal 1 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (*.f64 eps eps) #s(literal 1 binary64)) eps)","(+ 1 (* -1/2 (pow eps 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(/ eps (pow (cos x) 2))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (*.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 eps) (fma.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (cos.f64 x)) (/.f64 (*.f64 (sin.f64 x) #s(literal -1/3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 eps eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps))))","(neg.f64 (-.f64 (neg.f64 (log.f64 eps)) (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(+ (* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))) (/ (* eps (sin x)) (cos x)))","(-.f64 (*.f64 (sin.f64 x) (/.f64 eps (cos.f64 x))) (-.f64 (neg.f64 (log.f64 eps)) (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(+ (* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))) (* eps (+ (* -1/2 (* eps (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (sin x) (cos x)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) eps (/.f64 (sin.f64 x) (cos.f64 x))) eps (neg.f64 (-.f64 (neg.f64 (log.f64 eps)) (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(+ (* -1 (+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))) (* eps (+ (* eps (+ (* -1/2 (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* -1/6 (* eps (+ (* -6 (* (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))) (cos x))) (+ (* -1 (/ (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (* (cos x) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -6 (/ (* (sin x) (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -2 (/ (pow (sin x) 3) (pow (cos x) 3))))))))) (/ (sin x) (cos x)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -6 binary64) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (cos.f64 x)) (neg.f64 (fma.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (fma.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (*.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x))) (cos.f64 x))) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal -1/6 binary64) eps) (fma.f64 (*.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64)))) eps (/.f64 (sin.f64 x) (cos.f64 x))) eps (neg.f64 (-.f64 (neg.f64 (log.f64 eps)) (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (log eps)))","(-.f64 (neg.f64 (log.f64 eps)) (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -1 (log eps)) (* -1 (/ (* eps (sin x)) (cos x)))))","(-.f64 (neg.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) eps (log.f64 eps))) (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -1 (log eps)) (* eps (+ (* -1 (/ (sin x) (cos x))) (* 1/2 (* eps (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64))) eps (/.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) eps (-.f64 (neg.f64 (log.f64 eps)) (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(+ (log (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -1 (log eps)) (* eps (+ (* -1 (/ (sin x) (cos x))) (* eps (+ (* 1/6 (* eps (+ (* -6 (* (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))) (cos x))) (+ (* -1 (/ (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (* (cos x) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (+ (* -6 (/ (* (sin x) (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -2 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* 1/2 (+ (* -2 (* (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (fma.f64 #s(literal -6 binary64) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (cos.f64 x)) (neg.f64 (fma.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (fma.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (*.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x))) (cos.f64 x))) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (*.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))) eps (/.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) eps (-.f64 (neg.f64 (log.f64 eps)) (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/ 1 (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(/.f64 #s(literal 1 binary64) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(/ (+ (* -1 (/ (* eps (sin x)) (* (cos x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps)","(/.f64 (fma.f64 (neg.f64 (/.f64 eps (cos.f64 x))) (/.f64 (sin.f64 x) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)","(/ (+ (* eps (- (* -1 (* eps (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))))) (/ (sin x) (* (cos x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps)","(/.f64 (fma.f64 (fma.f64 eps (fma.f64 (/.f64 (sin.f64 x) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 x)))) eps (/.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)","(/ (+ (* eps (- (* eps (- (* -1 (* eps (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))) (cos x))) (+ (* -1 (/ (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (* (cos x) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))))))) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (pow (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) 2))) (* -1 (/ (pow (sin x) 2) (* (pow (cos x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))))) (/ (sin x) (* (cos x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ 1 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps)","(/.f64 (fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (cos.f64 x)) (neg.f64 (fma.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (fma.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))))) eps (-.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))))) eps (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 x)))) eps (/.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(fma.f64 (neg.f64 (*.f64 (cos.f64 x) eps)) (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 x) (*.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 x) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 (cos.f64 x) eps)) (sin.f64 x) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 eps) (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (+.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 eps eps)) (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 eps eps)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps))","(/ (* eps (sin x)) (cos x))","(*.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(* eps (+ 1 (/ x eps)))","(fma.f64 (/.f64 x eps) eps eps)","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 (*.f64 eps eps) (cos.f64 x)))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) (*.f64 eps eps) eps)","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (-.f64 (-.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (*.f64 eps eps))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(*.f64 (neg.f64 eps) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(sin (neg (* -1 eps)))","(sin.f64 eps)","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(fma.f64 (/.f64 (neg.f64 x) eps) (neg.f64 eps) eps)","(* -1 (log (/ 1 (- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x))))))","(log.f64 (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x))))","(log (/ 1 (- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))))","(neg.f64 (log.f64 (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))))","(/ 1 (- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x))))","(/.f64 #s(literal 1 binary64) (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x))))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(*.f64 eps (+.f64 (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))))","(* (cos x) (cos (- x (* -1 eps))))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":278.27197265625,"type":"simplify"},{"count":[[30,932]],"egraph":[[0,8699,305,0.081610642],[2,2814,316,0.045484735],[1,350,330,0.009110108],[0,87,426,0.002830997],[0,49,426,0.000544198]],"inputs":[["(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","(cos.f64 eps)","(-.f64 (+.f64 eps x) x)","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(+.f64 eps x)","(*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","(log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 x)","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(tan.f64 (+.f64 eps x))","(tan.f64 x)","(*.f64 (sin.f64 x) eps)","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))"]],"memory":[[9955696,74147680]],"outputs":[["(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) (cos.f64 x)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (sqrt.f64 (cos.f64 x))) (/.f64 (*.f64 eps (sin.f64 x)) (sqrt.f64 (cos.f64 x))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (cos.f64 x)) (/.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (cos.f64 x)) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (/.f64 (*.f64 eps (sin.f64 x)) (sqrt.f64 (cos.f64 x))) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (sqrt.f64 (cos.f64 x))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 eps (sin.f64 x))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))))","(fma.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (*.f64 eps (sin.f64 x)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (*.f64 eps (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 eps (*.f64 eps (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 eps eps) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))))","(fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 eps (tan.f64 x)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(fma.f64 (sin.f64 x) (*.f64 (/.f64 eps (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))","(+.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))))","(+.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (sin.f64 x) #s(literal 8 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (-.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (sin.f64 x) #s(literal 8 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal -2 binary64))))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (sin.f64 x) #s(literal 8 binary64)))) (cos.f64 x)) (/.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (cos.f64 x)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -6 binary64)) (pow.f64 (sin.f64 x) #s(literal 12 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) (cos.f64 x)) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (sin.f64 x) #s(literal 8 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64)) (cos.f64 x)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (neg.f64 (cos.f64 x))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (sin.f64 x) #s(literal 8 binary64))))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -6 binary64)) (pow.f64 (sin.f64 x) #s(literal 12 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (sin.f64 x) #s(literal 8 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal -1/3 binary64) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (cos.f64 x)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 #s(literal -1 binary64) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(fma.f64 #s(literal -1/3 binary64) (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 1/3 binary64) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)) (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(-.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))","(+.f64 (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(+.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) (*.f64 eps (tan.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) (*.f64 eps (tan.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (/.f64 (neg.f64 eps) #s(literal -1 binary64)) (tan.f64 x) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (sqrt.f64 (cos.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (cos.f64 x))) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 eps (sin.f64 x)) (sqrt.f64 (cos.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (cos.f64 x))) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 eps #s(literal -1 binary64)) (neg.f64 (tan.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (neg.f64 eps) (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 (sin.f64 x) (sqrt.f64 (cos.f64 x))) (/.f64 eps (sqrt.f64 (cos.f64 x))) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 eps (sin.f64 x)) #s(literal 1 binary64))","(fma.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 eps (tan.f64 x)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 eps (sin.f64 x)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 eps (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 eps (tan.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x)) #s(literal 1 binary64))","(fma.f64 (sin.f64 x) (*.f64 (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x)))) (/.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64))) (pow.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 eps (tan.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (tan.f64 eps))","(*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps))","(*.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)))","(*.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 eps))","(pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64))) (neg.f64 (cos.f64 eps)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 eps)))) (neg.f64 (neg.f64 (neg.f64 (cos.f64 eps)))))","(/.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (cos.f64 eps))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (neg.f64 (neg.f64 (cos.f64 eps))))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 eps) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)))","(neg.f64 (/.f64 (sin.f64 eps) (neg.f64 (cos.f64 eps))))","(tan.f64 eps)","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 eps))) (/.f64 (sin.f64 eps) (neg.f64 (cos.f64 eps))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64))) #s(literal -1 binary64)))","(sin.f64 eps)","(cos.f64 eps)","(*.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)) (pow.f64 (+.f64 (+.f64 eps x) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (+.f64 eps x) x) (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) #s(literal 0 binary64))) (neg.f64 (-.f64 eps #s(literal 0 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 0 binary64))) (neg.f64 (fma.f64 eps eps (-.f64 #s(literal 0 binary64) (*.f64 eps #s(literal 0 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)))) (neg.f64 (neg.f64 (+.f64 (+.f64 eps x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 eps eps) #s(literal 0 binary64)) (-.f64 eps #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 eps eps (-.f64 #s(literal 0 binary64) (*.f64 eps #s(literal 0 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps))) (neg.f64 (-.f64 (+.f64 eps x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps))) (neg.f64 (+.f64 (+.f64 eps x) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 eps x) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)) (-.f64 (+.f64 eps x) (neg.f64 x)))","(/.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)) (+.f64 (+.f64 eps x) x))","(/.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 eps x) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 eps x) x) (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 eps x) x) (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (+.f64 eps x))","(-.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (-.f64 (+.f64 eps x) (neg.f64 x))) (/.f64 (*.f64 x x) (-.f64 (+.f64 eps x) (neg.f64 x))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64))) (/.f64 #s(literal 0 binary64) (-.f64 eps #s(literal 0 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (+.f64 (+.f64 eps x) x)) (/.f64 (*.f64 x x) (+.f64 (+.f64 eps x) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))))","(-.f64 (+.f64 eps x) x)","(+.f64 (neg.f64 x) (+.f64 eps x))","(+.f64 #s(literal 0 binary64) eps)","(+.f64 (+.f64 eps x) (neg.f64 x))","(+.f64 eps #s(literal 0 binary64))","(+.f64 x (-.f64 eps x))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (sqrt.f64 (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sqrt.f64 (cos.f64 x))))","(*.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (neg.f64 (cos.f64 x))))","(*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (neg.f64 (cos.f64 (+.f64 eps x)))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal 1 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal 2 binary64))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1 binary64))","(*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal 1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (exp.f64 (log.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 #s(literal -1 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1 binary64))","(/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (cos.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (cos.f64 x))) (tan.f64 (+.f64 eps x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 eps x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(-.f64 (/.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","(-.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (/.f64 (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) (cos.f64 (+.f64 eps x))) (cos.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (*.f64 (/.f64 (cos.f64 x) (cos.f64 x)) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)) (/.f64 (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (tan.f64 (+.f64 eps x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(-.f64 (*.f64 (/.f64 (cos.f64 x) (cos.f64 x)) (tan.f64 (+.f64 eps x))) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (tan.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (tan.f64 (+.f64 eps x)) #s(literal 1 binary64)) (/.f64 (tan.f64 x) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(exp.f64 (*.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x)))","(+.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (sin.f64 (+.f64 (+.f64 eps x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64))) (sin.f64 (+.f64 (+.f64 eps x) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))))))","(fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 eps x)) (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)))","(fma.f64 #s(literal 0 binary64) (cos.f64 eps) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(fma.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x) (neg.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))))","(fma.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 eps) #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 eps x)) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 eps x)) (neg.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 eps x)) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 x) (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 x) (sin.f64 (-.f64 eps x))))","(sin.f64 (+.f64 #s(literal 0 binary64) eps))","(-.f64 (/.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (sin.f64 (+.f64 (+.f64 eps x) x))) (/.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64)) (sin.f64 (+.f64 (+.f64 eps x) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)))))) (/.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)))))))","(-.f64 (*.f64 (sin.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (+.f64 (+.f64 eps x) x))) (cos.f64 (/.f64 (*.f64 x x) (+.f64 (+.f64 eps x) x)))) (*.f64 (cos.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (+.f64 (+.f64 eps x) x))) (sin.f64 (/.f64 (*.f64 x x) (+.f64 (+.f64 eps x) x)))))","(-.f64 (*.f64 (sin.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))))) (cos.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))))) (*.f64 (cos.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))))) (sin.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))))))","(-.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 eps x))) (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 x) (cos.f64 (-.f64 eps x))) (*.f64 (cos.f64 x) (sin.f64 (-.f64 eps x))))","(+.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(+.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x)))","(+.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (neg.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))))","(+.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 x eps) (*.f64 (+.f64 eps x) (-.f64 x eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)))) (neg.f64 (neg.f64 (-.f64 eps x))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)))) (neg.f64 (neg.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 x eps))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x eps) (*.f64 (+.f64 eps x) (-.f64 x eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x eps) (*.f64 (+.f64 eps x) (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(+.f64 eps x)","(+.f64 x eps)","(*.f64 #s(literal -1 binary64) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(*.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) (log.f64 (exp.f64 #s(literal -1 binary64))))","(*.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(neg.f64 (log.f64 (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))))","(neg.f64 (log.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(neg.f64 (log.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(neg.f64 (log.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(neg.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) (log.f64 (exp.f64 #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 0 binary64))","(-.f64 (log.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x))) (log.f64 (cos.f64 (+.f64 eps x))))","(-.f64 (log.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64))) (log.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(-.f64 (log.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))) (log.f64 (neg.f64 (cos.f64 x))))","(-.f64 (log.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))) (log.f64 (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(-.f64 (log.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x)))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","(-.f64 (log.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (log.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(-.f64 (log.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (log.f64 (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(-.f64 (log.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))) (log.f64 (cos.f64 x)))","(-.f64 (log.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (log.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(-.f64 (log.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (log.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(-.f64 (log.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) (log.f64 #s(literal -1 binary64)))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(-.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (log.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(-.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (log.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (log.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(+.f64 (log.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))))) (log.f64 #s(literal 2 binary64)))","(+.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64))) (log.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64))))","(+.f64 (log.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))) (log.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(+.f64 (log.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (log.f64 (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))))","(+.f64 (log.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x)))) (log.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(+.f64 (log.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (log.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x)))))","(+.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (log.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64))))","(+.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (log.f64 (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(+.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (sqrt.f64 (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sqrt.f64 (cos.f64 x))))","(*.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (neg.f64 (cos.f64 x))))","(*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (neg.f64 (cos.f64 (+.f64 eps x)))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal 1 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal 2 binary64))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1 binary64))","(*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal 1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (exp.f64 (log.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 #s(literal -1 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1 binary64))","(/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (cos.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (cos.f64 x))) (tan.f64 (+.f64 eps x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 eps x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(-.f64 (/.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","(-.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (/.f64 (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) (cos.f64 (+.f64 eps x))) (cos.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (*.f64 (/.f64 (cos.f64 x) (cos.f64 x)) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)) (/.f64 (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (tan.f64 (+.f64 eps x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(-.f64 (*.f64 (/.f64 (cos.f64 x) (cos.f64 x)) (tan.f64 (+.f64 eps x))) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (tan.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (tan.f64 (+.f64 eps x)) #s(literal 1 binary64)) (/.f64 (tan.f64 x) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(exp.f64 (*.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x)))","(+.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(*.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 2 binary64)))) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 2 binary64))) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))))","(neg.f64 (log.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(fma.f64 (log.f64 (cos.f64 x)) #s(literal 1 binary64) (log.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(fma.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log.f64 (cos.f64 x)) (log.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(-.f64 (/.f64 #s(literal 0 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) (/.f64 (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 2 binary64)) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))) (/.f64 (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))))","(-.f64 (log.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))) (log.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(-.f64 (log.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) (log.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (log.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(-.f64 #s(literal 0 binary64) (log.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(-.f64 #s(literal 0 binary64) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(+.f64 (log.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (log.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(+.f64 (log.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (log.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(+.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64))) (log.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64))))","(+.f64 (log.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (log.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64))))","(+.f64 (log.f64 (cos.f64 (+.f64 eps x))) (log.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(+.f64 (log.f64 (cos.f64 x)) (log.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(+.f64 #s(literal 0 binary64) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(+.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal 0 binary64))","(log.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (/.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (/.f64 #s(literal 2 binary64) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (/.f64 (*.f64 (cos.f64 (/.f64 (+.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)) #s(literal 2 binary64))) (cos.f64 (/.f64 (-.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)) #s(literal 2 binary64)))) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)))","(*.f64 (cos.f64 (+.f64 eps x)) (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(pow.f64 (*.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))","(/.f64 (exp.f64 (log.f64 #s(literal -1 binary64))) (exp.f64 (log.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))) (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(/.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(/.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))) (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(exp.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 eps (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 eps (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) eps) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) eps)","(*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) eps))","(*.f64 eps (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) eps))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) eps))) (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) eps))) (neg.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) eps)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) eps)) (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(fma.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) eps (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) eps))","(fma.f64 eps (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 eps (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) eps) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (*.f64 eps (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (sqrt.f64 (cos.f64 x))) (/.f64 (*.f64 eps (sin.f64 x)) (sqrt.f64 (cos.f64 x))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (cos.f64 x)) (/.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (cos.f64 x)) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 eps (sin.f64 x)) (sqrt.f64 (cos.f64 x))) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (sqrt.f64 (cos.f64 x))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 eps (sin.f64 x))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(fma.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(fma.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (*.f64 eps (sin.f64 x)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (sin.f64 x) (*.f64 (/.f64 eps (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(+.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(*.f64 eps (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))","(*.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) eps)) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) eps) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) eps) (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))) (fma.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64))))","(fma.f64 eps (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 eps (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(fma.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps (*.f64 (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps) (*.f64 (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 eps (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 eps (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) (cos.f64 x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (cos.f64 x)))","(pow.f64 (neg.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(/.f64 (neg.f64 (+.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))) #s(literal -2 binary64))","(/.f64 (+.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(exp.f64 (+.f64 (log.f64 (cos.f64 x)) (log.f64 (cos.f64 x))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 (sin.f64 x)))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) #s(literal -2 binary64))","(/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 2 binary64))) #s(literal -4 binary64))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 2 binary64)) #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 (sin.f64 x)) #s(literal 2 binary64) (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 4 binary64)))","(*.f64 #s(literal -1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal -1/3 binary64))) (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal -1/3 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/3 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/3 binary64) (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal -1/3 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal -1/3 binary64)) (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal -1/3 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal -1/3 binary64) (+.f64 (pow.f64 (tan.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))","(fma.f64 #s(literal -1/3 binary64) (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64))","(+.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64)) #s(literal -1/3 binary64))","(+.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64))","(+.f64 #s(literal -1/3 binary64) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64)))","(+.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(*.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))) #s(literal 1/2 binary64))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))","(pow.f64 (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 (+.f64 eps x) x)) (cos.f64 (-.f64 x (+.f64 eps x))))) #s(literal -2 binary64))","(/.f64 (neg.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))))) #s(literal 2 binary64))","(/.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (-.f64 (+.f64 eps x) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal -2 binary64))","(/.f64 (+.f64 (cos.f64 (+.f64 (+.f64 eps x) x)) (cos.f64 (-.f64 x (+.f64 eps x)))) #s(literal 2 binary64))","(/.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))) #s(literal 2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))","(pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(exp.f64 (log.f64 (cos.f64 x)))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (sqrt.f64 (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sqrt.f64 (cos.f64 x))))","(*.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (neg.f64 (cos.f64 x))))","(*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (neg.f64 (cos.f64 (+.f64 eps x)))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal 1 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal 2 binary64))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1 binary64))","(*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal 1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (exp.f64 (log.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 #s(literal -1 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal 1 binary64))","(/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (cos.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (cos.f64 x))) (tan.f64 (+.f64 eps x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 eps x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(-.f64 (/.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","(-.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (/.f64 (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) (cos.f64 (+.f64 eps x))) (cos.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (*.f64 (/.f64 (cos.f64 x) (cos.f64 x)) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)) (/.f64 (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (tan.f64 (+.f64 eps x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(-.f64 (*.f64 (/.f64 (cos.f64 x) (cos.f64 x)) (tan.f64 (+.f64 eps x))) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (tan.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (tan.f64 (+.f64 eps x)) #s(literal 1 binary64)) (/.f64 (tan.f64 x) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))))","(exp.f64 (*.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x)))","(+.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 (tan.f64 x) (tan.f64 eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 eps x)))) (neg.f64 (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps)))))","(/.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 (tan.f64 x) (tan.f64 eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 eps x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 (tan.f64 x) (tan.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 eps x))))","(tan.f64 (+.f64 eps x))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 x) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (sin.f64 x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x))) (neg.f64 (tan.f64 x)))","(*.f64 eps (sin.f64 x))","(*.f64 (sin.f64 x) eps)","(*.f64 (/.f64 (sin.f64 x) (sqrt.f64 (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (sqrt.f64 (cos.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (tan.f64 x)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (tan.f64 x))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (tan.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (tan.f64 x) (cos.f64 x)))","(*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))","(pow.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (neg.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (sin.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(/.f64 (neg.f64 (tan.f64 x)) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x))))","(/.f64 (tan.f64 x) (cos.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (tan.f64 x)))","(neg.f64 (/.f64 (sin.f64 x) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (sin.f64 x) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":295.68701171875,"type":"rewrite"},{"compiler":[[62806,5902]],"memory":[[3307872,141379952]],"time":306.470947265625,"type":"eval"},{"alts":[["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","fresh",24.62655388818521,"binary64"],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","fresh",0.00390625,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",24.61062264534191,"binary64"],["(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","next",41.61666065167192,"binary64"],["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","next",0.00390625,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","fresh",0.23591148121486605,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","next",0.4283544816032696,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","fresh",0.4283540652793423,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","next",0.42835448211586513,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","fresh",0.42835406579199325,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","next",0.6641489116119768,"binary64"]],"compiler":[[31,18],[17,12],[7,6],[17,11],[16,14],[21,14],[95,43],[90,41],[45,27],[39,24],[39,23],[31,18],[17,12],[17,11],[16,14],[21,14],[95,43],[90,41],[45,27],[39,24],[39,23]],"count":[[1296,11]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[1287,9],"picked":[5,0]}],"memory":[[-3643760,52425904]],"min-error":[[0.0,"binary64"]],"time":38.4609375,"type":"prune"},{"egraph":[[0,8066,580,0.070613204],[4,5867,606,0.028966975],[3,1814,633,0.022234228],[2,541,645,0.010274989],[1,200,652,0.002067899],[0,112,680,0.00099328],[0,72,698,0.000627639]],"inputs":[["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(sin.f64 (+.f64 #s(literal 0 binary64) eps))","(+.f64 #s(literal 0 binary64) eps)","#s(literal 0 binary64)","eps","(pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(neg.f64 (cos.f64 x))","(cos.f64 x)","x","(cos.f64 (+.f64 eps x))","(+.f64 eps x)","#s(literal -1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps))","(fma.f64 (*.f64 eps x) eps eps)","(*.f64 eps x)","eps","x","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps)","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64))","(*.f64 #s(literal 4/3 binary64) eps)","#s(literal 4/3 binary64)","eps","x","#s(literal 1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps)","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(*.f64 #s(literal 4/3 binary64) eps)","#s(literal 4/3 binary64)","eps","x","(fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(*.f64 eps eps)","#s(literal 1 binary64)","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","#s(literal 1/3 binary64)","(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","(tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x))))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(*.f64 (+.f64 eps x) (-.f64 eps x))","(+.f64 eps x)","eps","x","(-.f64 eps x)","(/.f64 #s(literal 1 binary64) (-.f64 eps x))","#s(literal 1 binary64)","(tan.f64 x)"]],"locations":[["(*.f64 (+.f64 eps x) (-.f64 eps x))","cost-diff",0],["(tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x))))","cost-diff",0],["(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","cost-diff",0],["(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","cost-diff",10],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps)","cost-diff",1],["(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","cost-diff",3],["(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","cost-diff",0],["(*.f64 eps x)","cost-diff",0],["(fma.f64 (*.f64 eps x) eps eps)","cost-diff",0],["#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","cost-diff",0],["(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","cost-diff",0],["(pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))","cost-diff",1],["(+.f64 #s(literal 0 binary64) eps)","cost-diff",2],["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","cost-diff",3]],"memory":[[-707104,31526720]],"method":["egg-herbie"],"outputs":[["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(neg.f64 (sin.f64 eps))","(sin.f64 (+.f64 #s(literal 0 binary64) eps))","(sin.f64 eps)","(+.f64 #s(literal 0 binary64) eps)","eps","#s(literal 0 binary64)","eps","(pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","(neg.f64 (cos.f64 x))","(cos.f64 x)","x","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(+.f64 eps x)","(+.f64 x eps)","#s(literal -1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 x eps) eps eps)))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 x eps) eps eps))","(fma.f64 (*.f64 eps x) eps eps)","(fma.f64 (*.f64 x eps) eps eps)","(*.f64 eps x)","(*.f64 x eps)","eps","x","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps)","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64))","(*.f64 #s(literal 4/3 binary64) eps)","#s(literal 4/3 binary64)","eps","x","#s(literal 1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 (+.f64 x eps) x) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 (+.f64 x eps) x) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 (+.f64 x eps) x) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 (+.f64 x eps) x) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps)","(*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) (+.f64 x eps))","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64))","(*.f64 #s(literal 4/3 binary64) eps)","#s(literal 4/3 binary64)","eps","x","(fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64))","(*.f64 eps eps)","#s(literal 1 binary64)","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","#s(literal 1/3 binary64)","(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x))))","(tan.f64 (+.f64 x eps))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(+.f64 x eps)","(*.f64 (+.f64 eps x) (-.f64 eps x))","(*.f64 (-.f64 eps x) (+.f64 x eps))","(+.f64 eps x)","(+.f64 x eps)","eps","x","(-.f64 eps x)","(/.f64 #s(literal 1 binary64) (-.f64 eps x))","#s(literal 1 binary64)","(tan.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":254.363037109375,"type":"simplify"},{"compiler":[[482,72]],"locations":[["(tan.f64 x)","accuracy",0.01171875],["(/.f64 #s(literal 1 binary64) (-.f64 eps x))","accuracy",0.265625],["(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","accuracy",24.569609456271],["(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","accuracy",27.686779913618068],["(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps)","accuracy",0.00390625],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","accuracy",0.0078125],["(*.f64 #s(literal 4/3 binary64) eps)","accuracy",0.3125],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","accuracy",0.41968979502782955],["(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","accuracy",0.00390625],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","accuracy",0.0799634724426992],["(*.f64 #s(literal 4/3 binary64) eps)","accuracy",0.3125],["#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","accuracy",0.4196897950276488],["(fma.f64 (*.f64 eps x) eps eps)","accuracy",0.0],["(*.f64 eps x)","accuracy",0.0],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","accuracy",0.0799634724426992],["#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps))","accuracy",0.6641489116092842],["(cos.f64 x)","accuracy",0.0],["(pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))","accuracy",0.00390625],["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","accuracy",0.00390625],["(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))","accuracy",0.015625]],"memory":[[-4179056,80509888]],"mixsample":[[1.63525390625,"ival-tan",2000],[18.925537109375,"adjust",800],[12.020263671875,"ival-div",0],[0.9716796875,"adjust",4800],[0.090087890625,"ival-div",400],[0.791259765625,"adjust",4000],[0.122802734375,"ival-assert",0],[6.60986328125,"ival-sub",0],[32.2861328125,"ival-tan",0],[5.73583984375,"ival-cos",0],[13.390869140625,"const",0],[0.037109375,"ival-sub",400],[0.396728515625,"ival-tan",400],[22.86767578125,"ival-pow",0],[0.01416015625,"ival-tan",800],[26.582275390625,"ival-add",0],[0.0439453125,"ival-mult",800],[0.040283203125,"ival-add",400],[0.860107421875,"adjust",2800],[0.058837890625,"ival-div",2000],[0.07421875,"ival-div",4000],[3.52880859375,"ival-pow2",0],[0.04296875,"ival-mult",2000],[0.791015625,"adjust",2000],[56.522216796875,"ival-mult",0],[0.16357421875,"ival-mult",400],[4.5986328125,"ival-sin",0],[0.01318359375,"ival-add",2000],[0.0478515625,"ival-div",800],[0.296875,"ival-true",0],[0.019287109375,"ival-add",800],[0.714111328125,"exact",0],[0.038818359375,"ival-mult",4000],[2.66015625,"ival-neg",0]],"outcomes":[[122.153076171875,1,"valid",96],[36.964111328125,5,"exit",5],[95.723388671875,0,"valid",155]],"time":327.657958984375,"type":"localize"},{"count":[[26,189]],"inputs":[["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) eps)","(pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))","(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps))","(fma.f64 (*.f64 eps x) eps eps)","(*.f64 eps x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","(tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x))))","(*.f64 (+.f64 eps x) (-.f64 eps x))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(cos.f64 x)","(*.f64 #s(literal 4/3 binary64) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (-.f64 eps x))","(tan.f64 x)"]],"memory":[[3430624,21292160]],"outputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(/ -1 (cos eps))","(- (* -1 (/ (* x (sin eps)) (pow (cos eps) 2))) (/ 1 (cos eps)))","(- (* x (- (* -1 (* x (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(- (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))) (pow (cos eps) 2))) (+ (/ (sin eps) (pow (cos eps) 2)) (/ (* (sin eps) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3)))) (cos eps)))))) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(* eps x)","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(+ 1 (* x (+ eps (* x (+ 1 (* 4/3 (* eps x)))))))","(+ 1 (* 4/3 (pow eps 2)))","(+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow eps 2))))","(+ eps (* x (+ 1 (* 4/3 (pow eps 2)))))","(+ eps (* x (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow eps 2))))))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(+ eps x)","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(pow eps 2)","(+ (* x (+ eps (* -1 eps))) (pow eps 2))","(+ (* x (+ eps (+ (* -1 eps) (* -1 x)))) (pow eps 2))","(* -1 (cos eps))","(+ (* -1 (cos eps)) (* x (sin eps)))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (cos eps)))))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (+ (cos eps) (* -1 (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))))))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(/ 1 eps)","(+ (/ 1 eps) (/ x (pow eps 2)))","(+ (* x (+ (/ 1 (pow eps 2)) (/ x (pow eps 3)))) (/ 1 eps))","(+ (* x (+ (* x (+ (/ 1 (pow eps 3)) (/ x (pow eps 4)))) (/ 1 (pow eps 2)))) (/ 1 eps))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/ -1 (* (cos x) (cos (+ eps x))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (pow eps 2) x)","(* x (+ (/ eps x) (pow eps 2)))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* 4/3 (* eps (pow x 3)))","(* (pow x 3) (+ (* 4/3 eps) (/ 1 x)))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (/ eps (pow x 2)))))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (+ (/ 1 (pow x 3)) (/ eps (pow x 2))))))","(* 4/3 (* eps x))","(* x (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (/ 1 x))))","(* 4/3 (* eps (pow x 2)))","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (/ 1 x))))","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (+ (/ 1 x) (/ eps (pow x 2))))))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(* x (+ 1 (/ eps x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(* -1 (pow x 2))","(* (pow x 2) (- (+ (* -1 (/ eps x)) (/ eps x)) 1))","(* (pow x 2) (- (+ (* -1 (/ eps x)) (+ (/ eps x) (/ (pow eps 2) (pow x 2)))) 1))","(* -1 (* (cos x) (cos (+ eps x))))","(cos x)","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(/ -1 x)","(/ (- (* -1 (/ eps x)) 1) x)","(/ (- (* -1 (/ (pow eps 2) (pow x 2))) (+ 1 (/ eps x))) x)","(/ (- (* -1 (/ (pow eps 3) (pow x 3))) (+ 1 (+ (/ eps x) (/ (pow eps 2) (pow x 2))))) x)","(/ (sin x) (cos x))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/ -1 (* (cos x) (cos (- eps (* -1 x)))))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* -1 (* x (+ (* -1 (/ eps x)) (* -1 (pow eps 2)))))","(* -1 (* (pow x 3) (- (* -4/3 eps) (/ 1 x))))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (/ eps x)) x)))))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (* -1 (/ (- (* -1 eps) (/ 1 x)) x))) x)))))","(* -1 (* x (+ (* -4/3 eps) (* -1 (/ (+ 1 (* 4/3 (pow eps 2))) x)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (+ 1 (* 4/3 (pow eps 2)))) (* -1 (/ eps x))) x)) (* 4/3 eps)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(* (pow x 2) (- (* -1 (/ (+ eps (* -1 eps)) x)) 1))","(* (pow x 2) (- (* -1 (/ (+ eps (+ (* -1 eps) (* -1 (/ (pow eps 2) x)))) x)) 1))","(* -1 (* (cos x) (cos (- eps (* -1 x)))))","(* -1 (/ (+ 1 (/ eps x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow eps 2) x)) eps) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow eps 3) x) (* -1 (pow eps 2))) x)) eps) x))) x))","(/ eps (pow (cos x) 2))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(/ -1 (pow (cos x) 2))","(- (* -1 (/ (* eps (sin x)) (pow (cos x) 3))) (/ 1 (pow (cos x) 2)))","(- (* eps (- (* -1 (* eps (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(- (* eps (- (* eps (- (* -1 (* eps (+ (* -1/6 (/ (sin x) (pow (cos x) 3))) (+ (* 1/2 (/ (sin x) (pow (cos x) 3))) (/ (* (sin x) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4)))) (cos x)))))) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(* -1 eps)","(* eps (- (* 1/6 (pow eps 2)) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2)))) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120)))) 1))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* eps x)))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps (* x (+ 1 (* 4/3 (pow x 2))))) (pow x 2)))","(+ 1 (* 4/3 (* eps x)))","(+ 1 (* eps (+ (* 4/3 eps) (* 4/3 x))))","(+ x (* eps (+ 1 (* 4/3 (pow x 2)))))","(+ x (* eps (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow x 2))))))","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* -1 (pow x 2)) (* eps (+ x (* -1 x))))","(+ (* -1 (pow x 2)) (* eps (+ eps (+ x (* -1 x)))))","(* -1 (pow (cos x) 2))","(+ (* -1 (pow (cos x) 2)) (* eps (* (cos x) (sin x))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* 1/2 (* eps (pow (cos x) 2))) (* (cos x) (sin x)))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* eps (+ (* -1/6 (* eps (* (cos x) (sin x)))) (* 1/2 (pow (cos x) 2)))) (* (cos x) (sin x)))))","(* 4/3 eps)","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(- (* -1 (/ eps (pow x 2))) (/ 1 x))","(- (* eps (- (* -1 (/ eps (pow x 3))) (/ 1 (pow x 2)))) (/ 1 x))","(- (* eps (- (* eps (- (* -1 (/ eps (pow x 4))) (/ 1 (pow x 3)))) (/ 1 (pow x 2)))) (/ 1 x))","(* -1 (sin eps))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* (pow eps 2) (+ x (/ 1 eps)))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* eps (* x (+ 1 (* 4/3 (pow x 2)))))","(* eps (+ (* x (+ 1 (* 4/3 (pow x 2)))) (+ (/ 1 eps) (/ (pow x 2) eps))))","(* 4/3 (pow eps 2))","(* (pow eps 2) (+ 4/3 (* 4/3 (/ x eps))))","(* (pow eps 2) (+ 4/3 (+ (* 4/3 (/ x eps)) (/ 1 (pow eps 2)))))","(* 4/3 (* (pow eps 2) x))","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (/ 1 eps))))","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (+ (/ 1 eps) (/ x (pow eps 2))))))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* eps (+ 1 (/ x eps)))","(* (pow eps 2) (+ 1 (+ (* -1 (/ x eps)) (/ x eps))))","(* (pow eps 2) (+ 1 (+ (* -1 (/ x eps)) (+ (* -1 (/ (pow x 2) (pow eps 2))) (/ x eps)))))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(/ (+ 1 (/ x eps)) eps)","(/ (- (+ 1 (/ (pow x 2) (pow eps 2))) (* -1 (/ x eps))) eps)","(/ (- (+ 1 (/ (pow x 3) (pow eps 3))) (+ (* -1 (/ x eps)) (* -1 (/ (pow x 2) (pow eps 2))))) eps)","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/ -1 (* (cos x) (cos (- x (* -1 eps)))))","(* -1 (sin (neg (* -1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(* -1 (* eps (* x (- (* -4/3 (pow x 2)) 1))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (pow x 2)) eps)) (* x (- (* -4/3 (pow x 2)) 1)))))","(* (pow eps 2) (+ 4/3 (* -1 (/ (- (* -4/3 x) (/ 1 eps)) eps))))","(* (pow eps 2) (+ (* -1 (/ (- (* -4/3 (pow x 2)) 1) eps)) (* 4/3 x)))","(* (pow eps 2) (+ (* -1 (/ (- (+ (* -4/3 (pow x 2)) (* -1 (/ x eps))) 1) eps)) (* 4/3 x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(* (pow eps 2) (+ 1 (* -1 (/ (+ (* -1 (+ x (* -1 x))) (/ (pow x 2) eps)) eps))))","(* -1 (* (cos x) (cos (- x (* -1 eps)))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (/ (- (* -1 (/ x eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (- (/ (pow x 2) eps) (* -1 x)) eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (pow x 3) eps)) (pow x 2)) eps)) (* -1 x)) eps)) 1) eps))"]],"series":[[12.85400390625,"((* (neg (sin (+ 0 eps))) (pow (* (neg (cos x)) (cos (+ eps x))) -1)) (+ 0 eps) (pow (* (neg (cos x)) (cos (+ eps x))) -1) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps x) eps) eps) (* eps x) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (+ (* (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) x) eps) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (* (* (+ eps x) (- eps x)) (/ 1 (- eps x))) (- (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (tan x)) (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (* (+ eps x) (- eps x)) (* (neg (cos x)) (cos (+ eps x))) (cos x) (* 4/3 eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ 1 (- eps x)) (tan x))","eps","-inf"],[16.356201171875,"((* (neg (sin (+ 0 eps))) (pow (* (neg (cos x)) (cos (+ eps x))) -1)) (+ 0 eps) (pow (* (neg (cos x)) (cos (+ eps x))) -1) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps x) eps) eps) (* eps x) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (+ (* (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) x) eps) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (* (* (+ eps x) (- eps x)) (/ 1 (- eps x))) (- (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (tan x)) (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (* (+ eps x) (- eps x)) (* (neg (cos x)) (cos (+ eps x))) (cos x) (* 4/3 eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ 1 (- eps x)) (tan x))","eps","inf"],[16.15283203125,"((* (neg (sin (+ 0 eps))) (pow (* (neg (cos x)) (cos (+ eps x))) -1)) (+ 0 eps) (pow (* (neg (cos x)) (cos (+ eps x))) -1) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps x) eps) eps) (* eps x) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (+ (* (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) x) eps) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (* (* (+ eps x) (- eps x)) (/ 1 (- eps x))) (- (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (tan x)) (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (* (+ eps x) (- eps x)) (* (neg (cos x)) (cos (+ eps x))) (cos x) (* 4/3 eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ 1 (- eps x)) (tan x))","eps","0"],[13.718994140625,"((* (neg (sin (+ 0 eps))) (pow (* (neg (cos x)) (cos (+ eps x))) -1)) (+ 0 eps) (pow (* (neg (cos x)) (cos (+ eps x))) -1) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps x) eps) eps) (* eps x) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (+ (* (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) x) eps) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (* (* (+ eps x) (- eps x)) (/ 1 (- eps x))) (- (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (tan x)) (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (* (+ eps x) (- eps x)) (* (neg (cos x)) (cos (+ eps x))) (cos x) (* 4/3 eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ 1 (- eps x)) (tan x))","x","-inf"],[17.02783203125,"((* (neg (sin (+ 0 eps))) (pow (* (neg (cos x)) (cos (+ eps x))) -1)) (+ 0 eps) (pow (* (neg (cos x)) (cos (+ eps x))) -1) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps x) eps) eps) (* eps x) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (+ (* (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) x) eps) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (* (* (+ eps x) (- eps x)) (/ 1 (- eps x))) (- (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (tan x)) (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (* (+ eps x) (- eps x)) (* (neg (cos x)) (cos (+ eps x))) (cos x) (* 4/3 eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ 1 (- eps x)) (tan x))","x","inf"],[7.162109375,"((* (neg (sin (+ 0 eps))) (pow (* (neg (cos x)) (cos (+ eps x))) -1)) (+ 0 eps) (pow (* (neg (cos x)) (cos (+ eps x))) -1) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps x) eps) eps) (* eps x) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (+ (* (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) x) eps) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (* (* (+ eps x) (- eps x)) (/ 1 (- eps x))) (- (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (tan x)) (tan (* (* (+ eps x) (- eps x)) (/ 1 (- eps x)))) (* (+ eps x) (- eps x)) (* (neg (cos x)) (cos (+ eps x))) (cos x) (* 4/3 eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ 1 (- eps x)) (tan x))","x","0"]],"time":92.076171875,"type":"series"},{"count":[[189,187]],"egraph":[[0,8088,3695,0.133965533],[1,2473,3921,0.049892421],[0,750,4166,0.015448173]],"inputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(/ -1 (cos eps))","(- (* -1 (/ (* x (sin eps)) (pow (cos eps) 2))) (/ 1 (cos eps)))","(- (* x (- (* -1 (* x (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(- (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))) (pow (cos eps) 2))) (+ (/ (sin eps) (pow (cos eps) 2)) (/ (* (sin eps) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3)))) (cos eps)))))) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(* eps x)","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(+ 1 (* x (+ eps (* x (+ 1 (* 4/3 (* eps x)))))))","(+ 1 (* 4/3 (pow eps 2)))","(+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow eps 2))))","(+ eps (* x (+ 1 (* 4/3 (pow eps 2)))))","(+ eps (* x (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow eps 2))))))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(+ eps x)","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(pow eps 2)","(+ (* x (+ eps (* -1 eps))) (pow eps 2))","(+ (* x (+ eps (+ (* -1 eps) (* -1 x)))) (pow eps 2))","(* -1 (cos eps))","(+ (* -1 (cos eps)) (* x (sin eps)))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (cos eps)))))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (+ (cos eps) (* -1 (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))))))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(/ 1 eps)","(+ (/ 1 eps) (/ x (pow eps 2)))","(+ (* x (+ (/ 1 (pow eps 2)) (/ x (pow eps 3)))) (/ 1 eps))","(+ (* x (+ (* x (+ (/ 1 (pow eps 3)) (/ x (pow eps 4)))) (/ 1 (pow eps 2)))) (/ 1 eps))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/ -1 (* (cos x) (cos (+ eps x))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (pow eps 2) x)","(* x (+ (/ eps x) (pow eps 2)))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* 4/3 (* eps (pow x 3)))","(* (pow x 3) (+ (* 4/3 eps) (/ 1 x)))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (/ eps (pow x 2)))))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (+ (/ 1 (pow x 3)) (/ eps (pow x 2))))))","(* 4/3 (* eps x))","(* x (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (/ 1 x))))","(* 4/3 (* eps (pow x 2)))","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (/ 1 x))))","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (+ (/ 1 x) (/ eps (pow x 2))))))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(* x (+ 1 (/ eps x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(* -1 (pow x 2))","(* (pow x 2) (- (+ (* -1 (/ eps x)) (/ eps x)) 1))","(* (pow x 2) (- (+ (* -1 (/ eps x)) (+ (/ eps x) (/ (pow eps 2) (pow x 2)))) 1))","(* -1 (* (cos x) (cos (+ eps x))))","(cos x)","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(/ -1 x)","(/ (- (* -1 (/ eps x)) 1) x)","(/ (- (* -1 (/ (pow eps 2) (pow x 2))) (+ 1 (/ eps x))) x)","(/ (- (* -1 (/ (pow eps 3) (pow x 3))) (+ 1 (+ (/ eps x) (/ (pow eps 2) (pow x 2))))) x)","(/ (sin x) (cos x))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/ -1 (* (cos x) (cos (- eps (* -1 x)))))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* -1 (* x (+ (* -1 (/ eps x)) (* -1 (pow eps 2)))))","(* -1 (* (pow x 3) (- (* -4/3 eps) (/ 1 x))))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (/ eps x)) x)))))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (* -1 (/ (- (* -1 eps) (/ 1 x)) x))) x)))))","(* -1 (* x (+ (* -4/3 eps) (* -1 (/ (+ 1 (* 4/3 (pow eps 2))) x)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (+ 1 (* 4/3 (pow eps 2)))) (* -1 (/ eps x))) x)) (* 4/3 eps)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(* (pow x 2) (- (* -1 (/ (+ eps (* -1 eps)) x)) 1))","(* (pow x 2) (- (* -1 (/ (+ eps (+ (* -1 eps) (* -1 (/ (pow eps 2) x)))) x)) 1))","(* -1 (* (cos x) (cos (- eps (* -1 x)))))","(* -1 (/ (+ 1 (/ eps x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow eps 2) x)) eps) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow eps 3) x) (* -1 (pow eps 2))) x)) eps) x))) x))","(/ eps (pow (cos x) 2))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(/ -1 (pow (cos x) 2))","(- (* -1 (/ (* eps (sin x)) (pow (cos x) 3))) (/ 1 (pow (cos x) 2)))","(- (* eps (- (* -1 (* eps (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(- (* eps (- (* eps (- (* -1 (* eps (+ (* -1/6 (/ (sin x) (pow (cos x) 3))) (+ (* 1/2 (/ (sin x) (pow (cos x) 3))) (/ (* (sin x) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4)))) (cos x)))))) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(* -1 eps)","(* eps (- (* 1/6 (pow eps 2)) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2)))) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120)))) 1))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* eps x)))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps (* x (+ 1 (* 4/3 (pow x 2))))) (pow x 2)))","(+ 1 (* 4/3 (* eps x)))","(+ 1 (* eps (+ (* 4/3 eps) (* 4/3 x))))","(+ x (* eps (+ 1 (* 4/3 (pow x 2)))))","(+ x (* eps (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow x 2))))))","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* -1 (pow x 2)) (* eps (+ x (* -1 x))))","(+ (* -1 (pow x 2)) (* eps (+ eps (+ x (* -1 x)))))","(* -1 (pow (cos x) 2))","(+ (* -1 (pow (cos x) 2)) (* eps (* (cos x) (sin x))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* 1/2 (* eps (pow (cos x) 2))) (* (cos x) (sin x)))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* eps (+ (* -1/6 (* eps (* (cos x) (sin x)))) (* 1/2 (pow (cos x) 2)))) (* (cos x) (sin x)))))","(* 4/3 eps)","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(- (* -1 (/ eps (pow x 2))) (/ 1 x))","(- (* eps (- (* -1 (/ eps (pow x 3))) (/ 1 (pow x 2)))) (/ 1 x))","(- (* eps (- (* eps (- (* -1 (/ eps (pow x 4))) (/ 1 (pow x 3)))) (/ 1 (pow x 2)))) (/ 1 x))","(* -1 (sin eps))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* (pow eps 2) (+ x (/ 1 eps)))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* eps (* x (+ 1 (* 4/3 (pow x 2)))))","(* eps (+ (* x (+ 1 (* 4/3 (pow x 2)))) (+ (/ 1 eps) (/ (pow x 2) eps))))","(* 4/3 (pow eps 2))","(* (pow eps 2) (+ 4/3 (* 4/3 (/ x eps))))","(* (pow eps 2) (+ 4/3 (+ (* 4/3 (/ x eps)) (/ 1 (pow eps 2)))))","(* 4/3 (* (pow eps 2) x))","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (/ 1 eps))))","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (+ (/ 1 eps) (/ x (pow eps 2))))))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* eps (+ 1 (/ x eps)))","(* (pow eps 2) (+ 1 (+ (* -1 (/ x eps)) (/ x eps))))","(* (pow eps 2) (+ 1 (+ (* -1 (/ x eps)) (+ (* -1 (/ (pow x 2) (pow eps 2))) (/ x eps)))))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(/ (+ 1 (/ x eps)) eps)","(/ (- (+ 1 (/ (pow x 2) (pow eps 2))) (* -1 (/ x eps))) eps)","(/ (- (+ 1 (/ (pow x 3) (pow eps 3))) (+ (* -1 (/ x eps)) (* -1 (/ (pow x 2) (pow eps 2))))) eps)","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/ -1 (* (cos x) (cos (- x (* -1 eps)))))","(* -1 (sin (neg (* -1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(* -1 (* eps (* x (- (* -4/3 (pow x 2)) 1))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (pow x 2)) eps)) (* x (- (* -4/3 (pow x 2)) 1)))))","(* (pow eps 2) (+ 4/3 (* -1 (/ (- (* -4/3 x) (/ 1 eps)) eps))))","(* (pow eps 2) (+ (* -1 (/ (- (* -4/3 (pow x 2)) 1) eps)) (* 4/3 x)))","(* (pow eps 2) (+ (* -1 (/ (- (+ (* -4/3 (pow x 2)) (* -1 (/ x eps))) 1) eps)) (* 4/3 x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(* (pow eps 2) (+ 1 (* -1 (/ (+ (* -1 (+ x (* -1 x))) (/ (pow x 2) eps)) eps))))","(* -1 (* (cos x) (cos (- x (* -1 eps)))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (/ (- (* -1 (/ x eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (- (/ (pow x 2) eps) (* -1 x)) eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (pow x 3) eps)) (pow x 2)) eps)) (* -1 x)) eps)) 1) eps))"]],"memory":[[4371760,49976896]],"method":["egg-herbie"],"outputs":[["(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 x (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 #s(literal 2/3 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps))) (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (-.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/ -1 (cos eps))","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","(- (* -1 (/ (* x (sin eps)) (pow (cos eps) 2))) (/ 1 (cos eps)))","(neg.f64 (fma.f64 (sin.f64 eps) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (cos.f64 eps))))","(- (* x (- (* -1 (* x (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(fma.f64 (-.f64 (neg.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) x (/.f64 x (cos.f64 eps)))) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 #s(literal -1 binary64) (cos.f64 eps)))","(- (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))) (pow (cos eps) 2))) (+ (/ (sin eps) (pow (cos eps) 2)) (/ (* (sin eps) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3)))) (cos eps)))))) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (cos.f64 eps))) (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (*.f64 (sin.f64 eps) (/.f64 #s(literal 2/3 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))) x (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (cos.f64 eps))))) x (/.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 #s(literal -1 binary64) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 eps)) (/.f64 x (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (+.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)))) (fma.f64 #s(literal 1/6 binary64) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (/.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 eps)) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+ eps (* (pow eps 2) x))","(fma.f64 (*.f64 eps eps) x eps)","(+ eps (* x (+ (* eps x) (pow eps 2))))","(fma.f64 (*.f64 eps (+.f64 x eps)) x eps)","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 (*.f64 eps eps) x) eps) x (*.f64 eps eps)) x eps)","(* eps x)","(*.f64 x eps)","1","#s(literal 1 binary64)","(+ 1 (* eps x))","(fma.f64 x eps #s(literal 1 binary64))","(+ 1 (* x (+ eps x)))","(fma.f64 (+.f64 x eps) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* x (+ 1 (* 4/3 (* eps x)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(+ 1 (* 4/3 (pow eps 2)))","(fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow eps 2))))","(fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) eps #s(literal 1 binary64))","(+ eps (* x (+ 1 (* 4/3 (pow eps 2)))))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","(+ eps (* x (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow eps 2))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x)","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(fma.f64 (fma.f64 x eps #s(literal 1 binary64)) eps (*.f64 #s(literal 1/3 binary64) (pow.f64 eps #s(literal 3 binary64))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) eps #s(literal 1 binary64))) x (*.f64 eps eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ eps x)","(+.f64 x eps)","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 eps)) (/.f64 x (cos.f64 eps)) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (+.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)))) (fma.f64 #s(literal 1/6 binary64) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1/6 binary64))) (/.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 eps)) (cos.f64 eps))) x (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(pow eps 2)","(*.f64 eps eps)","(+ (* x (+ eps (* -1 eps))) (pow eps 2))","(*.f64 eps eps)","(+ (* x (+ eps (+ (* -1 eps) (* -1 x)))) (pow eps 2))","(fma.f64 (neg.f64 x) x (*.f64 eps eps))","(* -1 (cos eps))","(neg.f64 (cos.f64 eps))","(+ (* -1 (cos eps)) (* x (sin eps)))","(fma.f64 (sin.f64 eps) x (neg.f64 (cos.f64 eps)))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (cos eps)))))","(fma.f64 (fma.f64 (cos.f64 eps) x (sin.f64 eps)) x (neg.f64 (cos.f64 eps)))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (+ (cos eps) (* -1 (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))))))))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (*.f64 (sin.f64 eps) #s(literal 2/3 binary64)) (cos.f64 eps)) x (sin.f64 eps)) x (neg.f64 (cos.f64 eps)))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* 1/3 (pow eps 2)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) (fma.f64 x eps #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(/ 1 eps)","(/.f64 #s(literal 1 binary64) eps)","(+ (/ 1 eps) (/ x (pow eps 2)))","(+.f64 (/.f64 x (*.f64 eps eps)) (/.f64 #s(literal 1 binary64) eps))","(+ (* x (+ (/ 1 (pow eps 2)) (/ x (pow eps 3)))) (/ 1 eps))","(+.f64 (fma.f64 (/.f64 x (pow.f64 eps #s(literal 3 binary64))) x (/.f64 x (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) eps))","(+ (* x (+ (* x (+ (/ 1 (pow eps 3)) (/ x (pow eps 4)))) (/ 1 (pow eps 2)))) (/ 1 eps))","(fma.f64 (fma.f64 (+.f64 (/.f64 x (pow.f64 eps #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) x (/.f64 (/.f64 #s(literal 1 binary64) eps) eps)) x (/.f64 #s(literal 1 binary64) eps))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(/ -1 (* (cos x) (cos (+ eps x))))","(/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(* (pow eps 2) x)","(*.f64 (*.f64 eps eps) x)","(* x (+ (/ eps x) (pow eps 2)))","(*.f64 (fma.f64 eps eps (/.f64 eps x)) x)","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(* 4/3 (* eps (pow x 3)))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) eps) #s(literal 4/3 binary64))","(* (pow x 3) (+ (* 4/3 eps) (/ 1 x)))","(*.f64 (fma.f64 #s(literal 4/3 binary64) eps (/.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (/ eps (pow x 2)))))","(*.f64 (+.f64 (fma.f64 #s(literal 4/3 binary64) eps (/.f64 (/.f64 eps x) x)) (/.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (+ (/ 1 (pow x 3)) (/ eps (pow x 2))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 eps x) x)) (fma.f64 #s(literal 4/3 binary64) eps (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* 4/3 (* eps x))","(*.f64 #s(literal 4/3 binary64) (*.f64 x eps))","(* x (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (/ 1 x))))","(*.f64 (fma.f64 #s(literal 4/3 binary64) (fma.f64 eps (/.f64 eps x) eps) (/.f64 #s(literal 1 binary64) x)) x)","(* 4/3 (* eps (pow x 2)))","(*.f64 (*.f64 (*.f64 x x) #s(literal 4/3 binary64)) eps)","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (fma.f64 eps (/.f64 eps x) eps) (/.f64 #s(literal 1 binary64) x)) x) x)","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (+ (/ 1 x) (/ eps (pow x 2))))))","(*.f64 (fma.f64 #s(literal 4/3 binary64) (fma.f64 eps (/.f64 eps x) eps) (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (*.f64 x x))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(* x (+ 1 (/ eps x)))","(fma.f64 (/.f64 eps x) x x)","(/ (sin (+ eps x)) (cos (+ eps x)))","(/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps)))","(* -1 (pow x 2))","(*.f64 (neg.f64 x) x)","(* (pow x 2) (- (+ (* -1 (/ eps x)) (/ eps x)) 1))","(*.f64 (neg.f64 x) x)","(* (pow x 2) (- (+ (* -1 (/ eps x)) (+ (/ eps x) (/ (pow eps 2) (pow x 2)))) 1))","(*.f64 (*.f64 (-.f64 (fma.f64 (/.f64 eps x) (/.f64 eps x) #s(literal 0 binary64)) #s(literal 1 binary64)) x) x)","(* -1 (* (cos x) (cos (+ eps x))))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(cos x)","(cos.f64 x)","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* -1 (/ eps x)) 1) x)","(/.f64 (fma.f64 (/.f64 eps x) #s(literal -1 binary64) #s(literal -1 binary64)) x)","(/ (- (* -1 (/ (pow eps 2) (pow x 2))) (+ 1 (/ eps x))) x)","(/.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 eps (/.f64 eps x) eps)) x) #s(literal 1 binary64)) x)","(/ (- (* -1 (/ (pow eps 3) (pow x 3))) (+ 1 (+ (/ eps x) (/ (pow eps 2) (pow x 2))))) x)","(/.f64 (fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64) (-.f64 (/.f64 (neg.f64 (fma.f64 eps (/.f64 eps x) eps)) x) #s(literal 1 binary64))) x)","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(/ -1 (* (cos x) (cos (- eps (* -1 x)))))","(/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* -1 (* x (+ (* -1 (/ eps x)) (* -1 (pow eps 2)))))","(*.f64 (fma.f64 eps eps (/.f64 eps x)) x)","(* -1 (* (pow x 3) (- (* -4/3 eps) (/ 1 x))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (/ eps x)) x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (fma.f64 (/.f64 eps x) #s(literal -1 binary64) #s(literal -1 binary64)) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (* -1 (/ (- (* -1 eps) (/ 1 x)) x))) x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (+.f64 eps (/.f64 #s(literal 1 binary64) x))) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (+ (* -4/3 eps) (* -1 (/ (+ 1 (* 4/3 (pow eps 2))) x)))))","(*.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (fma.f64 #s(literal -4/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)) x)) (neg.f64 x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (+ 1 (* 4/3 (pow eps 2)))) (* -1 (/ eps x))) x)) (* 4/3 eps)))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (/.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (/.f64 eps x)) (neg.f64 x))) x) x)","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(fma.f64 (/.f64 (neg.f64 eps) x) (neg.f64 x) x)","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps)))","(* (pow x 2) (- (* -1 (/ (+ eps (* -1 eps)) x)) 1))","(*.f64 (neg.f64 x) x)","(* (pow x 2) (- (* -1 (/ (+ eps (+ (* -1 eps) (* -1 (/ (pow eps 2) x)))) x)) 1))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 (neg.f64 eps) eps) x) x) #s(literal -1 binary64) #s(literal -1 binary64)) (*.f64 x x))","(* -1 (* (cos x) (cos (- eps (* -1 x)))))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(* -1 (/ (+ 1 (/ eps x)) x))","(/.f64 (fma.f64 (/.f64 eps x) #s(literal -1 binary64) #s(literal -1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow eps 2) x)) eps) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 eps (/.f64 eps x) eps)) x)) (neg.f64 x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow eps 3) x) (* -1 (pow eps 2))) x)) eps) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (+.f64 (/.f64 (fma.f64 eps eps (/.f64 (pow.f64 eps #s(literal 3 binary64)) x)) x) eps)) x)) (neg.f64 x))","(/ eps (pow (cos x) 2))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (*.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (cos.f64 x)) (/.f64 (*.f64 (sin.f64 x) #s(literal -1/3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 eps) (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 eps eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/ -1 (pow (cos x) 2))","(/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(- (* -1 (/ (* eps (sin x)) (pow (cos x) 3))) (/ 1 (pow (cos x) 2)))","(fma.f64 (neg.f64 eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(- (* eps (- (* -1 (* eps (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(fma.f64 (neg.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(- (* eps (- (* eps (- (* -1 (* eps (+ (* -1/6 (/ (sin x) (pow (cos x) 3))) (+ (* 1/2 (/ (sin x) (pow (cos x) 3))) (/ (* (sin x) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4)))) (cos x)))))) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1/3 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (sin.f64 x)) (cos.f64 x))) eps (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* -1 eps)","(neg.f64 eps)","(* eps (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)","(* eps (- (* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 eps eps) #s(literal -1 binary64)) eps)","(* eps (- (* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 eps eps) #s(literal -1 binary64)) eps)","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1/6 binary64))) (neg.f64 eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1/6 binary64))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x))) #s(literal -1/3 binary64))) eps (fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1/6 binary64))))) eps (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (+ 1 (* eps x)))","(fma.f64 (*.f64 eps eps) x eps)","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(+ 1 (pow x 2))","(fma.f64 x x #s(literal 1 binary64))","(+ 1 (+ (* eps (* x (+ 1 (* 4/3 (pow x 2))))) (pow x 2)))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 4/3 binary64) x) eps (fma.f64 x x #s(literal 1 binary64)))","(+ 1 (* 4/3 (* eps x)))","(fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64))","(+ 1 (* eps (+ (* 4/3 eps) (* 4/3 x))))","(fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) eps #s(literal 1 binary64))","(+ x (* eps (+ 1 (* 4/3 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64)) x eps)","(+ x (* eps (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x)","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1/6 binary64))) (neg.f64 eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* -1 (pow x 2)) (* eps (+ x (* -1 x))))","(*.f64 (neg.f64 x) x)","(+ (* -1 (pow x 2)) (* eps (+ eps (+ x (* -1 x)))))","(fma.f64 (neg.f64 x) x (*.f64 eps eps))","(* -1 (pow (cos x) 2))","(neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* -1 (pow (cos x) 2)) (* eps (* (cos x) (sin x))))","(fma.f64 (*.f64 (cos.f64 x) eps) (sin.f64 x) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* 1/2 (* eps (pow (cos x) 2))) (* (cos x) (sin x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (sin.f64 x))) eps (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* eps (+ (* -1/6 (* eps (* (cos x) (sin x)))) (* 1/2 (pow (cos x) 2)))) (* (cos x) (sin x)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 (cos.f64 x) eps)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (*.f64 (cos.f64 x) (sin.f64 x))) eps (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* 4/3 eps)","(*.f64 #s(literal 4/3 binary64) eps)","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(- (* -1 (/ eps (pow x 2))) (/ 1 x))","(/.f64 (fma.f64 (/.f64 eps x) #s(literal -1 binary64) #s(literal -1 binary64)) x)","(- (* eps (- (* -1 (/ eps (pow x 3))) (/ 1 (pow x 2)))) (/ 1 x))","(fma.f64 (fma.f64 (/.f64 eps (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 x x))) eps (/.f64 #s(literal -1 binary64) x))","(- (* eps (- (* eps (- (* -1 (/ eps (pow x 4))) (/ 1 (pow x 3)))) (/ 1 (pow x 2)))) (/ 1 x))","(fma.f64 (fma.f64 (fma.f64 (/.f64 eps (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) eps (/.f64 #s(literal -1 binary64) (*.f64 x x))) eps (/.f64 #s(literal -1 binary64) x))","(* -1 (sin eps))","(neg.f64 (sin.f64 eps))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 eps (/.f64 (*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (sin.f64 x)) (cos.f64 x)))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 eps eps) eps)","(* (pow eps 2) (+ x (/ 1 eps)))","(fma.f64 (*.f64 eps eps) x eps)","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(/.f64 (*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (sin.f64 x)) (cos.f64 x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps #s(literal 1 binary64))","(* eps (* x (+ 1 (* 4/3 (pow x 2)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 4/3 binary64) x) eps)","(* eps (+ (* x (+ 1 (* 4/3 (pow x 2)))) (+ (/ 1 eps) (/ (pow x 2) eps))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 4/3 binary64) x) eps (fma.f64 (/.f64 (*.f64 x x) eps) eps #s(literal 1 binary64)))","(* 4/3 (pow eps 2))","(*.f64 #s(literal 4/3 binary64) (*.f64 eps eps))","(* (pow eps 2) (+ 4/3 (* 4/3 (/ x eps))))","(*.f64 (*.f64 (fma.f64 (/.f64 x eps) #s(literal 4/3 binary64) #s(literal 4/3 binary64)) eps) eps)","(* (pow eps 2) (+ 4/3 (+ (* 4/3 (/ x eps)) (/ 1 (pow eps 2)))))","(*.f64 (*.f64 (+.f64 (fma.f64 (/.f64 x eps) #s(literal 4/3 binary64) (/.f64 (/.f64 #s(literal 1 binary64) eps) eps)) #s(literal 4/3 binary64)) eps) eps)","(* 4/3 (* (pow eps 2) x))","(*.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x)","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (/ 1 eps))))","(fma.f64 (*.f64 #s(literal 4/3 binary64) (fma.f64 x (/.f64 x eps) x)) (*.f64 eps eps) eps)","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (+ (/ 1 eps) (/ x (pow eps 2))))))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (fma.f64 x (/.f64 x eps) x) (+.f64 (/.f64 x (*.f64 eps eps)) (/.f64 #s(literal 1 binary64) eps))) eps) eps)","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (+.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) (/.f64 (/.f64 #s(literal 1 binary64) eps) eps)) (fma.f64 (/.f64 (sin.f64 x) (*.f64 eps eps)) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (pow.f64 eps #s(literal 3 binary64)))","(* eps (+ 1 (/ x eps)))","(fma.f64 (/.f64 x eps) eps eps)","(* (pow eps 2) (+ 1 (+ (* -1 (/ x eps)) (/ x eps))))","(*.f64 eps eps)","(* (pow eps 2) (+ 1 (+ (* -1 (/ x eps)) (+ (* -1 (/ (pow x 2) (pow eps 2))) (/ x eps)))))","(*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 (neg.f64 x) x) eps) eps)) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (+.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) (/.f64 (/.f64 #s(literal 1 binary64) eps) eps)) (fma.f64 (/.f64 (sin.f64 x) (*.f64 eps eps)) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps))","(/ (+ 1 (/ x eps)) eps)","(/.f64 (+.f64 (/.f64 x eps) #s(literal 1 binary64)) eps)","(/ (- (+ 1 (/ (pow x 2) (pow eps 2))) (* -1 (/ x eps))) eps)","(/.f64 (+.f64 (/.f64 (fma.f64 x (/.f64 x eps) x) eps) #s(literal 1 binary64)) eps)","(/ (- (+ 1 (/ (pow x 3) (pow eps 3))) (+ (* -1 (/ x eps)) (* -1 (/ (pow x 2) (pow eps 2))))) eps)","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (/.f64 x eps) x) eps) (+.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64))) eps)","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(/ -1 (* (cos x) (cos (- x (* -1 eps)))))","(/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(* -1 (sin (neg (* -1 eps))))","(neg.f64 (sin.f64 eps))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(*.f64 eps (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps)))","(* -1 (* eps (* x (- (* -4/3 (pow x 2)) 1))))","(*.f64 (*.f64 (neg.f64 x) eps) (fma.f64 #s(literal -4/3 binary64) (*.f64 x x) #s(literal -1 binary64)))","(* -1 (* eps (+ (* -1 (/ (+ 1 (pow x 2)) eps)) (* x (- (* -4/3 (pow x 2)) 1)))))","(*.f64 (fma.f64 (fma.f64 #s(literal -4/3 binary64) (*.f64 x x) #s(literal -1 binary64)) x (/.f64 (fma.f64 (neg.f64 x) x #s(literal -1 binary64)) eps)) (neg.f64 eps))","(* (pow eps 2) (+ 4/3 (* -1 (/ (- (* -4/3 x) (/ 1 eps)) eps))))","(*.f64 (-.f64 #s(literal 4/3 binary64) (/.f64 (fma.f64 #s(literal -4/3 binary64) x (/.f64 #s(literal -1 binary64) eps)) eps)) (*.f64 eps eps))","(* (pow eps 2) (+ (* -1 (/ (- (* -4/3 (pow x 2)) 1) eps)) (* 4/3 x)))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) x (/.f64 (fma.f64 #s(literal -4/3 binary64) (*.f64 x x) #s(literal -1 binary64)) (neg.f64 eps))) eps) eps)","(* (pow eps 2) (+ (* -1 (/ (- (+ (* -4/3 (pow x 2)) (* -1 (/ x eps))) 1) eps)) (* 4/3 x)))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) x (/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4/3 binary64) x) x (/.f64 (neg.f64 x) eps)) #s(literal -1 binary64) #s(literal 1 binary64)) eps)) eps) eps)","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (-.f64 (/.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 #s(literal 1 binary64) eps))) (neg.f64 eps)) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(fma.f64 (/.f64 x eps) eps eps)","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps)))","(* (pow eps 2) (+ 1 (* -1 (/ (+ (* -1 (+ x (* -1 x))) (/ (pow x 2) eps)) eps))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (/.f64 x eps) #s(literal 0 binary64)) eps)) eps) eps)","(* -1 (* (cos x) (cos (- x (* -1 eps)))))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (-.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (neg.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps))) eps))) (*.f64 eps eps))","(* -1 (/ (- (* -1 (/ x eps)) 1) eps))","(/.f64 (+.f64 (/.f64 x eps) #s(literal 1 binary64)) eps)","(* -1 (/ (- (* -1 (/ (- (/ (pow x 2) eps) (* -1 x)) eps)) 1) eps))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (/.f64 x eps) x) eps) #s(literal 1 binary64)) eps)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (pow x 3) eps)) (pow x 2)) eps)) (* -1 x)) eps)) 1) eps))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (fma.f64 (neg.f64 x) x (/.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 eps))) eps) #s(literal -1 binary64) x) eps) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":337.367919921875,"type":"simplify"},{"count":[[26,494]],"egraph":[[0,9044,439,0.113156588],[2,4698,458,0.056303571],[1,498,464,0.020819874],[0,112,579,0.003319403],[0,72,605,0.000574391]],"inputs":[["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) eps)","(pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))","(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps))","(fma.f64 (*.f64 eps x) eps eps)","(*.f64 eps x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","(tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x))))","(*.f64 (+.f64 eps x) (-.f64 eps x))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(cos.f64 x)","(*.f64 #s(literal 4/3 binary64) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (-.f64 eps x))","(tan.f64 x)"]],"memory":[[-8896704,61330416]],"outputs":[["(*.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 eps))","(*.f64 (*.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 eps))))","(*.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(*.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal -1 binary64) (/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(*.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (sin.f64 eps) (neg.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","(/.f64 (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","(neg.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(-.f64 #s(literal 0 binary64) (/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(pow.f64 (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 eps #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 eps eps))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 eps))","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal -1 binary64)))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps)) (/.f64 (*.f64 eps eps) (neg.f64 eps)))","(exp.f64 (-.f64 (*.f64 (log.f64 eps) #s(literal 3 binary64)) (*.f64 (log.f64 eps) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 1 binary64)))","(+.f64 eps #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) eps)","eps","(*.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 (cos.f64 (+.f64 x eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(pow.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))","(/.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(neg.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))) #s(literal -1/2 binary64) (*.f64 (log.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))) #s(literal -1/2 binary64))))","(exp.f64 (fma.f64 (log.f64 (cos.f64 (+.f64 x eps))) #s(literal -1 binary64) (*.f64 (log.f64 (neg.f64 (cos.f64 x))) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 (neg.f64 (cos.f64 x))) #s(literal -1 binary64) (*.f64 (log.f64 (cos.f64 (+.f64 x eps))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (sin.f64 eps))","(*.f64 (sin.f64 eps) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (sin.f64 eps)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 eps) (sin.f64 eps) (*.f64 #s(literal 0 binary64) (sin.f64 eps)))))","(neg.f64 (sin.f64 eps))","(fma.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (sin.f64 eps))))","(fma.f64 #s(literal 0 binary64) (cos.f64 (neg.f64 eps)) (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 eps))))","(sin.f64 (neg.f64 eps))","(-.f64 (*.f64 (neg.f64 (sin.f64 eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (neg.f64 eps)) #s(literal 0 binary64)))","(-.f64 (-.f64 #s(literal 0 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(-.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(-.f64 #s(literal 0 binary64) (sin.f64 eps))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (neg.f64 eps))) (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 eps))))","(+.f64 (neg.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps))))","(+.f64 (*.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64))) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (sin.f64 eps))))","(+.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 x eps) eps eps)))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 x eps) eps eps))","(*.f64 (fma.f64 x eps #s(literal 1 binary64)) eps)","(*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (pow.f64 (-.f64 (*.f64 (*.f64 eps eps) x) eps) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 (*.f64 eps eps) x)))) #s(literal -1 binary64)))","(*.f64 eps (fma.f64 x eps #s(literal 1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (*.f64 eps eps) x) eps) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 (*.f64 eps eps) x)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 (fma.f64 x eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 x eps #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (*.f64 (*.f64 eps eps) x) #s(literal 2 binary64))) (-.f64 eps (*.f64 (*.f64 eps eps) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) (neg.f64 (-.f64 (*.f64 (*.f64 eps eps) x) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 (*.f64 eps eps) x))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (-.f64 (*.f64 (*.f64 eps eps) x) eps))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (*.f64 (*.f64 eps eps) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 eps eps) x) eps))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 (*.f64 eps eps) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 eps eps) x) eps) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 (*.f64 eps eps) x)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) x)))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) x))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) x)))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) x))","(fma.f64 (fma.f64 x eps #s(literal 1 binary64)) eps (*.f64 #s(literal 0 binary64) (fma.f64 x eps #s(literal 1 binary64))))","(fma.f64 (fma.f64 x eps #s(literal 1 binary64)) eps (*.f64 (fma.f64 x eps #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 x eps #s(literal 1 binary64)) eps #s(literal 0 binary64))","(fma.f64 (fma.f64 x eps #s(literal 1 binary64)) #s(literal 0 binary64) (fma.f64 (*.f64 x eps) eps eps))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) x)))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) x))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (pow.f64 (-.f64 (*.f64 (*.f64 eps eps) x) eps) #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 x eps #s(literal 1 binary64))))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (pow.f64 (-.f64 (*.f64 (*.f64 eps eps) x) eps) #s(literal -1 binary64)) (*.f64 (fma.f64 x eps #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (pow.f64 (-.f64 (*.f64 (*.f64 eps eps) x) eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 (*.f64 eps eps) x)))) #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 x eps #s(literal 1 binary64))))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 (*.f64 eps eps) x)))) #s(literal -1 binary64)) (*.f64 (fma.f64 x eps #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 (*.f64 eps eps) x)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) x)))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (*.f64 eps eps) x))","(fma.f64 (*.f64 eps eps) x eps)","(fma.f64 (*.f64 x eps) eps eps)","(fma.f64 x (*.f64 eps eps) eps)","(fma.f64 eps (fma.f64 x eps #s(literal 1 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 x eps #s(literal 1 binary64))))","(fma.f64 eps (fma.f64 x eps #s(literal 1 binary64)) (*.f64 (fma.f64 x eps #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 eps (fma.f64 x eps #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 eps (*.f64 x eps) eps)","(fma.f64 #s(literal 0 binary64) (fma.f64 x eps #s(literal 1 binary64)) (fma.f64 (*.f64 x eps) eps eps))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 eps eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) x) eps)) (/.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 eps eps) x) eps)))","(+.f64 (fma.f64 (*.f64 eps eps) x #s(literal 0 binary64)) eps)","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x eps #s(literal 1 binary64))) (fma.f64 (*.f64 x eps) eps eps))","(+.f64 (*.f64 (fma.f64 x eps #s(literal 1 binary64)) #s(literal 0 binary64)) (fma.f64 (*.f64 x eps) eps eps))","(+.f64 (*.f64 (*.f64 eps eps) x) eps)","(+.f64 (fma.f64 (*.f64 x eps) eps eps) (*.f64 #s(literal 0 binary64) (fma.f64 x eps #s(literal 1 binary64))))","(+.f64 (fma.f64 (*.f64 x eps) eps eps) (*.f64 (fma.f64 x eps #s(literal 1 binary64)) #s(literal 0 binary64)))","(+.f64 (fma.f64 (*.f64 x eps) eps eps) #s(literal 0 binary64))","(+.f64 eps (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) x)))","(+.f64 eps (*.f64 (*.f64 eps eps) x))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 x eps) eps eps))","(*.f64 x eps)","(*.f64 eps x)","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) x) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (*.f64 eps eps))","(/.f64 (*.f64 x (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 x (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 x eps (*.f64 #s(literal 0 binary64) x))","(fma.f64 x eps (*.f64 x #s(literal 0 binary64)))","(fma.f64 x #s(literal 0 binary64) (*.f64 x eps))","(fma.f64 eps x (*.f64 #s(literal 0 binary64) x))","(fma.f64 eps x (*.f64 x #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) x (*.f64 x eps))","(+.f64 (*.f64 #s(literal 0 binary64) x) (*.f64 x eps))","(+.f64 (*.f64 x #s(literal 0 binary64)) (*.f64 x eps))","(+.f64 (*.f64 x eps) (*.f64 #s(literal 0 binary64) x))","(+.f64 (*.f64 x eps) (*.f64 x #s(literal 0 binary64)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","(*.f64 eps #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))))","(fma.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) #s(literal 0 binary64) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(fma.f64 eps #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))))","(fma.f64 eps #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) #s(literal 0 binary64)))","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 64/27 binary64) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 16/9 binary64) (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 16/9 binary64) (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x)))) (fma.f64 #s(literal 64/27 binary64) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps)) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 2 binary64))) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x)))","(/.f64 (fma.f64 #s(literal 64/27 binary64) (pow.f64 (fma.f64 x eps (*.f64 eps eps)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 64/27 binary64) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 16/9 binary64) (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))))","(/.f64 (fma.f64 #s(literal 64/27 binary64) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 64/27 binary64) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 #s(literal 16/9 binary64) (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 16/9 binary64) (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x)))) (fma.f64 #s(literal 64/27 binary64) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 x #s(literal 4/3 binary64)) eps (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 16/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x))","(fma.f64 (fma.f64 #s(literal 16/9 binary64) (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 64/27 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 16/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x))","(fma.f64 (fma.f64 #s(literal 64/27 binary64) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 16/9 binary64) (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x))) #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)) #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (*.f64 eps #s(literal 1 binary64)) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (*.f64 x #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 4/3 binary64) eps) eps (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 #s(literal 4/3 binary64) (*.f64 (*.f64 eps eps) #s(literal 1 binary64)) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 #s(literal 4/3 binary64) (fma.f64 x eps (*.f64 eps eps)) #s(literal 1 binary64))","(fma.f64 #s(literal 4/3 binary64) (*.f64 (*.f64 x eps) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 x eps) #s(literal 4/3 binary64) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 x (*.f64 (*.f64 #s(literal 4/3 binary64) eps) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 x (*.f64 #s(literal 4/3 binary64) eps) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 eps (*.f64 #s(literal 4/3 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(fma.f64 eps (*.f64 #s(literal 4/3 binary64) eps) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))) (/.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))))","(+.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps)) #s(literal 1 binary64))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)) (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)))","(+.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x))","(+.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) #s(literal 4/3 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x))","(fma.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps)","(fma.f64 x (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) eps)","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps)) (/.f64 (*.f64 eps eps) (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps)))","(+.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x #s(literal 0 binary64)) eps)","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x) eps)","(+.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) #s(literal 0 binary64))","(+.f64 eps (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x)))","(+.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x))","(+.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","(*.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64)))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64)))","(*.f64 (/.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 x eps) (*.f64 eps eps)))","(*.f64 (*.f64 (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) (+.f64 x eps)) (-.f64 eps x))","(*.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 x x (*.f64 eps (-.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) (*.f64 (-.f64 eps x) (+.f64 x eps)))","(*.f64 (-.f64 eps x) (/.f64 (+.f64 x eps) (-.f64 eps x)))","(*.f64 (-.f64 eps x) (*.f64 (+.f64 x eps) (pow.f64 (-.f64 eps x) #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (+.f64 x eps))","(*.f64 (+.f64 x eps) #s(literal 1 binary64))","(pow.f64 (/.f64 (-.f64 eps x) (*.f64 (-.f64 eps x) (+.f64 x eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 x eps) (*.f64 (+.f64 x eps) (-.f64 x eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (*.f64 eps (-.f64 eps x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 (-.f64 eps x) (+.f64 x eps))) (neg.f64 (-.f64 eps x)))","(/.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) #s(literal 1 binary64)) (-.f64 x eps))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 x x (*.f64 eps (-.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (*.f64 eps (-.f64 eps x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 eps x) (+.f64 x eps))) (neg.f64 (-.f64 eps x)))","(/.f64 (*.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (-.f64 eps x)))","(/.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (-.f64 eps x))","(/.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 x x (*.f64 eps (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (-.f64 eps x) (+.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x eps) (*.f64 (+.f64 x eps) (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (*.f64 eps (-.f64 eps x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (/.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 x eps) (*.f64 eps eps)) #s(literal 0 binary64))","(fma.f64 (*.f64 (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) (+.f64 x eps)) (-.f64 eps x) #s(literal 0 binary64))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 x x (*.f64 eps (-.f64 eps x))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) x)","(fma.f64 (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) (*.f64 (-.f64 eps x) (+.f64 x eps)) #s(literal 0 binary64))","(fma.f64 (-.f64 eps x) (/.f64 (+.f64 x eps) (-.f64 eps x)) #s(literal 0 binary64))","(fma.f64 (-.f64 eps x) (*.f64 (+.f64 x eps) (pow.f64 (-.f64 eps x) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (+.f64 x eps) #s(literal 0 binary64))","(fma.f64 (+.f64 x eps) #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(+.f64 (+.f64 x #s(literal 0 binary64)) eps)","(+.f64 (+.f64 x eps) #s(literal 0 binary64))","(+.f64 x eps)","(+.f64 eps (+.f64 #s(literal 0 binary64) x))","(+.f64 eps x)","(+.f64 #s(literal 0 binary64) (+.f64 x eps))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (neg.f64 (tan.f64 x)) #s(literal 2 binary64))) (-.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (neg.f64 (tan.f64 x)) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) (sin.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x))) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 (+.f64 x eps)) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 x eps)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))","(+.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x)))","(*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) #s(literal -1 binary64)))","(*.f64 (sin.f64 (+.f64 x eps)) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) (+.f64 (tan.f64 eps) (tan.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 (+.f64 x eps))) #s(literal -1 binary64))","(/.f64 (+.f64 (tan.f64 (+.f64 x #s(literal 0 binary64))) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 (+.f64 x #s(literal 0 binary64))) (tan.f64 eps))))","(/.f64 (+.f64 (tan.f64 (+.f64 x eps)) #s(literal 0 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 (+.f64 x eps)) #s(literal 0 binary64))))","(/.f64 (+.f64 (tan.f64 eps) (tan.f64 (+.f64 #s(literal 0 binary64) x))) (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 (+.f64 #s(literal 0 binary64) x)))))","(/.f64 (+.f64 #s(literal 0 binary64) (tan.f64 (+.f64 x eps))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 0 binary64) (tan.f64 (+.f64 x eps)))))","(/.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x)))))","(/.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (neg.f64 (cos.f64 (+.f64 x eps))))","(/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))))","(/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) (+.f64 (tan.f64 eps) (tan.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 (+.f64 x eps))))","(tan.f64 (+.f64 x eps))","(*.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) #s(literal 1 binary64))","(*.f64 (-.f64 eps x) (+.f64 x eps))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 eps x) (+.f64 x eps)))","(*.f64 (+.f64 x eps) (-.f64 eps x))","(/.f64 (*.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (+.f64 x eps)) (+.f64 x eps))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 x eps)) (fma.f64 x (+.f64 x eps) (*.f64 eps eps)))","(/.f64 (*.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (-.f64 eps x)) (-.f64 x eps))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 eps x)) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 eps x)) (fma.f64 x x (*.f64 eps (-.f64 eps x))))","(/.f64 (*.f64 (-.f64 eps x) (*.f64 (-.f64 eps x) (+.f64 x eps))) (-.f64 eps x))","(/.f64 (*.f64 (-.f64 eps x) (*.f64 (+.f64 x eps) (-.f64 x eps))) (-.f64 x eps))","(/.f64 (*.f64 (-.f64 eps x) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (*.f64 (-.f64 eps x) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 x x (*.f64 eps (-.f64 eps x))))","(/.f64 (*.f64 (+.f64 x eps) (*.f64 (-.f64 eps x) (+.f64 x eps))) (+.f64 x eps))","(/.f64 (*.f64 (+.f64 x eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 x eps) (*.f64 eps eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 eps eps (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 x eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps))) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(/.f64 (*.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (+.f64 x eps) (fma.f64 x (-.f64 x eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (+.f64 x eps) (fma.f64 x x (*.f64 eps (-.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (-.f64 eps x) (+.f64 x eps))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 x eps) (-.f64 x eps))) (*.f64 (fma.f64 x (+.f64 x eps) (*.f64 eps eps)) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 x (+.f64 x eps) (*.f64 eps eps)) (fma.f64 x (-.f64 x eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 x (+.f64 x eps) (*.f64 eps eps)) (fma.f64 x x (*.f64 eps (-.f64 eps x)))))","(/.f64 (pow.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) #s(literal 2 binary64)) (*.f64 (-.f64 eps x) (+.f64 x eps)))","(/.f64 (*.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (-.f64 eps x) (fma.f64 x (+.f64 x eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (*.f64 (-.f64 eps x) (+.f64 x eps))) (*.f64 (-.f64 x eps) (+.f64 x eps)))","(/.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (-.f64 x eps) (fma.f64 x (+.f64 x eps) (*.f64 eps eps))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (-.f64 eps x) (+.f64 x eps))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (fma.f64 x (+.f64 x eps) (*.f64 eps eps))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x x (*.f64 eps (-.f64 eps x))) (fma.f64 x (+.f64 x eps) (*.f64 eps eps))))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) (*.f64 (neg.f64 x) x))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) (neg.f64 (*.f64 x x)))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 x x)))","(fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 x x)))","(fma.f64 (-.f64 eps x) x (*.f64 (-.f64 eps x) eps))","(fma.f64 (-.f64 eps x) eps (*.f64 (-.f64 eps x) x))","(fma.f64 (+.f64 x eps) eps (*.f64 (+.f64 x eps) (neg.f64 x)))","(fma.f64 x (-.f64 eps x) (*.f64 eps (-.f64 eps x)))","(fma.f64 eps (-.f64 eps #s(literal 0 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 eps (-.f64 eps #s(literal 0 binary64)) (neg.f64 (*.f64 x x)))","(fma.f64 eps (-.f64 eps x) (*.f64 x (-.f64 eps x)))","(fma.f64 eps (+.f64 x eps) (*.f64 (neg.f64 x) (+.f64 x eps)))","(fma.f64 eps eps (*.f64 (neg.f64 x) x))","(fma.f64 eps eps (neg.f64 (*.f64 x x)))","(-.f64 (*.f64 eps eps) (*.f64 x x))","(+.f64 (*.f64 x (-.f64 eps x)) (*.f64 eps (-.f64 eps x)))","(+.f64 (*.f64 eps (+.f64 x eps)) (*.f64 (neg.f64 x) (+.f64 x eps)))","(+.f64 (*.f64 (-.f64 eps x) x) (*.f64 (-.f64 eps x) eps))","(+.f64 (*.f64 (-.f64 eps x) eps) (*.f64 (-.f64 eps x) x))","(+.f64 (*.f64 (+.f64 x eps) eps) (*.f64 (+.f64 x eps) (neg.f64 x)))","(+.f64 (*.f64 eps (-.f64 eps x)) (*.f64 x (-.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 eps eps) (neg.f64 (*.f64 x x)))","(*.f64 (exp.f64 (log.f64 (cos.f64 (+.f64 x eps)))) (exp.f64 (log.f64 (neg.f64 (cos.f64 x)))))","(*.f64 (exp.f64 (log.f64 (neg.f64 (cos.f64 x)))) (exp.f64 (log.f64 (cos.f64 (+.f64 x eps)))))","(*.f64 (*.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(*.f64 (cos.f64 x) (neg.f64 (cos.f64 (+.f64 x eps))))","(neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(exp.f64 (log.f64 (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))","(pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","(exp.f64 (log.f64 (cos.f64 x)))","(*.f64 #s(literal 4/3 binary64) eps)","(*.f64 eps #s(literal 4/3 binary64))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal 4/3 binary64)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 #s(literal 4/3 binary64) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(literal 4/3 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(literal 4/3 binary64) eps #s(literal 0 binary64))","(fma.f64 eps #s(literal 4/3 binary64) #s(literal 0 binary64))","(+.f64 (*.f64 #s(literal 4/3 binary64) eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal 4/3 binary64) eps))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps))) #s(literal -1 binary64)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (*.f64 eps (-.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 x eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 eps x) (+.f64 x eps)) #s(literal -1 binary64)) (+.f64 x eps))","(*.f64 (pow.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (+.f64 x eps) (*.f64 eps eps)))","(*.f64 (pow.f64 (-.f64 eps x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 eps x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (-.f64 eps x)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (-.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (-.f64 eps x) (-.f64 eps x)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 eps x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (-.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (-.f64 eps x) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (-.f64 eps x))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 eps x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 eps x)))","(exp.f64 (*.f64 (log.f64 (-.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (sin.f64 x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":412.870849609375,"type":"rewrite"},{"compiler":[[33989,3193]],"memory":[[5544576,67175280]],"time":93.217041015625,"type":"eval"},{"alts":[["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","fresh",24.62655388818521,"binary64"],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","fresh",0.00390625,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",24.61062264534191,"binary64"],["(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","done",41.61666065167192,"binary64"],["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","next",0.00390625,"binary64"],["(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","fresh",0.07352411117764132,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","next",0.23591148121486605,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (neg.f64 eps)))","fresh",29.01149393931259,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","next",0.4283544816032696,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(approx (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","fresh",0.4283544816189372,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","done",0.42835448211586513,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","next",0.42835406579199325,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","fresh",0.42831403743536867,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","next",0.6641487035915719,"binary64"]],"compiler":[[31,18],[17,12],[7,6],[17,11],[16,14],[19,16],[21,14],[98,46],[92,43],[104,50],[45,27],[39,24],[53,32],[34,22],[31,18],[17,12],[16,14],[19,16],[21,14],[98,46],[92,43],[104,50],[39,24],[53,32],[34,22]],"count":[[678,14]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[667,8],"picked":[5,2]}],"memory":[[4622288,32040336]],"min-error":[[0.0,"binary64"]],"time":20.81005859375,"type":"prune"},{"egraph":[[0,8257,561,0.082456134],[5,7007,596,0.019869058],[4,4021,596,0.032147043],[3,1738,596,0.019314593],[2,461,598,0.006246533],[1,182,599,0.001756106],[0,98,605,0.000935925],[0,68,613,0.000518094]],"inputs":[["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(sin.f64 (+.f64 #s(literal 0 binary64) eps))","(+.f64 #s(literal 0 binary64) eps)","#s(literal 0 binary64)","eps","(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","#s(literal 1 binary64)","(*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","x","(neg.f64 (cos.f64 x))","(cos.f64 x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))","(fma.f64 (+.f64 x eps) x #s(literal 1 binary64))","(+.f64 x eps)","x","eps","#s(literal 1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x)","(fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64))","(*.f64 #s(literal 4/3 binary64) (+.f64 x eps))","#s(literal 4/3 binary64)","(+.f64 x eps)","x","eps","#s(literal 1 binary64)","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","#s(literal 1/3 binary64)","(*.f64 eps eps)","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","eps","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","x","#s(literal 2 binary64)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","cost-diff",0],["(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","cost-diff",0],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","cost-diff",0],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x)","cost-diff",1],["(fma.f64 (+.f64 x eps) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","cost-diff",0],["#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))","cost-diff",0],["(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","cost-diff",0],["(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","cost-diff",1],["(+.f64 #s(literal 0 binary64) eps)","cost-diff",2],["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","cost-diff",3]],"memory":[[-8360400,34577792]],"method":["egg-herbie"],"outputs":[["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(neg.f64 (sin.f64 eps))","(sin.f64 (+.f64 #s(literal 0 binary64) eps))","(sin.f64 eps)","(+.f64 #s(literal 0 binary64) eps)","eps","#s(literal 0 binary64)","eps","(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","(/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","#s(literal 1 binary64)","(*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","x","(neg.f64 (cos.f64 x))","(cos.f64 x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))","(fma.f64 (+.f64 x eps) x #s(literal 1 binary64))","(+.f64 x eps)","x","eps","#s(literal 1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 (fma.f64 (*.f64 x eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (+.f64 x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 (fma.f64 (*.f64 x eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (+.f64 x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 (fma.f64 (*.f64 x eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (+.f64 x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 (*.f64 (fma.f64 (*.f64 x eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (+.f64 x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x)","(*.f64 (fma.f64 (*.f64 x eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) (+.f64 x eps))","(fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64))","(*.f64 #s(literal 4/3 binary64) (+.f64 x eps))","#s(literal 4/3 binary64)","(+.f64 x eps)","x","eps","#s(literal 1 binary64)","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","#s(literal 1/3 binary64)","(*.f64 eps eps)","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","eps","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","x","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":253.0380859375,"type":"simplify"},{"compiler":[[415,64]],"locations":[["(cos.f64 x)","accuracy",0.0],["(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","accuracy",0.0078125],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","accuracy",0.01953125],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","accuracy",0.23591148119509497],["(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x)","accuracy",0.0078125],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","accuracy",0.0078125],["(*.f64 #s(literal 4/3 binary64) (+.f64 x eps))","accuracy",0.33203125],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","accuracy",0.41968979502782955],["(+.f64 x eps)","accuracy",0.0],["(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps)","accuracy",0.00390625],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","accuracy",0.0799634724426992],["#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))","accuracy",0.41968937870373096],["(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps)","accuracy",0.00390625],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","accuracy",0.0799634724426992],["#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))","accuracy",0.6550781496596422],["(cos.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","accuracy",0.00390625],["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","accuracy",0.00390625],["(*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","accuracy",0.015625]],"memory":[[7664400,65686240]],"mixsample":[[15.504638671875,"ival-div",0],[13.20654296875,"adjust",800],[0.1103515625,"ival-assert",0],[4.48095703125,"ival-sub",0],[5.4658203125,"ival-tan",0],[6.813232421875,"ival-cos",0],[12.955078125,"const",0],[0.005126953125,"ival-sub",400],[0.044921875,"ival-tan",400],[6.263427734375,"ival-pow",0],[17.693359375,"ival-add",0],[0.005126953125,"ival-mult",400],[38.208251953125,"ival-mult",0],[6.279541015625,"ival-sin",0],[0.0078125,"ival-add",400],[0.251953125,"ival-true",0],[0.641357421875,"exact",0],[3.4716796875,"ival-pow2",0],[2.5908203125,"ival-neg",0]],"outcomes":[[89.970458984375,1,"valid",92],[77.243408203125,0,"valid",164]],"time":209.384033203125,"type":"localize"},{"count":[[22,134]],"inputs":[["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(+.f64 #s(literal 0 binary64) eps)","(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))","(fma.f64 (+.f64 x eps) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","(*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","(+.f64 x eps)","(*.f64 #s(literal 4/3 binary64) (+.f64 x eps))"]],"memory":[[1764992,17540480]],"outputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(/ -1 (cos eps))","(- (* -1 (/ (* x (sin eps)) (pow (cos eps) 2))) (/ 1 (cos eps)))","(- (* x (- (* -1 (* x (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(- (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))) (pow (cos eps) 2))) (+ (/ (sin eps) (pow (cos eps) 2)) (/ (* (sin eps) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3)))) (cos eps)))))) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(+ eps (* x (+ 1 (* 4/3 (pow eps 2)))))","(+ eps (* x (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow eps 2))))))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(+ eps (* (pow x 2) (- (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (+ (* -2/45 eps) (* 2/3 eps))))) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1 (cos eps))","(+ (* -1 (cos eps)) (* x (sin eps)))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (cos eps)))))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (+ (cos eps) (* -1 (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))))))))))","(+ eps x)","(* 4/3 eps)","(+ (* 4/3 eps) (* 4/3 x))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/ -1 (* (cos x) (cos (+ eps x))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(pow x 2)","(* (pow x 2) (+ 1 (/ eps x)))","(* (pow x 2) (+ 1 (+ (/ 1 (pow x 2)) (/ eps x))))","(* 4/3 (* eps (pow x 2)))","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (/ 1 x))))","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (+ (/ 1 x) (/ eps (pow x 2))))))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(/ eps (pow (cos x) 2))","(pow (cos x) 2)","(cos x)","(* -1 (* (cos x) (cos (+ eps x))))","x","(* x (+ 1 (/ eps x)))","(* 4/3 x)","(* x (+ 4/3 (* 4/3 (/ eps x))))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/ -1 (* (cos x) (cos (- eps (* -1 x)))))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* (pow x 2) (+ 1 (* -1 (/ (- (* -1 eps) (/ 1 x)) x))))","(* (pow x 2) (+ (* -1 (/ (- (* -4/3 (pow eps 2)) 1) x)) (* 4/3 eps)))","(* (pow x 2) (+ (* -1 (/ (- (+ (* -4/3 (pow eps 2)) (* -1 (/ eps x))) 1) x)) (* 4/3 eps)))","(* -1 (* (cos x) (cos (- eps (* -1 x)))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* x (- (* -4/3 (/ eps x)) 4/3)))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(/ -1 (pow (cos x) 2))","(- (* -1 (/ (* eps (sin x)) (pow (cos x) 3))) (/ 1 (pow (cos x) 2)))","(- (* eps (- (* -1 (* eps (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(- (* eps (- (* eps (- (* -1 (* eps (+ (* -1/6 (/ (sin x) (pow (cos x) 3))) (+ (* 1/2 (/ (sin x) (pow (cos x) 3))) (/ (* (sin x) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4)))) (cos x)))))) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(* -1 eps)","(* eps (- (* 1/6 (pow eps 2)) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2)))) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120)))) 1))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps x) (pow x 2)))","(+ x (* eps (+ 1 (* 4/3 (pow x 2)))))","(+ x (* eps (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow x 2))))))","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* -1 (pow (cos x) 2))","(+ (* -1 (pow (cos x) 2)) (* eps (* (cos x) (sin x))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* 1/2 (* eps (pow (cos x) 2))) (* (cos x) (sin x)))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* eps (+ (* -1/6 (* eps (* (cos x) (sin x)))) (* 1/2 (pow (cos x) 2)))) (* (cos x) (sin x)))))","(* -1 (sin eps))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* eps x)","(* eps (+ x (+ (/ 1 eps) (/ (pow x 2) eps))))","(* 4/3 (* (pow eps 2) x))","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (/ 1 eps))))","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (+ (/ 1 eps) (/ x (pow eps 2))))))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* eps (+ 1 (/ x eps)))","(* eps (+ 4/3 (* 4/3 (/ x eps))))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/ -1 (* (cos x) (cos (- x (* -1 eps)))))","(* -1 (sin (neg (* -1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(* -1 (* eps (+ (* -1 x) (* -1 (/ (+ 1 (pow x 2)) eps)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1 (+ 1 (* 4/3 (pow x 2)))) (* -1 (/ x eps))) eps)) (* 4/3 x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (* (cos x) (cos (- x (* -1 eps)))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(* -1 (* eps (- (* -4/3 (/ x eps)) 4/3)))"]],"series":[[6.865966796875,"((* (neg (sin (+ 0 eps))) (/ 1 (* (cos (+ x eps)) (neg (cos x))))) (+ 0 eps) (/ 1 (* (cos (+ x eps)) (neg (cos x)))) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ x eps) x) 1) (+ (* (+ (* (* 4/3 (+ x eps)) x) 1) eps) x) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (* (cos (+ x eps)) (neg (cos x))) (+ x eps) (* 4/3 (+ x eps)))","eps","-inf"],[5.2080078125,"((* (neg (sin (+ 0 eps))) (/ 1 (* (cos (+ x eps)) (neg (cos x))))) (+ 0 eps) (/ 1 (* (cos (+ x eps)) (neg (cos x)))) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ x eps) x) 1) (+ (* (+ (* (* 4/3 (+ x eps)) x) 1) eps) x) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (* (cos (+ x eps)) (neg (cos x))) (+ x eps) (* 4/3 (+ x eps)))","eps","inf"],[4.7900390625,"((* (neg (sin (+ 0 eps))) (/ 1 (* (cos (+ x eps)) (neg (cos x))))) (+ 0 eps) (/ 1 (* (cos (+ x eps)) (neg (cos x)))) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ x eps) x) 1) (+ (* (+ (* (* 4/3 (+ x eps)) x) 1) eps) x) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (* (cos (+ x eps)) (neg (cos x))) (+ x eps) (* 4/3 (+ x eps)))","eps","0"],[6.343017578125,"((* (neg (sin (+ 0 eps))) (/ 1 (* (cos (+ x eps)) (neg (cos x))))) (+ 0 eps) (/ 1 (* (cos (+ x eps)) (neg (cos x)))) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ x eps) x) 1) (+ (* (+ (* (* 4/3 (+ x eps)) x) 1) eps) x) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (* (cos (+ x eps)) (neg (cos x))) (+ x eps) (* 4/3 (+ x eps)))","x","-inf"],[6.365966796875,"((* (neg (sin (+ 0 eps))) (/ 1 (* (cos (+ x eps)) (neg (cos x))))) (+ 0 eps) (/ 1 (* (cos (+ x eps)) (neg (cos x)))) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ x eps) x) 1) (+ (* (+ (* (* 4/3 (+ x eps)) x) 1) eps) x) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (* (cos (+ x eps)) (neg (cos x))) (+ x eps) (* 4/3 (+ x eps)))","x","inf"],[4.39111328125,"((* (neg (sin (+ 0 eps))) (/ 1 (* (cos (+ x eps)) (neg (cos x))))) (+ 0 eps) (/ 1 (* (cos (+ x eps)) (neg (cos x)))) (neg (sin (+ 0 eps))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ x eps) x) 1) (+ (* (+ (* (* 4/3 (+ x eps)) x) 1) eps) x) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (* (cos (+ x eps)) (neg (cos x))) (+ x eps) (* 4/3 (+ x eps)))","x","0"]],"time":37.616943359375,"type":"series"},{"count":[[134,132]],"egraph":[[0,8105,2722,0.08548953],[2,6346,2884,0.029341256],[1,1866,3022,0.020960535],[0,573,3186,0.006578991]],"inputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(/ -1 (cos eps))","(- (* -1 (/ (* x (sin eps)) (pow (cos eps) 2))) (/ 1 (cos eps)))","(- (* x (- (* -1 (* x (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(- (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))) (pow (cos eps) 2))) (+ (/ (sin eps) (pow (cos eps) 2)) (/ (* (sin eps) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3)))) (cos eps)))))) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(+ eps (* x (+ 1 (* 4/3 (pow eps 2)))))","(+ eps (* x (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow eps 2))))))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(+ eps (* (pow x 2) (- (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (+ (* -2/45 eps) (* 2/3 eps))))) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1 (cos eps))","(+ (* -1 (cos eps)) (* x (sin eps)))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (cos eps)))))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (+ (cos eps) (* -1 (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))))))))))","(+ eps x)","(* 4/3 eps)","(+ (* 4/3 eps) (* 4/3 x))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/ -1 (* (cos x) (cos (+ eps x))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(pow x 2)","(* (pow x 2) (+ 1 (/ eps x)))","(* (pow x 2) (+ 1 (+ (/ 1 (pow x 2)) (/ eps x))))","(* 4/3 (* eps (pow x 2)))","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (/ 1 x))))","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (+ (/ 1 x) (/ eps (pow x 2))))))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(/ eps (pow (cos x) 2))","(pow (cos x) 2)","(cos x)","(* -1 (* (cos x) (cos (+ eps x))))","x","(* x (+ 1 (/ eps x)))","(* 4/3 x)","(* x (+ 4/3 (* 4/3 (/ eps x))))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/ -1 (* (cos x) (cos (- eps (* -1 x)))))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* (pow x 2) (+ 1 (* -1 (/ (- (* -1 eps) (/ 1 x)) x))))","(* (pow x 2) (+ (* -1 (/ (- (* -4/3 (pow eps 2)) 1) x)) (* 4/3 eps)))","(* (pow x 2) (+ (* -1 (/ (- (+ (* -4/3 (pow eps 2)) (* -1 (/ eps x))) 1) x)) (* 4/3 eps)))","(* -1 (* (cos x) (cos (- eps (* -1 x)))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* x (- (* -4/3 (/ eps x)) 4/3)))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(/ -1 (pow (cos x) 2))","(- (* -1 (/ (* eps (sin x)) (pow (cos x) 3))) (/ 1 (pow (cos x) 2)))","(- (* eps (- (* -1 (* eps (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(- (* eps (- (* eps (- (* -1 (* eps (+ (* -1/6 (/ (sin x) (pow (cos x) 3))) (+ (* 1/2 (/ (sin x) (pow (cos x) 3))) (/ (* (sin x) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4)))) (cos x)))))) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(* -1 eps)","(* eps (- (* 1/6 (pow eps 2)) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2)))) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120)))) 1))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps x) (pow x 2)))","(+ x (* eps (+ 1 (* 4/3 (pow x 2)))))","(+ x (* eps (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow x 2))))))","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* -1 (pow (cos x) 2))","(+ (* -1 (pow (cos x) 2)) (* eps (* (cos x) (sin x))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* 1/2 (* eps (pow (cos x) 2))) (* (cos x) (sin x)))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* eps (+ (* -1/6 (* eps (* (cos x) (sin x)))) (* 1/2 (pow (cos x) 2)))) (* (cos x) (sin x)))))","(* -1 (sin eps))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* eps x)","(* eps (+ x (+ (/ 1 eps) (/ (pow x 2) eps))))","(* 4/3 (* (pow eps 2) x))","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (/ 1 eps))))","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (+ (/ 1 eps) (/ x (pow eps 2))))))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* eps (+ 1 (/ x eps)))","(* eps (+ 4/3 (* 4/3 (/ x eps))))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/ -1 (* (cos x) (cos (- x (* -1 eps)))))","(* -1 (sin (neg (* -1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(* -1 (* eps (+ (* -1 x) (* -1 (/ (+ 1 (pow x 2)) eps)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1 (+ 1 (* 4/3 (pow x 2)))) (* -1 (/ x eps))) eps)) (* 4/3 x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (* (cos x) (cos (- x (* -1 eps)))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(* -1 (* eps (- (* -4/3 (/ x eps)) 4/3)))"]],"memory":[[-8074512,46429024]],"method":["egg-herbie"],"outputs":[["(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 #s(literal 2/3 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps))) (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/ -1 (cos eps))","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","(- (* -1 (/ (* x (sin eps)) (pow (cos eps) 2))) (/ 1 (cos eps)))","(-.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (*.f64 (sin.f64 eps) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))","(- (* x (- (* -1 (* x (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))) x (/.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 #s(literal -1 binary64) (cos.f64 eps)))","(- (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))) (pow (cos eps) 2))) (+ (/ (sin eps) (pow (cos eps) 2)) (/ (* (sin eps) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3)))) (cos eps)))))) (+ (/ 1 (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (/ (sin eps) (pow (cos eps) 2)))) (/ 1 (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (-.f64 (+.f64 (/.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps)) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (*.f64 (sin.f64 eps) (/.f64 #s(literal 2/3 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))) (-.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))))) x (/.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 #s(literal -1 binary64) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (sin.f64 eps)) (/.f64 x (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 eps)) (sin.f64 eps) (*.f64 (neg.f64 x) (+.f64 (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)))) (fma.f64 #s(literal 1/6 binary64) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1/2 binary64))))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+ eps (* (pow eps 2) x))","(fma.f64 (*.f64 eps eps) x eps)","(+ eps (* x (+ (* eps x) (pow eps 2))))","(fma.f64 (*.f64 eps (+.f64 x eps)) x eps)","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps)) x eps)","1","#s(literal 1 binary64)","(+ 1 (* eps x))","(fma.f64 x eps #s(literal 1 binary64))","(+ 1 (* x (+ eps x)))","(fma.f64 (+.f64 x eps) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(+ eps (* x (+ 1 (* 4/3 (pow eps 2)))))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","(+ eps (* x (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow eps 2))))))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps (+.f64 x eps)) #s(literal 1 binary64)) x eps)","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(*.f64 eps (fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64)))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps (+.f64 x eps)) #s(literal 1 binary64)) x eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ 1 (* 1/3 (pow eps 2)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps (+.f64 x eps)) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(+ eps (* eps (pow x 2)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)","(+ eps (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)","(+ eps (* (pow x 2) (- (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (+ (* -2/45 eps) (* 2/3 eps))))) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) eps) #s(literal -17/45 binary64) (*.f64 #s(literal -2/3 binary64) eps))) (*.f64 x x) eps) (*.f64 x x) eps)","(+ 1 (* -1 (pow x 2)))","(-.f64 #s(literal 1 binary64) (*.f64 x x))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* -1 (cos eps))","(neg.f64 (cos.f64 eps))","(+ (* -1 (cos eps)) (* x (sin eps)))","(fma.f64 (sin.f64 eps) x (neg.f64 (cos.f64 eps)))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (cos eps)))))","(fma.f64 (fma.f64 (cos.f64 eps) x (sin.f64 eps)) x (neg.f64 (cos.f64 eps)))","(+ (* -1 (cos eps)) (* x (+ (sin eps) (* x (+ (cos eps) (* -1 (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps))))))))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (*.f64 #s(literal 2/3 binary64) (sin.f64 eps)) (cos.f64 eps)) x (sin.f64 eps)) x (neg.f64 (cos.f64 eps)))","(+ eps x)","(+.f64 x eps)","(* 4/3 eps)","(*.f64 #s(literal 4/3 binary64) eps)","(+ (* 4/3 eps) (* 4/3 x))","(*.f64 #s(literal 4/3 binary64) (+.f64 x eps))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(/ -1 (* (cos x) (cos (+ eps x))))","(/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (/ eps x)))","(*.f64 (fma.f64 (/.f64 eps x) x x) x)","(* (pow x 2) (+ 1 (+ (/ 1 (pow x 2)) (/ eps x))))","(fma.f64 x x (fma.f64 (/.f64 eps x) (*.f64 x x) #s(literal 1 binary64)))","(* 4/3 (* eps (pow x 2)))","(*.f64 (*.f64 (*.f64 x x) eps) #s(literal 4/3 binary64))","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (fma.f64 eps (/.f64 eps x) eps) (/.f64 #s(literal 1 binary64) x)) x) x)","(* (pow x 2) (+ (* 4/3 eps) (+ (* 4/3 (/ (pow eps 2) x)) (+ (/ 1 x) (/ eps (pow x 2))))))","(*.f64 (fma.f64 #s(literal 4/3 binary64) (fma.f64 eps (/.f64 eps x) eps) (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (*.f64 x x))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(/ eps (pow (cos x) 2))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow (cos x) 2)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos x)","(cos.f64 x)","(* -1 (* (cos x) (cos (+ eps x))))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","x","(* x (+ 1 (/ eps x)))","(fma.f64 (/.f64 eps x) x x)","(* 4/3 x)","(*.f64 #s(literal 4/3 binary64) x)","(* x (+ 4/3 (* 4/3 (/ eps x))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal 4/3 binary64) #s(literal 4/3 binary64)) x)","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(/ -1 (* (cos x) (cos (- eps (* -1 x)))))","(/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* (pow x 2) (+ 1 (* -1 (/ (- (* -1 eps) (/ 1 x)) x))))","(*.f64 x (fma.f64 x (/.f64 (+.f64 eps (/.f64 #s(literal 1 binary64) x)) x) x))","(* (pow x 2) (+ (* -1 (/ (- (* -4/3 (pow eps 2)) 1) x)) (* 4/3 eps)))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (/.f64 (fma.f64 #s(literal -4/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (neg.f64 x))) x) x)","(* (pow x 2) (+ (* -1 (/ (- (+ (* -4/3 (pow eps 2)) (* -1 (/ eps x))) 1) x)) (* 4/3 eps)))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (/.f64 (fma.f64 eps (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))) x) x)","(* -1 (* (cos x) (cos (- eps (* -1 x)))))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(fma.f64 (/.f64 (neg.f64 eps) x) (neg.f64 x) x)","(* -1 (* x (- (* -4/3 (/ eps x)) 4/3)))","(*.f64 (fma.f64 #s(literal -4/3 binary64) (/.f64 eps x) #s(literal -4/3 binary64)) (neg.f64 x))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (*.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (cos.f64 x)) (/.f64 (*.f64 (sin.f64 x) #s(literal -1/3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 eps) (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 eps eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/ -1 (pow (cos x) 2))","(/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(- (* -1 (/ (* eps (sin x)) (pow (cos x) 3))) (/ 1 (pow (cos x) 2)))","(fma.f64 (neg.f64 eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(- (* eps (- (* -1 (* eps (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(fma.f64 (neg.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(- (* eps (- (* eps (- (* -1 (* eps (+ (* -1/6 (/ (sin x) (pow (cos x) 3))) (+ (* 1/2 (/ (sin x) (pow (cos x) 3))) (/ (* (sin x) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4)))) (cos x)))))) (+ (* 1/2 (/ 1 (pow (cos x) 2))) (/ (pow (sin x) 2) (pow (cos x) 4))))) (/ (sin x) (pow (cos x) 3)))) (/ 1 (pow (cos x) 2)))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (cos.f64 x))) eps (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* -1 eps)","(neg.f64 eps)","(* eps (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)","(* eps (- (* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 eps eps) #s(literal -1 binary64)) eps)","(* eps (- (* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 eps eps) #s(literal -1 binary64)) eps)","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 #s(literal 1/6 binary64) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) (neg.f64 eps) (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 x)) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64))","(+ 1 (pow x 2))","(fma.f64 x x #s(literal 1 binary64))","(+ 1 (+ (* eps x) (pow x 2)))","(fma.f64 (+.f64 x eps) x #s(literal 1 binary64))","(+ x (* eps (+ 1 (* 4/3 (pow x 2)))))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps)","(+ x (* eps (+ 1 (+ (* 4/3 (* eps x)) (* 4/3 (pow x 2))))))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps (+.f64 x eps)) #s(literal 1 binary64)) x eps)","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(* -1 (pow (cos x) 2))","(neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* -1 (pow (cos x) 2)) (* eps (* (cos x) (sin x))))","(*.f64 (cos.f64 x) (fma.f64 (sin.f64 x) eps (neg.f64 (cos.f64 x))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* 1/2 (* eps (pow (cos x) 2))) (* (cos x) (sin x)))))","(fma.f64 (*.f64 eps (*.f64 #s(literal 1/2 binary64) eps)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (fma.f64 (sin.f64 x) eps (neg.f64 (cos.f64 x)))))","(+ (* -1 (pow (cos x) 2)) (* eps (+ (* eps (+ (* -1/6 (* eps (* (cos x) (sin x)))) (* 1/2 (pow (cos x) 2)))) (* (cos x) (sin x)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 (cos.f64 x) eps)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (*.f64 (cos.f64 x) (sin.f64 x))) eps (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* -1 (sin eps))","(neg.f64 (sin.f64 eps))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 (*.f64 eps eps) (cos.f64 x)))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps) eps eps)","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))","(* eps x)","(*.f64 x eps)","(* eps (+ x (+ (/ 1 eps) (/ (pow x 2) eps))))","(fma.f64 x eps (fma.f64 (/.f64 (*.f64 x x) eps) eps #s(literal 1 binary64)))","(* 4/3 (* (pow eps 2) x))","(*.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 x eps)) eps)","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (/ 1 eps))))","(fma.f64 (*.f64 #s(literal 4/3 binary64) (fma.f64 x (/.f64 x eps) x)) (*.f64 eps eps) eps)","(* (pow eps 2) (+ (* 4/3 x) (+ (* 4/3 (/ (pow x 2) eps)) (+ (/ 1 eps) (/ x (pow eps 2))))))","(*.f64 (fma.f64 #s(literal 4/3 binary64) (fma.f64 x (/.f64 x eps) x) (+.f64 (/.f64 x (*.f64 eps eps)) (/.f64 #s(literal 1 binary64) eps))) (*.f64 eps eps))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) #s(literal 1/3 binary64)))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (+.f64 #s(literal 1 binary64) (*.f64 (+.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 (sin.f64 x) (*.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) eps)) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) #s(literal 1/3 binary64)))) (*.f64 eps eps))) eps)","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) #s(literal 1/3 binary64)))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(+.f64 #s(literal 1 binary64) (*.f64 (+.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 (sin.f64 x) (*.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) eps)) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) #s(literal 1/3 binary64)))) (*.f64 eps eps)))","(* eps (+ 1 (/ x eps)))","(fma.f64 (/.f64 x eps) eps eps)","(* eps (+ 4/3 (* 4/3 (/ x eps))))","(*.f64 (fma.f64 (/.f64 x eps) #s(literal 4/3 binary64) #s(literal 4/3 binary64)) eps)","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(/ -1 (* (cos x) (cos (- x (* -1 eps)))))","(/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(* -1 (sin (neg (* -1 eps))))","(neg.f64 (sin.f64 eps))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps)","(* -1 (* eps (+ (* -1 x) (* -1 (/ (+ 1 (pow x 2)) eps)))))","(*.f64 (+.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) eps) x) eps)","(* (pow eps 2) (+ (* -1 (/ (+ (* -1 (+ 1 (* 4/3 (pow x 2)))) (* -1 (/ x eps))) eps)) (* 4/3 x)))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) x (/.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) x (+.f64 (/.f64 x eps) #s(literal 1 binary64))) eps)) eps) eps)","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) #s(literal 1/3 binary64)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 (sin.f64 x) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 x))) (/.f64 #s(literal 1 binary64) eps)) eps) (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (-.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps))) (*.f64 eps eps))","(* -1 (* (cos x) (cos (- x (* -1 eps)))))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(fma.f64 (/.f64 (neg.f64 x) eps) (neg.f64 eps) eps)","(* -1 (* eps (- (* -4/3 (/ x eps)) 4/3)))","(*.f64 (fma.f64 (/.f64 x eps) #s(literal -4/3 binary64) #s(literal -4/3 binary64)) (neg.f64 eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":329.0419921875,"type":"simplify"},{"count":[[22,393]],"egraph":[[0,8418,397,0.090960021],[2,4144,412,0.044209756],[1,450,418,0.015688391],[0,98,518,0.002654507],[0,68,541,0.000576358]],"inputs":[["(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(+.f64 #s(literal 0 binary64) eps)","(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))","(neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))","(fma.f64 (+.f64 x eps) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","(*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","(+.f64 x eps)","(*.f64 #s(literal 4/3 binary64) (+.f64 x eps))"]],"memory":[[9517856,54815888]],"outputs":[["(*.f64 (/.f64 (sin.f64 eps) (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x)))) #s(literal 2 binary64))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) #s(literal -1 binary64)) (sin.f64 eps))","(*.f64 (/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 (+.f64 x eps))) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 eps) (neg.f64 (cos.f64 x))))","(*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (sin.f64 eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))) (pow.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))) (sin.f64 eps))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))","(*.f64 (neg.f64 (sin.f64 eps)) (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(*.f64 (sin.f64 eps) (neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))))","(*.f64 (sin.f64 eps) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))))","(pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (cos.f64 x) (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(/.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))) (neg.f64 (cos.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(/.f64 (*.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64))) (neg.f64 (cos.f64 x)))","(/.f64 (*.f64 (neg.f64 (sin.f64 eps)) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (neg.f64 (tan.f64 x)) #s(literal 2 binary64))) (-.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (neg.f64 (tan.f64 x)) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x))))))","(/.f64 (/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 x))) (cos.f64 (+.f64 x eps)))","(/.f64 (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 (+.f64 x eps))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(/.f64 (neg.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps)))) (neg.f64 (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) (sin.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) (cos.f64 x)))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (sin.f64 eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 x eps)))","(fma.f64 (sin.f64 (+.f64 x eps)) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))) (/.f64 (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(-.f64 (/.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) (/.f64 (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps))) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))","(+.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x)))","(*.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(pow.f64 (/.f64 (+.f64 (+.f64 x eps) x) (*.f64 (+.f64 (+.f64 x eps) x) eps)) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 eps #s(literal 1 binary64))","(/.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)))","(/.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (pow.f64 (neg.f64 x) #s(literal 2 binary64))) (-.f64 (+.f64 x eps) (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (neg.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 x eps) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps)) (neg.f64 (+.f64 (+.f64 x eps) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 eps eps))) (neg.f64 (neg.f64 eps)))","(/.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (+.f64 (+.f64 x eps) x))","(/.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 eps))","(/.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))))","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 x eps) x) (*.f64 (+.f64 (+.f64 x eps) x) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal -1 binary64)))","(fma.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) x (+.f64 x eps))","(-.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (+.f64 (+.f64 x eps) x)) (/.f64 (*.f64 x x) (+.f64 (+.f64 x eps) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps)) (/.f64 (*.f64 eps eps) (neg.f64 eps)))","(-.f64 (+.f64 x eps) x)","(exp.f64 (-.f64 (*.f64 (log.f64 eps) #s(literal 3 binary64)) (*.f64 (log.f64 eps) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 1 binary64)))","(+.f64 (neg.f64 x) (+.f64 x eps))","(+.f64 (+.f64 x eps) (neg.f64 x))","(+.f64 x (-.f64 eps x))","(+.f64 eps #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) eps)","eps","(*.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 (cos.f64 (+.f64 x eps))) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 (cos.f64 (+.f64 x eps))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(pow.f64 (exp.f64 (log.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (neg.f64 (cos.f64 x)) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal -1 binary64))","(/.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) #s(literal -1 binary64)) (cos.f64 x))","(/.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps)))","(/.f64 (neg.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 x)) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))","(neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))))","(exp.f64 (*.f64 (log.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(*.f64 #s(literal -1 binary64) (sin.f64 eps))","(*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 eps)))","(*.f64 (neg.f64 (sin.f64 eps)) #s(literal 1 binary64))","(*.f64 (sin.f64 eps) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (sin.f64 eps)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 eps) (sin.f64 eps) (*.f64 #s(literal 0 binary64) (sin.f64 eps)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(neg.f64 (sin.f64 eps))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (*.f64 (cos.f64 (neg.f64 eps)) #s(literal 0 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64)) (neg.f64 (sin.f64 eps)))","(fma.f64 #s(literal -1 binary64) (sin.f64 eps) (*.f64 (cos.f64 (neg.f64 eps)) #s(literal 0 binary64)))","(fma.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 (neg.f64 eps)) #s(literal 0 binary64)))","(fma.f64 (neg.f64 (sin.f64 eps)) #s(literal 1 binary64) (*.f64 (cos.f64 (neg.f64 eps)) #s(literal 0 binary64)))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) (*.f64 (cos.f64 (neg.f64 eps)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (cos.f64 (neg.f64 eps)) (neg.f64 (sin.f64 eps)))","(sin.f64 (neg.f64 eps))","(-.f64 (-.f64 #s(literal 0 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(-.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(-.f64 (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 (neg.f64 eps)) #s(literal 0 binary64)))","(-.f64 #s(literal 0 binary64) (sin.f64 eps))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (neg.f64 eps))) (neg.f64 (sin.f64 eps)))","(+.f64 (neg.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64))) (neg.f64 (sin.f64 eps)))","(+.f64 (*.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64))) (neg.f64 (sin.f64 eps)))","(+.f64 (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 (neg.f64 eps)) #s(literal 0 binary64)))","(+.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps)","(*.f64 eps #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))))","(fma.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) #s(literal 0 binary64) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","(fma.f64 eps #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))))","(fma.f64 eps #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) #s(literal 0 binary64)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps) (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))))","(+.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) #s(literal 0 binary64)))","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps)","(*.f64 eps #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))))","(fma.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) #s(literal 0 binary64) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","(fma.f64 eps #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))))","(fma.f64 eps #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) #s(literal 0 binary64)))","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (+.f64 x eps) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 x eps) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (+.f64 x eps) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 x eps) x)) (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (+.f64 x eps) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (+.f64 x eps) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 x eps) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (+.f64 x eps) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) (*.f64 (+.f64 x eps) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 x eps) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 x eps) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 x eps) x)) (+.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (+.f64 x eps) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (+.f64 x eps) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (+.f64 x eps) x #s(literal 1 binary64))","(fma.f64 x (*.f64 (+.f64 x eps) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (+.f64 x eps) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x eps) x) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 x eps) x) #s(literal 2 binary64)) (fma.f64 (+.f64 x eps) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (+.f64 x eps) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (+.f64 x eps) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (+.f64 x eps) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps (neg.f64 x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64))) (-.f64 x (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) (*.f64 x eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps (neg.f64 x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x)","(fma.f64 eps (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) x)","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps (neg.f64 x))))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps) x)","(+.f64 x (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","(*.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) #s(literal 0 binary64)))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) #s(literal 0 binary64) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) #s(literal 0 binary64)))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) (+.f64 x eps) #s(literal 1 binary64)) eps x) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 eps eps))) #s(literal -1 binary64)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 (neg.f64 eps) (pow.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 eps (cos.f64 x)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps)","(*.f64 #s(literal 1 binary64) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 eps (pow.f64 (cos.f64 x) #s(literal -2 binary64)))","(pow.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (cos.f64 x) #s(literal -2 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal -2 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(/.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (*.f64 (neg.f64 eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (/.f64 eps (cos.f64 x)) (cos.f64 x))","(/.f64 (neg.f64 eps) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (neg.f64 eps)))","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(neg.f64 (/.f64 (neg.f64 eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(neg.f64 (/.f64 eps (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (cos.f64 x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (cos.f64 x)))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(/.f64 (+.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(exp.f64 (+.f64 (log.f64 (cos.f64 x)) (log.f64 (cos.f64 x))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))","(pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(exp.f64 (log.f64 (cos.f64 x)))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(*.f64 (*.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (cos.f64 x))","(*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(*.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal 1 binary64))","(*.f64 (neg.f64 (cos.f64 x)) (/.f64 (cos.f64 (+.f64 x eps)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(*.f64 (cos.f64 x) (neg.f64 (cos.f64 (+.f64 x eps))))","(*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","(pow.f64 (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal 1 binary64))","(/.f64 (neg.f64 (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x)))) #s(literal 2 binary64))","(/.f64 (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x))) #s(literal -2 binary64))","(/.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))) #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(neg.f64 (/.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))) #s(literal 1 binary64)))","(neg.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(-.f64 #s(literal 0 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))) #s(literal -1 binary64))))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 eps x) (*.f64 (+.f64 x eps) (-.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 x eps) (*.f64 (+.f64 x eps) (-.f64 x eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 eps x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (+.f64 x eps) (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x eps) (*.f64 (+.f64 x eps) (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) x)","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) x)","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (+.f64 #s(literal 0 binary64) x))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) x)","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(+.f64 (+.f64 x #s(literal 0 binary64)) eps)","(+.f64 (+.f64 x eps) #s(literal 0 binary64))","(+.f64 x eps)","(+.f64 eps (+.f64 #s(literal 0 binary64) x))","(+.f64 eps x)","(+.f64 #s(literal 0 binary64) (+.f64 x eps))","(*.f64 (+.f64 x eps) #s(literal 4/3 binary64))","(*.f64 #s(literal 4/3 binary64) (+.f64 x eps))","(/.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) #s(literal 4/3 binary64)) (-.f64 eps x))","(/.f64 (*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) #s(literal 4/3 binary64)) (-.f64 x eps))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 4/3 binary64)) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 4/3 binary64)) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 (+.f64 x eps) (-.f64 eps x))) (-.f64 eps x))","(/.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 (+.f64 x eps) (-.f64 x eps))) (-.f64 x eps))","(/.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/3 binary64) x) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 4/3 binary64) eps) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 4/3 binary64) x) (*.f64 #s(literal 4/3 binary64) eps)))","(/.f64 (fma.f64 #s(literal 64/27 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 64/27 binary64) (pow.f64 eps #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 4/3 binary64) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 4/3 binary64) eps) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4/3 binary64) x) (*.f64 #s(literal 4/3 binary64) eps)))))","(fma.f64 #s(literal 4/3 binary64) x (*.f64 #s(literal 4/3 binary64) eps))","(fma.f64 #s(literal 4/3 binary64) eps (*.f64 #s(literal 4/3 binary64) x))","(fma.f64 x #s(literal 4/3 binary64) (*.f64 #s(literal 4/3 binary64) eps))","(fma.f64 eps #s(literal 4/3 binary64) (*.f64 #s(literal 4/3 binary64) x))","(+.f64 (*.f64 #s(literal 4/3 binary64) eps) (*.f64 #s(literal 4/3 binary64) x))","(+.f64 (*.f64 #s(literal 4/3 binary64) x) (*.f64 #s(literal 4/3 binary64) eps))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":287.421875,"type":"rewrite"},{"compiler":[[31533,2904]],"memory":[[-1179600,62983392]],"time":94.400146484375,"type":"eval"},{"alts":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",24.61062264534191,"binary64"],["(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","done",41.61666065167192,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) (neg.f64 (sin.f64 eps)))","fresh",0.00390625,"binary64"],["(*.f64 #s(approx (neg (sin (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","fresh",0.0078125,"binary64"],["(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","fresh",0.07352411117764132,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))","fresh",0.21724785736669555,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","fresh",0.23981773121244893,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","fresh",0.25996618338967437,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","fresh",0.2918843595153193,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","fresh",0.41887826234695397,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","fresh",0.3022605043018489,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","fresh",0.42831403743536867,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","done",0.42835406579199325,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","done",0.6641487035915719,"binary64"]],"compiler":[[1339,258],[7,6],[17,11],[13,11],[25,20],[19,16],[38,22],[25,17],[38,22],[33,20],[27,17],[35,19],[28,17],[39,24],[34,22]],"count":[[646,14]],"kept":[{"done":[3,2],"fresh":[6,0],"new":[632,10],"picked":[5,2]}],"memory":[[-7407968,32956960]],"min-error":[[0.0,"binary64"]],"time":50.923828125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1,"binary64"],["eps",0.00390625,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.00390625,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[36,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(approx (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (neg.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) (neg.f64 (sin.f64 eps)))","(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))"]],"memory":[[-2195952,14420016]],"oracle":[43.19452748533294],"outputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))"]],"repr":["binary64"],"time":24.545166015625,"times":[[7.27392578125,"x"],[7.833984375,"eps"],[7.2451171875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1,"binary64"],["eps",0.0078125,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.0078125,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[26,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(approx (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (neg.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))"]],"memory":[[3388688,11557424]],"oracle":[42.61008172411376],"outputs":[["(*.f64 #s(approx (neg (sin (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))"]],"repr":["binary64"],"time":17.826904296875,"times":[[5.485107421875,"x"],[5.31201171875,"eps"],[5.39892578125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.07352411117764132],"baseline":[0.07352411117764132],"branch":[["x",0.07352411117764132,1,"binary64"],["eps",0.07352411117764132,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.07352411117764132,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[23,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(approx (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (neg.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(-.f64 (tan.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))) (tan.f64 x))"]],"memory":[[2479088,10633440]],"oracle":[42.610081723433844],"outputs":[["(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))"]],"repr":["binary64"],"time":16.531005859375,"times":[[4.838134765625,"x"],[5.293212890625,"eps"],[4.93701171875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.21724785736669555],"baseline":[0.21724785736669555],"branch":[["x",0.21724785736669555,1,"binary64"],["eps",0.21724785736669555,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.21724785736669555,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[21,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(approx (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (neg.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))"]],"memory":[[1473600,10119472]],"oracle":[42.04911348893894],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))"]],"repr":["binary64"],"time":15.5830078125,"times":[[4.516845703125,"x"],[4.531982421875,"eps"],[5.083984375,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.23981773121244895],"baseline":[0.23981773121244893],"branch":[["x",0.23981773121244893,1,"binary64"],["eps",0.23981773121244895,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.23981773121244895,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[17,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(approx (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (neg.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))"]],"memory":[[-7673440,8923456]],"oracle":[29.243382120782535],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))"]],"repr":["binary64"],"time":13.111083984375,"times":[[3.864990234375,"x"],[3.875,"eps"],[3.861083984375,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.25996618338967437],"baseline":[0.25996618338967437],"branch":[["x",0.25996618338967437,1,"binary64"],["eps",0.25996618338967437,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.25996618338967437,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[16,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(approx (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 x eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (neg.f64 eps)))"]],"memory":[[508304,8737104]],"oracle":[29.243382120782535],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))"]],"repr":["binary64"],"time":12.171875,"times":[[3.577880859375,"x"],[3.64990234375,"eps"],[3.626953125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.2918843595153194],"baseline":[0.2918843595153193],"branch":[["x",0.2918843595153193,1,"binary64"],["eps",0.2918843595153194,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.2918843595153194,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[13,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(approx (+ (* (* 4/3 eps) x) (+ (* 4/3 (* eps eps)) 1)) (fma.f64 #s(literal 4/3 binary64) (*.f64 x eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (+.f64 x eps)) x #s(literal 1 binary64)) eps x) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))"]],"memory":[[-1152416,7819920]],"oracle":[0.6641489130732188],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))"]],"repr":["binary64"],"time":10.81298828125,"times":[[3.1640625,"x"],[3.1259765625,"eps"],[3.2861328125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.3022605043018489],"baseline":[0.3022605043018489],"branch":[["x",0.3022605043018489,1,"binary64"],["eps",0.3022605043018489,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.3022605043018489,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[9,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) x #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))"]],"memory":[[6749568,6749568]],"oracle":[0.6641489130732188],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))"]],"repr":["binary64"],"time":8.031005859375,"times":[[2.350830078125,"x"],[2.406982421875,"eps"],[2.471923828125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.41887826234695397],"baseline":[0.41887826234695397],"branch":[["x",0.418878262346954,1,"binary64"],["eps",0.41887826234695397,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.41887826234695397,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[7,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))"]],"memory":[[-1896464,6311808]],"oracle":[0.6641489130732188],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))"]],"repr":["binary64"],"time":7.2880859375,"times":[[2.177001953125,"x"],[2.089111328125,"eps"],[2.296875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.42831403743536867],"baseline":[0.42831403743536867],"branch":[["x",0.42831403743536867,1,"binary64"],["eps",0.42831403743536867,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.42831403743536867,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[6,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 x eps) x #s(literal 1 binary64))) eps))"]],"memory":[[-2304784,5983856]],"oracle":[0.6641489130732188],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))"]],"repr":["binary64"],"time":6.9970703125,"times":[[2.09912109375,"x"],[2.133056640625,"eps"],[2.030029296875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.6641487035915717],"baseline":[0.6641487035915719],"branch":[["x",0.6641487035915717,1,"binary64"],["eps",0.6641487035915719,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.6641487035915719,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[2,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps x) eps eps)))"]],"link":["."],"memory":[[4925600,4925600]],"name":["2tan (problem 3.3.2)"],"oracle":[0.6641489130732188],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))"]],"repr":["binary64"],"time":5.843017578125,"times":[[1.4990234375,"x"],[1.438232421875,"eps"],[2.174072265625,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"egraph":[[5,5401,310,0.024212439],[4,2809,310,0.01997545],[3,723,312,0.01138549],[2,285,312,0.003848902],[1,160,312,0.002298637],[0,108,340,0.001817266]],"inputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))"]],"memory":[[-6188832,12719552]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))","(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))"]],"stop":[["node limit",1]],"time":99.516845703125,"type":"simplify"},{"compiler":[[342,109]],"memory":[[2517152,2517152]],"stop":[["fuel",1]],"time":3.510009765625,"type":"soundness"},{"compiler":[[342,109],[342,109],[9,6],[9,6],[7,6],[7,6]],"memory":[[1585008,42260432]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[]],"time":66.9580078125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02197265625,"type":"end"}]