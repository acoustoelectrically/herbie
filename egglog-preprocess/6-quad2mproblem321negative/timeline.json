[{"memory":[[16416,16416]],"time":0.031982421875,"type":"start"},{"compiler":[[15,12]],"memory":[[18544,37423968]],"method":["search"],"sampling":[[12,{"invalid":0.15065800012661157,"precondition":0.0014641286106780171,"unknown":0.24232047269555324,"valid":0.6055573985671572}],[11,{"invalid":0.12969264735818342,"precondition":0.0014641286106780171,"unknown":0.28181334651515044,"valid":0.5870298775159881}],[10,{"invalid":0.11116512630701436,"precondition":0.0014641286106780171,"unknown":0.3529980326591158,"valid":0.5343727124231918}],[9,{"invalid":0.08191114569990532,"precondition":0.0014641286106780171,"unknown":0.4173567899947557,"valid":0.499267935694661}],[8,{"invalid":0.054607430466603546,"precondition":0.0014641286106780171,"unknown":0.4602626282185156,"valid":0.48366581270420284}],[7,{"invalid":0.04680636897137447,"precondition":0.0014641286106780171,"unknown":0.5460743046660355,"valid":0.40565519775191206}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":155.2119140625,"type":"analyze"},{"bogosity":[{"infinite":0.060299137431909136,"invalid":0.25550650028806554,"precondition":0.0014641286106780171,"valid":0.6827302336693474}],"memory":[[10661152,380167120]],"mixsample":[[7.098876953125,"ival-sub",1200],[69.55419921875,"adjust",800],[128.731201171875,"ival-div",0],[0.15869140625,"ival-sub",4800],[5.7529296875,"ival-mult",1200],[0.019287109375,"ival-div",400],[2.82958984375,"ival-sub",1600],[5.11376953125,"ival-assert",0],[0.017578125,"ival-sub",3600],[12.914794921875,"ival-sqrt",1200],[142.3056640625,"ival-sub",0],[0.348388671875,"ival-sqrt",4800],[89.158447265625,"ival-sqrt",0],[5.232421875,"ival-sub",400],[0.010986328125,"ival-sqrt",2800],[6.895263671875,"ival-mult",800],[0.5615234375,"ival-sub",4400],[6.988525390625,"ival-sub",800],[0.705078125,"ival-mult",1600],[2.98388671875,"adjust",2800],[0.060302734375,"ival-sqrt",3600],[0.302001953125,"ival-sub",4000],[7.402587890625,"ival-sqrt",400],[6.16162109375,"ival-sqrt",2000],[10.925537109375,"ival-sqrt",800],[3.31494140625,"ival-sub",2000],[0.1689453125,"ival-mult",2000],[0.83642578125,"ival-sqrt",4000],[1.443115234375,"ival-sqrt",4400],[25.317626953125,"adjust",2000],[4.802734375,"ival-sub",2400],[6.3330078125,"ival-mult",400],[168.130859375,"ival-mult",0],[5.267822265625,"ival-sqrt",1600],[0.026123046875,"ival-div",800],[6.755859375,"ival-sqrt",2400],[9.360595703125,"ival-true",0],[0.005126953125,"ival-sub",2800],[60.083740234375,"ival-neg",0]],"outcomes":[[224.5869140625,1,"valid",1337],[290.59033203125,2,"valid",1196],[106.87255859375,0,"invalid",1165],[56.279541015625,3,"valid",179],[493.03466796875,0,"valid",5544]],"time":1649.99609375,"type":"sample"},{"compiler":[[13,10],[52,12],[52,12]],"confusion":[[117,0,19,120]],"explanations":[["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","uflow-rescue",2,0,[["(*.f64 b_2 b_2)","underflow",36],["(*.f64 a c)","underflow",42],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",2]],[[1,2]]],["-.f64","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","nan-rescue",4,0,[["(*.f64 b_2 b_2)","overflow",78],["(*.f64 a c)","overflow",19]],[[1,2,1]]],["/.f64","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","u/n",18,0,[["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","underflow",29],["(*.f64 b_2 b_2)","underflow",36],["(*.f64 a c)","underflow",42],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",2]],[[]]],["-.f64","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cancellation",53,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","oflow-rescue",90,0,[["(*.f64 b_2 b_2)","overflow",78],["(*.f64 a c)","overflow",19],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","overflow",90]],[[1,2]]]],"fperrors":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))",4,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))",92,0,false,0,false],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",19,0,false,1,[2.2368647076069813e-140,-3.752371616799445e+255,2.408327416764165e+77]],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))",53,0,false,0,false],["(*.f64 b_2 b_2)",0,0,false,0,false],["a",0,0,false,0,false],["(neg.f64 b_2)",0,0,false,0,false],["b_2",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["c",0,0,false,0,false]],"freqs":[[3,3],[2,25],[1,108],[0,120]],"maybe-confusion":[[117,0,0,19,0,120]],"memory":[[6529984,66049872]],"mixsample":[[0.332763671875,"ival-sub",1200],[0.01904296875,"ival-sub",4800],[6.394287109375,"ival-div",0],[3.52490234375,"adjust",800],[0.259765625,"ival-sqrt",2000],[0.195068359375,"ival-mult",1200],[0.193603515625,"ival-sub",1600],[0.499755859375,"ival-sqrt",800],[0.142822265625,"ival-sub",2000],[0.212890625,"ival-assert",0],[0.02392578125,"ival-sqrt",4000],[0.050048828125,"ival-sqrt",4800],[6.96435546875,"ival-sub",0],[0.553466796875,"ival-sqrt",1200],[0.294677734375,"ival-sub",400],[4.186279296875,"ival-sqrt",0],[0.139404296875,"ival-sqrt",4400],[1.343017578125,"adjust",2000],[0.208740234375,"ival-sub",2400],[0.26904296875,"ival-mult",800],[0.05810546875,"ival-sub",4400],[0.244384765625,"ival-mult",400],[0.291259765625,"ival-sub",800],[8.055908203125,"ival-mult",0],[0.312255859375,"ival-sqrt",1600],[0.029052734375,"ival-mult",1600],[0.230224609375,"adjust",2800],[0.41455078125,"ival-sqrt",2400],[0.5673828125,"ival-true",0],[0.011962890625,"ival-sub",4000],[0.468994140625,"ival-sqrt",400],[2.4267578125,"ival-neg",0]],"outcomes":[[11.290771484375,1,"valid",70],[17.73388671875,2,"valid",72],[4.65771484375,3,"valid",16],[30.256591796875,0,"valid",354]],"time":149.462890625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,10]],"egraph":[[0,866,13,0.003460409],[10,866,13,0.005231582],[9,865,13,0.00660974],[8,848,13,0.006404317],[7,743,13,0.005647072],[6,620,13,0.007822817],[5,356,13,0.004329255],[4,200,13,0.001889562],[3,121,13,0.000993084],[2,59,13,0.000680535],[1,32,13,0.000284928],[0,17,13,0.000254912],[0,10,13,0.000147011]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[-5906704,18177024]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)))) a)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":269.337158203125,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.077880859375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",27.74883149638816,"binary64"]],"compiler":[[13,10]],"memory":[[339248,339248]],"time":0.72314453125,"type":"prune"},{"egraph":[[0,866,50,0.002630064],[10,866,50,0.005097037],[9,865,50,0.005154184],[8,848,50,0.005754094],[7,743,50,0.006327253],[6,620,50,0.005703569],[5,356,50,0.003355338],[4,200,50,0.001778649],[3,121,50,0.000811004],[2,59,50,0.00061171],[1,32,50,0.000264444],[0,17,50,0.000215982],[0,10,50,0.000129592]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"locations":[["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0]],"memory":[[2234336,2234336]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","(*.f64 c a)","a","c"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":48.169921875,"type":"simplify"},{"compiler":[[52,12]],"locations":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.7968750000000001],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",4.375691862663326],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",11.793051838088276],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.41609059268961]],"memory":[[3903216,13194160]],"mixsample":[[0.145751953125,"ival-sub",1200],[0.01416015625,"ival-sub",4800],[3.067138671875,"ival-div",0],[1.703125,"adjust",800],[0.12109375,"ival-sqrt",2000],[0.15087890625,"ival-mult",1200],[0.083984375,"ival-sub",1600],[0.237548828125,"ival-sqrt",800],[0.0693359375,"ival-sub",2000],[0.123779296875,"ival-assert",0],[0.010986328125,"ival-sqrt",4000],[0.026123046875,"ival-sqrt",4800],[3.3349609375,"ival-sub",0],[0.26611328125,"ival-sqrt",1200],[0.149658203125,"ival-sub",400],[2.11767578125,"ival-sqrt",0],[0.06787109375,"ival-sqrt",4400],[0.704345703125,"adjust",2000],[0.116455078125,"ival-sub",2400],[0.123779296875,"ival-mult",800],[0.0302734375,"ival-sub",4400],[0.150634765625,"ival-mult",400],[0.185302734375,"ival-sub",800],[9.28955078125,"ival-mult",0],[0.14892578125,"ival-sqrt",1600],[0.01513671875,"ival-mult",1600],[0.193115234375,"adjust",2800],[0.213623046875,"ival-sqrt",2400],[0.20654296875,"ival-true",0],[0.006103515625,"ival-sub",4000],[0.23291015625,"ival-sqrt",400],[1.404052734375,"ival-neg",0]],"outcomes":[[5.62109375,1,"valid",35],[8.050048828125,2,"valid",36],[2.46337890625,3,"valid",8],[21.272216796875,0,"valid",177]],"time":47.055908203125,"type":"localize"},{"count":[[5,97]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-298928,7776480]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[4.433837890625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","-inf"],[2.918212890625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","inf"],[1.9541015625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","0"],[2.6689453125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","-inf"],[2.0380859375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","inf"],[3.14697265625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","0"],[3.071044921875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","-inf"],[2.81103515625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","inf"],[2.47412109375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","0"]],"time":27.93017578125,"type":"series"},{"count":[[97,96]],"egraph":[[0,8218,2554,0.135928232],[2,5611,2679,0.036884379],[1,1657,2699,0.020482836],[0,528,2732,0.006094632]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[5089440,49186992]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) b_2) (neg.f64 a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) a)) (neg.f64 a)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) a)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/2 binary64) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 2 binary64)))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) b_2) b_2)","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 (fma.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a)) c) #s(literal 1/2 binary64)))) (neg.f64 b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) c (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (*.f64 c (/.f64 (/.f64 c b_2) b_2)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) c) a) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (-.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a)) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (/.f64 (neg.f64 b_2) a)) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) (neg.f64 c)) (/.f64 b_2 a)) c)) c)","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) c)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":323.803955078125,"type":"simplify"},{"count":[[5,428]],"egraph":[[0,8305,38,0.06174245],[3,6590,38,0.042147367],[2,503,38,0.026307012],[1,68,41,0.002665991],[0,17,41,0.001202274],[0,10,41,0.000127631]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-1533424,49708480]],"outputs":[["(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a))) (/.f64 a (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(*.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))))","(*.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (/.f64 #s(literal 1 binary64) (*.f64 a a)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) a))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64))","(*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) a) a)","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) a)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal -1 binary64) a)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) a)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 a #s(literal -1 binary64))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a)))) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (*.f64 a a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64)) (neg.f64 a))","(/.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)) (*.f64 (/.f64 b_2 a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a)))) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (neg.f64 (*.f64 a a)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (neg.f64 a) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 a (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 b_2 (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (/.f64 a b_2) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 a b_2) #s(literal 1 binary64))) (*.f64 (/.f64 a b_2) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 a (*.f64 (/.f64 a b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 a b_2) a))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 b_2 (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a) (*.f64 a (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a))) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 9/2 binary64))) (*.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(/.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (neg.f64 a) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","(/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (neg.f64 a)))","(/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a a) (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (neg.f64 a) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 b_2 a))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)) (/.f64 b_2 a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 b_2 a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 (/.f64 b_2 a) #s(literal -1 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 (/.f64 b_2 a) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 (/.f64 b_2 a) #s(literal -1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 (/.f64 b_2 a) #s(literal 1 binary64) (*.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a) (/.f64 b_2 a))","(fma.f64 b_2 (*.f64 #s(literal -1 binary64) (pow.f64 a #s(literal -1 binary64))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 b_2 (*.f64 #s(literal -1 binary64) (pow.f64 a #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 b_2 (*.f64 #s(literal -1 binary64) (pow.f64 a #s(literal -1 binary64))) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 b_2 (/.f64 #s(literal -1 binary64) a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 b_2 (/.f64 #s(literal -1 binary64) a) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 b_2 (/.f64 #s(literal -1 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(-.f64 (/.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(-.f64 (/.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))) (/.f64 (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 a b_2) (*.f64 a a)) (/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a a)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) a) (/.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(-.f64 (/.f64 b_2 a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 b_2 a) #s(literal 1 binary64)) (*.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 b_2 a))","(+.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 b_2 a))","(+.f64 (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(+.f64 (/.f64 b_2 a) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(+.f64 (/.f64 b_2 a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))","(*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(*.f64 #s(literal 1 binary64) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))) (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 9/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (fma.f64 b_2 (/.f64 b_2 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))) (*.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (fma.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 b_2 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))) (*.f64 b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))) (*.f64 b_2 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) (*.f64 b_2 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 9/2 binary64))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (neg.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64)))","(neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) b_2)","(fma.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) b_2)","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) b_2)","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 #s(literal 1 binary64) b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b_2 b_2)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64) b_2)","(fma.f64 (*.f64 b_2 b_2) (/.f64 b_2 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 b_2 (/.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 b_2 (/.f64 b_2 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 b_2 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(-.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2)","(-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) b_2)","(+.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(+.f64 #s(literal 0 binary64) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(+.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2)","(+.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 #s(literal 1 binary64) b_2)","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b_2 b_2)))","(*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) b_2))","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 1 binary64))","(pow.f64 b_2 #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 b_2 b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 b_2 b_2))","(/.f64 (*.f64 b_2 b_2) b_2)","(neg.f64 b_2)","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b_2 b_2)) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) b_2) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(exp.f64 (*.f64 (log.f64 b_2) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b_2)","(+.f64 b_2 #s(literal 0 binary64))","b_2","(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(neg.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fabs.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 8 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(pow.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 2 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)))","(/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64)))))","(/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 a b_2) c) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 8 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 c #s(literal -1 binary64)) a (*.f64 b_2 b_2))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 a) c))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 c a) (*.f64 b_2 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (/.f64 (*.f64 b_2 b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(fma.f64 (*.f64 c a) #s(literal -1 binary64) (*.f64 b_2 b_2))","(fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))","(fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))","(fma.f64 (*.f64 b_2 b_2) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 a) c))","(fma.f64 b_2 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 a) c))","(sqrt.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(fabs.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(hypot.f64 (pow.f64 (*.f64 c a) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 c a) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 c a) #s(literal 1 binary64)))","(hypot.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(hypot.f64 (*.f64 b_2 b_2) (*.f64 c a))","(exp.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":277.058837890625,"type":"rewrite"},{"compiler":[[16974,2054]],"memory":[[3776224,40804512]],"time":69.468994140625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","fresh",48.60766868435266,"binary64"],["(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","fresh",45.47788298643302,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",27.74883149638816,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","next",39.36096555649101,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","next",46.11299943090606,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))) a)","next",58.52236905223447,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) c (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (*.f64 c (/.f64 (/.f64 c b_2) b_2)))) (neg.f64 b_2))) a)","fresh",50.17883675055312,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",48.42733705503734,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","fresh",41.65449572384108,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","fresh",45.527277301940245,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","next",45.484308551940245,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","fresh",41.724199488437485,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","fresh",45.595490426188974,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","fresh",41.653400057440734,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","next",42.446926045236616,"binary64"]],"compiler":[[22,11],[22,11],[13,10],[18,13],[17,12],[27,18],[35,23],[21,15],[17,13],[14,11],[14,11],[24,17],[31,21],[19,14],[19,14],[22,11],[22,11],[18,13],[17,12],[27,18],[35,23],[21,15],[17,13],[14,11],[14,11],[24,17],[31,21],[19,14],[19,14]],"count":[[522,15]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[521,14],"picked":[1,1]}],"memory":[[-24120624,25426064]],"min-error":[[3.654278382914312,"binary64"]],"time":56.91015625,"type":"prune"},{"egraph":[[0,8075,318,0.038848906],[9,7835,318,0.034411922],[8,7799,318,0.031093194],[7,7707,318,0.031441281],[6,7301,318,0.031246392],[5,5812,318,0.039956107],[4,2814,318,0.038527359],[3,848,334,0.012785403],[2,281,335,0.003233853],[1,126,335,0.001083971],[0,67,336,0.000620616],[0,41,336,0.000407983]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","#s(literal -1/2 binary64)","(/.f64 c b_2)","c","b_2","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","a","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","a","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","b_2","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))))","(neg.f64 b_2)","b_2","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))","(*.f64 (/.f64 (/.f64 c b_2) b_2) a)","(/.f64 (/.f64 c b_2) b_2)","(/.f64 c b_2)","c","a","#s(literal -1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))) a)","cost-diff",0],["(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","cost-diff",4],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","cost-diff",0],["(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","cost-diff",0],["(/.f64 #s(literal -1 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","cost-diff",2],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","cost-diff",0],["(/.f64 c b_2)","cost-diff",0],["(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","cost-diff",0]],"memory":[[547712,15750992]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) (neg.f64 a))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(/.f64 c b_2)","c","b_2","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) (neg.f64 a))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","a","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","a","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","b_2","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c b_2)))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))))","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c b_2))))","(neg.f64 b_2)","b_2","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c b_2)))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(neg.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c b_2))","(fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))","(*.f64 (/.f64 (/.f64 c b_2) b_2) a)","(/.f64 (/.f64 c b_2) b_2)","(/.f64 c b_2)","c","a","#s(literal -1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":333.25,"type":"simplify"},{"compiler":[[261,31]],"locations":[["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))) a)","accuracy",0.0546875],["(*.f64 (/.f64 (/.f64 c b_2) b_2) a)","accuracy",1.7158518020068139],["(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","accuracy",5.179420805770781],["#s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","accuracy",21.732598940150577],["(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","accuracy",0.00390625],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","accuracy",0.0859375],["(fma.f64 c a (*.f64 b_2 b_2))","accuracy",0.24999724760556022],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","accuracy",3.55576681637499],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","accuracy",0.00390625],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","accuracy",0.0546875],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","accuracy",3.551860566375087],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","accuracy",20.858127343800287],["(/.f64 c b_2)","accuracy",0.0],["(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","accuracy",0.0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","accuracy",21.70110953497288],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","accuracy",0.00390625],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","accuracy",0.0546875],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","accuracy",0.1833842746521898],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","accuracy",3.551860566375087]],"memory":[[-1013920,32565056]],"mixsample":[[8.96484375,"ival-div",0],[3.25634765625,"ival-add",0],[17.03271484375,"ival-mult",0],[0.1337890625,"ival-assert",0],[4.796875,"ival-sub",0],[0.31982421875,"ival-true",0],[4.0888671875,"ival-sqrt",0],[0.57568359375,"exact",0],[4.1181640625,"ival-neg",0]],"outcomes":[[68.176025390625,0,"invalid",166],[24.092041015625,0,"valid",90]],"time":124.8759765625,"type":"localize"},{"count":[[22,203]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal -1 binary64) a)","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(fma.f64 c a (*.f64 b_2 b_2))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 c b_2) b_2) a)"]],"memory":[[34912,16814512]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* -1 (/ (- (* b_2 (sqrt -1)) b_2) a))","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) a)","(/ -1 a)","(- (* b_2 (sqrt -1)) b_2)","(- (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))) b_2)","(- (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))) b_2)","(- (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))) b_2)","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(* -1 b_2)","(+ (* -1 b_2) (* 1/2 (/ (* a c) b_2)))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(+ (* a c) (pow b_2 2))","(/ (* a c) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 1/2 (/ (* a c) b_2))","(* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* a c)","(* a (+ c (/ (pow b_2 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(* -1 (* a (+ (* -1/2 (/ c b_2)) (/ b_2 a))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(* -1/2 (/ c b_2))","(/ c b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(/ (+ (* -1 (pow b_2 2)) (* 1/2 (* a c))) b_2)","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* -1 (/ (* b_2 (- (sqrt -1) 1)) a))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2)))))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* b_2 (- (sqrt -1) 1))","(* b_2 (- (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))) 1))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))) 1))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))) 1))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(/ (* b_2 (+ 1 (sqrt -1))) a)","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))))","(* -1 (* b_2 (+ 1 (sqrt -1))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* -1/2 (/ (* c (sqrt -1)) b_2)))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))))","(- (+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) b_2)","(- (+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5)))))))) b_2)","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ a (/ (pow b_2 2) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (pow (sqrt -1) 3)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(* -1 (* c (+ (* -1/2 (/ a b_2)) (/ b_2 c))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))"]],"series":[[7.49609375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (* (/ (/ c b_2) b_2) a))","c","-inf"],[3.76416015625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (* (/ (/ c b_2) b_2) a))","c","inf"],[3.35888671875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (* (/ (/ c b_2) b_2) a))","c","0"],[2.9560546875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (* (/ (/ c b_2) b_2) a))","b_2","-inf"],[3.81201171875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (* (/ (/ c b_2) b_2) a))","b_2","inf"],[6.907958984375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (* (/ (/ c b_2) b_2) a))","b_2","0"],[3.654052734375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (* (/ (/ c b_2) b_2) a))","a","-inf"],[7.5400390625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (* (/ (/ c b_2) b_2) a))","a","inf"],[6.10009765625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (* (/ (/ c b_2) b_2) a))","a","0"]],"time":52.330078125,"type":"series"},{"count":[[203,202]],"egraph":[[0,8806,5491,0.13802519],[1,2916,5738,0.036429912],[0,894,5826,0.011170665]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* -1 (/ (- (* b_2 (sqrt -1)) b_2) a))","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) a)","(/ -1 a)","(- (* b_2 (sqrt -1)) b_2)","(- (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))) b_2)","(- (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))) b_2)","(- (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))) b_2)","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(* -1 b_2)","(+ (* -1 b_2) (* 1/2 (/ (* a c) b_2)))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(+ (* a c) (pow b_2 2))","(/ (* a c) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 1/2 (/ (* a c) b_2))","(* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* a c)","(* a (+ c (/ (pow b_2 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(* -1 (* a (+ (* -1/2 (/ c b_2)) (/ b_2 a))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(* -1/2 (/ c b_2))","(/ c b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(/ (+ (* -1 (pow b_2 2)) (* 1/2 (* a c))) b_2)","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* -1 (/ (* b_2 (- (sqrt -1) 1)) a))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2)))))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* b_2 (- (sqrt -1) 1))","(* b_2 (- (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))) 1))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))) 1))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))) 1))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(/ (* b_2 (+ 1 (sqrt -1))) a)","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))))","(* -1 (* b_2 (+ 1 (sqrt -1))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* -1/2 (/ (* c (sqrt -1)) b_2)))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))))","(- (+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) b_2)","(- (+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5)))))))) b_2)","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ a (/ (pow b_2 2) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (pow (sqrt -1) 3)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(* -1 (* c (+ (* -1/2 (/ a b_2)) (/ b_2 c))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))"]],"memory":[[5629632,62758880]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal 1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 a #s(literal 1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(* -1 (/ (- (* b_2 (sqrt -1)) b_2) a))","(*.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) a)","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) b_2 (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal -1/2 binary64))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) a)","(/.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a (*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) b_2)) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) b_2 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a)) a)","(/ -1 a)","(/.f64 #s(literal -1 binary64) a)","(- (* b_2 (sqrt -1)) b_2)","(-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)","(- (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))) b_2)","(fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))","(- (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))) b_2)","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))","(- (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))) b_2)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))","(* b_2 (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(* -1 b_2)","(neg.f64 b_2)","(+ (* -1 b_2) (* 1/2 (/ (* a c) b_2)))","(fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64) (neg.f64 b_2))","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(+ (* a c) (pow b_2 2))","(fma.f64 c a (*.f64 b_2 b_2))","(/ (* a c) (pow b_2 2))","(*.f64 (/.f64 a b_2) (/.f64 c b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 b_2 a))))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* 1/2 (/ (* a c) b_2))","(*.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64))","(* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2))))","(*.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) a)) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* a c)","(*.f64 c a)","(* a (+ c (/ (pow b_2 2) a)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) b_2) (neg.f64 a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) a)) (neg.f64 a)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2) (neg.f64 a)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 a c)))) (neg.f64 a)) b_2) (neg.f64 a)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 b_2)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) #s(literal -1/8 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 a c)))) a)) (neg.f64 a)))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(neg.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a))))","(* -1 (* a (+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 b_2)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) #s(literal -1/8 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 a c)))) a)) (neg.f64 a))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (+ (* -1/2 (/ c b_2)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal -1/2 binary64) (/.f64 c b_2) (/.f64 b_2 a)))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(-.f64 (neg.f64 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/ c b_2)","(/.f64 c b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal 1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))) b_2 (/.f64 #s(literal 1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (*.f64 b_2 b_2) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))))) (*.f64 b_2 b_2) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(/ (+ (* -1 (pow b_2 2)) (* 1/2 (* a c))) b_2)","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) c (*.f64 (neg.f64 b_2) b_2)) b_2)","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(fma.f64 (*.f64 b_2 #s(literal -1/2 binary64)) (*.f64 (/.f64 a b_2) (/.f64 c b_2)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b_2 #s(literal 4 binary64)))) b_2 b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* -1 (/ (* b_2 (- (sqrt -1) 1)) a))","(*.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) a)) b_2)","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) a)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)) b_2)","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) a)) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)) b_2)","(* b_2 (- (sqrt -1) 1))","(-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)","(* b_2 (- (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))) 1))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (sqrt.f64 #s(literal -1 binary64))) b_2 (neg.f64 b_2))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))) 1))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1 binary64)) b_2)","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))) 1))","(fma.f64 (+.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64)))) b_2 (neg.f64 b_2))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (sqrt.f64 #s(literal -1 binary64)))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (+.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64)))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1))","(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (neg.f64 a) b_2) (/.f64 c b_2) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(*.f64 (*.f64 (fma.f64 a (/.f64 c (*.f64 b_2 b_2)) #s(literal 1 binary64)) b_2) b_2)","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c)))) (neg.f64 b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (neg.f64 b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(/ (* b_2 (+ 1 (sqrt -1))) a)","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 b_2) a)","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal -1 binary64)) a)))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) a)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) a)))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) a)) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) a)))","(* -1 (* b_2 (+ 1 (sqrt -1))))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 b_2))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (sqrt.f64 #s(literal -1 binary64))) b_2 b_2))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (sqrt.f64 #s(literal -1 binary64)))) b_2 b_2))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))))","(neg.f64 (fma.f64 (+.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64)))) b_2 b_2))","(* -1 (* b_2 (sqrt -1)))","(*.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) c) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* -1/2 (/ (* c (sqrt -1)) b_2)))","(fma.f64 (*.f64 c #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (*.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) #s(literal -1/2 binary64))) c (*.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))))","(fma.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) #s(literal -1/2 binary64))) c))","(- (+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) b_2)","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))","(- (+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5)))))))) b_2)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) (*.f64 c a))))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(*.f64 (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2))))","(*.f64 (fma.f64 (/.f64 a b_2) #s(literal 1/2 binary64) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* c (+ a (/ (pow b_2 2) c)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 c (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 (neg.f64 b_2) a)) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 c (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) (neg.f64 c)) (/.f64 b_2 a)) c)))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 c a)))) (neg.f64 c)) b_2) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(*.f64 (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(*.f64 c (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 b_2 a)) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(*.f64 c (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (-.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/8 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))))) c)) c)))","(* -1 (* c (+ (* (sqrt (/ a c)) (pow (sqrt -1) 3)) (/ b_2 c))))","(*.f64 (-.f64 (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/8 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 c a)))) (neg.f64 c)) b_2) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))) (neg.f64 c))","(* -1 (* c (+ (* -1/2 (/ a b_2)) (/ b_2 c))))","(*.f64 (fma.f64 (/.f64 a b_2) #s(literal -1/2 binary64) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":467.52392578125,"type":"simplify"},{"count":[[22,700]],"egraph":[[0,8370,277,0.103830855],[2,1946,277,0.054192123],[1,263,277,0.010707679],[0,67,278,0.002190984],[0,41,278,0.000691162]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal -1 binary64) a)","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(fma.f64 c a (*.f64 b_2 b_2))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 c b_2) b_2) a)"]],"memory":[[-1421456,70632336]],"outputs":[["(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a)) #s(literal 3 binary64))) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a)) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))) (*.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))))))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal -1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (neg.f64 (*.f64 a a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) a) (*.f64 (neg.f64 a) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 (/.f64 a (neg.f64 b_2)) #s(literal 1 binary64))) (*.f64 (/.f64 a (neg.f64 b_2)) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (neg.f64 b_2)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 (/.f64 a (neg.f64 b_2)) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (neg.f64 a)) (*.f64 a (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a)))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 3 binary64))) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) a))","(neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a)))","(fma.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a)))","(-.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))) (/.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))))) (/.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 3 binary64)) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) a) (/.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) a))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) a) (/.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) a))","(-.f64 (/.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a a)) (/.f64 (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (*.f64 a a)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 a)))","(-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a)))","(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (fma.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (fma.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 0 binary64) (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))))))","(neg.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (neg.f64 b_2) #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(-.f64 #s(literal 0 binary64) (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 #s(literal 1 binary64) (neg.f64 b_2))","(*.f64 #s(literal -1 binary64) (*.f64 b_2 #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 (neg.f64 b_2) #s(literal 1 binary64))","(*.f64 b_2 #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 0 binary64) (neg.f64 b_2)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(/.f64 (*.f64 (neg.f64 b_2) b_2) (+.f64 #s(literal 0 binary64) b_2))","(/.f64 (*.f64 b_2 b_2) (neg.f64 (+.f64 #s(literal 0 binary64) b_2)))","(neg.f64 (*.f64 #s(literal 1 binary64) b_2))","(neg.f64 (*.f64 b_2 #s(literal 1 binary64)))","(neg.f64 b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 #s(literal 0 binary64) b_2)))","(-.f64 #s(literal 0 binary64) b_2)","(+.f64 #s(literal 0 binary64) (neg.f64 b_2))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (neg.f64 c) #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) (neg.f64 b_2)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 b_2)) (/.f64 (neg.f64 c) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (neg.f64 c) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) (*.f64 b_2 #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 c) b_2) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 c) (*.f64 b_2 #s(literal 1 binary64))))","(*.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 c) b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 c (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 (neg.f64 c) #s(literal -1/2 binary64)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)","(/.f64 #s(literal 1/2 binary64) (neg.f64 (/.f64 b_2 c)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c))))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","(*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 c #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 c #s(literal 1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) c)","(*.f64 (neg.f64 c) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 c (*.f64 b_2 #s(literal 1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 c b_2))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 c) b_2))","(*.f64 c (pow.f64 b_2 #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 c) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) b_2)","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 c #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 c) (neg.f64 b_2))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b_2 c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 c))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b_2 c) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 c)))","(/.f64 c b_2)","(neg.f64 (/.f64 (neg.f64 c) b_2))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b_2)) (/.f64 (neg.f64 c) b_2))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a)) #s(literal 3 binary64))) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a)) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a))) (*.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a))))))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal -1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 a a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) a) (*.f64 (neg.f64 a) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 (/.f64 a (neg.f64 b_2)) #s(literal 1 binary64))) (*.f64 (/.f64 a (neg.f64 b_2)) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (neg.f64 b_2)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 (/.f64 a (neg.f64 b_2)) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (neg.f64 a)) (*.f64 a (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a)))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 3 binary64))) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a)))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) a))","(neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a)))","(fma.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a)))","(-.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a))) (/.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a))))) (/.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 3 binary64)) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) a) (/.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) a))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) a) (/.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) a))","(-.f64 (/.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a a)) (/.f64 (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (*.f64 a a)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 a)))","(-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) a)))","(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (fma.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (fma.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (*.f64 #s(literal 0 binary64) (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))))))","(neg.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (neg.f64 b_2) #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(-.f64 #s(literal 0 binary64) (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(pow.f64 (/.f64 a (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 b_2) (/.f64 #s(literal -1 binary64) a)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (-.f64 (*.f64 (*.f64 (neg.f64 b_2) (/.f64 #s(literal -1 binary64) a)) (*.f64 (neg.f64 b_2) (/.f64 #s(literal -1 binary64) a))) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (*.f64 (neg.f64 b_2) (/.f64 #s(literal -1 binary64) a))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2)) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2))) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 #s(literal -1 binary64) a))) (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) a))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))) (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 #s(literal -1 binary64) a)) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) a)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a) (*.f64 (neg.f64 b_2) (/.f64 #s(literal -1 binary64) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2)))","(-.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) (neg.f64 a)) (/.f64 b_2 (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a)) (/.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)) (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(-.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 b_2 (neg.f64 a)))","(+.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (*.f64 (neg.f64 b_2) (/.f64 #s(literal -1 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal -1 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (neg.f64 a) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal 1 binary64) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -1 binary64) a)","(neg.f64 (pow.f64 a #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 a)) #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) (fma.f64 b_2 b_2 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) b_2))))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (fma.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 b_2 b_2))) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2)))","(/.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2)))))","(/.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(fma.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 b_2))","(fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 b_2))","(fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 #s(literal 1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (neg.f64 b_2) #s(literal 1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))","(-.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))))","(-.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(-.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (-.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fabs.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(exp.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) #s(literal -1 binary64)) b_2)","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))","(*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(*.f64 b_2 (neg.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2) (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (neg.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)) b_2) #s(literal 3 binary64)))) (fma.f64 b_2 b_2 (-.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (neg.f64 b_2))) (neg.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) #s(literal 2 binary64)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) (neg.f64 b_2))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (neg.f64 b_2) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) (neg.f64 b_2))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (neg.f64 b_2)) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (neg.f64 b_2)) (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (neg.f64 b_2) (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 b_2) (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) (-.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) (neg.f64 b_2)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (neg.f64 b_2) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) (neg.f64 b_2)))))","(neg.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2))","(fma.f64 (*.f64 (neg.f64 b_2) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) #s(literal -1/2 binary64) (neg.f64 b_2))","(fma.f64 (*.f64 (neg.f64 b_2) (/.f64 (/.f64 c b_2) b_2)) (*.f64 #s(literal -1/2 binary64) a) (neg.f64 b_2))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a) (neg.f64 b_2))","(fma.f64 (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)) #s(literal -1 binary64)) b_2 (neg.f64 b_2))","(fma.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)) (neg.f64 b_2) (neg.f64 b_2))","(fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)))","(fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b_2)) (neg.f64 b_2))","(fma.f64 (/.f64 (/.f64 c b_2) b_2) (*.f64 (*.f64 #s(literal -1/2 binary64) a) (neg.f64 b_2)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)))","(fma.f64 #s(literal -1 binary64) b_2 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) (neg.f64 b_2)) (neg.f64 b_2))","(fma.f64 (neg.f64 b_2) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)) (neg.f64 b_2))","(fma.f64 (neg.f64 b_2) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)))","(fma.f64 b_2 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (-.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) (neg.f64 b_2))))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2))","(+.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (*.f64 (*.f64 (neg.f64 b_2) #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) a) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(*.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) a) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(*.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a)) #s(literal 3 binary64))) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (-.f64 (*.f64 (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a)) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a))) (*.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a))))))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) #s(literal -1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))) (neg.f64 (*.f64 a a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) a) (*.f64 (neg.f64 a) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (neg.f64 b_2)) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (*.f64 (/.f64 a (neg.f64 b_2)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (*.f64 (/.f64 a (neg.f64 b_2)) #s(literal 1 binary64))) (*.f64 (/.f64 a (neg.f64 b_2)) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (neg.f64 a)) (*.f64 a (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(/.f64 (-.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)))","(/.f64 (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a)))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 3 binary64))) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a)))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)))) (neg.f64 (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)))) (neg.f64 (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (neg.f64 a))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) a))","(neg.f64 (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (neg.f64 a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a)))","(fma.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a)))","(-.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a))) (/.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a))))) (/.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 3 binary64)) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a))))))","(-.f64 (/.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a a)) (/.f64 (*.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 a a)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) a) (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) a))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) a) (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (neg.f64 a)))","(-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) a)))","(*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (*.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (*.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 #s(literal 0 binary64) (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (neg.f64 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))) (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) (fma.f64 b_2 b_2 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))))))","(neg.f64 (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(fma.f64 #s(literal -1 binary64) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(fma.f64 (neg.f64 b_2) #s(literal 1 binary64) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))))","(-.f64 #s(literal 0 binary64) (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))))","(+.f64 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1 binary64))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(sqrt.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1 binary64))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(sqrt.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (*.f64 c a) (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 c a))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 c a))","(fma.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 #s(literal 1 binary64) b_2) (*.f64 c a))","(fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 b_2 #s(literal 1 binary64)) (*.f64 c a))","(fma.f64 #s(literal 1 binary64) (pow.f64 (*.f64 b_2 #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 c a))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 c a))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (*.f64 c a))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 c a))","(fma.f64 c a (*.f64 b_2 b_2))","(fma.f64 a c (*.f64 b_2 b_2))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 c a))","(fma.f64 b_2 b_2 (*.f64 c a))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(+.f64 (*.f64 c a) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 c a))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))","(*.f64 (/.f64 a (/.f64 b_2 (neg.f64 c))) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 a (/.f64 b_2 #s(literal 1 binary64))) (/.f64 c b_2))","(*.f64 (/.f64 a (/.f64 b_2 c)) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 a (*.f64 (neg.f64 b_2) #s(literal -1 binary64))) (/.f64 c b_2))","(*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) #s(literal 1 binary64)) (/.f64 a (neg.f64 b_2)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 b_2 (neg.f64 c))) (/.f64 a (neg.f64 b_2)))","(*.f64 (/.f64 c (*.f64 (neg.f64 b_2) #s(literal -1 binary64))) (/.f64 a b_2))","(*.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 a (*.f64 b_2 b_2)))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 a (*.f64 (neg.f64 b_2) b_2)))","(*.f64 (/.f64 a b_2) (/.f64 (/.f64 c b_2) #s(literal 1 binary64)))","(*.f64 (/.f64 a b_2) (/.f64 c b_2))","(*.f64 (/.f64 (/.f64 c b_2) #s(literal 1 binary64)) (/.f64 a (*.f64 b_2 #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 c b_2) #s(literal 1 binary64)) (/.f64 a b_2))","(*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) (neg.f64 a))","(*.f64 (/.f64 a #s(literal 1 binary64)) (/.f64 (/.f64 c b_2) b_2))","(*.f64 (/.f64 a (neg.f64 b_2)) (/.f64 (/.f64 (neg.f64 c) b_2) #s(literal 1 binary64)))","(*.f64 (/.f64 a (neg.f64 b_2)) (/.f64 (neg.f64 c) b_2))","(*.f64 (*.f64 (/.f64 c b_2) a) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 a (/.f64 b_2 c)))","(*.f64 (/.f64 (neg.f64 c) b_2) (/.f64 a (neg.f64 b_2)))","(*.f64 (/.f64 (/.f64 c b_2) b_2) (/.f64 a #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 c b_2) b_2) a)","(*.f64 (/.f64 c b_2) (/.f64 a b_2))","(*.f64 (/.f64 c b_2) (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) a))","(*.f64 (neg.f64 a) (/.f64 (/.f64 (neg.f64 c) b_2) (*.f64 b_2 #s(literal 1 binary64))))","(*.f64 (neg.f64 a) (/.f64 c (*.f64 (neg.f64 b_2) b_2)))","(*.f64 (neg.f64 a) (/.f64 (/.f64 (neg.f64 c) b_2) b_2))","(*.f64 a (/.f64 (/.f64 c b_2) b_2))","(pow.f64 (/.f64 b_2 (*.f64 (/.f64 c b_2) a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 (neg.f64 c) b_2) a)) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 a (/.f64 (neg.f64 c) b_2))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 a #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 c b_2) a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) a)) (neg.f64 (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (*.f64 (/.f64 (neg.f64 c) b_2) a) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 b_2 c) b_2))","(/.f64 (*.f64 a (/.f64 (neg.f64 c) b_2)) (neg.f64 b_2))","(/.f64 (*.f64 a #s(literal 1 binary64)) (*.f64 (/.f64 b_2 c) b_2))","(/.f64 (neg.f64 (*.f64 (/.f64 c b_2) a)) (neg.f64 b_2))","(/.f64 (*.f64 (/.f64 c b_2) a) b_2)","(/.f64 (*.f64 c a) (*.f64 b_2 b_2))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 (/.f64 c b_2) a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 (/.f64 c b_2) a))))","(/.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))","(/.f64 (neg.f64 a) (neg.f64 (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 a (*.f64 (/.f64 b_2 c) b_2))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":358.9140625,"type":"rewrite"},{"compiler":[[37963,3994]],"memory":[[10015104,87988464]],"time":183.671875,"type":"eval"},{"alts":[["(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","fresh",45.47788298643302,"binary64"],["(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))))","fresh",63.35884725801146,"binary64"],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","next",54.400979201630236,"binary64"],["(/.f64 (-.f64 (/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 0 binary64) (neg.f64 b_2))))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","fresh",62.566206314235394,"binary64"],["(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","fresh",43.04147592098195,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",27.74883149638816,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) a)","fresh",47.03469550731087,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","done",39.36096555649101,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))) a)","done",58.52236905223447,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))) a)","next",58.57399257309561,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 b_2)))) a)","fresh",58.86004129848519,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) c (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (*.f64 c (/.f64 (/.f64 c b_2) b_2)))) (neg.f64 b_2))) a)","fresh",50.17883675055312,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",48.42733705503734,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) a)","fresh",48.29574093696036,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","fresh",41.65449572384108,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","next",39.41955930649101,"binary64"],["(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","fresh",46.16378068090606,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))) b_2))","fresh",44.970522594346164,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","fresh",41.724199488437485,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","fresh",45.595490426188974,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","fresh",42.443019795236616,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","fresh",42.69698752399967,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","next",42.497707295236616,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","next",41.653400057440734,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))))","fresh",54.03228320383594,"binary64"]],"compiler":[[22,11],[82,26],[29,19],[31,20],[35,16],[13,10],[19,14],[18,13],[27,18],[41,28],[31,21],[35,23],[21,15],[21,15],[17,13],[20,15],[23,16],[19,14],[24,17],[31,21],[19,14],[19,14],[22,17],[19,14],[23,18],[22,11],[82,26],[29,19],[31,20],[35,16],[19,14],[41,28],[31,21],[35,23],[21,15],[21,15],[17,13],[20,15],[23,16],[19,14],[24,17],[31,21],[19,14],[19,14],[22,17],[19,14],[23,18]],"count":[[985,25]],"kept":[{"done":[1,1],"fresh":[9,6],"new":[970,16],"picked":[5,2]}],"memory":[[-4266112,47598496]],"min-error":[[3.654278357062629,"binary64"]],"time":57.99609375,"type":"prune"},{"egraph":[[0,8110,383,0.051658225],[4,4894,383,0.042435785],[3,1317,383,0.032176016],[2,408,410,0.006730896],[1,175,436,0.001723794],[0,89,440,0.000900205],[0,58,476,0.000845451]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","#s(literal 1 binary64)","(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","a","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","b_2","a","#s(literal -2 binary64)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","(/.f64 (neg.f64 c) #s(literal -1 binary64))","(neg.f64 c)","c","#s(literal -1 binary64)","(/.f64 #s(literal -1/2 binary64) b_2)","#s(literal -1/2 binary64)","b_2","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2))))","(neg.f64 b_2)","b_2","#s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))","#s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2))","(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)","(fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64))","a","(*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64))","(/.f64 c (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))","#s(literal 0 binary64)","(pow.f64 b_2 #s(literal 3 binary64))","b_2","#s(literal 3 binary64)","(+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))","(fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))","(*.f64 #s(literal 0 binary64) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","a"]],"locations":[["(-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))","cost-diff",1],["(*.f64 #s(literal 0 binary64) b_2)","cost-diff",2],["(+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))","cost-diff",2],["(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","cost-diff",6],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))) a)","cost-diff",0],["(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)","cost-diff",3],["(neg.f64 c)","cost-diff",0],["(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","cost-diff",0],["(/.f64 (neg.f64 c) #s(literal -1 binary64))","cost-diff",3],["(/.f64 b_2 a)","cost-diff",0],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","cost-diff",0],["(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","cost-diff",2]],"memory":[[578320,24681072]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) (neg.f64 a))","#s(literal 1 binary64)","(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","a","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","b_2","a","#s(literal -2 binary64)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(/.f64 (neg.f64 c) #s(literal -1 binary64))","c","(neg.f64 c)","c","#s(literal -1 binary64)","(/.f64 #s(literal -1/2 binary64) b_2)","#s(literal -1/2 binary64)","b_2","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))) a)","(/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 c a) b_2)))) b_2) (neg.f64 a))","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2))))","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 c a) b_2)))))","(neg.f64 b_2)","b_2","#s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 c a) b_2))))","#s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2))","#s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 c a) b_2)))","(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)","(neg.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 c a) b_2))","(fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (/.f64 c b_2) b_2)) a #s(literal -1 binary64))","a","(*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (/.f64 (/.f64 c b_2) b_2))","(/.f64 c (*.f64 b_2 b_2))","(/.f64 (/.f64 c b_2) b_2)","c","(*.f64 b_2 b_2)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) (neg.f64 a))","(-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(neg.f64 b_2)","(-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))","(neg.f64 (pow.f64 b_2 #s(literal 3 binary64)))","#s(literal 0 binary64)","(pow.f64 b_2 #s(literal 3 binary64))","b_2","#s(literal 3 binary64)","(+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))","(*.f64 b_2 b_2)","(fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))","(*.f64 b_2 b_2)","(*.f64 #s(literal 0 binary64) b_2)","#s(literal 0 binary64)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","a"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":229.327880859375,"type":"simplify"},{"compiler":[[332,48]],"locations":[["(-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","accuracy",11.793051838088276],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","accuracy",21.189556221170086],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","accuracy",21.41609059268961],["(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","accuracy",39.76754706357783],["(/.f64 c (*.f64 b_2 b_2))","accuracy",5.147671685540016],["(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)","accuracy",5.179420805770781],["(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2))))","accuracy",11.793051838088276],["#s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))","accuracy",42.63375088738455],["(/.f64 #s(literal -1/2 binary64) b_2)","accuracy",0.0],["(neg.f64 c)","accuracy",0.0],["(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","accuracy",0.1875],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","accuracy",42.443019795236616],["(/.f64 b_2 a)","accuracy",0.0],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","accuracy",0.0078125],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","accuracy",41.653400057440734],["(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","accuracy",4.235538595478852],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","accuracy",11.793051838088276],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","accuracy",21.41609059268961],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","accuracy",39.986146396787966]],"memory":[[-4241616,51836640]],"mixsample":[[0.33203125,"ival-sub",1200],[0.01318359375,"ival-sub",4800],[22.79296875,"ival-div",0],[5.98828125,"adjust",800],[0.149169921875,"ival-div",400],[0.16650390625,"ival-sub",1600],[0.15380859375,"ival-pow",1600],[0.042236328125,"ival-div",1600],[0.11181640625,"ival-assert",0],[0.02685546875,"ival-sqrt",4800],[6.76220703125,"ival-sub",0],[0.292724609375,"ival-sqrt",1200],[0.29638671875,"ival-sub",400],[2.26953125,"ival-sqrt",0],[0.745849609375,"ival-pow",800],[7.588623046875,"ival-pow",0],[5.17919921875,"ival-add",0],[0.05078125,"ival-sub",4400],[0.324951171875,"ival-sub",800],[0.14794921875,"ival-add",400],[0.624755859375,"adjust",2800],[0.587158203125,"ival-pow",400],[0.008056640625,"ival-sub",4000],[0.245849609375,"ival-sqrt",400],[0.14404296875,"ival-add",1200],[0.135009765625,"ival-sqrt",2000],[0.083740234375,"ival-sub",2000],[0.25732421875,"ival-sqrt",800],[0.012939453125,"ival-sqrt",4000],[0.10400390625,"ival-sqrt",4400],[2.794677734375,"adjust",2000],[0.141845703125,"ival-sub",2400],[0.189697265625,"ival-div",1200],[1.07080078125,"ival-pow",1200],[0.019775390625,"ival-add",1600],[0.147216796875,"ival-sqrt",1600],[20.947021484375,"ival-mult",0],[0.158447265625,"ival-div",800],[0.226806640625,"ival-sqrt",2400],[0.311279296875,"ival-true",0],[0.94970703125,"exact",0],[0.127197265625,"ival-add",800],[3.734619140625,"ival-neg",0]],"outcomes":[[23.554443359375,1,"valid",35],[26.9453125,2,"valid",34],[9.9013671875,3,"valid",10],[63.80126953125,0,"valid",177]],"time":167.321044921875,"type":"localize"},{"count":[[26,156]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","(/.f64 (neg.f64 c) #s(literal -1 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","(neg.f64 c)","(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))","(*.f64 #s(literal 0 binary64) b_2)","(-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(/.f64 #s(literal -1/2 binary64) b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))","(/.f64 c (*.f64 b_2 b_2))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))"]],"memory":[[385504,17633552]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -1/2 (/ a b_2))","(* a (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* -1/16 (/ (* a (pow c 2)) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* a (+ (* -1/16 (/ (pow c 2) (pow b_2 5))) (* a (+ (* -1/32 (/ (pow c 3) (pow b_2 7))) (* -1/128 (/ (pow c 3) (pow b_2 7))))))))) (* 1/2 (/ 1 b_2))))","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(/ b_2 a)","(* -1 b_2)","(+ (* -1 b_2) (* 1/2 (/ (* a c) b_2)))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(- (* -1 b_2) b_2)","(- (+ (* -1 b_2) (* 1/2 (/ (* a c) b_2))) b_2)","(- (+ (* -1 b_2) (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2))))) b_2)","(- (+ (* -1 b_2) (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2))))) b_2)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (/ b_2 (* c (pow (sqrt -1) 2))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow a 2)))) (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (* 1/2 (/ (* (pow a 2) (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 4))))) (pow a 3)))) (+ (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* 1/2 (/ (* a c) b_2))","(* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (- (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1 (/ b_2 a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (/ a c)) (sqrt -1))","(+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1))))) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* a (pow b_2 3)) (pow c 2)))) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))))) a)) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/2 (/ c b_2)) (/ b_2 a))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* -1 b_2) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* b_2 (- (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -1) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))) (sqrt -1))))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1/2 (/ c b_2))","(/ (+ (* -1 (pow b_2 2)) (* 1/2 (* a c))) b_2)","0","(* -1 (pow b_2 3))","(- (pow b_2 2) (* a c))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ -1/2 b_2)","(/ c (pow b_2 2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(/ (+ (* -1/2 a) (* -1/8 (/ (* (pow a 2) c) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))) (+ (* -1/32 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))) (* -1/128 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))))))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -2 (/ b_2 c))","(* -1 (* b_2 (+ (* -1/2 (/ a (pow b_2 2))) (* 2 (/ 1 c)))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c))) (pow b_2 4))) (* 2 (/ 1 c))) (* 1/2 (/ a (pow b_2 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (* a (* c (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c)))))) (+ (* -1/16 (* (pow a 3) (pow c 2))) (* 2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))))) (pow b_2 6))) (* 2 (/ 1 c))) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 4))) (+ (* 1/4 (/ (* (pow a 2) c) (pow b_2 4))) (* 1/2 (/ a (pow b_2 2))))))))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/16 (/ (pow a 3) (pow b_2 5))) (* c (+ (* -1/32 (/ (pow a 4) (pow b_2 7))) (* -1/128 (/ (pow a 4) (pow b_2 7))))))))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","c","(* -1 c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(- (+ (* -1 b_2) (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2))))) b_2)","(- (+ (* -1 b_2) (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2))))) b_2)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (/ b_2 (pow (sqrt -1) 2))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1/2 (/ (pow b_2 3) (* a (* c (pow (sqrt -1) 4))))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (+ (* -1 (/ b_2 c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1))))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1 (/ b_2 c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (/ (+ b_2 (* -1 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))) c))) c))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow b_2 3) (pow c 2)) a))) c)) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))))) c))) c))) c))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/2 (/ a b_2)) (/ b_2 c))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* -1 b_2) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (sqrt -1)))))"]],"series":[[4.76708984375,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (neg c) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ (neg c) -1) (/ -1/2 b_2)) (neg c) (* (+ (* a (* (/ c (* b_2 b_2)) 1/2)) -1) b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (+ 0 (+ (* b_2 b_2) (* 0 b_2))) (* 0 b_2) (- 0 (pow b_2 3)) (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c))) (/ -1/2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ c (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (- (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (sqrt (- (* b_2 b_2) (* a c)))))","c","-inf"],[7.02392578125,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (neg c) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ (neg c) -1) (/ -1/2 b_2)) (neg c) (* (+ (* a (* (/ c (* b_2 b_2)) 1/2)) -1) b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (+ 0 (+ (* b_2 b_2) (* 0 b_2))) (* 0 b_2) (- 0 (pow b_2 3)) (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c))) (/ -1/2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ c (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (- (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (sqrt (- (* b_2 b_2) (* a c)))))","c","inf"],[2.920166015625,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (neg c) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ (neg c) -1) (/ -1/2 b_2)) (neg c) (* (+ (* a (* (/ c (* b_2 b_2)) 1/2)) -1) b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (+ 0 (+ (* b_2 b_2) (* 0 b_2))) (* 0 b_2) (- 0 (pow b_2 3)) (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c))) (/ -1/2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ c (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (- (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (sqrt (- (* b_2 b_2) (* a c)))))","c","0"],[4.7060546875,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (neg c) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ (neg c) -1) (/ -1/2 b_2)) (neg c) (* (+ (* a (* (/ c (* b_2 b_2)) 1/2)) -1) b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (+ 0 (+ (* b_2 b_2) (* 0 b_2))) (* 0 b_2) (- 0 (pow b_2 3)) (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c))) (/ -1/2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ c (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (- (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (sqrt (- (* b_2 b_2) (* a c)))))","b_2","-inf"],[5.6240234375,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (neg c) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ (neg c) -1) (/ -1/2 b_2)) (neg c) (* (+ (* a (* (/ c (* b_2 b_2)) 1/2)) -1) b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (+ 0 (+ (* b_2 b_2) (* 0 b_2))) (* 0 b_2) (- 0 (pow b_2 3)) (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c))) (/ -1/2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ c (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (- (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (sqrt (- (* b_2 b_2) (* a c)))))","b_2","inf"],[6.5078125,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (neg c) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ (neg c) -1) (/ -1/2 b_2)) (neg c) (* (+ (* a (* (/ c (* b_2 b_2)) 1/2)) -1) b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (+ 0 (+ (* b_2 b_2) (* 0 b_2))) (* 0 b_2) (- 0 (pow b_2 3)) (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c))) (/ -1/2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ c (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (- (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (sqrt (- (* b_2 b_2) (* a c)))))","b_2","0"],[3.5009765625,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (neg c) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ (neg c) -1) (/ -1/2 b_2)) (neg c) (* (+ (* a (* (/ c (* b_2 b_2)) 1/2)) -1) b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (+ 0 (+ (* b_2 b_2) (* 0 b_2))) (* 0 b_2) (- 0 (pow b_2 3)) (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c))) (/ -1/2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ c (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (- (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (sqrt (- (* b_2 b_2) (* a c)))))","a","-inf"],[10.6630859375,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (neg c) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ (neg c) -1) (/ -1/2 b_2)) (neg c) (* (+ (* a (* (/ c (* b_2 b_2)) 1/2)) -1) b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (+ 0 (+ (* b_2 b_2) (* 0 b_2))) (* 0 b_2) (- 0 (pow b_2 3)) (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c))) (/ -1/2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ c (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (- (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (sqrt (- (* b_2 b_2) (* a c)))))","a","inf"],[2.534912109375,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (neg c) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ (neg c) -1) (/ -1/2 b_2)) (neg c) (* (+ (* a (* (/ c (* b_2 b_2)) 1/2)) -1) b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (+ 0 (+ (* b_2 b_2) (* 0 b_2))) (* 0 b_2) (- 0 (pow b_2 3)) (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c))) (/ -1/2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ c (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (- (/ (- 0 (pow b_2 3)) (+ 0 (+ (* b_2 b_2) (* 0 b_2)))) (sqrt (- (* b_2 b_2) (* a c)))))","a","0"]],"time":52.759033203125,"type":"series"},{"count":[[156,154]],"egraph":[[0,8432,4086,0.106103693],[1,2722,4266,0.029265317],[0,852,4449,0.008727161]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -1/2 (/ a b_2))","(* a (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* -1/16 (/ (* a (pow c 2)) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* a (+ (* -1/16 (/ (pow c 2) (pow b_2 5))) (* a (+ (* -1/32 (/ (pow c 3) (pow b_2 7))) (* -1/128 (/ (pow c 3) (pow b_2 7))))))))) (* 1/2 (/ 1 b_2))))","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(/ b_2 a)","(* -1 b_2)","(+ (* -1 b_2) (* 1/2 (/ (* a c) b_2)))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(- (* -1 b_2) b_2)","(- (+ (* -1 b_2) (* 1/2 (/ (* a c) b_2))) b_2)","(- (+ (* -1 b_2) (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2))))) b_2)","(- (+ (* -1 b_2) (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2))))) b_2)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (/ b_2 (* c (pow (sqrt -1) 2))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow a 2)))) (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (* 1/2 (/ (* (pow a 2) (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 4))))) (pow a 3)))) (+ (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* 1/2 (/ (* a c) b_2))","(* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (- (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1 (/ b_2 a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (/ a c)) (sqrt -1))","(+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1))))) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* a (pow b_2 3)) (pow c 2)))) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))))) a)) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/2 (/ c b_2)) (/ b_2 a))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* -1 b_2) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* b_2 (- (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -1) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))) (sqrt -1))))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1/2 (/ c b_2))","(/ (+ (* -1 (pow b_2 2)) (* 1/2 (* a c))) b_2)","0","(* -1 (pow b_2 3))","(- (pow b_2 2) (* a c))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ -1/2 b_2)","(/ c (pow b_2 2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(/ (+ (* -1/2 a) (* -1/8 (/ (* (pow a 2) c) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))) (+ (* -1/32 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))) (* -1/128 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))))))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -2 (/ b_2 c))","(* -1 (* b_2 (+ (* -1/2 (/ a (pow b_2 2))) (* 2 (/ 1 c)))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c))) (pow b_2 4))) (* 2 (/ 1 c))) (* 1/2 (/ a (pow b_2 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (* a (* c (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c)))))) (+ (* -1/16 (* (pow a 3) (pow c 2))) (* 2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))))) (pow b_2 6))) (* 2 (/ 1 c))) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 4))) (+ (* 1/4 (/ (* (pow a 2) c) (pow b_2 4))) (* 1/2 (/ a (pow b_2 2))))))))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/16 (/ (pow a 3) (pow b_2 5))) (* c (+ (* -1/32 (/ (pow a 4) (pow b_2 7))) (* -1/128 (/ (pow a 4) (pow b_2 7))))))))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","c","(* -1 c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(- (+ (* -1 b_2) (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2))))) b_2)","(- (+ (* -1 b_2) (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2))))) b_2)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (/ b_2 (pow (sqrt -1) 2))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1/2 (/ (pow b_2 3) (* a (* c (pow (sqrt -1) 4))))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (+ (* -1 (/ b_2 c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1))))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1 (/ b_2 c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (/ (+ b_2 (* -1 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))) c))) c))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow b_2 3) (pow c 2)) a))) c)) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))))) c))) c))) c))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/2 (/ a b_2)) (/ b_2 c))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* -1 b_2) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (sqrt -1)))))"]],"memory":[[4356464,55731888]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (*.f64 a (/.f64 c b_2)) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal 1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(* -1/2 (/ a b_2))","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(* a (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) a)","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* -1/16 (/ (* a (pow c 2)) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) a (/.f64 #s(literal -1/2 binary64) b_2)) a)","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* a (+ (* -1/16 (/ (pow c 2) (pow b_2 5))) (* a (+ (* -1/32 (/ (pow c 3) (pow b_2 7))) (* -1/128 (/ (pow c 3) (pow b_2 7))))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 7 binary64))) (*.f64 #s(literal -5/128 binary64) a) (/.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 5 binary64)))) a (*.f64 (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) a (/.f64 #s(literal -1/2 binary64) b_2)) a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (*.f64 a (/.f64 c b_2)) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 a #s(literal 1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))) a (*.f64 #s(literal -2 binary64) b_2))","(/ b_2 a)","(/.f64 b_2 a)","(* -1 b_2)","(neg.f64 b_2)","(+ (* -1 b_2) (* 1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 a (/.f64 c b_2)) #s(literal 1/2 binary64) (neg.f64 b_2))","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) c) c) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(- (* -1 b_2) b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (+ (* -1 b_2) (* 1/2 (/ (* a c) b_2))) b_2)","(fma.f64 (*.f64 a (/.f64 c b_2)) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2))","(- (+ (* -1 b_2) (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2))))) b_2)","(fma.f64 (fma.f64 (*.f64 a #s(literal 1/8 binary64)) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))) a (*.f64 #s(literal -2 binary64) b_2))","(- (+ (* -1 b_2) (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2))))) b_2)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))) a (*.f64 #s(literal -2 binary64) b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))","(* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(/.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (/ b_2 (* c (pow (sqrt -1) 2))))","(-.f64 (/.f64 (neg.f64 b_2) c) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow a 2)))) (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))))","(-.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) a) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (/.f64 b_2 c))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (* 1/2 (/ (* (pow a 2) (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 4))))) (pow a 3)))) (+ (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3))))))","(-.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 a c) (/.f64 a c))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) (*.f64 (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 (pow.f64 a #s(literal 3 binary64)))) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 b_2 c)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* 1/2 (/ (* a c) b_2))","(*.f64 (*.f64 a (/.f64 c b_2)) #s(literal 1/2 binary64))","(* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (/.f64 (neg.f64 b_2) a)) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* a (- (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* a (- (+ (* -1 (/ b_2 a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) b_2) (neg.f64 a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) a)) (neg.f64 a)))","(* (sqrt (/ a c)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1))))) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 a (/.f64 b_2 c))) (neg.f64 a)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* a (pow b_2 3)) (pow c 2)))) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))))) a)) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) c) (/.f64 a c)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))))))) a) #s(literal -1 binary64) (*.f64 a (/.f64 b_2 c))) (neg.f64 a)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) (neg.f64 a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 a)) b_2) (neg.f64 a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/2 (/ c b_2)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal -1/2 binary64) (/.f64 c b_2) (/.f64 b_2 a)))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (- (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) (neg.f64 a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (+ (* -1 b_2) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 a)) b_2) (neg.f64 a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(fma.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal -1/2 binary64) b_2) (/.f64 #s(literal 1 binary64) (neg.f64 c))) b_2 (/.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* b_2 (- (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -1) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))) (sqrt -1))))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (*.f64 c c))) (*.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))) (neg.f64 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64))) (*.f64 b_2 b_2) (-.f64 (/.f64 (neg.f64 b_2) c) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(-.f64 (neg.f64 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a))))","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/ (+ (* -1 (pow b_2 2)) (* 1/2 (* a c))) b_2)","(/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) b_2)","0","#s(literal 0 binary64)","(* -1 (pow b_2 3))","(neg.f64 (pow.f64 b_2 #s(literal 3 binary64)))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(/ -1/2 b_2)","(/.f64 #s(literal -1/2 binary64) b_2)","(/ c (pow b_2 2))","(/.f64 c (*.f64 b_2 b_2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64) (/.f64 #s(literal -2 binary64) a))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64) (/.f64 #s(literal -2 binary64) a)))) b_2)","(/ (+ (* -1/2 a) (* -1/8 (/ (* (pow a 2) c) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) b_2) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a)) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) b_2) (/.f64 c b_2) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) a))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))) (+ (* -1/32 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))) (* -1/128 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -5/128 binary64) (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) b_2) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) c) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal 1/2 binary64) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 a a) c) c)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 2 binary64))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 2 binary64)))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal 1/2 binary64) #s(literal -1 binary64)) b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 a (/.f64 c (*.f64 b_2 b_2)))) b_2) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 a (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/8 binary64)) c) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c)))) (neg.f64 b_2))","(* -2 (/ b_2 c))","(*.f64 (/.f64 b_2 c) #s(literal -2 binary64))","(* -1 (* b_2 (+ (* -1/2 (/ a (pow b_2 2))) (* 2 (/ 1 c)))))","(*.f64 (fma.f64 (/.f64 a (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) c)) (neg.f64 b_2))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c))) (pow b_2 4))) (* 2 (/ 1 c))) (* 1/2 (/ a (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64) (fma.f64 (/.f64 a (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) c))) (neg.f64 b_2))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (* a (* c (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c)))))) (+ (* -1/16 (* (pow a 3) (pow c 2))) (* 2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))))) (pow b_2 6))) (* 2 (/ 1 c))) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 4))) (+ (* 1/4 (/ (* (pow a 2) c) (pow b_2 4))) (* 1/2 (/ a (pow b_2 2))))))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 2 binary64) c) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) a) c) (*.f64 (*.f64 (*.f64 a a) c) #s(literal 1/8 binary64)) (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64))) (*.f64 (*.f64 c c) a)) #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) c) #s(literal -1/16 binary64)))) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (*.f64 (/.f64 a (*.f64 b_2 b_2)) #s(literal 1/2 binary64)))) (neg.f64 b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 a (/.f64 c b_2)) #s(literal -1/2 binary64))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) b_2) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (neg.f64 b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) b_2))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) b_2)))) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64))) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 a (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/8 binary64)) c) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/16 (/ (pow a 3) (pow b_2 5))) (* c (+ (* -1/32 (/ (pow a 4) (pow b_2 7))) (* -1/128 (/ (pow a 4) (pow b_2 7))))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 7 binary64))) (*.f64 #s(literal -5/128 binary64) c) (/.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64)))) c (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","c","(* -1 c)","(neg.f64 c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(- (+ (* -1 b_2) (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2))))) b_2)","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (+ (* -1 b_2) (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2))))) b_2)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (/.f64 (neg.f64 b_2) a) c)))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (/ b_2 (pow (sqrt -1) 2))) c)","(/.f64 (-.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))) c)","(/.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) #s(literal -1/2 binary64) (-.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1/2 (/ (pow b_2 3) (* a (* c (pow (sqrt -1) 4))))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))))) c)","(/.f64 (-.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) b_2) (/.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) c)) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) a))) (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) #s(literal -1/2 binary64) (/.f64 b_2 #s(literal -1 binary64)))) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2))))","(*.f64 (fma.f64 (/.f64 a b_2) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) c)) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (+ (* -1 (/ b_2 c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1))))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (+ (* -1 (/ b_2 c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (neg.f64 b_2) c)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 c (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (/.f64 (neg.f64 b_2) a)) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 c (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 c)) (/.f64 b_2 a)) c)))","(* -1 (/ (+ b_2 (* -1 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)) b_2) (neg.f64 c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))) c))) c))) c))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 c b_2 (/.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))) c))) c))) (neg.f64 c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow b_2 3) (pow c 2)) a))) c)) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))))) c))) c))) c))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 c b_2 (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (*.f64 c c) a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))))) (neg.f64 c))) c))) c))) (neg.f64 c))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b_2 b_2)) #s(literal -1/2 binary64))) (neg.f64 c)) b_2) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/2 (/ a b_2)) (/ b_2 c))))","(*.f64 (fma.f64 (/.f64 a b_2) #s(literal -1/2 binary64) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (+ (* -1 b_2) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b_2 b_2)) #s(literal -1/2 binary64))) (neg.f64 c)) b_2) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":272.47998046875,"type":"simplify"},{"count":[[26,756]],"egraph":[[0,9264,300,0.053113446],[2,2986,303,0.032896837],[1,366,317,0.008653116],[0,87,334,0.00243709],[0,57,360,0.000475079]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","(/.f64 (neg.f64 c) #s(literal -1 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","(neg.f64 c)","(*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))","(*.f64 #s(literal 0 binary64) b_2)","(-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(/.f64 #s(literal -1/2 binary64) b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))","(/.f64 c (*.f64 b_2 b_2))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))"]],"memory":[[-3597168,47081872]],"outputs":[["(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","(*.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) #s(literal -1 binary64)))","(*.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a))","(pow.f64 (exp.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal 1 binary64))","(pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) a)","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) (neg.f64 a))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 #s(literal -1 binary64) (/.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(fma.f64 b_2 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 b_2 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(-.f64 (/.f64 b_2 a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) #s(literal -1 binary64)))","(+.f64 (/.f64 b_2 a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (pow.f64 a #s(literal -1 binary64))))","(+.f64 (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(*.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","(*.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)) a)","(*.f64 #s(literal -1 binary64) (pow.f64 (pow.f64 (/.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(*.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 1 binary64))","(*.f64 (neg.f64 a) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) #s(literal -1 binary64)))","(*.f64 a (/.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 a (pow.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(pow.f64 (/.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 a))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","(/.f64 (*.f64 a #s(literal 1 binary64)) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 (neg.f64 (neg.f64 a)) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 (/.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)))","(/.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) #s(literal 1 binary64))","(/.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(/.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","(/.f64 a (*.f64 #s(literal 1 binary64) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a))","(neg.f64 (/.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) (/.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (*.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)))))","(neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -3 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -6 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (/.f64 b_2 b_2) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 b_2 #s(literal -2 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 b_2 (*.f64 b_2 b_2)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 b_2 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 b_2 (/.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 b_2 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(fma.f64 #s(literal 1 binary64) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(-.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2))","(-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) b_2)","(+.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -3 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -6 binary64)))","(*.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) b_2)","(*.f64 (pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))","(*.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2))","(*.f64 (/.f64 b_2 b_2) b_2)","(*.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal -1/2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 b_2 b_2))","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 b_2 #s(literal -2 binary64)))","(*.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 1 binary64)))","(*.f64 (*.f64 b_2 b_2) (/.f64 b_2 (*.f64 b_2 b_2)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 b_2 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)))","(*.f64 b_2 (/.f64 b_2 b_2))","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) b_2)","(pow.f64 (/.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 2 binary64))","(pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 b_2 b_2) #s(literal 1/2 binary64))","(pow.f64 b_2 #s(literal 1 binary64))","(/.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal -2 binary64))) (pow.f64 b_2 #s(literal 3 binary64)))","(/.f64 (*.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 b_2 #s(literal -2 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 5 binary64))) (pow.f64 b_2 #s(literal 4 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 b_2 b_2))","(/.f64 (*.f64 b_2 b_2) (-.f64 b_2 #s(literal 0 binary64)))","(/.f64 (*.f64 b_2 b_2) b_2)","(/.f64 #s(literal -1 binary64) (pow.f64 b_2 #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal -1 binary64)))","(neg.f64 b_2)","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -6 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) b_2 #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 0 binary64))","(fma.f64 (/.f64 b_2 b_2) b_2 #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 b_2 b_2) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 b_2 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 b_2 (/.f64 b_2 b_2) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b_2 #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) b_2)","(exp.f64 (*.f64 (log.f64 (pow.f64 b_2 #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 b_2) #s(literal 1 binary64)))","(exp.f64 (log.f64 b_2))","(+.f64 #s(literal 0 binary64) b_2)","(+.f64 b_2 #s(literal 0 binary64))","b_2","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(*.f64 b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -2 binary64)))","(pow.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 a))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) a)","(/.f64 #s(literal -2 binary64) (/.f64 a b_2))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b_2)","(*.f64 #s(literal -1 binary64) (/.f64 b_2 a))","(*.f64 b_2 (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 b_2 (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 b_2 a))","(pow.f64 (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) a) #s(literal -1 binary64))","(pow.f64 (/.f64 a b_2) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 a b_2) #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (/.f64 b_2 #s(literal -1 binary64))) a)","(/.f64 (/.f64 b_2 #s(literal -1 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 b_2 (neg.f64 (neg.f64 a)))","(/.f64 b_2 (neg.f64 a))","(/.f64 b_2 a)","(/.f64 #s(literal 1 binary64) (/.f64 a b_2))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b_2) #s(literal 1 binary64)))","(neg.f64 (/.f64 b_2 a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 b_2 a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 b_2 a))","(exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (pow.f64 (neg.f64 c) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal -1 binary64))","(*.f64 c #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) c)","(pow.f64 (/.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 c #s(literal -1 binary64))))","(/.f64 (neg.f64 c) #s(literal -1 binary64))","(/.f64 c #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal -1 binary64)))","(neg.f64 (neg.f64 c))","(-.f64 #s(literal 0 binary64) (neg.f64 c))","(exp.f64 (*.f64 (log.f64 (pow.f64 c #s(literal -1 binary64))) #s(literal -1 binary64)))","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal -1 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c)) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (neg.f64 c))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(*.f64 (neg.f64 c) (/.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal -1 binary64)))","(*.f64 (neg.f64 c) (*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) b_2)))","(*.f64 (neg.f64 c) (/.f64 #s(literal 1/2 binary64) b_2))","(*.f64 c (/.f64 #s(literal 1/2 binary64) b_2))","(pow.f64 (/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (neg.f64 c))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 c #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 c #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) #s(literal 1 binary64)) (pow.f64 c #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)","(/.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) b_2)","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 c)) (*.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) b_2))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal -1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 1 binary64))","(/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2)","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c)) b_2)","(/.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 c #s(literal -1 binary64)) b_2))","(/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))","(/.f64 (/.f64 #s(literal 1/2 binary64) b_2) (pow.f64 c #s(literal -1 binary64)))","(/.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 c #s(literal -1 binary64)) b_2))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","(/.f64 (neg.f64 c) (*.f64 #s(literal -2 binary64) b_2))","(/.f64 c (*.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 1 binary64)))","(/.f64 c (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 c (*.f64 #s(literal -2 binary64) b_2))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) (neg.f64 c))))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 c #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) b_2)))","(neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(*.f64 #s(literal -1 binary64) c)","(*.f64 c #s(literal -1 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) c) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c))))","(/.f64 (neg.f64 c) #s(literal 1 binary64))","(/.f64 c #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) c))","(neg.f64 c)","(-.f64 #s(literal 0 binary64) c)","(+.f64 #s(literal 0 binary64) (neg.f64 c))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)","(*.f64 b_2 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 3 binary64)) #s(literal -1 binary64)) b_2) (fma.f64 (pow.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) b_2) (fma.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(/.f64 (*.f64 b_2 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal -1/2 binary64)))))","(/.f64 (*.f64 b_2 (fma.f64 (pow.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) (fma.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -3 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -3 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -6 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -6 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) b_2 (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) b_2 (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (/.f64 b_2 b_2) b_2 (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (/.f64 b_2 b_2) b_2 (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal -1/2 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 b_2 b_2) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 b_2 b_2) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2 b_2)","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 b_2 #s(literal -2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 b_2 #s(literal -2 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 b_2 (*.f64 b_2 b_2)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 (*.f64 b_2 b_2) (/.f64 b_2 (*.f64 b_2 b_2)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 #s(literal -1 binary64) b_2 (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 #s(literal -1 binary64) b_2 (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 b_2 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 b_2 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 b_2 (/.f64 b_2 b_2) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 b_2 (/.f64 b_2 b_2) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2)","(fma.f64 b_2 #s(literal -1 binary64) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 b_2 #s(literal -1 binary64) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 b_2 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 b_2 #s(literal 1 binary64) (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1 binary64) b_2 (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(fma.f64 #s(literal 1 binary64) b_2 (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2) b_2)","(+.f64 (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))) b_2)","(+.f64 b_2 (*.f64 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64)) b_2))","(+.f64 b_2 (*.f64 b_2 (*.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) a) #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(*.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) a))","(pow.f64 (/.f64 (/.f64 a (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))) #s(literal -1 binary64))","(/.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64))) (pow.f64 a #s(literal -1 binary64))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2)))","(/.f64 (*.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a) #s(literal 2 binary64))) (+.f64 (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a)))","(/.f64 (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))) (neg.f64 a))","(/.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a) #s(literal 2 binary64)) (*.f64 (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a)))))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2)) a))","(/.f64 (-.f64 (*.f64 b_2 a) (*.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))) (*.f64 a a))","(/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (neg.f64 a))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64))) (*.f64 a (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64))) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2))))","(/.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) (neg.f64 (neg.f64 a)))","(/.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))))","(neg.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) a))","(neg.f64 (/.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) (neg.f64 a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a)))","(fma.f64 b_2 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a)))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a)))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a)))","(-.f64 (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))) #s(literal -1 binary64)))","(+.f64 (/.f64 b_2 a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) a)))","(*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64)))) (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64))) (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64))) (fma.f64 b_2 b_2 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64)) (*.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64))) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64)))))","(neg.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -3 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -6 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (/.f64 b_2 b_2) b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal -1/2 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 b_2 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 b_2 #s(literal -2 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 b_2 (*.f64 b_2 b_2)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 #s(literal -1 binary64) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2)","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 b_2 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 b_2 (/.f64 b_2 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 b_2 #s(literal 1 binary64) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(fma.f64 #s(literal 1 binary64) b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2)) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2) (*.f64 b_2 b_2))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))))","(-.f64 #s(literal 0 binary64) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))) b_2))","(-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2))))","(+.f64 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) b_2)","(+.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))))","(*.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -3 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -6 binary64)))","(*.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) b_2)","(*.f64 (pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))","(*.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2))","(*.f64 (/.f64 b_2 b_2) b_2)","(*.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal -1/2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 b_2 b_2))","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 b_2 #s(literal -2 binary64)))","(*.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 1 binary64)))","(*.f64 (*.f64 b_2 b_2) (/.f64 b_2 (*.f64 b_2 b_2)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 b_2 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)))","(*.f64 b_2 (/.f64 b_2 b_2))","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) b_2)","(pow.f64 (/.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 2 binary64))","(pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 b_2 b_2) #s(literal 1/2 binary64))","(pow.f64 b_2 #s(literal 1 binary64))","(/.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal -2 binary64))) (pow.f64 b_2 #s(literal 3 binary64)))","(/.f64 (*.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 b_2 #s(literal -2 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 5 binary64))) (pow.f64 b_2 #s(literal 4 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 b_2 b_2))","(/.f64 (*.f64 b_2 b_2) (-.f64 b_2 #s(literal 0 binary64)))","(/.f64 (*.f64 b_2 b_2) b_2)","(/.f64 #s(literal -1 binary64) (pow.f64 b_2 #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal -1 binary64)))","(neg.f64 b_2)","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -6 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) b_2 #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 0 binary64))","(fma.f64 (/.f64 b_2 b_2) b_2 #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 b_2 b_2) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 b_2 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 b_2 (/.f64 b_2 b_2) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b_2 #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) b_2)","(exp.f64 (*.f64 (log.f64 (pow.f64 b_2 #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 b_2) #s(literal 1 binary64)))","(exp.f64 (log.f64 b_2))","(+.f64 #s(literal 0 binary64) b_2)","(+.f64 b_2 #s(literal 0 binary64))","b_2","(*.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))","(*.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 2 binary64)) (*.f64 b_2 b_2))","(*.f64 (pow.f64 b_2 #s(literal -4 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 b_2 #s(literal -2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal -4 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 (pow.f64 b_2 #s(literal -2 binary64)) b_2))","(*.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 b_2) #s(literal 2 binary64)))","(*.f64 (*.f64 b_2 b_2) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 #s(literal 1 binary64) (*.f64 b_2 b_2))","(pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -2 binary64))","(pow.f64 (*.f64 b_2 b_2) #s(literal 1 binary64))","(pow.f64 b_2 #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) #s(literal 0 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 b_2 b_2))","(/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal -1 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) b_2)","(/.f64 b_2 (pow.f64 b_2 #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal -2 binary64)))","(neg.f64 (*.f64 b_2 b_2))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 2 binary64)) (*.f64 b_2 b_2) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -4 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal -4 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 (pow.f64 b_2 #s(literal -2 binary64)) b_2) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 b_2) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) #s(literal 0 binary64))","(fma.f64 b_2 b_2 #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64))","(exp.f64 (*.f64 #s(literal 2 binary64) (log.f64 b_2)))","(+.f64 #s(literal 0 binary64) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) #s(literal 0 binary64))","#s(literal 0 binary64)","(*.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 3 binary64)))","(*.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))","(*.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))","(*.f64 (neg.f64 (pow.f64 b_2 #s(literal 3/2 binary64))) (pow.f64 b_2 #s(literal 3/2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 9/2 binary64)) (pow.f64 (*.f64 (pow.f64 b_2 #s(literal -2 binary64)) b_2) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 9/2 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -6 binary64)) (pow.f64 b_2 #s(literal 9 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -4 binary64)) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 b_2 #s(literal -6 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (neg.f64 (pow.f64 b_2 #s(literal 3/2 binary64))))","(*.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3/2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 3 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal -3 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (/.f64 b_2 b_2) #s(literal 3 binary64)))","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 b_2 b_2) b_2)","(*.f64 #s(literal -1 binary64) (pow.f64 b_2 #s(literal 3 binary64)))","(*.f64 b_2 (*.f64 b_2 b_2))","(*.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 b_2))","(pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -3 binary64))","(pow.f64 (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 1 binary64))","(pow.f64 (*.f64 b_2 b_2) #s(literal 3/2 binary64))","(pow.f64 b_2 #s(literal 3 binary64))","(/.f64 (pow.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 9 binary64)))","(/.f64 (pow.f64 (*.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 b_2 #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 18 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 27 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 8 binary64)) #s(literal 3 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 5 binary64)) #s(literal 3 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 9 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) #s(literal 0 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (-.f64 b_2 #s(literal 0 binary64)) #s(literal 3 binary64)))","(/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 b_2 #s(literal -3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal -3 binary64)))","(neg.f64 (pow.f64 b_2 #s(literal 3 binary64)))","(fma.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (pow.f64 b_2 #s(literal 3/2 binary64))) (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 9/2 binary64)) (pow.f64 (*.f64 (pow.f64 b_2 #s(literal -2 binary64)) b_2) #s(literal 3/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 9/2 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal -6 binary64)) (pow.f64 b_2 #s(literal 9 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -4 binary64)) #s(literal 3/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 b_2 #s(literal -6 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (neg.f64 (pow.f64 b_2 #s(literal 3/2 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 3/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (/.f64 b_2 b_2) #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) b_2 #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 0 binary64))","(fma.f64 b_2 (*.f64 b_2 b_2) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 3 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 3 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))","(exp.f64 (-.f64 (*.f64 (*.f64 (log.f64 b_2) #s(literal 3 binary64)) #s(literal 3 binary64)) (fma.f64 (log.f64 b_2) #s(literal 3 binary64) (*.f64 (log.f64 b_2) #s(literal 3 binary64)))))","(exp.f64 (-.f64 (*.f64 (*.f64 (log.f64 b_2) #s(literal 3 binary64)) #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 b_2)) #s(literal 3 binary64))))","(exp.f64 (-.f64 (fma.f64 (log.f64 b_2) #s(literal 3 binary64) (*.f64 (log.f64 b_2) #s(literal 3 binary64))) (*.f64 (log.f64 b_2) #s(literal 3 binary64))))","(exp.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 b_2)) #s(literal 3 binary64)) (*.f64 (log.f64 b_2) #s(literal 3 binary64))))","(exp.f64 (fma.f64 (log.f64 b_2) #s(literal 3/2 binary64) (*.f64 (log.f64 b_2) #s(literal 3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 b_2) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 b_2 #s(literal 3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 b_2)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 b_2) #s(literal 3 binary64)))","(+.f64 (pow.f64 b_2 #s(literal 3 binary64)) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1 binary64))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(sqrt.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1 binary64))","(/.f64 #s(literal 1/2 binary64) b_2)","(/.f64 #s(literal -1/2 binary64) b_2)","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) b_2))","(neg.f64 (/.f64 #s(literal 1/2 binary64) b_2))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))","(*.f64 (pow.f64 b_2 #s(literal -2 binary64)) c)","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 c b_2))","(*.f64 (/.f64 c b_2) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 c (*.f64 b_2 b_2)))","(*.f64 (neg.f64 c) (pow.f64 b_2 #s(literal -2 binary64)))","(*.f64 c (pow.f64 b_2 #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 c (*.f64 b_2 b_2)))","(pow.f64 (*.f64 (pow.f64 c #s(literal -1 binary64)) (*.f64 b_2 b_2)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 c b_2) #s(literal -1 binary64)) b_2)","(/.f64 (*.f64 (/.f64 c b_2) #s(literal 1 binary64)) b_2)","(/.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(/.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 c))","(/.f64 (/.f64 c b_2) b_2)","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b_2 c) b_2)))","(/.f64 (neg.f64 c) (*.f64 b_2 b_2))","(/.f64 c (*.f64 b_2 b_2))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 b_2 c) b_2) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b_2 c) b_2))","(neg.f64 (/.f64 c (*.f64 b_2 b_2)))","(-.f64 #s(literal 0 binary64) (/.f64 c (*.f64 b_2 b_2)))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b_2 c) b_2)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 1 binary64))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(sqrt.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (*.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)))))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -3 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -6 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal -3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (/.f64 b_2 b_2) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal -2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 b_2 (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 b_2 #s(literal -2 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 b_2 (*.f64 b_2 b_2)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 b_2 (pow.f64 (/.f64 b_2 b_2) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 b_2 (/.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 b_2 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(fma.f64 #s(literal 1 binary64) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))))","(-.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2))","(-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) b_2)","(+.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":263.590087890625,"type":"rewrite"},{"compiler":[[33395,3692]],"memory":[[8231664,82463312]],"time":113.559814453125,"type":"eval"},{"alts":[["(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","next",45.47788298643302,"binary64"],["(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","fresh",62.51043138513434,"binary64"],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 b_2 b_2))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","fresh",57.14145654322278,"binary64"],["(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","fresh",48.23787960237691,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",27.74883149638816,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) a)","fresh",47.03469550731087,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","done",39.36096555649101,"binary64"],["(/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",44.9548975976057,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",48.42733705503734,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","next",27.827245073241127,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","fresh",45.013491344346164,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (*.f64 (fma.f64 (/.f64 a (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) c)) (neg.f64 b_2))))","fresh",42.375053190264126,"binary64"],["(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","fresh",62.60172346201608,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))) b_2))","fresh",44.970522594346164,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","next",41.724199488437485,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2))","fresh",59.08610919312387,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","fresh",42.443019795236616,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","next",62.35472401230036,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c)))","fresh",59.08220294312387,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","fresh",42.69698752399967,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (pow.f64 (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) a) #s(literal -1 binary64)) #s(literal -2 binary64)))","fresh",41.754962681341915,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","done",41.653400057440734,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","fresh",59.08610919312387,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64))) #s(literal -2 binary64)))","fresh",53.02278003135807,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","fresh",42.497707295236616,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","next",41.708087541138966,"binary64"]],"compiler":[[22,11],[29,20],[28,19],[34,15],[13,10],[19,14],[18,13],[17,12],[21,15],[23,16],[19,14],[29,21],[46,30],[19,14],[24,17],[19,14],[19,14],[20,15],[19,14],[19,14],[23,17],[19,14],[19,14],[23,18],[19,14],[19,14],[22,11],[29,20],[28,19],[34,15],[19,14],[17,12],[21,15],[23,16],[19,14],[29,21],[46,30],[19,14],[24,17],[19,14],[19,14],[20,15],[19,14],[19,14],[23,17],[19,14],[23,18],[19,14],[19,14]],"count":[[930,26]],"kept":[{"done":[3,2],"fresh":[17,7],"new":[905,16],"picked":[5,1]}],"memory":[[1884928,45585456]],"min-error":[[3.6357687078881487,"binary64"]],"time":36.739990234375,"type":"prune"},{"egraph":[[0,8004,294,0.03651672],[17,7994,297,0.012919786],[16,7670,297,0.029626164],[15,7158,297,0.034435298],[14,6865,297,0.033109887],[13,6599,297,0.029263821],[12,5504,297,0.033502605],[11,5092,301,0.031142993],[10,5084,301,0.019881896],[9,5016,301,0.020747171],[8,4715,301,0.023817102],[7,3775,301,0.024519233],[6,2285,301,0.023922338],[5,1233,301,0.015511375],[4,718,301,0.006787658],[3,402,301,0.00316057],[2,208,301,0.001982133],[1,114,303,0.00087863],[0,66,305,0.000590063],[0,40,305,0.000393271]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","#s(literal 1 binary64)","(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","a","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","#s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(neg.f64 a)","c","(*.f64 b_2 b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","b_2","(/.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","a","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a))","(*.f64 #s(literal -2 binary64) b_2)","#s(literal -2 binary64)","b_2","(neg.f64 a)","a","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 c b_2)","c","b_2","#s(literal 1/2 binary64)","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","a","#s(literal -2 binary64)","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","b_2","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))"]],"locations":[["(fma.f64 c a (*.f64 b_2 b_2))","cost-diff",0],["(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","cost-diff",0],["(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","cost-diff",1],["(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)","cost-diff",2],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","cost-diff",0],["(/.f64 c b_2)","cost-diff",0],["(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","cost-diff",0],["(neg.f64 a)","cost-diff",0],["(*.f64 #s(literal -2 binary64) b_2)","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","cost-diff",0],["(/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a))","cost-diff",1],["(/.f64 #s(literal -2 binary64) a)","cost-diff",0],["(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","cost-diff",0],["(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","cost-diff",2]],"memory":[[-6105040,16664944]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","(/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))","#s(literal 1 binary64)","(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) b_2))","a","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","#s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(neg.f64 a)","c","(*.f64 b_2 b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -2 binary64) a) b_2))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","b_2","(/.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","a","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a))","(*.f64 (/.f64 b_2 a) #s(literal 2 binary64))","(*.f64 #s(literal -2 binary64) b_2)","#s(literal -2 binary64)","b_2","(neg.f64 a)","a","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 #s(literal -2 binary64) a) b_2)))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 #s(literal -2 binary64) a) b_2))","(/.f64 c b_2)","c","b_2","#s(literal 1/2 binary64)","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","(/.f64 b_2 a)","a","#s(literal -2 binary64)","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (fma.f64 (*.f64 (/.f64 b_2 a) b_2) #s(literal 2 binary64) c) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)","(fma.f64 (*.f64 (/.f64 b_2 a) b_2) #s(literal 2 binary64) c)","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (*.f64 #s(literal 2 binary64) b_2) b_2 (*.f64 c a))","b_2","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":456.028076171875,"type":"simplify"},{"compiler":[[256,37]],"locations":[["(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","accuracy",0.08203125],["(fma.f64 c a (*.f64 b_2 b_2))","accuracy",0.24999724760556022],["(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)","accuracy",3.5310544806352735],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","accuracy",3.55576681637499],["(/.f64 b_2 a)","accuracy",0.0],["(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","accuracy",0.0078125],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","accuracy",0.0078125],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","accuracy",21.78840284213811],["(/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a))","accuracy",0.0],["(*.f64 #s(literal -2 binary64) b_2)","accuracy",0.0],["(neg.f64 a)","accuracy",0.0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","accuracy",21.55318369828574],["(/.f64 #s(literal -2 binary64) a)","accuracy",0.0],["(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","accuracy",0.08203125],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","accuracy",21.64573167181591],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","accuracy",0.00390625],["(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","accuracy",0.078125],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","accuracy",0.12890625],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","accuracy",3.551860566375087]],"memory":[[-6653472,34772672]],"mixsample":[[15.710205078125,"ival-div",0],[5.3291015625,"ival-add",0],[14.3037109375,"ival-mult",0],[0.113037109375,"ival-assert",0],[4.093505859375,"ival-sub",0],[0.2724609375,"ival-true",0],[3.6025390625,"ival-sqrt",0],[0.467041015625,"exact",0],[3.65380859375,"ival-neg",0]],"outcomes":[[47.347900390625,0,"invalid",166],[24.607666015625,0,"valid",90]],"time":127.111083984375,"type":"localize"},{"count":[[22,211]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(neg.f64 b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -2 binary64) a)","(/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","(*.f64 #s(literal -2 binary64) b_2)","(neg.f64 a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 c b_2)","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(fma.f64 c a (*.f64 b_2 b_2))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(/.f64 b_2 a)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))"]],"memory":[[1356800,18601264]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -1/2 (/ a b_2))","(* a (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* -1/16 (/ (* a (pow c 2)) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* a (+ (* -1/16 (/ (pow c 2) (pow b_2 5))) (* a (+ (* -1/32 (/ (pow c 3) (pow b_2 7))) (* -1/128 (/ (pow c 3) (pow b_2 7))))))))) (* 1/2 (/ 1 b_2))))","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(/ -2 a)","(* 2 (/ b_2 a))","(* -1 a)","(* 2 (/ (pow b_2 2) a))","(/ (+ (* 2 (pow b_2 2)) (* a c)) a)","(* 2 (pow b_2 2))","(+ (* 2 (pow b_2 2)) (* a c))","(* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2))))","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* -1 (* a (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* a (- (* -1 (* a (+ (* -1/2 (/ (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow c 2) (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow c 3) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(pow b_2 2)","(+ (* a c) (pow b_2 2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ b_2 a)","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (/ b_2 (* c (pow (sqrt -1) 2))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow a 2)))) (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (* 1/2 (/ (* (pow a 2) (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 4))))) (pow a 3)))) (+ (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","c","(+ c (* 2 (/ (pow b_2 2) a)))","(* a c)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(* (sqrt (/ c a)) (/ 1 (sqrt -1)))","(/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1))))) (pow a 2))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2)))))) c)) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow a 3))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* -1 (/ b_2 (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1))))))) a)","(* a (+ c (/ (pow b_2 2) a)))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (/ a c)) (sqrt -1))","(+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1))))) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* a (pow b_2 3)) (pow c 2)))) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))))) a)) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(* -1 (/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 4)))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (+ (* -1 (/ (+ (* -1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4)))))) (* c (pow (sqrt -1) 2)))) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) a)) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* b_2 (- (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -1) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))) (sqrt -1))))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ c b_2)","(+ (* (sqrt (/ c a)) (/ 1 (sqrt -1))) (/ b_2 (* a (pow (sqrt -1) 2))))","(+ (* b_2 (+ (* b_2 (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* b_2 (+ (* b_2 (- (+ (* -1 (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (sqrt -1)))) (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -1) 2)))))))) (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(/ (+ (* -1/2 a) (* -1/8 (/ (* (pow a 2) c) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))) (+ (* -1/32 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))) (* -1/128 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))))))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* (pow b_2 2) (+ (* 2 (/ 1 a)) (/ c (pow b_2 2))))","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(* 2 (/ b_2 (* a (- (sqrt -1) 1))))","(* b_2 (- (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1)))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))))))) (- (sqrt -1) 1))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (- (sqrt -1) 1) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (- (sqrt -1) 1) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (* (pow b_2 4) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -2 (/ b_2 c))","(* -1 (* b_2 (+ (* -1/2 (/ a (pow b_2 2))) (* 2 (/ 1 c)))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c))) (pow b_2 4))) (* 2 (/ 1 c))) (* 1/2 (/ a (pow b_2 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (* a (* c (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c)))))) (+ (* -1/16 (* (pow a 3) (pow c 2))) (* 2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))))) (pow b_2 6))) (* 2 (/ 1 c))) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 4))) (+ (* 1/4 (/ (* (pow a 2) c) (pow b_2 4))) (* 1/2 (/ a (pow b_2 2))))))))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -2 (/ b_2 (* a (+ 1 (sqrt -1)))))","(* -1 (* b_2 (- (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1))))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))))))) (+ 1 (sqrt -1)))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (* (pow b_2 4) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/16 (/ (pow a 3) (pow b_2 5))) (* c (+ (* -1/32 (/ (pow a 4) (pow b_2 7))) (* -1/128 (/ (pow a 4) (pow b_2 7))))))))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* -1 (* c (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* c (- (* -1 (* c (+ (* -1/2 (/ (* a (* (sqrt -1) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow a 2) (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow a 2) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (/ b_2 (pow (sqrt -1) 2))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1/2 (/ (pow b_2 3) (* a (* c (pow (sqrt -1) 4))))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (+ 1 (* 2 (/ (pow b_2 2) (* a c)))))","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(- (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (pow c 2))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b_2 2) (* c (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2))))))) a)) (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow c 3))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (+ (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ a (/ (pow b_2 2) c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (/ (+ b_2 (* -1 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))) c))) c))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow b_2 3) (pow c 2)) a))) c)) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))))) c))) c))) c))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (* -2 (/ (pow b_2 2) (* a c))) 1)))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1/2 (/ (* (pow b_2 2) (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (* a (pow (sqrt -1) 2)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) c)) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))"]],"series":[[7.718994140625,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (* -2 b_2) (neg a)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 b_2) (neg a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ c b_2) 1/2) (* (/ b_2 a) -2)) (/ c b_2) (* (/ b_2 a) -2) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 a) (sqrt (neg (+ (* c a) (* b_2 b_2)))))","c","-inf"],[4.963134765625,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (* -2 b_2) (neg a)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 b_2) (neg a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ c b_2) 1/2) (* (/ b_2 a) -2)) (/ c b_2) (* (/ b_2 a) -2) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 a) (sqrt (neg (+ (* c a) (* b_2 b_2)))))","c","inf"],[3.72802734375,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (* -2 b_2) (neg a)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 b_2) (neg a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ c b_2) 1/2) (* (/ b_2 a) -2)) (/ c b_2) (* (/ b_2 a) -2) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 a) (sqrt (neg (+ (* c a) (* b_2 b_2)))))","c","0"],[5.012939453125,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (* -2 b_2) (neg a)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 b_2) (neg a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ c b_2) 1/2) (* (/ b_2 a) -2)) (/ c b_2) (* (/ b_2 a) -2) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 a) (sqrt (neg (+ (* c a) (* b_2 b_2)))))","b_2","-inf"],[6.2099609375,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (* -2 b_2) (neg a)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 b_2) (neg a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ c b_2) 1/2) (* (/ b_2 a) -2)) (/ c b_2) (* (/ b_2 a) -2) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 a) (sqrt (neg (+ (* c a) (* b_2 b_2)))))","b_2","inf"],[3.676025390625,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (* -2 b_2) (neg a)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 b_2) (neg a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ c b_2) 1/2) (* (/ b_2 a) -2)) (/ c b_2) (* (/ b_2 a) -2) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 a) (sqrt (neg (+ (* c a) (* b_2 b_2)))))","b_2","0"],[5.462158203125,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (* -2 b_2) (neg a)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 b_2) (neg a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ c b_2) 1/2) (* (/ b_2 a) -2)) (/ c b_2) (* (/ b_2 a) -2) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 a) (sqrt (neg (+ (* c a) (* b_2 b_2)))))","a","-inf"],[4.51708984375,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (* -2 b_2) (neg a)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 b_2) (neg a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ c b_2) 1/2) (* (/ b_2 a) -2)) (/ c b_2) (* (/ b_2 a) -2) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 a) (sqrt (neg (+ (* c a) (* b_2 b_2)))))","a","inf"],[4.611083984375,"((/ 1 (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))))) (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (* -2 b_2) (neg a)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 b_2) (neg a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ c b_2) 1/2) (* (/ b_2 a) -2)) (/ c b_2) (* (/ b_2 a) -2) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 a) (sqrt (neg (+ (* c a) (* b_2 b_2)))))","a","0"]],"time":52.115966796875,"type":"series"},{"count":[[211,209]],"egraph":[[0,8772,7738,0.109713125],[1,4462,8013,0.03660081],[0,1343,8321,0.015581481]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -1/2 (/ a b_2))","(* a (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* -1/16 (/ (* a (pow c 2)) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* a (+ (* -1/16 (/ (pow c 2) (pow b_2 5))) (* a (+ (* -1/32 (/ (pow c 3) (pow b_2 7))) (* -1/128 (/ (pow c 3) (pow b_2 7))))))))) (* 1/2 (/ 1 b_2))))","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(/ -2 a)","(* 2 (/ b_2 a))","(* -1 a)","(* 2 (/ (pow b_2 2) a))","(/ (+ (* 2 (pow b_2 2)) (* a c)) a)","(* 2 (pow b_2 2))","(+ (* 2 (pow b_2 2)) (* a c))","(* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2))))","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* -1 (* a (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* a (- (* -1 (* a (+ (* -1/2 (/ (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow c 2) (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow c 3) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(pow b_2 2)","(+ (* a c) (pow b_2 2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ b_2 a)","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (/ b_2 (* c (pow (sqrt -1) 2))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow a 2)))) (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (* 1/2 (/ (* (pow a 2) (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 4))))) (pow a 3)))) (+ (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","c","(+ c (* 2 (/ (pow b_2 2) a)))","(* a c)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(* (sqrt (/ c a)) (/ 1 (sqrt -1)))","(/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1))))) (pow a 2))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2)))))) c)) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow a 3))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* -1 (/ b_2 (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1))))))) a)","(* a (+ c (/ (pow b_2 2) a)))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (/ a c)) (sqrt -1))","(+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1))))) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* a (pow b_2 3)) (pow c 2)))) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))))) a)) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(* -1 (/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 4)))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (+ (* -1 (/ (+ (* -1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4)))))) (* c (pow (sqrt -1) 2)))) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) a)) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* b_2 (- (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -1) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))) (sqrt -1))))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ c b_2)","(+ (* (sqrt (/ c a)) (/ 1 (sqrt -1))) (/ b_2 (* a (pow (sqrt -1) 2))))","(+ (* b_2 (+ (* b_2 (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* b_2 (+ (* b_2 (- (+ (* -1 (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (sqrt -1)))) (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -1) 2)))))))) (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(/ (+ (* -1/2 a) (* -1/8 (/ (* (pow a 2) c) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))) (+ (* -1/32 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))) (* -1/128 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))))))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* (pow b_2 2) (+ (* 2 (/ 1 a)) (/ c (pow b_2 2))))","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(* 2 (/ b_2 (* a (- (sqrt -1) 1))))","(* b_2 (- (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1)))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))))))) (- (sqrt -1) 1))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (- (sqrt -1) 1) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (- (sqrt -1) 1) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (* (pow b_2 4) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -2 (/ b_2 c))","(* -1 (* b_2 (+ (* -1/2 (/ a (pow b_2 2))) (* 2 (/ 1 c)))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c))) (pow b_2 4))) (* 2 (/ 1 c))) (* 1/2 (/ a (pow b_2 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (* a (* c (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c)))))) (+ (* -1/16 (* (pow a 3) (pow c 2))) (* 2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))))) (pow b_2 6))) (* 2 (/ 1 c))) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 4))) (+ (* 1/4 (/ (* (pow a 2) c) (pow b_2 4))) (* 1/2 (/ a (pow b_2 2))))))))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -2 (/ b_2 (* a (+ 1 (sqrt -1)))))","(* -1 (* b_2 (- (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1))))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))))))) (+ 1 (sqrt -1)))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (* (pow b_2 4) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/16 (/ (pow a 3) (pow b_2 5))) (* c (+ (* -1/32 (/ (pow a 4) (pow b_2 7))) (* -1/128 (/ (pow a 4) (pow b_2 7))))))))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* -1 (* c (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* c (- (* -1 (* c (+ (* -1/2 (/ (* a (* (sqrt -1) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow a 2) (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow a 2) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (/ b_2 (pow (sqrt -1) 2))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1/2 (/ (pow b_2 3) (* a (* c (pow (sqrt -1) 4))))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (+ 1 (* 2 (/ (pow b_2 2) (* a c)))))","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(- (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (pow c 2))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b_2 2) (* c (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2))))))) a)) (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow c 3))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (+ (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ a (/ (pow b_2 2) c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (/ (+ b_2 (* -1 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))) c))) c))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow b_2 3) (pow c 2)) a))) c)) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))))) c))) c))) c))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (* -2 (/ (pow b_2 2) (* a c))) 1)))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1/2 (/ (* (pow b_2 2) (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (* a (pow (sqrt -1) 2)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) c)) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))"]],"memory":[[11716048,63278416]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b_2 #s(literal 5 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(* -1/2 (/ a b_2))","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(* a (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c a)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) b_2)) a)","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* -1/16 (/ (* a (pow c 2)) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) a (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2))) a)","(* a (- (* a (+ (* -1/8 (/ c (pow b_2 3))) (* a (+ (* -1/16 (/ (pow c 2) (pow b_2 5))) (* a (+ (* -1/32 (/ (pow c 3) (pow b_2 7))) (* -1/128 (/ (pow c 3) (pow b_2 7))))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 7 binary64))) #s(literal -5/128 binary64)) a (/.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 5 binary64)))) a (*.f64 (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) a (neg.f64 (/.f64 #s(literal 1/2 binary64) b_2))) a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b_2 #s(literal 5 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","(/ -2 a)","(/.f64 #s(literal -2 binary64) a)","(* 2 (/ b_2 a))","(*.f64 #s(literal 2 binary64) (/.f64 b_2 a))","(* -1 a)","(neg.f64 a)","(* 2 (/ (pow b_2 2) a))","(*.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal 2 binary64))","(/ (+ (* 2 (pow b_2 2)) (* a c)) a)","(/.f64 (fma.f64 (*.f64 b_2 b_2) #s(literal 2 binary64) (*.f64 c a)) a)","(* 2 (pow b_2 2))","(*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64))","(+ (* 2 (pow b_2 2)) (* a c))","(fma.f64 (*.f64 b_2 b_2) #s(literal 2 binary64) (*.f64 c a))","(* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2))))","(*.f64 (/.f64 #s(literal 2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 b_2 b_2) a))","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/.f64 (fma.f64 (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) a (/.f64 (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* -1 (* a (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal 1/2 binary64))) (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) a (/.f64 (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* a (- (* -1 (* a (+ (* -1/2 (/ (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow c 2) (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow c 3) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (/.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal 1/2 binary64)))) b_2) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))))) (neg.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal 1/2 binary64))))) a (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) a (/.f64 (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))) a)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* a c) (pow b_2 2))","(fma.f64 c a (*.f64 b_2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/16 binary64) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(/ b_2 a)","(/.f64 b_2 a)","(* b_2 (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(neg.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(-.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) a)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(+.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64))))","(* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (/ b_2 (* c (pow (sqrt -1) 2))))","(-.f64 (/.f64 b_2 (neg.f64 c)) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow a 2)))) (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))))","(fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) a))) (/.f64 b_2 (neg.f64 c)))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (* 1/2 (/ (* (pow a 2) (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 4))))) (pow a 3)))) (+ (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3))))))","(-.f64 (-.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) c) (/.f64 (*.f64 a a) c)))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) (*.f64 (/.f64 b_2 c) #s(literal 1 binary64))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(neg.f64 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (-.f64 (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))) a)","(* 1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","c","(+ c (* 2 (/ (pow b_2 2) a)))","(fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal 2 binary64) c)","(* a c)","(*.f64 c a)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(*.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal 2 binary64) c) a)","(* (sqrt (/ c a)) (/ 1 (sqrt -1)))","(/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (+.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) a)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1))))) (pow a 2))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/.f64 (+.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 #s(literal -1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) (*.f64 a a))) (/.f64 b_2 #s(literal -1 binary64))) a)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2)))))) c)) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow a 3))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* -1 (/ b_2 (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1))))))) a)","(/.f64 (-.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 #s(literal -1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 (*.f64 (*.f64 a (*.f64 b_2 b_2)) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 #s(literal -1 binary64))))) c) #s(literal 1/2 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 #s(literal -1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) #s(literal -1 binary64))))) a)","(* a (+ c (/ (pow b_2 2) a)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) b_2) a))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))))) a)) a))","(* (sqrt (/ a c)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1))))) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (*.f64 a (/.f64 b_2 c))) a))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* a (pow b_2 3)) (pow c 2)))) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b_2 2) (sqrt -1)))))) a)) (* -1 (/ (* a b_2) c))) a)) (* (sqrt (/ a c)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/2 binary64))) (-.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) c) (/.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) a) c)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/2 binary64)))) a) #s(literal -1 binary64) (*.f64 a (/.f64 b_2 c))) a))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (neg.f64 b_2))) a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (neg.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64)))))) a) b_2)) a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal -2 binary64) (neg.f64 c)))","(* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(neg.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 4)))) a))","(/.f64 (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (+.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) a)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(/.f64 (neg.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))))) a)) a))) a)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (+ (* -1 (/ (+ (* -1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4)))))) (* c (pow (sqrt -1) 2)))) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) a)) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(/.f64 (neg.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (*.f64 a (*.f64 b_2 b_2)) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) c))) a)))) a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) a))) a)","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(*.f64 (neg.f64 a) (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(neg.f64 (*.f64 (sqrt.f64 (*.f64 c a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) a))) b_2 (neg.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (neg.f64 (/.f64 #s(literal 1 binary64) a))) b_2 (neg.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64)) b_2 (/.f64 #s(literal 1 binary64) (neg.f64 c))) b_2 (neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (+ (* b_2 (+ (* -1 (* b_2 (- (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -1) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))) (sqrt -1))))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3))))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 b_2) (+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 c c) a) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal 1 binary64) (neg.f64 c))) b_2 (neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(-.f64 (neg.f64 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) #s(literal -1/2 binary64) #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) #s(literal 1/8 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a))))","(* -1 b_2)","(neg.f64 b_2)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) c)) b_2)","(/ c b_2)","(/.f64 c b_2)","(+ (* (sqrt (/ c a)) (/ 1 (sqrt -1))) (/ b_2 (* a (pow (sqrt -1) 2))))","(+.f64 (/.f64 b_2 (neg.f64 a)) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (+ (* b_2 (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (neg.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))) b_2 (/.f64 #s(literal 1 binary64) (neg.f64 a))) b_2 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (+ (* b_2 (- (+ (* -1 (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (sqrt -1)))) (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -1) 2)))))))) (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 b_2) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (neg.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 c) (*.f64 a a)))) (-.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (neg.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))))))) b_2 (/.f64 #s(literal 1 binary64) (neg.f64 a))) b_2 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 b_2 b_2) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (-.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) (/.f64 #s(literal 2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) a))) b_2)","(/ (+ (* -1/2 a) (* -1/8 (/ (* (pow a 2) c) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) b_2) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a)) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) b_2) (/.f64 c b_2)))) b_2)","(/ (+ (* -1/2 a) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 3) (pow c 2)) (pow b_2 4))) (+ (* -1/32 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))) (* -1/128 (/ (* (pow a 4) (pow c 3)) (pow b_2 6))))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (fma.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 c b_2)) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -5/128 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/16 binary64))))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal 1/2 binary64) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (neg.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 2 binary64)))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) #s(literal -2 binary64)) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) b_2)","(* (pow b_2 2) (+ (* 2 (/ 1 a)) (/ c (pow b_2 2))))","(*.f64 (+.f64 (/.f64 #s(literal 2 binary64) a) (/.f64 c (*.f64 b_2 b_2))) (*.f64 b_2 b_2))","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(*.f64 (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 2 binary64)) (*.f64 b_2 b_2))","(* 2 (/ b_2 (* a (- (sqrt -1) 1))))","(*.f64 (/.f64 b_2 (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)) #s(literal 2 binary64))","(* b_2 (- (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (*.f64 (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 b_2 b_2)))) b_2)","(* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1)))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/4 binary64))) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (*.f64 (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 b_2 b_2)))) b_2)","(* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))))))) (- (sqrt -1) 1))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (- (sqrt -1) 1) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (- (sqrt -1) 1) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (* (pow b_2 4) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))) (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (fma.f64 (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/4 binary64)))) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 (-.f64 (/.f64 c (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 c c)) (*.f64 a a)) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) #s(literal -1/8 binary64)))) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (*.f64 (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 b_2 b_2)))))) b_2)","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(*.f64 (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) b_2 b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64)))) b_2 b_2)","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 a b_2)) #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2)))) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) b_2)","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)))) b_2)","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) (+.f64 c (*.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a))))))) b_2)","(* -2 (/ b_2 c))","(*.f64 (/.f64 b_2 c) #s(literal -2 binary64))","(* -1 (* b_2 (+ (* -1/2 (/ a (pow b_2 2))) (* 2 (/ 1 c)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 a (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) c)))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c))) (pow b_2 4))) (* 2 (/ 1 c))) (* 1/2 (/ a (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64) (fma.f64 (/.f64 a (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) c))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (* a (* c (+ (* -1/8 (* (pow a 2) c)) (* 1/4 (* (pow a 2) c)))))) (+ (* -1/16 (* (pow a 3) (pow c 2))) (* 2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))))) (pow b_2 6))) (* 2 (/ 1 c))) (+ (* -1/8 (/ (* (pow a 2) c) (pow b_2 4))) (+ (* 1/4 (/ (* (pow a 2) c) (pow b_2 4))) (* 1/2 (/ a (pow b_2 2))))))))","(*.f64 (neg.f64 b_2) (-.f64 (-.f64 (/.f64 #s(literal 2 binary64) c) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) a) (*.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal 1/8 binary64)) c) (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (*.f64 c c)) (/.f64 #s(literal 5/64 binary64) a)) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (*.f64 c c)))) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/4 binary64) (*.f64 (/.f64 a (*.f64 b_2 b_2)) #s(literal 1/2 binary64))))))","(* -1/2 (/ (* a c) b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal 1/8 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a)))) b_2)","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (neg.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (*.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal -1/8 binary64)))) b_2)","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (neg.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal -1/8 binary64))))) b_2)","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -2 (/ b_2 (* a (+ 1 (sqrt -1)))))","(*.f64 (/.f64 b_2 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a)) #s(literal -2 binary64))","(* -1 (* b_2 (- (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(*.f64 (neg.f64 b_2) (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (*.f64 (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 b_2 b_2)))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1))))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(*.f64 (neg.f64 b_2) (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a))) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/4 binary64))) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (*.f64 (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 b_2 b_2)))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))))))) (+ 1 (sqrt -1)))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (* (pow b_2 4) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))))","(*.f64 (neg.f64 b_2) (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a))) (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (fma.f64 (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/4 binary64)))) (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 (-.f64 (/.f64 c (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 c c)) (*.f64 a a)) (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) #s(literal -1/8 binary64)))) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (*.f64 (pow.f64 (+.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 b_2 b_2)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(neg.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) b_2 b_2))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64)))) b_2 b_2))","(* -1 (* b_2 (sqrt -1)))","(*.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 a b_2)) #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2)))) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 a (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 a a) c)) (pow.f64 b_2 #s(literal 5 binary64)))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64)))) #s(literal -1/16 binary64) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/16 (/ (pow a 3) (pow b_2 5))) (* c (+ (* -1/32 (/ (pow a 4) (pow b_2 7))) (* -1/128 (/ (pow a 4) (pow b_2 7))))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 7 binary64))) #s(literal -5/128 binary64)) c (/.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64)))) c (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64) (*.f64 #s(literal 1/2 binary64) (/.f64 a b_2))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64)))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 a a) (pow.f64 b_2 #s(literal 3 binary64))))) c (*.f64 #s(literal 1/2 binary64) (/.f64 a b_2))) c (*.f64 #s(literal -2 binary64) b_2))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) c (*.f64 (/.f64 #s(literal 2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 b_2 b_2) a)))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* -1 (* c (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(fma.f64 (fma.f64 (neg.f64 c) (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal 1/2 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) c (*.f64 (/.f64 #s(literal 2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 b_2 b_2) a)))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* c (- (* -1 (* c (+ (* -1/2 (/ (* a (* (sqrt -1) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow a 2) (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow a 2) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 c) (fma.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal 1/2 binary64))) (sqrt.f64 #s(literal -1 binary64))) a) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))))) (neg.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal 1/2 binary64))))) c (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) c (*.f64 (/.f64 #s(literal 2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 b_2 b_2) a)))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64)))) #s(literal -1/16 binary64) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) b_2) #s(literal 1/2 binary64))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) b_2) #s(literal 1/2 binary64))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) (*.f64 c a))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (+.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/8 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64)))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (/ b_2 (pow (sqrt -1) 2))) c)","(/.f64 (-.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))) c)","(/.f64 (-.f64 (-.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) #s(literal 1/2 binary64) (/.f64 b_2 #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)))) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1/2 (/ (pow b_2 3) (* a (* c (pow (sqrt -1) 4))))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (/ b_2 (pow (sqrt -1) 2))))))) c)","(/.f64 (-.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) (*.f64 b_2 (/.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) c)) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) a) (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) #s(literal 1/2 binary64) (/.f64 b_2 #s(literal -1 binary64)))))) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (-.f64 (/.f64 (neg.f64 b_2) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(* c (+ 1 (* 2 (/ (pow b_2 2) (* a c)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) c) #s(literal 2 binary64) #s(literal 1 binary64)) c)","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(*.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) c) #s(literal 2 binary64) a) c)","(- (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 2 binary64) (+.f64 (/.f64 b_2 (neg.f64 a)) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (pow c 2))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(+.f64 (-.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 2 binary64) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 b_2 (/.f64 c (neg.f64 a)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64))) (*.f64 c c))) (/.f64 b_2 (neg.f64 a)))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b_2 2) (* c (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2))))))) a)) (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow c 3))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (+ (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))))","(-.f64 (-.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 2 binary64) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 b_2 (/.f64 c (neg.f64 a)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 b_2 (/.f64 c (neg.f64 a))))) a) #s(literal 1/2 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 b_2 (/.f64 c (neg.f64 a)))) (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 b_2 a)))))","(* c (+ a (/ (pow b_2 2) c)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) a)) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)))) c)) c))))","(* -1 (/ (+ b_2 (* -1 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (neg.f64 (-.f64 b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))) c))) c))) c))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 c b_2 (/.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64)) c))) c)))) c)","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (* b_2 c)) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (* b_2 (* (sqrt -1) (+ (* -1 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1))))))))) (* -1/2 (/ (* (pow b_2 3) (pow c 2)) a))) c)) (* 1/2 (* (sqrt (/ (pow c 3) a)) (* (pow b_2 2) (sqrt -1)))))) c))) c))) c))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 c b_2 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 (*.f64 c c) a)) #s(literal -1/2 binary64))) c))) c))) c)))) c)","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b_2 b_2)) (neg.f64 b_2))) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (neg.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64)))))) c) b_2)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b_2 a) c) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) b_2)))","(* -1 (* c (- (* -2 (/ (pow b_2 2) (* a c))) 1)))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) a) c) #s(literal -2 binary64) #s(literal -1 binary64)))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (*.f64 b_2 b_2) c) #s(literal -2 binary64) (neg.f64 a)))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(-.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) c))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(-.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) (sqrt.f64 #s(literal -1 binary64)))) (+.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a)))) c))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1/2 (/ (* (pow b_2 2) (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (* a (pow (sqrt -1) 2)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) c)) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(-.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) (*.f64 b_2 b_2)) a) (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) #s(literal -1/2 binary64)))))) c) #s(literal -1 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a)))) c))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(*.f64 (neg.f64 c) (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a)))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))))"]],"stop":[["iter limit",1],["node limit",1]],"time":309.176025390625,"type":"simplify"},{"count":[[22,761]],"egraph":[[0,9382,236,0.120559368],[2,1978,236,0.044932103],[1,264,236,0.006879637],[0,66,240,0.001927371],[0,40,240,0.000390753]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(neg.f64 b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -2 binary64) a)","(/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","(*.f64 #s(literal -2 binary64) b_2)","(neg.f64 a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 c b_2)","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(fma.f64 c a (*.f64 b_2 b_2))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(/.f64 b_2 a)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))"]],"memory":[[-9571008,71720880]],"outputs":[["(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(*.f64 (/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) a))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (pow.f64 (pow.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal 1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (neg.f64 a)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a))","(pow.f64 (exp.f64 (log.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64))","(pow.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)) (-.f64 (*.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) (*.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))))","(/.f64 (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -3 binary64)) (pow.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)))) (*.f64 (/.f64 (neg.f64 b_2) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) (neg.f64 a))","(/.f64 (-.f64 (*.f64 (/.f64 b_2 #s(literal -1 binary64)) a) (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) a) (*.f64 (neg.f64 a) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 b_2 a) (*.f64 (neg.f64 a) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 a (*.f64 (/.f64 (neg.f64 a) b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 (neg.f64 a) b_2) a))","(/.f64 (-.f64 (/.f64 b_2 #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a)","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) a)","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) a)","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (neg.f64 (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 a) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(fma.f64 (/.f64 b_2 #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (/.f64 b_2 #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 b_2 (/.f64 #s(literal -1 binary64) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) a) (/.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) a))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) a) (/.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a))","(-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(+.f64 (/.f64 (neg.f64 b_2) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (/.f64 (neg.f64 a) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (/.f64 (neg.f64 a) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) a) #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 a (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (/.f64 a (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(*.f64 (/.f64 a #s(literal 1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(*.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) a)","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 a) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(*.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))","(*.f64 (neg.f64 a) (pow.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 a (/.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 a (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(pow.f64 (/.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 a #s(literal 1 binary64))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a)) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (neg.f64 a))) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (neg.f64 a))) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) a)) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a))) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a))))","(/.f64 (*.f64 a #s(literal 1 binary64)) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (/.f64 (neg.f64 a) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a)))","(/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))","(/.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 a) (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))))","(/.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 a) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 a (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))))","(/.f64 a (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 a (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a))","(neg.f64 (/.f64 (neg.f64 a) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) #s(literal 1 binary64)) (/.f64 (/.f64 (neg.f64 a) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))) (/.f64 a (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) (/.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (/.f64 (neg.f64 a) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) (/.f64 (neg.f64 a) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) a)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (pow.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (neg.f64 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (*.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (neg.f64 (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (neg.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))))","(neg.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (-.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (neg.f64 b_2) #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))))","(-.f64 #s(literal 0 binary64) (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 0 binary64) (neg.f64 b_2)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(/.f64 (*.f64 (neg.f64 b_2) b_2) (+.f64 #s(literal 0 binary64) b_2))","(/.f64 (*.f64 b_2 b_2) (neg.f64 (+.f64 #s(literal 0 binary64) b_2)))","(neg.f64 b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 #s(literal 0 binary64) b_2)))","(-.f64 #s(literal 0 binary64) b_2)","(+.f64 #s(literal 0 binary64) (neg.f64 b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) a))","(*.f64 (/.f64 #s(literal 2 binary64) a) (/.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) #s(literal 1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b_2 #s(literal -1/2 binary64)))","(*.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b_2) a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) a) (/.f64 b_2 #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) b_2)) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 a #s(literal -1/2 binary64)))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 a #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal 2 binary64) b_2)) a)","(/.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 a))","(/.f64 #s(literal 2 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) a)","(/.f64 #s(literal -2 binary64) (/.f64 a b_2))","(/.f64 (neg.f64 b_2) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 b_2 (*.f64 a #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) a))","(pow.f64 (/.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 2 binary64) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 #s(literal -2 binary64) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 a #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 a #s(literal -1/2 binary64)))","(neg.f64 (/.f64 #s(literal 2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 a #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) b_2) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) a))","(*.f64 (/.f64 b_2 #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 (*.f64 #s(literal 2 binary64) b_2) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 (/.f64 #s(literal -2 binary64) a)) b_2)","(*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (pow.f64 (pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 #s(literal -2 binary64) b_2))","(*.f64 (/.f64 (neg.f64 b_2) a) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (/.f64 b_2 a))","(*.f64 #s(literal -1 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal -1 binary64))","(*.f64 (/.f64 b_2 a) #s(literal 2 binary64))","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 #s(literal -2 binary64) a) (/.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) a) (neg.f64 b_2))","(*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b_2) a))","(*.f64 (neg.f64 b_2) (/.f64 #s(literal -2 binary64) a))","(*.f64 b_2 (*.f64 #s(literal -2 binary64) (/.f64 #s(literal -1 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal 2 binary64) a))","(*.f64 b_2 (neg.f64 (/.f64 #s(literal -2 binary64) a)))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))","(pow.f64 (/.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 1 binary64))) a)","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal 2 binary64) b_2))) a)","(/.f64 (/.f64 (*.f64 #s(literal 2 binary64) b_2) #s(literal 1 binary64)) a)","(/.f64 (*.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 1 binary64)) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 #s(literal 2 binary64) b_2)) (neg.f64 a))","(/.f64 (*.f64 #s(literal 2 binary64) b_2) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)))","(neg.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) b_2)","(*.f64 b_2 #s(literal -2 binary64))","(*.f64 #s(literal -1 binary64) a)","(*.f64 a #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 a) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 a a) (*.f64 #s(literal 0 binary64) (neg.f64 a)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 a a))) (neg.f64 (+.f64 #s(literal 0 binary64) a)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 a a (*.f64 #s(literal 0 binary64) a)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 a a)) (+.f64 #s(literal 0 binary64) a))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 a #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 a a (*.f64 #s(literal 0 binary64) a))))","(neg.f64 a)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) a)) (/.f64 (*.f64 a a) (+.f64 #s(literal 0 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 a a (*.f64 #s(literal 0 binary64) a)))) (/.f64 (pow.f64 a #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 a a (*.f64 #s(literal 0 binary64) a)))))","(-.f64 #s(literal 0 binary64) a)","(+.f64 #s(literal 0 binary64) (neg.f64 a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 b_2 c) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (/.f64 b_2 c) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (/.f64 b_2 c) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 b_2 c) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 b_2 c) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 b_2 c) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 b_2 (*.f64 #s(literal -2 binary64) b_2)))) (neg.f64 (*.f64 b_2 a)))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) b_2 (*.f64 a (*.f64 #s(literal 1/2 binary64) c)))) (neg.f64 (*.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64)) a (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (neg.f64 b_2) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64)) (/.f64 a b_2) (*.f64 #s(literal 2 binary64) b_2)) (*.f64 (neg.f64 b_2) (/.f64 a b_2)))","(/.f64 (fma.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) b_2)) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) a (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (neg.f64 b_2) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) (/.f64 a b_2) (*.f64 #s(literal 2 binary64) b_2)) (*.f64 (neg.f64 b_2) (/.f64 a b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) b_2)) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) a (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (neg.f64 b_2) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (/.f64 a b_2) (*.f64 #s(literal 2 binary64) b_2)) (*.f64 (neg.f64 b_2) (/.f64 a b_2)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) b_2)) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 (*.f64 #s(literal 1 binary64) b_2))) (*.f64 b_2 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 b_2 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (neg.f64 a) (*.f64 b_2 (*.f64 #s(literal 2 binary64) b_2))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (/.f64 a b_2) (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 (/.f64 a b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 b_2)) (*.f64 b_2 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (*.f64 b_2 #s(literal 1 binary64))) (*.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 b_2 c) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (/.f64 b_2 c) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 b_2 c) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (/.f64 b_2 c) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 a) (*.f64 (/.f64 b_2 c) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (/.f64 b_2 c) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) a (*.f64 (/.f64 b_2 c) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (/.f64 b_2 c) a))","(/.f64 (fma.f64 (/.f64 a b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 c) #s(literal -2 binary64))) (*.f64 (/.f64 b_2 c) (/.f64 a b_2)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 b_2 c) b_2)) (*.f64 (/.f64 b_2 c) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (*.f64 (/.f64 b_2 c) #s(literal 1 binary64))) (*.f64 (/.f64 b_2 c) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a)))","(/.f64 (+.f64 a (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) a))","(/.f64 (+.f64 (/.f64 a b_2) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) #s(literal -2 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (/.f64 a b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) b_2)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) #s(literal 1 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 c) #s(literal 1/2 binary64)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 c)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (/.f64 b_2 c) (*.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1/2 binary64))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (/.f64 b_2 c)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 c) #s(literal 1/2 binary64)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 c)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) b_2))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (/.f64 b_2 c) (*.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1/2 binary64))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (/.f64 b_2 c)))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 (neg.f64 c) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (neg.f64 c)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 b_2) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) b_2 (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (/.f64 b_2 c) (*.f64 (neg.f64 a) #s(literal 1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 b_2 c)))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 b_2) (*.f64 a (*.f64 (neg.f64 c) #s(literal 1/2 binary64)))) (*.f64 a (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 b_2) (*.f64 a (*.f64 #s(literal 1/2 binary64) (neg.f64 c)))) (*.f64 a (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 b_2) (*.f64 a (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 a (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (/.f64 b_2 c) (*.f64 a #s(literal 1/2 binary64))) (*.f64 a (/.f64 b_2 c)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 #s(literal 2 binary64) b_2 (*.f64 (/.f64 a b_2) (*.f64 (neg.f64 c) #s(literal 1/2 binary64)))) (*.f64 (/.f64 a b_2) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) b_2 (*.f64 (/.f64 a b_2) (*.f64 #s(literal 1/2 binary64) (neg.f64 c)))) (*.f64 (/.f64 a b_2) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 2 binary64) b_2 (*.f64 (/.f64 a b_2) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (/.f64 a b_2) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) b_2 (*.f64 (/.f64 a b_2) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (/.f64 a b_2) b_2))","(/.f64 (fma.f64 #s(literal -2 binary64) (/.f64 b_2 c) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) (*.f64 (/.f64 a b_2) (/.f64 b_2 c)))","(/.f64 (fma.f64 #s(literal -2 binary64) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (/.f64 a b_2)) (*.f64 (/.f64 a b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 c) #s(literal 1/2 binary64)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 c)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 b_2 b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) b_2))","(/.f64 (fma.f64 b_2 (/.f64 b_2 c) (*.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1/2 binary64))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (/.f64 b_2 c)))","(/.f64 (fma.f64 b_2 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (*.f64 (neg.f64 c) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (*.f64 #s(literal 1/2 binary64) (neg.f64 c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) b_2))","(/.f64 (+.f64 (/.f64 b_2 c) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) #s(literal 1/2 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (/.f64 b_2 c)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64))) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 b_2 c) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal -2 binary64)) (/.f64 b_2 a))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 b_2 c) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 b_2 c) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 b_2 (*.f64 #s(literal -2 binary64) b_2))) (*.f64 b_2 a))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) b_2 (*.f64 a (*.f64 #s(literal 1/2 binary64) c))) (*.f64 a b_2))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 b_2 c) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal -2 binary64)) (/.f64 b_2 a)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 b_2 c) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (/.f64 b_2 c) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (/.f64 b_2 c) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 b_2 c) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (/.f64 b_2 c) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 b_2 c) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (neg.f64 c) #s(literal -1 binary64)) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (/.f64 b_2 #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 (/.f64 #s(literal 2 binary64) a) (/.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) #s(literal 1 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b_2 #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b_2) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 (/.f64 b_2 a) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 (/.f64 #s(literal -2 binary64) a) (/.f64 b_2 #s(literal 1 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 (/.f64 #s(literal -2 binary64) a) b_2 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 #s(literal -2 binary64) (/.f64 b_2 a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 c (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 c (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 b_2 (/.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))) (/.f64 (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))))","(+.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))","(*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 c #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) c)","(*.f64 (neg.f64 c) (/.f64 #s(literal -1 binary64) b_2))","(*.f64 c (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 c b_2))","(pow.f64 (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 c) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) b_2)","(/.f64 (*.f64 c #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 c) (neg.f64 b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b_2 c) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 c)))","(/.f64 c b_2)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b_2 c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 c))","(neg.f64 (/.f64 (neg.f64 c) b_2))","(neg.f64 (/.f64 c (neg.f64 b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b_2)) (/.f64 c (neg.f64 b_2)))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) a))","(*.f64 (/.f64 #s(literal 2 binary64) a) (/.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) #s(literal 1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b_2 #s(literal -1/2 binary64)))","(*.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b_2) a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) a) (/.f64 b_2 #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) b_2)) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 a #s(literal -1/2 binary64)))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 a #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal 2 binary64) b_2)) a)","(/.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 a))","(/.f64 #s(literal 2 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) a)","(/.f64 #s(literal -2 binary64) (/.f64 a b_2))","(/.f64 (neg.f64 b_2) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 b_2 (*.f64 a #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) a) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a))","(pow.f64 (/.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (*.f64 a (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) a)","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) a))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 a (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 a (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 a (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)) (/.f64 (*.f64 b_2 b_2) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (*.f64 c a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (*.f64 b_2 b_2))) (*.f64 (*.f64 c a) (fma.f64 b_2 b_2 (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 b_2 b_2))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (*.f64 b_2 b_2))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (*.f64 c a) (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 b_2 b_2))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 b_2 b_2))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 b_2 b_2))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))) (*.f64 b_2 b_2))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (*.f64 b_2 b_2))","(fma.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) (*.f64 b_2 b_2))","(fma.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 b_2 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (fma.f64 b_2 b_2 (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 a c (fma.f64 b_2 b_2 (*.f64 b_2 b_2)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(+.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (*.f64 c a))","(+.f64 (*.f64 c a) (fma.f64 b_2 b_2 (*.f64 b_2 b_2)))","(+.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))))) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 a (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) a) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))))) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 a (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) a) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 a (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(*.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) a) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (/.f64 #s(literal -1 binary64) a) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) a) (/.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (pow.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(pow.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal -1 binary64))","(pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))) a)","(/.f64 (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) #s(literal 1 binary64))) (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))) (neg.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a)","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))) (neg.f64 a))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))) a)","(/.f64 (*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) #s(literal 1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))","(/.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(neg.f64 (/.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))))","(-.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))) (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))))","(-.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (*.f64 c a) (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (pow.f64 b_2 #s(literal 4 binary64)))) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 b_2 b_2) c) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 b_2 b_2) c) a))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 c a))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 c a))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (*.f64 c a))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 c a))","(fma.f64 c a (*.f64 b_2 b_2))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 c a))","(fma.f64 b_2 b_2 (*.f64 c a))","(fma.f64 a c (*.f64 b_2 b_2))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 c a))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(+.f64 (*.f64 c a) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 b_2 #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b_2 #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b_2)","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 b_2) a))","(*.f64 (/.f64 b_2 a) #s(literal 1 binary64))","(*.f64 (neg.f64 b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 b_2 (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 b_2 a))","(pow.f64 (/.f64 (/.f64 a b_2) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b_2) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 b_2 #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b_2))) (neg.f64 a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 (neg.f64 a) (/.f64 b_2 #s(literal -1 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 b_2)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b_2))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 (neg.f64 a) b_2)) (*.f64 a a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (neg.f64 a) b_2)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (neg.f64 a) b_2)))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 b_2))) (neg.f64 a))","(/.f64 (/.f64 b_2 #s(literal 1 binary64)) a)","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 b_2)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 (neg.f64 b_2) (neg.f64 a))","(/.f64 b_2 a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b_2) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a b_2))","(neg.f64 (/.f64 (neg.f64 b_2) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (neg.f64 b_2) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (-.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fabs.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(exp.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":401.947021484375,"type":"rewrite"},{"compiler":[[39080,4299]],"memory":[[7604064,89980576]],"time":168.991943359375,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(approx (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (*.f64 c a)) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","fresh",45.47617386542993,"binary64"],["(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","fresh",62.51043138513434,"binary64"],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 b_2 b_2))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","fresh",57.14145654322278,"binary64"],["(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","fresh",48.23787960237691,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",27.74883149638816,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) a)","fresh",47.03469550731087,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","done",39.36096555649101,"binary64"],["(/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",44.9548975976057,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",48.42733705503734,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","fresh",45.013491344346164,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (*.f64 (fma.f64 (/.f64 a (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) c)) (neg.f64 b_2))))","fresh",42.375053190264126,"binary64"],["(-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) a))","fresh",28.104657854091897,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))) b_2))","fresh",44.970522594346164,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","done",41.724199488437485,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) a))","fresh",62.35472401230036,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2))","fresh",59.08610919312387,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","fresh",42.443019795236616,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c)))","fresh",59.08220294312387,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","fresh",42.69698752399967,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) b_2) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) a)))","fresh",62.35392178324136,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (pow.f64 (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) a) #s(literal -1 binary64)) #s(literal -2 binary64)))","fresh",41.754962681341915,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","done",41.653400057440734,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","fresh",59.08610919312387,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64))) #s(literal -2 binary64)))","fresh",53.02278003135807,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","fresh",42.497707295236616,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","fresh",62.35392178324136,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","done",41.708087541138966,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 a #s(literal -1/2 binary64))) #s(literal -1 binary64)))))","fresh",53.85801642550624,"binary64"]],"compiler":[[1292,269],[28,16],[29,20],[28,19],[34,15],[13,10],[19,14],[18,13],[17,12],[21,15],[19,14],[29,21],[23,15],[19,14],[24,17],[19,14],[19,14],[19,14],[19,14],[19,14],[23,17],[23,17],[19,14],[19,14],[23,18],[19,14],[19,14],[19,14],[23,18]],"count":[[1026,28]],"kept":[{"done":[3,3],"fresh":[18,17],"new":[1000,6],"picked":[5,2]}],"memory":[[1507680,53127232]],"min-error":[[3.6357687078881487,"binary64"]],"time":41.669921875,"type":"prune"},{"accuracy":[7.624461984884567],"baseline":[27.74883149638816],"branch":[["a",25.74337062010924,3,"binary64"],["b_2",7.624461984884567,3,"binary64"],["c",27.74883149638816,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",12.987447835684957,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[53,3]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) a))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 b_2)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","(/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))) b_2))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 a (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) b_2)))) a)","(-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) a))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) #s(approx (/ a (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c))))) (*.f64 (fma.f64 (/.f64 a (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) c)) (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)))","(/.f64 (/.f64 #s(approx (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (*.f64 c a)) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) (*.f64 a (fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))) a)","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) c (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (*.f64 c (/.f64 (/.f64 c b_2) b_2)))) (neg.f64 b_2))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) b_2) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 0 binary64) (neg.f64 b_2))))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 b_2 #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (pow.f64 (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) a) #s(literal -1 binary64)) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 a #s(literal -1/2 binary64))) #s(literal -1 binary64)))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64))) #s(literal -2 binary64)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))))) a)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 b_2 b_2))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2))) a #s(literal -1 binary64)) b_2)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) #s(literal 3 binary64))) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))) (fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2)))) (*.f64 b_2 b_2))))"]],"memory":[[3487680,27676608]],"oracle":[64.0],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":56.619140625,"times":[[13.3681640625,"a"],[14.174072265625,"b_2"],[12.913818359375,"c"],[12.446044921875,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[10.057586469145773],"baseline":[39.36096555649101],"branch":[["b_2",10.057586469145773,3,"binary64"]],"compiler":[[1,3]],"count":[[23,3]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) a))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 b_2)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","(/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))) b_2))"]],"memory":[[-3098432,4907552]],"oracle":[63.48328665211223],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":7.630859375,"times":[[6.078857421875,"b_2"]],"type":"regimes"},{"accuracy":[10.284329085087572],"baseline":[41.653400057440734],"branch":[["b_2",10.284329085087572,3,"binary64"]],"compiler":[[1,3]],"count":[[21,3]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) a))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 b_2)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","(/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"memory":[[4627136,4627136]],"oracle":[63.48328665211223],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","(/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":6.613037109375,"times":[[5.18798828125,"b_2"]],"type":"regimes"},{"accuracy":[10.356200387751892],"baseline":[41.653400057440734],"branch":[["b_2",10.356200387751892,3,"binary64"]],"compiler":[[1,3]],"count":[[19,3]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) a))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 b_2)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","(/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)"]],"memory":[[-3586160,4410512]],"oracle":[63.48328638077968],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","(/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))"]],"repr":["binary64"],"time":6.43603515625,"times":[[5.06494140625,"b_2"]],"type":"regimes"},{"accuracy":[21.635742433183882],"baseline":[41.653400057440734],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",31.283628517304248,3,"binary64"],["b_2",21.635742433183882,2,"binary64"]],"compiler":[[13,10],[1,3]],"count":[[15,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) a))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) #s(approx (* (neg b_2) (+ (* (* (/ (/ c b_2) b_2) a) -1/2) 1)) (neg.f64 b_2)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))"]],"memory":[[-1797552,6435088]],"oracle":[63.24908575623687],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)"]],"repr":["binary64"],"time":9.4990234375,"times":[[4.001953125,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[3.867919921875,"b_2"]],"type":"regimes"},{"accuracy":[21.635742433183882],"baseline":[41.653400057440734],"branch":[["b_2",21.635742433183882,2,"binary64"]],"compiler":[[1,3]],"count":[[9,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal 2 binary64) b_2) a))"]],"memory":[[2872800,2872800]],"oracle":[63.24908575623687],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))"]],"repr":["binary64"],"time":3.869873046875,"times":[[3.05908203125,"b_2"]],"type":"regimes"},{"accuracy":[21.639648683183882],"baseline":[41.653400057440734],"branch":[["b_2",21.639648683183882,2,"binary64"]],"compiler":[[1,3]],"count":[[6,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))"]],"memory":[[2439776,2439776]],"oracle":[63.248283527177875],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))"]],"repr":["binary64"],"time":3.002197265625,"times":[[2.363037109375,"b_2"]],"type":"regimes"},{"accuracy":[21.694336166882117],"baseline":[41.708087541138966],"branch":[["b_2",21.694336166882117,2,"binary64"]],"compiler":[[1,3]],"count":[[5,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal 2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))"]],"memory":[[2303024,2303024]],"oracle":[63.248283527177875],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))"]],"repr":["binary64"],"time":2.761962890625,"times":[[2.073974609375,"b_2"]],"type":"regimes"},{"accuracy":[42.446926045236616],"baseline":[42.446926045236616],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",42.44692604523663,1,"binary64"],["c",42.446926045236616,1,"binary64"],["a",42.44692604523664,1,"binary64"],["b_2",42.44692604523663,1,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[1,1]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))"]],"link":["."],"memory":[[-12526480,6186768]],"name":["quad2m (problem 3.2.1, negative)"],"oracle":[42.446926045236616],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))"]],"repr":["binary64"],"time":13.160888671875,"times":[[1.146240234375,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[1.060791015625,"c"],[1.101806640625,"a"],[1.2548828125,"b_2"]],"type":"regimes"},{"bstep":[[18.3291015625,4.0035502715904015e+77,3.303253357900876e+89],[16.5830078125,-2.4785688255643095e-125,-6.91394860929283e-127]],"compiler":[[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[15,13],[1,3]],"memory":[[-4243872,11898576]],"method":["binary-search","binary-search"],"mixsample":[[0.55078125,"adjust",800],[3.013427734375,"ival-div",0],[0.009033203125,"ival-sqrt",1600],[0.081787109375,"ival-mult",400],[4.294189453125,"ival-mult",0],[0.0048828125,"ival-sub",1600],[0.123779296875,"ival-assert",0],[3.12353515625,"ival-sub",0],[0.2412109375,"ival-true",0],[2.270751953125,"ival-sqrt",0],[0.113037109375,"ival-sub",400],[0.01318359375,"adjust",2000],[1.45703125,"ival-neg",0],[0.18408203125,"ival-sqrt",400]],"outcomes":[[3.520751953125,1,"valid",28],[0.1630859375,2,"valid",1],[2.525390625,0,"invalid",35],[17.416015625,0,"valid",243]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":40.782958984375,"type":"bsearch"},{"bstep":[[17.383056640625,2.241258349143298e-66,7.463399815502785e-61],[1.14794921875,-2.4785688255643095e-125,-6.91394860929283e-127]],"compiler":[[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[15,13],[1,3]],"memory":[[6884976,6884976]],"method":["binary-search","binary-search"],"mixsample":[[1.554443359375,"ival-sub",0],[1.374267578125,"ival-div",0],[0.11572265625,"ival-true",0],[2.1923828125,"ival-mult",0],[1.223876953125,"ival-sqrt",0],[0.06298828125,"ival-assert",0],[0.9296875,"ival-neg",0]],"outcomes":[[2.037353515625,0,"invalid",29],[9.65478515625,0,"valid",144]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":21.67822265625,"type":"bsearch"},{"bstep":[[9.90380859375,2.241258349143298e-66,7.463399815502785e-61],[1.81298828125,-2.4785688255643095e-125,-6.91394860929283e-127]],"compiler":[[24,18],[17,13],[24,18],[17,13],[24,18],[17,13],[24,18],[17,13],[24,18],[17,13],[24,18],[17,13],[24,18],[17,13],[24,18],[17,13],[24,18],[17,13],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[15,13],[1,3]],"memory":[[-3791680,4238736]],"method":["binary-search","binary-search"],"mixsample":[[0.799560546875,"ival-sub",0],[0.634765625,"ival-div",0],[0.05908203125,"ival-true",0],[1.171142578125,"ival-mult",0],[0.595458984375,"ival-sqrt",0],[0.04052734375,"ival-assert",0],[0.416259765625,"ival-neg",0]],"outcomes":[[0.758056640625,0,"invalid",10],[5.32861328125,0,"valid",80]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":14.073974609375,"type":"bsearch"},{"bstep":[[0.841064453125,2.241258349143298e-66,7.463399815502785e-61],[0.90185546875,-2.4785688255643095e-125,-6.91394860929283e-127]],"compiler":[[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[15,13],[1,3]],"memory":[[1214832,1214832]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":2.345947265625,"type":"bsearch"},{"bstep":[[21.526123046875,-8.391102888053386e-303,3.5899176469439916e-305]],"compiler":[[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[15,13],[1,3]],"memory":[[-1456464,7663680]],"method":["binary-search"],"mixsample":[[2.059326171875,"ival-sub",0],[1.442626953125,"ival-div",0],[0.132080078125,"ival-true",0],[2.569091796875,"ival-mult",0],[2.274658203125,"ival-sqrt",0],[0.072021484375,"ival-assert",0],[1.07275390625,"ival-neg",0]],"outcomes":[[4.60400390625,0,"invalid",70],[10.29296875,0,"valid",144]],"stop":[["narrow-enough",1]],"time":24.869873046875,"type":"bsearch"},{"bstep":[[1.14306640625,-8.391102888053386e-303,3.5899176469439916e-305]],"compiler":[[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[15,13],[1,3]],"memory":[[717152,717152]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.583984375,"type":"bsearch"},{"bstep":[[1.052001953125,-8.391102888053386e-303,3.5899176469439916e-305]],"compiler":[[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[15,13],[1,3]],"memory":[[712176,712176]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.39501953125,"type":"bsearch"},{"bstep":[[1.177001953125,-8.391102888053386e-303,3.5899176469439916e-305]],"compiler":[[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[15,13],[1,3]],"memory":[[713296,713296]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.51806640625,"type":"bsearch"},{"egraph":[[7,4969,449,0.043522599],[6,2093,449,0.027171165],[5,545,449,0.012805258],[4,307,449,0.003939659],[3,212,449,0.006028193],[2,136,449,0.004476192],[1,95,449,0.00445786],[0,68,449,0.001452171]],"inputs":[["(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 329999999999999974239589617146929394309276204383559364298626595106879587722571551371952128 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 2037940770576765/463168356949264781694283940034751631413079938662562256157830336031652518559744 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 1250554563763015/926336713898529563388567880069503262826159877325124512315660672063305037119488 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 1250554563763015/926336713898529563388567880069503262826159877325124512315660672063305037119488 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a))","(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))"]],"memory":[[-3817392,12160224]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 329999999999999974239589617146929394309276204383559364298626595106879587722571551371952128 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 329999999999999974239589617146929394309276204383559364298626595106879587722571551371952128 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 2037940770576765/463168356949264781694283940034751631413079938662562256157830336031652518559744 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 2037940770576765/463168356949264781694283940034751631413079938662562256157830336031652518559744 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 1250554563763015/926336713898529563388567880069503262826159877325124512315660672063305037119488 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 1250554563763015/926336713898529563388567880069503262826159877325124512315660672063305037119488 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a))","(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))"]],"stop":[["node limit",1]],"time":134.10205078125,"type":"simplify"},{"compiler":[[449,67]],"memory":[[2124048,2124048]],"stop":[["fuel",1]],"time":3.8359375,"type":"soundness"},{"compiler":[[449,67],[449,67],[89,26],[89,26],[13,10],[13,10]],"memory":[[270960,49478560]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[]],"time":84.291015625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02490234375,"type":"end"}]