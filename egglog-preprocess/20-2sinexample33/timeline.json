[{"memory":[[27520,27520]],"time":0.074951171875,"type":"start"},{"compiler":[[27,19]],"memory":[[4577392,12665616]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":67.135009765625,"type":"analyze"},{"bogosity":[{"invalid":0.499308382889549,"precondition":0.4942799140699208,"valid":0.006411703040530234}],"memory":[[-28790328,1654315232]],"mixsample":[[101.384521484375,"adjust",800],[237.0751953125,"ival-add",0],[0.52685546875,"ival-sin",400],[275.918212890625,"ival-mult",0],[240.079345703125,"ival-fabs",0],[839.702880859375,"ival-sin",0],[15.976318359375,"ival-assert",0],[211.9873046875,"ival-sub",0],[124.3857421875,"ival-and",0],[0.047607421875,"ival-sub",400],[643.203857421875,"const",0],[56.056640625,"exact",0],[245.435791015625,"ival-<=",0],[187.529052734375,"ival-<",0]],"outcomes":[[694.4609375,1,"valid",2846],[3036.96728515625,0,"invalid",26084],[648.743896484375,0,"valid",5410]],"time":6061.573974609375,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[217,4,1,34]],"explanations":[["-.f64","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","cancellation",218,11,[],[[]]]],"fperrors":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",221,1,[-3.4710351095614406e-252,1.1798180499542788e-254],4,[-4.429856025258877e-256,5.417516371359353e-258]],["(sin.f64 (+.f64 x eps))",0,0,false,0,false],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(sin.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,218],[0,38]],"maybe-confusion":[[217,4,0,1,7,27]],"memory":[[4373936,38789456]],"mixsample":[[4.27490234375,"adjust",800],[3.522705078125,"ival-add",0],[0.10205078125,"ival-sin",400],[10.55126953125,"ival-sin",0],[0.211669921875,"ival-assert",0],[3.40380859375,"ival-sub",0],[0.510986328125,"ival-true",0],[2.7880859375,"ival-sin",2000],[0.032958984375,"adjust",2800],[0.015869140625,"ival-sin",800],[0.0478515625,"adjust",2000]],"outcomes":[[20.73046875,1,"valid",182],[3.34912109375,3,"valid",2],[18.115478515625,0,"valid",328]],"time":94.31201171875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,183,7,0.000648634],[10,183,7,0.001135921],[9,175,7,0.001671101],[8,159,7,0.001483752],[7,110,7,0.00142151],[6,80,7,0.001513799],[5,47,7,0.000625129],[4,32,7,0.000328953],[3,24,7,0.000188466],[2,18,7,0.000155378],[1,13,7,0.000126497],[0,10,7,0.000157464],[0,6,7,0.00015517]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"memory":[[-245968,15873296]],"method":["egg-herbie"],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":161.95703125,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.087890625,"type":"eval"},{"alts":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","next",24.614279958435432,"binary64"]],"compiler":[[7,6]],"memory":[[313600,313600]],"time":0.666015625,"type":"prune"},{"egraph":[[0,183,18,0.000697865],[10,183,18,0.000806849],[9,175,18,0.001056805],[8,159,18,0.000964498],[7,110,18,0.000906676],[6,80,18,0.000790137],[5,47,18,0.000441781],[4,32,18,0.00022572],[3,24,18,0.000177935],[2,18,18,0.000128496],[1,13,18,0.000120147],[0,10,18,0.0001423],[0,6,18,0.000102623]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(sin.f64 x)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(sin.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","cost-diff",0]],"memory":[[820032,820032]],"method":["egg-herbie"],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(sin.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","(sin.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":13.423095703125,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(sin.f64 x)","accuracy",0.0],["(sin.f64 (+.f64 x eps))","accuracy",0.0234375],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","accuracy",24.61789850433654]],"memory":[[-1018912,8402432]],"mixsample":[[2.080078125,"adjust",800],[1.896484375,"ival-add",0],[0.05615234375,"ival-sin",400],[8.674560546875,"ival-sin",0],[0.092529296875,"ival-assert",0],[1.650634765625,"ival-sub",0],[0.1640625,"ival-true",0],[1.386962890625,"ival-sin",2000],[0.01708984375,"adjust",2800],[0.006103515625,"ival-sin",800],[0.016845703125,"adjust",2000]],"outcomes":[[13.729736328125,1,"valid",91],[1.60400390625,3,"valid",1],[9.703369140625,0,"valid",164]],"time":31.574951171875,"type":"localize"},{"count":[[4,31]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)"]],"memory":[[1869056,1869056]],"outputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","eps","(+ eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(* x (+ 1 (/ eps x)))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[0.583984375,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","-inf"],[0.72900390625,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","inf"],[0.6669921875,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","0"],[0.445068359375,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","-inf"],[0.482177734375,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","inf"],[0.887939453125,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","0"]],"time":4.31494140625,"type":"series"},{"count":[[31,29]],"egraph":[[0,8157,253,0.10079089],[4,6191,283,0.029451448],[3,2853,284,0.02431247],[2,781,284,0.010153559],[1,314,291,0.002277895],[0,107,291,0.001037935]],"inputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","eps","(+ eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(* x (+ 1 (/ eps x)))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[937728,40367808]],"method":["egg-herbie"],"outputs":[["(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal -1/2 binary64) (sin.f64 eps))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (cos eps)))","(fma.f64 (cos.f64 eps) x (sin.f64 eps))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) x (sin.f64 eps))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 eps) x) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 eps))) x (cos.f64 eps)) x (sin.f64 eps))","eps","(+ eps x)","(+.f64 eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin (+ eps x))","(sin.f64 (+.f64 eps x))","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(sin x)","(sin.f64 x)","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin (- eps (* -1 x)))","(sin.f64 (+.f64 eps x))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(+ (sin x) (* eps (cos x)))","(fma.f64 (cos.f64 x) eps (sin.f64 x))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps (sin.f64 x))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps (sin.f64 x))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin (- x (* -1 eps)))","(sin.f64 (+.f64 eps x))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":269.953125,"type":"simplify"},{"count":[[4,214]],"egraph":[[0,8393,16,0.081332363],[3,4851,16,0.060745764],[2,385,16,0.037175639],[1,53,16,0.002903936],[0,10,16,0.000909447],[0,6,16,0.00011014]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)"]],"memory":[[6427072,51451344]],"outputs":[["(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (sin.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))) (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) (-.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (-.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 2 binary64) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (/.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (/.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (/.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (*.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (/.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (*.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal 2 binary64))","(*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) (*.f64 (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))))","(pow.f64 (/.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (sin.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))))","(/.f64 (*.f64 (+.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps))))) #s(literal 2 binary64)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 2 binary64) (+.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))))) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) #s(literal 2 binary64))) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (sin.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (+.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (sin.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 (-.f64 x eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) (-.f64 (*.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x)) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (-.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (sin.f64 (+.f64 eps x)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) (pow.f64 (sin.f64 (-.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 #s(literal -1 binary64) (sin.f64 x) (sin.f64 (+.f64 eps x)))","(fma.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 (+.f64 (sin.f64 (-.f64 x eps)) (sin.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (sin.f64 (+.f64 eps x)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (sin.f64 eps) (cos.f64 x) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x)))","(fma.f64 (sin.f64 eps) (cos.f64 x) (fma.f64 (cos.f64 eps) (sin.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 eps) (fma.f64 (cos.f64 eps) (sin.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (cos.f64 eps) (sin.f64 x) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 x) #s(literal -1 binary64) (sin.f64 (+.f64 eps x)))","(fma.f64 (sin.f64 x) (cos.f64 eps) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 (+.f64 eps x)) (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (sin.f64 (+.f64 eps x)) (/.f64 (sin.f64 (+.f64 eps x)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(-.f64 (+.f64 (sin.f64 (+.f64 eps x)) #s(literal 0 binary64)) (sin.f64 x))","(-.f64 #s(literal 0 binary64) (-.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))","(-.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) (*.f64 (sin.f64 eps) (cos.f64 x)))","(+.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))))","(+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))) (sin.f64 x) (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(+.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 eps x)))","(+.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x)))","(+.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (fma.f64 (cos.f64 eps) (sin.f64 x) (neg.f64 (sin.f64 x))))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(+.f64 (sin.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 (-.f64 x eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) (pow.f64 (sin.f64 (-.f64 x eps)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (sin.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps)))) (neg.f64 (sin.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) (sin.f64 (-.f64 x eps)))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))))","(neg.f64 (sin.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps))))","(neg.f64 (sin.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(neg.f64 (sin.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps)))))","(neg.f64 (sin.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))))","(fma.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))) (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(fma.f64 (+.f64 (sin.f64 (-.f64 x eps)) (sin.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (*.f64 (sin.f64 eps) (cos.f64 x)))","(fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (cos.f64 eps) (sin.f64 x)))","(fma.f64 (cos.f64 eps) (sin.f64 x) (*.f64 (sin.f64 eps) (cos.f64 x)))","(fma.f64 (sin.f64 x) (cos.f64 eps) (*.f64 (sin.f64 eps) (cos.f64 x)))","(sin.f64 (+.f64 eps x))","(-.f64 (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))) (*.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (sin.f64 (-.f64 x eps))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (sin.f64 (-.f64 x eps))))","(-.f64 (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))) (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))))","(exp.f64 (*.f64 (log.f64 (sin.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))) (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(+.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (*.f64 (sin.f64 eps) (cos.f64 x)))","(*.f64 (pow.f64 (/.f64 (-.f64 x eps) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 x eps) (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 2 binary64)))) (-.f64 (*.f64 x x) (*.f64 (-.f64 eps x) eps)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 (-.f64 eps x) eps) (-.f64 (*.f64 (-.f64 eps x) eps) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (*.f64 (-.f64 x eps) (+.f64 eps x)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (pow.f64 (neg.f64 (-.f64 x eps)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 eps x))","(*.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (/.f64 (+.f64 eps x) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (*.f64 (+.f64 eps x) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (+.f64 eps x) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 eps x) (*.f64 (-.f64 x eps) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))))","(pow.f64 (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 eps eps (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 2 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 2 binary64))) (fma.f64 x (/.f64 x (-.f64 x eps)) (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x eps) #s(literal -3 binary64))) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (-.f64 x eps) #s(literal -3 binary64)))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)))) (neg.f64 (neg.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (*.f64 x x)) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (pow.f64 (-.f64 x eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 x eps) (fma.f64 eps eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 x eps) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 eps x) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(neg.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (/.f64 (*.f64 x x) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 x (/.f64 x (-.f64 x eps)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(+.f64 eps x)","(+.f64 x eps)","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(sin.f64 x)","(exp.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":367.798828125,"type":"rewrite"},{"compiler":[[6283,852]],"memory":[[-6127872,21363504]],"time":30.01220703125,"type":"eval"},{"alts":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","done",24.614279958435432,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","next",0.0,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","next",0.0757417975498948,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","next",0.2303557771240462,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","next",0.64590577958992,"binary64"]],"compiler":[[7,6],[16,14],[18,13],[12,9],[10,8]],"count":[[236,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[235,4],"picked":[1,1]}],"memory":[[1658864,9613664]],"min-error":[[0.0,"binary64"]],"time":4.8349609375,"type":"prune"},{"egraph":[[0,8122,126,0.039988763],[25,7190,128,0.026764994],[24,5199,128,0.032301098],[23,5199,128,0.015609513],[22,5167,128,0.016660555],[21,5062,128,0.016974949],[20,4880,128,0.022830103],[19,4100,128,0.020549422],[18,2557,128,0.02063936],[17,2163,128,0.014373149],[16,1909,128,0.014354141],[15,1726,128,0.00957854],[14,1508,131,0.008095288],[13,1364,131,0.005763771],[12,1271,131,0.005148037],[11,1113,131,0.006853012],[10,665,131,0.005761085],[9,448,131,0.002679896],[8,412,131,0.00169765],[7,364,131,0.001712007],[6,327,131,0.001590823],[5,294,131,0.001205418],[4,279,131,0.000992206],[3,226,131,0.001277174],[2,134,131,0.00097741],[1,72,131,0.00056451],[0,46,131,0.000436815],[0,29,141,0.000312952]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","x","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(sin.f64 x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","#s(literal 1/2 binary64)","(+.f64 #s(literal 0 binary64) eps)","#s(literal 0 binary64)","eps","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) x eps)","x","#s(literal -2 binary64)"]],"locations":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","cost-diff",0],["(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","cost-diff",1],["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","cost-diff",1],["(+.f64 #s(literal 0 binary64) eps)","cost-diff",2],["(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(*.f64 (cos.f64 x) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","cost-diff",0]],"memory":[[-2784320,21196144]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","x","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(sin.f64 x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) #s(literal -2 binary64))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(*.f64 #s(literal 1/2 binary64) eps)","#s(literal 1/2 binary64)","(+.f64 #s(literal 0 binary64) eps)","eps","#s(literal 0 binary64)","eps","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(neg.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(fma.f64 #s(literal 2 binary64) x eps)","x","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":366.27490234375,"type":"simplify"},{"compiler":[[130,29]],"locations":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64))","accuracy",0.0],["(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","accuracy",0.0],["(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","accuracy",0.0],["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","accuracy",0.0],["(sin.f64 x)","accuracy",0.0],["(cos.f64 x)","accuracy",0.0],["(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","accuracy",0.0078125],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","accuracy",0.07183594129854148],["(cos.f64 x)","accuracy",0.0],["(*.f64 (cos.f64 x) eps)","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","accuracy",0.22644952709617333],["(sin.f64 eps)","accuracy",0.0],["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","accuracy",0.64590577958992]],"memory":[[-2367616,28628176]],"mixsample":[[5.388916015625,"adjust",800],[2.05419921875,"ival-div",0],[5.798828125,"ival-add",0],[0.033447265625,"ival-sin",400],[17.448486328125,"ival-mult",0],[7.98486328125,"ival-sin",0],[0.1689453125,"ival-assert",0],[1.663818359375,"ival-sub",0],[0.236328125,"ival-true",0],[4.438720703125,"ival-cos",0],[0.0146484375,"ival-sub",400],[0.59619140625,"exact",0]],"outcomes":[[32.10107421875,1,"valid",90],[34.64111328125,0,"valid",166]],"time":186.340087890625,"type":"localize"},{"count":[[17,83]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(+.f64 #s(literal 0 binary64) eps)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(sin.f64 x)","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64))"]],"memory":[[2514000,9850688]],"outputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(* -1/2 eps)","(+ (* -1 x) (* -1/2 eps))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (sin x))","(cos (* -1/2 (+ eps (* 2 x))))","(* -1 x)","(* x (- (* -1/2 (/ eps x)) 1))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(cos (* -1/2 (- eps (* -2 x))))","(* -1 (* x (+ 1 (* 1/2 (/ eps x)))))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* eps (- (* -1 (/ x eps)) 1/2))","(sin (* 1/2 eps))","(* 2 (sin (* 1/2 eps)))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(* -1 (* eps (+ 1/2 (/ x eps))))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))"]],"series":[[3.672119140625,"((- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (sin x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (* (sin (* 1/2 (+ 0 eps))) 2))","eps","-inf"],[6.068115234375,"((- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (sin x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (* (sin (* 1/2 (+ 0 eps))) 2))","eps","inf"],[5.842041015625,"((- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (sin x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (* (sin (* 1/2 (+ 0 eps))) 2))","eps","0"],[3.049072265625,"((- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (sin x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (* (sin (* 1/2 (+ 0 eps))) 2))","x","-inf"],[4.10498046875,"((- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (sin x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (* (sin (* 1/2 (+ 0 eps))) 2))","x","inf"],[2.827880859375,"((- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (+ 0 eps) (cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (sin x) (sin (* 1/2 (+ 0 eps))) (* 1/2 (+ 0 eps)) (* (sin (* 1/2 (+ 0 eps))) 2))","x","0"]],"time":27.098876953125,"type":"series"},{"count":[[83,81]],"egraph":[[0,8239,855,0.115835059],[3,6074,946,0.032309899],[2,2644,948,0.019909072],[1,992,985,0.009325196],[0,331,1030,0.003422751]],"inputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(* -1/2 eps)","(+ (* -1 x) (* -1/2 eps))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (sin x))","(cos (* -1/2 (+ eps (* 2 x))))","(* -1 x)","(* x (- (* -1/2 (/ eps x)) 1))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(cos (* -1/2 (- eps (* -2 x))))","(* -1 (* x (+ 1 (* 1/2 (/ eps x)))))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* eps (- (* -1 (/ x eps)) 1/2))","(sin (* 1/2 eps))","(* 2 (sin (* 1/2 eps)))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(* -1 (* eps (+ 1/2 (/ x eps))))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))"]],"memory":[[-3592992,45427600]],"method":["egg-herbie"],"outputs":[["(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal -1/2 binary64) (sin.f64 eps))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps x) eps))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ eps (* -1/2 (* (pow eps 2) x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (*.f64 x #s(literal 1/12 binary64)) (*.f64 (*.f64 eps eps) x) (*.f64 (*.f64 eps (+.f64 eps x)) #s(literal -1/2 binary64))) x eps)","(+ 1 (* -1/2 (* eps x)))","(fma.f64 (*.f64 eps x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps x) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/10080 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(cos (* -1/2 eps))","(cos.f64 (*.f64 #s(literal 1/2 binary64) eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 #s(literal -1/2 binary64) x) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 #s(literal -1/2 binary64) x))) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* -1/2 eps)","(*.f64 #s(literal -1/2 binary64) eps)","(+ (* -1 x) (* -1/2 eps))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal 2 binary64))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(fma.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (+.f64 #s(literal 2 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) x) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(fma.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (*.f64 #s(literal -1/3 binary64) x) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))))) x) x (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal 2 binary64)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(cos x)","(cos.f64 x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(+ (cos x) (* -1/2 (* eps (sin x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(* -1/2 (sin x))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(cos (* -1/2 (+ eps (* 2 x))))","(cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 (/ eps x)) 1))","(neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 1 binary64) x))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(sin x)","(sin.f64 x)","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(cos (* -1/2 (- eps (* -2 x))))","(cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)))","(* -1 (* x (+ 1 (* 1/2 (/ eps x)))))","(neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 1 binary64) x))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 eps (*.f64 #s(literal 1/24 binary64) eps) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(cos (* -1 x))","(cos.f64 x)","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))","(* eps (cos (* -1 x)))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) eps) (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) eps (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* 1/2 eps)","(*.f64 #s(literal 1/2 binary64) eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1 (* -1/24 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/24 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/1920 binary64) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/322560 binary64) (*.f64 eps eps) #s(literal 1/1920 binary64)) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* -1/2 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) (*.f64 eps eps))","(* -1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* eps (- (* -1 (/ x eps)) 1/2))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))","(sin (* 1/2 eps))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(* 2 (sin (* 1/2 eps)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64))","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)))","(* -1 (* eps (+ 1/2 (/ x eps))))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))"]],"stop":[["iter limit",1],["node limit",1]],"time":288.7509765625,"type":"simplify"},{"count":[[17,444]],"egraph":[[0,8600,113,0.073377825],[2,1121,113,0.025070573],[1,149,113,0.003812331],[0,46,113,0.001312902],[0,29,123,0.000295129]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(+.f64 #s(literal 0 binary64) eps)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(sin.f64 x)","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64))"]],"memory":[[4770880,51654000]],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 0 binary64) (cos.f64 eps))) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (-.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (sin.f64 eps) #s(literal 1 binary64))) (*.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))) (-.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps))) (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64))) (*.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64))))))","(fma.f64 #s(literal 0 binary64) (cos.f64 eps) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(fma.f64 (sin.f64 eps) #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(sin.f64 eps)","(-.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (neg.f64 eps))) (*.f64 #s(literal 1 binary64) (sin.f64 (neg.f64 eps))))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","(*.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) eps))","(*.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (cos.f64 x)) (/.f64 #s(literal -1 binary64) eps))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x)) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 (*.f64 (cos.f64 x) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps))","(*.f64 (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 (cos.f64 x) eps)","(*.f64 eps (cos.f64 x))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps))) (-.f64 #s(literal 0 binary64) (*.f64 (cos.f64 x) eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) #s(literal 0 binary64)) (-.f64 (*.f64 (cos.f64 x) eps) #s(literal 0 binary64)))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 #s(literal 0 binary64) (*.f64 (cos.f64 x) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps) (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (cos.f64 x))) eps)","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (cos.f64 x) (*.f64 (neg.f64 eps) eps))) eps)","(/.f64 (neg.f64 (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (cos.f64 x)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x)) (*.f64 eps eps))","(/.f64 (*.f64 (cos.f64 x) (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(/.f64 (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (*.f64 (neg.f64 eps) eps) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (cos.f64 x) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (cos.f64 x) (pow.f64 eps #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (cos.f64 x)) (/.f64 #s(literal -1 binary64) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x)) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (cos.f64 x) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (cos.f64 x) eps #s(literal 0 binary64))","(fma.f64 eps (cos.f64 x) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) #s(literal 0 binary64))","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (pow.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (/.f64 #s(literal -1 binary64) eps))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (neg.f64 eps))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps eps))))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (neg.f64 eps))))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps eps))))","(*.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(*.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(*.f64 eps (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps))) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (cos.f64 x) eps)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))) (-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)))","(/.f64 (-.f64 (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps))) (-.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 (cos.f64 x) eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)) #s(literal 0 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 0 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))) (-.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (-.f64 (*.f64 (cos.f64 x) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (cos.f64 x) eps)))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)) (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 (cos.f64 x) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 0 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps) (-.f64 (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))) eps)","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (*.f64 (neg.f64 eps) eps))) eps)","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) eps))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 eps) eps))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) eps)) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps eps)))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (neg.f64 eps)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps eps)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (neg.f64 eps)) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps eps)) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))) (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (pow.f64 eps #s(literal -1 binary64)))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (/.f64 (cos.f64 x) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (cos.f64 x) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (cos.f64 x)) (/.f64 #s(literal -1 binary64) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (cos.f64 x)) (/.f64 #s(literal -1 binary64) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x)) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x)) (pow.f64 eps #s(literal -2 binary64)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (pow.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (/.f64 #s(literal -1 binary64) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (cos.f64 x) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (*.f64 (cos.f64 x) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (neg.f64 eps))) #s(literal 0 binary64))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (*.f64 eps eps))) #s(literal 0 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (neg.f64 eps))) #s(literal 0 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) (*.f64 eps eps))) #s(literal 0 binary64))","(fma.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))) #s(literal 0 binary64))","(fma.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))) #s(literal 0 binary64))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))) #s(literal 0 binary64))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))) #s(literal 0 binary64))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps (*.f64 (cos.f64 x) eps))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps #s(literal 0 binary64))","(fma.f64 (cos.f64 x) eps (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 (cos.f64 x) eps (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(fma.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (*.f64 (cos.f64 x) eps))","(fma.f64 eps (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) #s(literal 0 binary64))","(fma.f64 eps (cos.f64 x) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(fma.f64 eps (cos.f64 x) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (*.f64 (cos.f64 x) eps))","(+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps) #s(literal 0 binary64))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))","(*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64))) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))))","(/.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (cos.f64 x))","(fma.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) eps) (cos.f64 x))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) (pow.f64 eps #s(literal -2 binary64)) (cos.f64 x))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps) (cos.f64 x))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)) (cos.f64 x))","(fma.f64 (*.f64 eps (sin.f64 x)) #s(literal -1/2 binary64) (cos.f64 x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x) (cos.f64 x))","(fma.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (sin.f64 x) eps) (cos.f64 x))","(fma.f64 (sin.f64 x) (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))","(fma.f64 eps (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) (cos.f64 x))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x)))))","(+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) (cos.f64 x))","(+.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps))","(*.f64 (/.f64 eps eps) eps)","(*.f64 (*.f64 (+.f64 (+.f64 eps x) x) eps) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 eps x) x)))","(*.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (*.f64 x (+.f64 (+.f64 eps x) x)))))","(*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 eps) eps)))","(*.f64 #s(literal -1 binary64) (neg.f64 eps))","(*.f64 (*.f64 (neg.f64 eps) eps) (/.f64 #s(literal -1 binary64) eps))","(*.f64 #s(literal 1 binary64) eps)","(*.f64 (*.f64 eps eps) (pow.f64 eps #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 eps (/.f64 eps eps))","(pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 eps #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (+.f64 eps x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (-.f64 eps x) (-.f64 eps x))) (-.f64 x (-.f64 eps x)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 0 binary64)) (*.f64 eps eps))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) (neg.f64 eps)))))","(/.f64 (+.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (+.f64 eps x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 eps x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (-.f64 eps x) (-.f64 eps x)) (*.f64 x (-.f64 eps x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (+.f64 eps x) x) eps)) (neg.f64 (+.f64 (+.f64 eps x) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (*.f64 x (+.f64 (+.f64 eps x) x)))))","(/.f64 (neg.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 eps)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (+.f64 (+.f64 eps x) x) eps) (+.f64 (+.f64 eps x) x))","(/.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (*.f64 x (+.f64 (+.f64 eps x) x))))","(/.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 (neg.f64 eps) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 eps) eps) (neg.f64 eps))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 eps x) x) (*.f64 (+.f64 (+.f64 eps x) x) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (*.f64 x (+.f64 (+.f64 eps x) x))) (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal -1 binary64)))","(/.f64 (*.f64 eps eps) eps)","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 eps eps))","(neg.f64 (neg.f64 eps))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) eps) #s(literal 0 binary64))","(fma.f64 (/.f64 eps eps) eps #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 (+.f64 eps x) x) eps) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 eps x) x)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)) (neg.f64 x))","(fma.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (*.f64 x (+.f64 (+.f64 eps x) x)))) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 eps x) (fma.f64 #s(literal -1 binary64) x eps)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x eps)) (neg.f64 x))","(fma.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)))) (neg.f64 x))","(fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 eps) eps)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (neg.f64 eps) eps) (/.f64 #s(literal -1 binary64) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 #s(literal 1 binary64) (+.f64 eps x) (neg.f64 x))","(fma.f64 #s(literal 1 binary64) eps #s(literal 0 binary64))","(fma.f64 (*.f64 eps eps) (pow.f64 eps #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 eps eps (*.f64 x (-.f64 x eps)))) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 eps (/.f64 eps eps) #s(literal 0 binary64))","(-.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (+.f64 (+.f64 eps x) x)) (/.f64 (*.f64 x x) (+.f64 (+.f64 eps x) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (*.f64 x (+.f64 (+.f64 eps x) x)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (*.f64 x (+.f64 (+.f64 eps x) x)))))","(-.f64 #s(literal 0 binary64) (neg.f64 eps))","(-.f64 (+.f64 eps x) x)","(-.f64 eps #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) eps)","(+.f64 (+.f64 eps x) (neg.f64 x))","(+.f64 eps #s(literal 0 binary64))","(+.f64 x (-.f64 eps x))","eps","(cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64)))","(cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))) #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 2 binary64) x eps) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x))))))","(*.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) x eps)))","(*.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) x eps)))","(*.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))))","(*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64)))","(*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps)))))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 2 binary64) x eps)) #s(literal 1/2 binary64))","(*.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64)) (/.f64 (fma.f64 #s(literal 2 binary64) x (neg.f64 eps)) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps))))","(*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64))) (fma.f64 #s(literal -2 binary64) x eps))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x))))))","(/.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64)) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))))","(/.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) (fma.f64 #s(literal -2 binary64) x eps)) (neg.f64 (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps))))","(/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 2 binary64) x (neg.f64 eps)) (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))) (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps))) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x))))) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 2 binary64) x eps)) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(/.f64 #s(literal -1/2 binary64) (pow.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1 binary64)))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))))","(neg.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64)))","(fma.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps)) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (/.f64 #s(literal -1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))) #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 2 binary64) x eps) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x))))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) x eps)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -2 binary64) x eps)) #s(literal 0 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps) (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps)))) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 #s(literal 2 binary64) x)))))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (fma.f64 #s(literal 2 binary64) x eps)) #s(literal 1/2 binary64) #s(literal 0 binary64))","(fma.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64)) (/.f64 (fma.f64 #s(literal 2 binary64) x (neg.f64 eps)) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps))) #s(literal 0 binary64))","(fma.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) x) (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps) #s(literal 0 binary64))","(fma.f64 #s(literal -1/2 binary64) eps (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) eps (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) x)))","(fma.f64 eps #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64)))","(fma.f64 eps #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) x)))","(-.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps)))) (/.f64 (*.f64 eps eps) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps)))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (fma.f64 #s(literal 2 binary64) x (neg.f64 eps))) #s(literal -2 binary64)) (/.f64 (/.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal -2 binary64) x eps)) #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) eps))","(+.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) x)) (*.f64 #s(literal -1/2 binary64) eps))","(+.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64)))","(+.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) x)))","(+.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 2 binary64))","(*.f64 (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64)))))","(fma.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64))))","(fma.f64 (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))))","(+.f64 (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64))))","(+.f64 (*.f64 (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) (*.f64 (*.f64 (cos.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))))","(sin.f64 x)","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))) (-.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))))))","(fma.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(-.f64 (*.f64 (sin.f64 (*.f64 (+.f64 eps x) #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (*.f64 (+.f64 eps x) #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(*.f64 (/.f64 #s(literal 1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(literal 1/2 binary64) eps))","(*.f64 (*.f64 (*.f64 (neg.f64 eps) eps) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) eps))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps))","(*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 (neg.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) eps)))","(*.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps))))","(*.f64 (neg.f64 eps) #s(literal -1/2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) eps))","(*.f64 #s(literal 1/2 binary64) eps)","(*.f64 eps #s(literal 1/2 binary64))","(pow.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal 1/2 binary64)) (*.f64 (+.f64 eps x) #s(literal 1/2 binary64))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (fma.f64 (+.f64 eps x) #s(literal 1/2 binary64) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 eps x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (+.f64 eps x) #s(literal 1/2 binary64)) (*.f64 (+.f64 eps x) #s(literal 1/2 binary64)) (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64)) (*.f64 (*.f64 (+.f64 eps x) #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) #s(literal 1/2 binary64))) eps)","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 eps) eps))) eps)","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)))) (neg.f64 (*.f64 #s(literal -1/2 binary64) eps)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps))))","(/.f64 (-.f64 (*.f64 (+.f64 eps x) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) x)) #s(literal 4 binary64))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) #s(literal 1/2 binary64)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/2 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (neg.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps))) (*.f64 #s(literal -1/2 binary64) eps))","(/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (-.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 0 binary64)))","(/.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) eps)))","(/.f64 (neg.f64 eps) #s(literal -2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 (*.f64 (neg.f64 eps) eps) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (*.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps eps) (*.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -1/2 binary64) eps) (neg.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) eps))","(/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal -1 binary64)))","(/.f64 eps #s(literal 2 binary64))","(fma.f64 (/.f64 #s(literal 1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(literal 1/2 binary64) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (*.f64 (neg.f64 eps) eps) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps) #s(literal 0 binary64))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) eps)) #s(literal 0 binary64))","(fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps))) #s(literal 0 binary64))","(fma.f64 (neg.f64 eps) #s(literal -1/2 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) eps) #s(literal 0 binary64))","(fma.f64 #s(literal 1/2 binary64) eps #s(literal 0 binary64))","(fma.f64 (+.f64 eps x) #s(literal 1/2 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 eps #s(literal 1/2 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/2 binary64) eps)) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) eps)))","(-.f64 (*.f64 (+.f64 eps x) #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64)))","(+.f64 (*.f64 (+.f64 eps x) #s(literal 1/2 binary64)) (neg.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/2 binary64) eps))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(fma.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 2 binary64)))","(fma.f64 #s(literal 2 binary64) (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))))","(+.f64 (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(literal 2 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":240.64501953125,"type":"rewrite"},{"compiler":[[14554,2113]],"memory":[[-3338688,49840960]],"time":109.68896484375,"type":"eval"},{"alts":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","next",0.0,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","fresh",0.05708084277528902,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","next",0.120390182668829,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","fresh",0.1734274614722409,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","next",0.3729998641294394,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","next",0.21169215505544486,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","fresh",0.3733116665873605,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","next",0.645905779592545,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","fresh",0.2589390167759072,"binary64"]],"compiler":[[25,20],[20,17],[27,18],[22,15],[28,19],[29,18],[19,14],[14,11],[26,16],[25,20],[20,17],[27,18],[22,15],[28,19],[29,18],[19,14],[14,11],[26,16]],"count":[[525,9]],"kept":[{"done":[1,0],"fresh":[0,0],"new":[520,9],"picked":[4,0]}],"memory":[[6117776,22784976]],"min-error":[[0.0,"binary64"]],"time":13.6181640625,"type":"prune"},{"egraph":[[0,8179,405,0.045511624],[18,7052,410,0.019183934],[17,5359,410,0.029291785],[16,4301,410,0.01878554],[15,4015,410,0.016489731],[14,3380,413,0.015748181],[13,2538,413,0.013064509],[12,2296,413,0.009720875],[11,2143,413,0.009733191],[10,1915,413,0.008435398],[9,1802,413,0.004940188],[8,1774,413,0.004235033],[7,1728,413,0.003915248],[6,1698,413,0.003981603],[5,1659,413,0.005638763],[4,1080,413,0.007254461],[3,600,413,0.004461459],[2,306,413,0.003066629],[1,142,413,0.001435429],[0,86,413,0.000852242],[0,55,419,0.000537094]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))","#s(literal -1/48 binary64)","(*.f64 eps eps)","eps","#s(literal 1/2 binary64)","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) x eps)","x","#s(literal -2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","(+.f64 eps x)","eps","x","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","#s(literal -1/720 binary64)","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64))","#s(literal 1/12 binary64)","(*.f64 x x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)"]],"locations":[["#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","cost-diff",0],["(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","cost-diff",0],["#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","cost-diff",0],["(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","cost-diff",0],["#s(approx (cos x) #s(literal 1 binary64))","cost-diff",0],["(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","cost-diff",0],["(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","cost-diff",0],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","cost-diff",0],["(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","cost-diff",1],["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","cost-diff",1]],"memory":[[1743056,25532336]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)","(fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64))","#s(literal -1/48 binary64)","(*.f64 eps eps)","eps","#s(literal 1/2 binary64)","#s(literal 2 binary64)","(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(neg.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 2 binary64) x eps)","(fma.f64 x #s(literal 2 binary64) eps)","x","#s(literal -2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","(*.f64 (+.f64 x eps) #s(literal -1/2 binary64))","(+.f64 eps x)","(+.f64 x eps)","eps","x","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64))","#s(literal -1/720 binary64)","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64))","#s(literal 1/12 binary64)","(*.f64 x x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":297.739990234375,"type":"simplify"},{"compiler":[[258,51]],"locations":[["(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","accuracy",0.00390625],["(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","accuracy",0.0078125],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","accuracy",0.07183594129854148],["#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","accuracy",0.33687881975491735],["(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","accuracy",0.01171875],["(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","accuracy",0.01171875],["#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","accuracy",0.14688328630021075],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","accuracy",0.22644952709617333],["(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","accuracy",0.0],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","accuracy",0.0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","accuracy",0.07183594129854148],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","accuracy",0.37654427907908306],["(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","accuracy",0.22644952709617333],["#s(approx (cos x) #s(literal 1 binary64))","accuracy",0.6542473730176315],["(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","accuracy",0.0],["#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","accuracy",0.0]],"memory":[[-8705056,51435104]],"mixsample":[[8.98681640625,"adjust",800],[1.92919921875,"ival-div",0],[14.238525390625,"ival-add",0],[0.039794921875,"ival-sin",400],[31.8828125,"ival-mult",0],[6.36181640625,"ival-sin",0],[0.147705078125,"ival-assert",0],[1.5888671875,"ival-sub",0],[0.2548828125,"ival-true",0],[3.945556640625,"ival-cos",0],[0.01513671875,"ival-sub",400],[13.60986328125,"const",0],[0.667724609375,"exact",0]],"outcomes":[[54.870361328125,1,"valid",90],[59.99951171875,0,"valid",166]],"time":160.973876953125,"type":"localize"},{"count":[[24,100]],"inputs":[["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 eps eps)","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)"]],"memory":[[3065792,11277520]],"outputs":[["(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(* -1/2 eps)","(+ (* -1 x) (* -1/2 eps))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(+ (* -1/2 eps) (* -1/2 x))","1/24","(+ 1/24 (* -1/720 (pow x 2)))","(cos (* -1/2 (+ eps (* 2 x))))","(* -1 x)","(* x (- (* -1/2 (/ eps x)) 1))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(* -1/720 (pow x 6))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) (+ 1/720 (/ 1/2 (pow x 4)))))","(* (pow x 6) (- (+ (* 1/24 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/720 (/ 1/2 (pow x 4)))))","(* -1/2 (sin x))","(* x (- (* -1/2 (/ eps x)) 1/2))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(* 1/12 (pow x 3))","(* (pow x 3) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(cos (* -1/2 (- eps (* -2 x))))","(* -1 (* x (+ 1 (* 1/2 (/ eps x)))))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(* -1 (* x (+ 1/2 (* 1/2 (/ eps x)))))","(* -1 (* (pow x 3) (- (* 1/2 (/ 1 (pow x 2))) 1/12)))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(pow eps 2)","(* eps (- (* -1 (/ x eps)) 1/2))","(* 2 (sin (* 1/2 eps)))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(sin (* 1/2 eps))","(* eps (- (* -1/2 (/ x eps)) 1/2))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(* -1 (* eps (+ 1/2 (/ x eps))))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(* -1 (* eps (+ 1/2 (* 1/2 (/ x eps)))))"]],"series":[[3.09619140625,"((cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (sin (* 1/2 (+ 0 eps))) (* eps eps) (* (+ eps x) -1/2) (+ (* -1/720 (* x x)) 1/24) (* (+ (* 1/12 (* x x)) -1/2) x))","eps","-inf"],[4.69482421875,"((cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (sin (* 1/2 (+ 0 eps))) (* eps eps) (* (+ eps x) -1/2) (+ (* -1/720 (* x x)) 1/24) (* (+ (* 1/12 (* x x)) -1/2) x))","eps","inf"],[2.7041015625,"((cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (sin (* 1/2 (+ 0 eps))) (* eps eps) (* (+ eps x) -1/2) (+ (* -1/720 (* x x)) 1/24) (* (+ (* 1/12 (* x x)) -1/2) x))","eps","0"],[3.73388671875,"((cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (sin (* 1/2 (+ 0 eps))) (* eps eps) (* (+ eps x) -1/2) (+ (* -1/720 (* x x)) 1/24) (* (+ (* 1/12 (* x x)) -1/2) x))","x","-inf"],[3.52392578125,"((cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (sin (* 1/2 (+ 0 eps))) (* eps eps) (* (+ eps x) -1/2) (+ (* -1/720 (* x x)) 1/24) (* (+ (* 1/12 (* x x)) -1/2) x))","x","inf"],[2.01806640625,"((cos (/ (+ (* 2 x) eps) -2)) (/ (+ (* 2 x) eps) -2) (* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (+ (* (+ (* -1/720 (* x x)) 1/24) (* x x)) -1/2) (* x x)) 1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (sin (* 1/2 (+ 0 eps))) (* eps eps) (* (+ eps x) -1/2) (+ (* -1/720 (* x x)) 1/24) (* (+ (* 1/12 (* x x)) -1/2) x))","x","0"]],"time":49.162109375,"type":"series"},{"count":[[100,99]],"egraph":[[0,8121,1004,0.109421453],[3,6943,1100,0.024961087],[2,2938,1100,0.021233955],[1,1074,1131,0.010526915],[0,363,1187,0.00397183]],"inputs":[["(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(* -1/2 eps)","(+ (* -1 x) (* -1/2 eps))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(+ (* -1/2 eps) (* -1/2 x))","1/24","(+ 1/24 (* -1/720 (pow x 2)))","(cos (* -1/2 (+ eps (* 2 x))))","(* -1 x)","(* x (- (* -1/2 (/ eps x)) 1))","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(* -1/720 (pow x 6))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) (+ 1/720 (/ 1/2 (pow x 4)))))","(* (pow x 6) (- (+ (* 1/24 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/720 (/ 1/2 (pow x 4)))))","(* -1/2 (sin x))","(* x (- (* -1/2 (/ eps x)) 1/2))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(* 1/12 (pow x 3))","(* (pow x 3) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(cos (* -1/2 (- eps (* -2 x))))","(* -1 (* x (+ 1 (* 1/2 (/ eps x)))))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(* -1 (* x (+ 1/2 (* 1/2 (/ eps x)))))","(* -1 (* (pow x 3) (- (* 1/2 (/ 1 (pow x 2))) 1/12)))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(pow eps 2)","(* eps (- (* -1 (/ x eps)) 1/2))","(* 2 (sin (* 1/2 eps)))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(sin (* 1/2 eps))","(* eps (- (* -1/2 (/ x eps)) 1/2))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(* -1 (* eps (+ 1/2 (/ x eps))))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(* -1 (* eps (+ 1/2 (* 1/2 (/ x eps)))))"]],"memory":[[7096224,43241552]],"method":["egg-herbie"],"outputs":[["(cos (* -1/2 eps))","(cos.f64 (*.f64 #s(literal 1/2 binary64) eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (fma.f64 x (*.f64 #s(literal -1/6 binary64) x) #s(literal 1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* -1/2 eps)","(*.f64 #s(literal -1/2 binary64) eps)","(+ (* -1 x) (* -1/2 eps))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))","(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(*.f64 (*.f64 #s(literal 2 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal 2 binary64))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(fma.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (+.f64 #s(literal 2 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) x) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(fma.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (*.f64 #s(literal -1/3 binary64) x) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))))) x) x (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal 2 binary64)))","(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (cos.f64 eps) #s(literal -1/6 binary64) #s(literal 1/6 binary64)) x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ eps (* -1/2 (* (pow eps 2) x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (*.f64 x #s(literal 1/12 binary64)) (*.f64 (*.f64 eps eps) x) (*.f64 (*.f64 eps (+.f64 eps x)) #s(literal -1/2 binary64))) x eps)","(+ 1 (* -1/2 (* eps x)))","(fma.f64 (*.f64 eps x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 eps x) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps x) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/10080 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(+ (* -1/2 eps) (* -1/2 x))","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","1/24","#s(literal 1/24 binary64)","(+ 1/24 (* -1/720 (pow x 2)))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(cos (* -1/2 (+ eps (* 2 x))))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 (/ eps x)) 1))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) #s(literal -1 binary64)) x)","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(cos x)","(cos.f64 x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(+ (cos x) (* -1/2 (* eps (sin x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(* -1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/2 binary64))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(*.f64 (*.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) x) x)","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(*.f64 (*.f64 (-.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/2 binary64)) x) x)","(* -1/720 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/720 binary64))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(*.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/720 binary64)) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (- (* 1/24 (/ 1 (pow x 2))) (+ 1/720 (/ 1/2 (pow x 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/720 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (- (+ (* 1/24 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/720 (/ 1/2 (pow x 4)))))","(*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/720 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 6 binary64)))","(* -1/2 (sin x))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(* x (- (* -1/2 (/ eps x)) 1/2))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) x)","(* -1/720 (pow x 2))","(*.f64 #s(literal -1/720 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/720 binary64)) x) x)","(* 1/12 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64))","(* (pow x 3) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(cos (* -1/2 (- eps (* -2 x))))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* -1 (* x (+ 1 (* 1/2 (/ eps x)))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) #s(literal -1 binary64)) x)","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(*.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/2 binary64)) (*.f64 x x))","(* -1 (* x (+ 1/2 (* 1/2 (/ eps x)))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) x)","(* -1 (* (pow x 3) (- (* 1/2 (/ 1 (pow x 2))) 1/12)))","(*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(cos (* -1 x))","(cos.f64 x)","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/8 binary64))) eps (cos.f64 x))","(* eps (cos (* -1 x)))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) eps) (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) eps (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ 1 (* -1/24 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/24 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/1920 binary64) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/322560 binary64) (*.f64 eps eps) #s(literal 1/1920 binary64)) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 eps (*.f64 #s(literal 1/24 binary64) eps) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 eps x) #s(literal 1 binary64))","(* 1/2 eps)","(*.f64 #s(literal 1/2 binary64) eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(pow eps 2)","(*.f64 eps eps)","(* eps (- (* -1 (/ x eps)) 1/2))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))","(* 2 (sin (* 1/2 eps)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64))","(* -1/2 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal -1/2 binary64))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) (*.f64 eps eps))","(* -1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1/2 (* eps x))","(*.f64 (*.f64 eps x) #s(literal -1/2 binary64))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 x eps) x x)) eps #s(literal 1 binary64))","(sin (* 1/2 eps))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(* eps (- (* -1/2 (/ x eps)) 1/2))","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* -1 (* eps (+ 1/2 (/ x eps))))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)) eps)","(* -1 (* eps (+ 1/2 (* 1/2 (/ x eps)))))","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":297.677001953125,"type":"simplify"},{"count":[[24,460]],"egraph":[[0,10138,342,0.120513272],[2,2457,345,0.038645486],[1,312,345,0.01006229],[0,86,345,0.00251242],[0,55,351,0.000517515]],"inputs":[["(cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 eps eps)","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)"]],"memory":[[860544,71710160]],"outputs":[["(cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))","(cos.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps)))","(*.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))) #s(literal -2 binary64)) (/.f64 (fma.f64 x #s(literal 2 binary64) eps) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64)))))))","(*.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 x #s(literal 2 binary64) eps)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (pow.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps)) (/.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) eps) (-.f64 (*.f64 x #s(literal 2 binary64)) eps)))","(*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -1/2 binary64))","(pow.f64 (/.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64))) (neg.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 x #s(literal 2 binary64) eps)))) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal -1/2 binary64)) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) (neg.f64 (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x #s(literal 2 binary64) eps))) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps))))","(/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x #s(literal 2 binary64)) eps)))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 x #s(literal 2 binary64) eps)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps)))","(/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal -2 binary64))","(neg.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))) (/.f64 (*.f64 eps eps) (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (-.f64 (*.f64 x #s(literal 2 binary64)) eps)) #s(literal -2 binary64)) (/.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 x #s(literal 2 binary64)) eps)) #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal -2 binary64) (fma.f64 x #s(literal 2 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))) #s(literal 2 binary64))","(*.f64 (*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)) (*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)))","(*.f64 (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64))) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)) (cos.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 (/.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)","(*.f64 eps #s(approx (cos x) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))) (-.f64 (*.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)) (*.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)) (-.f64 (*.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)) (*.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (-.f64 (*.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64))) (*.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) #s(literal 1 binary64)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) #s(literal 1 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) #s(literal 1 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 (/.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 (/.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(fma.f64 #s(approx (cos x) #s(literal 1 binary64)) eps (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(fma.f64 #s(approx (cos x) #s(literal 1 binary64)) eps (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(fma.f64 eps #s(approx (cos x) #s(literal 1 binary64)) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(fma.f64 eps #s(approx (cos x) #s(literal 1 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(+.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 0 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","(*.f64 eps #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)) (*.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)) (*.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))))) (*.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64))) (*.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(fma.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(fma.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(fma.f64 eps #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(fma.f64 eps #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 0 binary64)))","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))) (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))) (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))) (fma.f64 (pow.f64 (*.f64 x (+.f64 eps x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))))","(fma.f64 (*.f64 x (+.f64 eps x)) #s(literal -1/2 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (+.f64 eps x) #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (+.f64 eps x) (*.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (+.f64 eps x) (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (+.f64 eps x) x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","(*.f64 eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (-.f64 (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)) (*.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)) (-.f64 (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (-.f64 (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64))) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(fma.f64 eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))) (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(*.f64 eps (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)) (*.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps) (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps)) (*.f64 (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps) (*.f64 (cos.f64 x) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) eps) (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps) (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps)) (*.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)) (*.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (-.f64 (*.f64 (*.f64 eps (cos.f64 x)) (*.f64 eps (cos.f64 x))) (*.f64 (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (*.f64 eps (cos.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (cos.f64 x)) (*.f64 eps (cos.f64 x)) (-.f64 (*.f64 (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps))) (*.f64 (*.f64 eps (cos.f64 x)) (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)))) (*.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64))) (*.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)) (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 eps (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))) eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 eps (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (*.f64 eps eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (-.f64 eps #s(literal 0 binary64))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps (*.f64 (cos.f64 x) eps))","(fma.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(fma.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(fma.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (cos.f64 x) eps (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps))","(fma.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(fma.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) (*.f64 eps (cos.f64 x)))","(fma.f64 eps (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(fma.f64 eps (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 eps (cos.f64 x) (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) eps))","(+.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (*.f64 eps (cos.f64 x)))","(+.f64 (*.f64 eps (cos.f64 x)) (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)))","(+.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))))","(+.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) (*.f64 eps (cos.f64 x)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) (*.f64 eps (cos.f64 x))))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 3 binary64)))))","(fma.f64 (/.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (cos.f64 x))","(fma.f64 (/.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (cos.f64 x))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) (-.f64 eps #s(literal 0 binary64))) (cos.f64 x))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) (cos.f64 x))","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","(fma.f64 eps #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) (cos.f64 x))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps))) (/.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) #s(literal 2 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (neg.f64 (cos.f64 x)))))","(+.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps) (cos.f64 x))","(+.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))","(*.f64 (/.f64 eps eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 eps eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 eps (-.f64 eps #s(literal 0 binary64))))","(*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 eps eps))","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)))","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 eps (-.f64 eps #s(literal 0 binary64)))","(*.f64 eps eps)","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(/.f64 (+.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) eps)) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 eps (neg.f64 (*.f64 eps eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 (neg.f64 (*.f64 eps eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64))) (neg.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps))))))","(/.f64 (neg.f64 (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps)))) (neg.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) eps) (neg.f64 eps))","(/.f64 (*.f64 eps (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (*.f64 eps eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)) (*.f64 eps eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))))","(/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (neg.f64 (pow.f64 eps #s(literal 6 binary64))) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(fma.f64 (/.f64 eps eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 eps eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 eps (-.f64 eps #s(literal 0 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (/.f64 eps eps) #s(literal 0 binary64))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 eps) (neg.f64 eps) #s(literal 0 binary64))","(fma.f64 eps (-.f64 eps #s(literal 0 binary64)) #s(literal 0 binary64))","(fma.f64 eps eps #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 eps eps))) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (*.f64 eps eps))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))) (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))))","(-.f64 (*.f64 eps eps) (/.f64 #s(literal 0 binary64) (*.f64 eps eps)))","(-.f64 (*.f64 eps eps) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","(+.f64 (*.f64 eps eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 eps eps))","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (+.f64 eps x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal -1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) eps) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 #s(literal -1/2 binary64) eps)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) #s(literal -1/2 binary64))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) #s(literal -1/2 binary64))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (+.f64 eps x) (-.f64 x eps)))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (+.f64 eps x) (-.f64 eps x)))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) #s(literal -1/2 binary64)) (-.f64 x eps))","(/.f64 (*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) #s(literal -1/2 binary64)) (-.f64 eps x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64)) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1/2 binary64)) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (+.f64 eps x) (-.f64 x eps))) (-.f64 x eps))","(/.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (+.f64 eps x) (-.f64 eps x))) (-.f64 eps x))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 eps #s(literal 0 binary64))) (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 (/.f64 #s(literal -1/2 binary64) eps) (/.f64 (pow.f64 eps #s(literal 3 binary64)) eps) (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 #s(literal -1/2 binary64) eps (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 #s(literal -1/2 binary64) x (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 eps #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 x #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) eps))","(+.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 #s(literal -1/2 binary64) x))","(+.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 #s(literal -1/2 binary64) eps))","(*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)) (pow.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))) (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/576 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) #s(literal 1/576 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))))","(/.f64 (-.f64 #s(literal 1/576 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))) (neg.f64 (+.f64 #s(literal 1/576 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))) (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))) (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)))))","(/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)))","(/.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)) (+.f64 #s(literal 1/576 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))))","(/.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))) (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))))","(fma.f64 (*.f64 #s(literal -1/720 binary64) x) x #s(literal 1/24 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(fma.f64 x (*.f64 #s(literal -1/720 binary64) x) #s(literal 1/24 binary64))","(-.f64 (/.f64 #s(literal 1/576 binary64) (-.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))) (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))) (/.f64 #s(literal 1/576 binary64) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))))","(+.f64 (*.f64 (*.f64 x x) #s(literal -1/720 binary64)) #s(literal 1/24 binary64))","(+.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x) #s(literal 3 binary64)) (*.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x) (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x) (*.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))) #s(literal 3 binary64)) (*.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))) (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x) (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x)) (*.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x)))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x)))) (*.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/24 binary64))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/24 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x) (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64)) x) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/24 binary64)))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/24 binary64)))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 #s(literal -1/2 binary64) x (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x))","(fma.f64 #s(literal -1/2 binary64) x (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 x #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x))","(fma.f64 x #s(literal -1/2 binary64) (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x) (*.f64 #s(literal -1/2 binary64) x))","(+.f64 (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 #s(literal -1/2 binary64) x))","(+.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) x))","(+.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":325.159912109375,"type":"rewrite"},{"compiler":[[23160,2589]],"memory":[[-3043648,54347248]],"time":153.406982421875,"type":"eval"},{"alts":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","next",0.0,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","next",28.7948316121343,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","done",0.120390182668829,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","next",0.1734274614722409,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","done",0.3729998641294394,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","done",0.21169215505544486,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","next",0.3733116665873605,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","done",0.645905779592545,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","next",0.2589390167759072,"binary64"]],"compiler":[[32,25],[35,22],[27,18],[22,15],[28,19],[29,18],[19,14],[14,11],[26,16],[32,25],[35,22],[22,15],[19,14],[26,16]],"count":[[552,9]],"kept":[{"done":[0,0],"fresh":[4,2],"new":[543,3],"picked":[5,4]}],"memory":[[-4492960,23447824]],"min-error":[[0.0,"binary64"]],"time":12.0419921875,"type":"prune"},{"egraph":[[0,8019,436,0.03599518],[6,5634,438,0.024386235],[5,3679,438,0.018660736],[4,2508,438,0.015056814],[3,1180,438,0.011802451],[2,438,446,0.005347254],[1,169,450,0.001716503],[0,92,450,0.000937773],[0,59,456,0.000544057]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))","#s(literal -1/48 binary64)","(*.f64 eps eps)","eps","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(fma.f64 #s(literal 1/2 binary64) eps x)","x","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(*.f64 x x)","x","#s(literal -1/2 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))","(fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)","(*.f64 (*.f64 x x) eps)","(*.f64 x x)","x","eps","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps))","(*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(neg.f64 (*.f64 eps eps))","(*.f64 eps eps)","eps","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","(neg.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x))","(*.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","eps","(cos.f64 x)"]],"locations":[["#s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x))","cost-diff",0],["(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","cost-diff",0],["(neg.f64 (*.f64 eps eps))","cost-diff",0],["(*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","cost-diff",0],["(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps))","cost-diff",6],["(*.f64 (*.f64 x x) eps)","cost-diff",0],["(fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)","cost-diff",0],["#s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","cost-diff",0],["#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","cost-diff",0],["(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","cost-diff",0],["#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","cost-diff",0],["(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","cost-diff",0],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","cost-diff",0]],"memory":[[4918944,19528096]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))) #s(literal 2 binary64))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)","(fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64))","#s(literal -1/48 binary64)","(*.f64 eps eps)","eps","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))","#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1/2 binary64) eps x)","(fma.f64 eps #s(literal 1/2 binary64) x)","x","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps)","(*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))","#s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(*.f64 x x)","x","#s(literal -1/2 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) eps) eps)))","#s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))","#s(approx (* (cos x) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) eps) eps))","(fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) eps) eps)","(*.f64 (*.f64 x x) eps)","(*.f64 x x)","x","eps","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","(*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) eps))","(neg.f64 (*.f64 eps eps))","(*.f64 (neg.f64 eps) eps)","(*.f64 eps eps)","eps","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","(neg.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x))","(*.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","eps","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":169.571044921875,"type":"simplify"},{"compiler":[[270,58]],"locations":[["(cos.f64 x)","accuracy",0.0],["(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))","accuracy",0.0078125],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","accuracy",0.07183594129854148],["#s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x))","accuracy",0.6145827159200783],["(*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","accuracy",0.01171875],["#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","accuracy",0.14688328630021075],["#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","accuracy",0.22644952709617333],["(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps))","accuracy",28.57923320770932],["(*.f64 x x)","accuracy",0.0],["(*.f64 (*.f64 x x) eps)","accuracy",0.09765625],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","accuracy",0.22644952709617333],["#s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))","accuracy",0.2286480732737235],["(*.f64 x x)","accuracy",0.0],["(*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps)","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","accuracy",0.22644952709617333],["#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))","accuracy",0.37654474335381416],["(*.f64 eps eps)","accuracy",0.0],["(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","accuracy",0.0],["#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","accuracy",0.0],["#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))","accuracy",0.0]],"memory":[[-907936,59042544]],"mixsample":[[10.028076171875,"adjust",800],[5.090087890625,"ival-div",0],[16.3173828125,"ival-add",0],[0.040283203125,"ival-sin",400],[53.44091796875,"ival-mult",0],[6.19970703125,"ival-sin",0],[0.1064453125,"ival-assert",0],[1.72607421875,"ival-sub",0],[0.22705078125,"ival-true",0],[5.655517578125,"ival-cos",0],[0.0146484375,"ival-sub",400],[10.418701171875,"const",0],[0.724365234375,"exact",0],[2.697265625,"ival-neg",0]],"outcomes":[[63.974853515625,1,"valid",90],[80.9697265625,0,"valid",166]],"time":187.60400390625,"type":"localize"},{"count":[[26,95]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))","(fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)","(*.f64 (*.f64 x x) eps)","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","(*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(neg.f64 (*.f64 eps eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x))","#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(*.f64 eps eps)","(*.f64 x x)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(cos.f64 x)"]],"memory":[[-1421440,14111312]],"outputs":[["(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* eps (pow x 2))","(* -1 (pow eps 2))","(+ (* -1 (pow eps 2)) (* 1/2 (* (pow eps 2) (pow x 2))))","(+ (* -1 (pow eps 2)) (* (pow x 2) (+ (* -1/24 (* (pow eps 2) (pow x 2))) (* 1/2 (pow eps 2)))))","(+ (* -1 (pow eps 2)) (* (pow x 2) (+ (* 1/2 (pow eps 2)) (* (pow x 2) (+ (* -1/24 (pow eps 2)) (* 1/720 (* (pow eps 2) (pow x 2))))))))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(cos (* 1/2 eps))","(+ (cos (* 1/2 eps)) (* -1 (* x (sin (* 1/2 eps)))))","(+ (cos (* 1/2 eps)) (* x (- (* -1/2 (* x (cos (* 1/2 eps)))) (sin (* 1/2 eps)))))","(+ (cos (* 1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* 1/2 eps))) (* 1/6 (* x (sin (* 1/2 eps)))))) (sin (* 1/2 eps)))))","(pow x 2)","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* -1/2 (pow x 2))","(* (pow x 2) (- (/ 1 (pow x 2)) 1/2))","(* 1/24 (* eps (pow x 4)))","(* (pow x 4) (+ (* -1/2 (/ eps (pow x 2))) (* 1/24 eps)))","(* (pow x 4) (+ (* -1/2 (/ eps (pow x 2))) (+ (* 1/24 eps) (/ eps (pow x 4)))))","(* -1 (* (pow eps 2) (cos x)))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (sin x))","(cos (* -1/2 (+ eps (* 2 x))))","(cos (+ x (* 1/2 eps)))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(cos (* -1/2 (- eps (* -2 x))))","(cos (- (* 1/2 eps) (* -1 x)))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* eps (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(+ (cos x) (* eps (- (* -1/8 (* eps (cos x))) (* 1/2 (sin x)))))","(+ (cos x) (* eps (- (* eps (+ (* -1/8 (cos x)) (* 1/48 (* eps (sin x))))) (* 1/2 (sin x)))))","(pow eps 2)","(* 2 (sin (* 1/2 eps)))","(sin (* 1/2 eps))","(* -1/48 (pow eps 3))","(* (pow eps 3) (- (* 1/2 (/ 1 (pow eps 2))) 1/48))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(* -1 (* (pow eps 3) (- 1/48 (* 1/2 (/ 1 (pow eps 2))))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (- (* -1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) 1)))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(cos (- x (* -1/2 eps)))"]],"series":[[6.5048828125,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* -1/48 (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (* x x) -1/2) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (+ (* (* (* x x) eps) (+ (* 1/24 (* x x)) -1/2)) eps) (* (* x x) eps) (/ (* (neg (* eps eps)) (cos x)) (neg eps)) (- (sin (+ x eps)) (sin x)) (* (neg (* eps eps)) (cos x)) (neg (* eps eps)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (cos (/ (+ (* 2 x) eps) -2)) (cos (+ (* 1/2 eps) x)) (* eps eps) (* x x) (cos x) (cos x))","eps","-inf"],[9.844970703125,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* -1/48 (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (* x x) -1/2) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (+ (* (* (* x x) eps) (+ (* 1/24 (* x x)) -1/2)) eps) (* (* x x) eps) (/ (* (neg (* eps eps)) (cos x)) (neg eps)) (- (sin (+ x eps)) (sin x)) (* (neg (* eps eps)) (cos x)) (neg (* eps eps)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (cos (/ (+ (* 2 x) eps) -2)) (cos (+ (* 1/2 eps) x)) (* eps eps) (* x x) (cos x) (cos x))","eps","inf"],[4.10009765625,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* -1/48 (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (* x x) -1/2) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (+ (* (* (* x x) eps) (+ (* 1/24 (* x x)) -1/2)) eps) (* (* x x) eps) (/ (* (neg (* eps eps)) (cos x)) (neg eps)) (- (sin (+ x eps)) (sin x)) (* (neg (* eps eps)) (cos x)) (neg (* eps eps)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (cos (/ (+ (* 2 x) eps) -2)) (cos (+ (* 1/2 eps) x)) (* eps eps) (* x x) (cos x) (cos x))","eps","0"],[3.492919921875,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* -1/48 (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (* x x) -1/2) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (+ (* (* (* x x) eps) (+ (* 1/24 (* x x)) -1/2)) eps) (* (* x x) eps) (/ (* (neg (* eps eps)) (cos x)) (neg eps)) (- (sin (+ x eps)) (sin x)) (* (neg (* eps eps)) (cos x)) (neg (* eps eps)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (cos (/ (+ (* 2 x) eps) -2)) (cos (+ (* 1/2 eps) x)) (* eps eps) (* x x) (cos x) (cos x))","x","-inf"],[5.843017578125,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* -1/48 (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (* x x) -1/2) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (+ (* (* (* x x) eps) (+ (* 1/24 (* x x)) -1/2)) eps) (* (* x x) eps) (/ (* (neg (* eps eps)) (cos x)) (neg eps)) (- (sin (+ x eps)) (sin x)) (* (neg (* eps eps)) (cos x)) (neg (* eps eps)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (cos (/ (+ (* 2 x) eps) -2)) (cos (+ (* 1/2 eps) x)) (* eps eps) (* x x) (cos x) (cos x))","x","inf"],[2.406982421875,"((* (* (sin (* 1/2 (+ 0 eps))) 2) (cos (/ (+ (* 2 x) eps) -2))) (* (sin (* 1/2 (+ 0 eps))) 2) (sin (* 1/2 (+ 0 eps))) (* (+ (* -1/48 (* eps eps)) 1/2) eps) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (cos x) (+ (* (* x x) -1/2) 1) (- (sin (+ x eps)) (sin x)) (* (cos x) eps) (+ (* (* (* x x) eps) (+ (* 1/24 (* x x)) -1/2)) eps) (* (* x x) eps) (/ (* (neg (* eps eps)) (cos x)) (neg eps)) (- (sin (+ x eps)) (sin x)) (* (neg (* eps eps)) (cos x)) (neg (* eps eps)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (cos (/ (+ (* 2 x) eps) -2)) (cos (+ (* 1/2 eps) x)) (* eps eps) (* x x) (cos x) (cos x))","x","0"]],"time":34.10595703125,"type":"series"},{"count":[[95,94]],"egraph":[[0,8168,1027,0.095460388],[3,6577,1135,0.025276468],[2,2924,1135,0.019794106],[1,1075,1182,0.011169686],[0,364,1247,0.003654393]],"inputs":[["(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* eps (pow x 2))","(* -1 (pow eps 2))","(+ (* -1 (pow eps 2)) (* 1/2 (* (pow eps 2) (pow x 2))))","(+ (* -1 (pow eps 2)) (* (pow x 2) (+ (* -1/24 (* (pow eps 2) (pow x 2))) (* 1/2 (pow eps 2)))))","(+ (* -1 (pow eps 2)) (* (pow x 2) (+ (* 1/2 (pow eps 2)) (* (pow x 2) (+ (* -1/24 (pow eps 2)) (* 1/720 (* (pow eps 2) (pow x 2))))))))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(cos (* -1/2 eps))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(cos (* 1/2 eps))","(+ (cos (* 1/2 eps)) (* -1 (* x (sin (* 1/2 eps)))))","(+ (cos (* 1/2 eps)) (* x (- (* -1/2 (* x (cos (* 1/2 eps)))) (sin (* 1/2 eps)))))","(+ (cos (* 1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* 1/2 eps))) (* 1/6 (* x (sin (* 1/2 eps)))))) (sin (* 1/2 eps)))))","(pow x 2)","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(- (sin (+ eps x)) (sin x))","(* eps (cos x))","(cos x)","(* -1/2 (pow x 2))","(* (pow x 2) (- (/ 1 (pow x 2)) 1/2))","(* 1/24 (* eps (pow x 4)))","(* (pow x 4) (+ (* -1/2 (/ eps (pow x 2))) (* 1/24 eps)))","(* (pow x 4) (+ (* -1/2 (/ eps (pow x 2))) (+ (* 1/24 eps) (/ eps (pow x 4)))))","(* -1 (* (pow eps 2) (cos x)))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (sin x))","(cos (* -1/2 (+ eps (* 2 x))))","(cos (+ x (* 1/2 eps)))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(- (sin (- eps (* -1 x))) (sin x))","(cos (* -1/2 (- eps (* -2 x))))","(cos (- (* 1/2 eps) (* -1 x)))","(* eps (cos (* -1 x)))","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(* eps (+ 1 (* -1/24 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(* 1/2 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* eps (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(cos (* -1 x))","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(+ (cos x) (* eps (- (* -1/8 (* eps (cos x))) (* 1/2 (sin x)))))","(+ (cos x) (* eps (- (* eps (+ (* -1/8 (cos x)) (* 1/48 (* eps (sin x))))) (* 1/2 (sin x)))))","(pow eps 2)","(* 2 (sin (* 1/2 eps)))","(sin (* 1/2 eps))","(* -1/48 (pow eps 3))","(* (pow eps 3) (- (* 1/2 (/ 1 (pow eps 2))) 1/48))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(* -1 (* (pow eps 3) (- 1/48 (* 1/2 (/ 1 (pow eps 2))))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (- (* -1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) 1)))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(cos (- x (* -1/2 eps)))"]],"memory":[[5276528,46817776]],"method":["egg-herbie"],"outputs":[["(* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(+ (* 2 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))))","(*.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* x (* (cos (* -1/2 eps)) (sin (* 1/2 eps))))) (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))))))","(fma.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (+.f64 #s(literal 2 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (*.f64 x #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+ (* 2 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 2 (* (sin (* -1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* -1 (* (cos (* -1/2 eps)) (sin (* 1/2 eps)))) (* -1/3 (* x (* (sin (* -1/2 eps)) (sin (* 1/2 eps))))))))))","(fma.f64 (*.f64 x x) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal -1/3 binary64) x) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) (neg.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))))) (*.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 eps #s(literal 1/2 binary64))))))","(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64)) x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 x eps) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 x eps) eps))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* eps (pow x 2))","(*.f64 (*.f64 x x) eps)","(* -1 (pow eps 2))","(*.f64 (neg.f64 eps) eps)","(+ (* -1 (pow eps 2)) (* 1/2 (* (pow eps 2) (pow x 2))))","(*.f64 (*.f64 eps eps) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)))","(+ (* -1 (pow eps 2)) (* (pow x 2) (+ (* -1/24 (* (pow eps 2) (pow x 2))) (* 1/2 (pow eps 2)))))","(fma.f64 (neg.f64 eps) eps (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (*.f64 x x)))","(+ (* -1 (pow eps 2)) (* (pow x 2) (+ (* 1/2 (pow eps 2)) (* (pow x 2) (+ (* -1/24 (pow eps 2)) (* 1/720 (* (pow eps 2) (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(+ eps (* -1/2 (* (pow eps 2) x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (*.f64 x #s(literal 1/12 binary64)) (*.f64 (*.f64 eps eps) x) (*.f64 (*.f64 eps (+.f64 x eps)) #s(literal -1/2 binary64))) x eps)","(+ 1 (* -1/2 (* eps x)))","(fma.f64 (*.f64 x eps) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(fma.f64 (*.f64 (+.f64 x eps) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/10080 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(cos (* -1/2 eps))","(cos.f64 (*.f64 eps #s(literal 1/2 binary64)))","(+ (cos (* -1/2 eps)) (* x (sin (* -1/2 eps))))","(fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 eps #s(literal 1/2 binary64))))","(+ (cos (* -1/2 eps)) (* x (- (* -1/2 (* x (cos (* -1/2 eps)))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) x (cos.f64 (*.f64 eps #s(literal 1/2 binary64))))","(+ (cos (* -1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* -1/2 eps))) (* -1/6 (* x (sin (* -1/2 eps)))))) (* -1 (sin (* -1/2 eps))))))","(fma.f64 (fma.f64 (fma.f64 x (*.f64 #s(literal -1/6 binary64) x) #s(literal 1 binary64)) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))))) x (cos.f64 (*.f64 eps #s(literal 1/2 binary64))))","(cos (* 1/2 eps))","(cos.f64 (*.f64 eps #s(literal 1/2 binary64)))","(+ (cos (* 1/2 eps)) (* -1 (* x (sin (* 1/2 eps)))))","(fma.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (cos.f64 (*.f64 eps #s(literal 1/2 binary64))))","(+ (cos (* 1/2 eps)) (* x (- (* -1/2 (* x (cos (* 1/2 eps)))) (sin (* 1/2 eps)))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal -1/2 binary64) eps))) x (cos.f64 (*.f64 eps #s(literal 1/2 binary64))))","(+ (cos (* 1/2 eps)) (* x (- (* x (+ (* -1/2 (cos (* 1/2 eps))) (* 1/6 (* x (sin (* 1/2 eps)))))) (sin (* 1/2 eps)))))","(fma.f64 (fma.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (fma.f64 x (*.f64 #s(literal 1/6 binary64) x) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))))) x (cos.f64 (*.f64 eps #s(literal 1/2 binary64))))","(pow x 2)","(*.f64 x x)","(* 2 (* (cos (* -1/2 (+ eps (* 2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(cos x)","(cos.f64 x)","(* -1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/2 binary64))","(* (pow x 2) (- (/ 1 (pow x 2)) 1/2))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(* 1/24 (* eps (pow x 4)))","(*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) eps) #s(literal 1/24 binary64))","(* (pow x 4) (+ (* -1/2 (/ eps (pow x 2))) (* 1/24 eps)))","(*.f64 (*.f64 eps (+.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) #s(literal 1/24 binary64))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1/2 (/ eps (pow x 2))) (+ (* 1/24 eps) (/ eps (pow x 4)))))","(*.f64 (fma.f64 eps (+.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) #s(literal 1/24 binary64)) (/.f64 eps (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow eps 2) (cos x)))","(*.f64 (neg.f64 eps) (*.f64 (cos.f64 x) eps))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(+ (cos x) (* -1/2 (* eps (sin x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(* -1/2 (sin x))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(cos (* -1/2 (+ eps (* 2 x))))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(cos (+ x (* 1/2 eps)))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(* 2 (* (cos (* -1/2 (- eps (* -2 x)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(cos (* -1/2 (- eps (* -2 x))))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(cos (- (* 1/2 eps) (* -1 x)))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(* eps (cos (* -1 x)))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* 2 (* eps (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x))))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos (* -1 x)) (* eps (+ (* 1/2 (sin (* -1 x))) (* eps (+ (* -1/24 (* eps (sin (* -1 x)))) (* 2 (+ (* -1/16 (cos (* -1 x))) (* -1/48 (cos (* -1 x)))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) eps) (neg.f64 (sin.f64 x)) (*.f64 #s(literal -1/6 binary64) (cos.f64 x))) eps (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ 1 (* -1/24 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/24 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/1920 (pow eps 2)) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/1920 binary64) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/1920 (* -1/322560 (pow eps 2)))) 1/24))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/322560 binary64) (*.f64 eps eps) #s(literal 1/1920 binary64)) (*.f64 eps eps) #s(literal -1/24 binary64)) eps)","(* 1/2 eps)","(*.f64 eps #s(literal 1/2 binary64))","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 eps (*.f64 #s(literal 1/24 binary64) eps) #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps)","(* eps (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) eps)","(cos (* -1 x))","(cos.f64 x)","(+ (cos (* -1 x)) (* 1/2 (* eps (sin (* -1 x)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* -1/8 (* eps (cos (* -1 x)))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x))","(+ (cos (* -1 x)) (* eps (- (* eps (+ (* -1/8 (cos (* -1 x))) (* -1/48 (* eps (sin (* -1 x)))))) (* -1/2 (sin (* -1 x))))))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps))) eps (cos.f64 x))","(+ (cos x) (* eps (- (* -1/8 (* eps (cos x))) (* 1/2 (sin x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x))","(+ (cos x) (* eps (- (* eps (+ (* -1/8 (cos x)) (* 1/48 (* eps (sin x))))) (* 1/2 (sin x)))))","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 eps (*.f64 #s(literal 1/48 binary64) eps) #s(literal -1/2 binary64)) (*.f64 #s(literal -1/8 binary64) (*.f64 (cos.f64 x) eps))) eps (cos.f64 x))","(pow eps 2)","(*.f64 eps eps)","(* 2 (sin (* 1/2 eps)))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64))","(sin (* 1/2 eps))","(sin.f64 (*.f64 eps #s(literal 1/2 binary64)))","(* -1/48 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/48 binary64))","(* (pow eps 3) (- (* 1/2 (/ 1 (pow eps 2))) 1/48))","(*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 eps eps)) #s(literal 1/48 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* -1/2 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps) eps)","(* -1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* 2 (* (cos (* -1/2 (- (* 2 x) (* -1 eps)))) (sin (* 1/2 eps))))","(*.f64 (*.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(* -1 (* (pow eps 3) (- 1/48 (* 1/2 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 eps eps)) #s(literal 1/48 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(* -1 (* eps (- (* -1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) 1)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) eps)","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(cos (* -1/2 (- (* 2 x) (* -1 eps))))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(cos (- x (* -1/2 eps)))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":299.583984375,"type":"simplify"},{"count":[[26,571]],"egraph":[[0,8429,351,0.076108818],[2,2778,353,0.036241245],[1,348,353,0.009865205],[0,92,365,0.002728342],[0,59,371,0.000525147]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps)","#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))","(fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)","(*.f64 (*.f64 x x) eps)","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","(*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(neg.f64 (*.f64 eps eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x))","#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))","(cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(*.f64 eps eps)","(*.f64 x x)","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(cos.f64 x)"]],"memory":[[-8562224,61140800]],"outputs":[["(*.f64 (*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))) #s(literal 2 binary64))","(*.f64 (*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)))","(*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) (*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))))","(*.f64 (*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))))","(*.f64 #s(literal 2 binary64) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)) (*.f64 #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))","(*.f64 #s(literal 2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps)","(*.f64 eps (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) eps)) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64)) eps)) (neg.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)))) eps)","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) eps))) eps)","(/.f64 (neg.f64 (*.f64 eps (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64)) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (*.f64 (neg.f64 eps) eps))) (neg.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64)) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64)))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64)) (*.f64 (neg.f64 eps) eps))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64)))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64)))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64)))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) eps) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64)) eps) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(/.f64 (*.f64 eps (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64)) (*.f64 eps eps)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64)) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64)))) (*.f64 eps eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64)) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64)))) (neg.f64 eps)))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64))))))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (*.f64 (neg.f64 eps) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64) #s(literal 1/8 binary64))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/2304 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/96 binary64))))))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)) eps (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64))))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))","(fma.f64 eps (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 eps (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64))))","(fma.f64 eps (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)) eps))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))","(fma.f64 #s(literal 0 binary64) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)) eps))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))","(+.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)) eps) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) #s(literal 0 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64)) eps))","(+.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 eps (*.f64 (*.f64 eps eps) #s(literal -1/48 binary64))))","(+.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps)","(*.f64 eps #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))))) eps)","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) eps))) eps)","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 eps eps))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(fma.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64) (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps))","(fma.f64 eps #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))))","(fma.f64 eps #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) eps) (*.f64 #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal 0 binary64)))","#s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64) #s(literal 1 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) #s(literal 1 binary64))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(fma.f64 x (*.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) eps) eps)))","#s(approx (* (cos x) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) eps) eps))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 eps) eps)) (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps)) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 eps) eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 eps) eps)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps))) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps)) (*.f64 eps eps))) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)) (*.f64 (neg.f64 eps) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) eps))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (neg.f64 (*.f64 (neg.f64 eps) eps)))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) eps))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) eps))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)) (pow.f64 eps #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)) (-.f64 eps #s(literal 0 binary64)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 eps eps))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (-.f64 eps #s(literal 0 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)) (*.f64 (neg.f64 eps) eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)) eps (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) eps))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)) eps (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) eps)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) eps))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)) (*.f64 eps eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)) (neg.f64 eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) eps))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)) (pow.f64 eps #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)) (-.f64 eps #s(literal 0 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 eps eps))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (-.f64 eps #s(literal 0 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))) (*.f64 (neg.f64 eps) eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) eps))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (neg.f64 (*.f64 (neg.f64 eps) eps)))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) eps))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) eps))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))) (pow.f64 eps #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))) (-.f64 eps #s(literal 0 binary64)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 eps eps))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (-.f64 eps #s(literal 0 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))) (*.f64 (neg.f64 eps) eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))) eps (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) eps))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))) eps (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) eps)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) eps))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))) (*.f64 eps eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))) (neg.f64 eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) eps))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))) (pow.f64 eps #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))) (-.f64 eps #s(literal 0 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 eps eps))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (-.f64 eps #s(literal 0 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) eps) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 (neg.f64 eps) eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))) eps (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) eps))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))) eps (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (neg.f64 (*.f64 (neg.f64 eps) eps)))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) eps))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))) (*.f64 eps eps) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))) (neg.f64 eps) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 (neg.f64 eps) eps))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal -1 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))) (-.f64 eps #s(literal 0 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 eps eps))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (-.f64 eps #s(literal 0 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (*.f64 (neg.f64 eps) eps) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 (neg.f64 eps) eps)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))) eps (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) eps))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))) eps (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (neg.f64 (*.f64 (neg.f64 eps) eps)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) eps))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (*.f64 eps eps) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 eps) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 (neg.f64 eps) eps))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (neg.f64 eps)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (pow.f64 eps #s(literal -1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (pow.f64 eps #s(literal -1 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (-.f64 eps #s(literal 0 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 eps eps))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (-.f64 eps #s(literal 0 binary64))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 (neg.f64 eps) eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (*.f64 (neg.f64 eps) eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 (neg.f64 eps) eps) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))))) (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (*.f64 (neg.f64 eps) eps) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))))) (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))))) (*.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (*.f64 (neg.f64 eps) eps) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))))","(/.f64 (fma.f64 (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 eps (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 eps (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 eps (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 eps (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))))) (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 eps (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))))) (*.f64 eps (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))))) (*.f64 eps (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))","(/.f64 (fma.f64 (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 eps (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 eps (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (neg.f64 eps) eps)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 eps (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (neg.f64 eps) eps)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 eps (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 eps (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (neg.f64 eps) eps)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 eps (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))))) (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (neg.f64 eps) eps)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 eps (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))))) (*.f64 eps (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (neg.f64 eps) eps)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))))) (*.f64 eps (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (neg.f64 eps) eps)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 eps (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 eps (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))))) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 (*.f64 eps eps) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))))) (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (*.f64 eps eps) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))))) (*.f64 (neg.f64 eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))","(/.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (neg.f64 eps) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (pow.f64 eps #s(literal -1 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))))) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))))) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))))) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (/.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))))","(/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (-.f64 eps #s(literal 0 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64)) (*.f64 (*.f64 x x) eps)))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (-.f64 eps #s(literal 0 binary64)) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) #s(literal -1/4 binary64))))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (*.f64 (*.f64 (*.f64 x x) eps) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64) #s(literal -1/8 binary64))))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)) (*.f64 (-.f64 eps #s(literal 0 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64))))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))","(/.f64 (fma.f64 (*.f64 eps eps) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 x x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (-.f64 eps #s(literal 0 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))))))","(/.f64 (-.f64 (*.f64 eps eps) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 eps) eps))) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 (*.f64 x x) eps) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 eps) eps)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps)) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 eps) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 (*.f64 x x) eps) eps)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps)) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (/.f64 eps #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 eps eps) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (pow.f64 (/.f64 eps #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 eps eps) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (pow.f64 (/.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (neg.f64 eps) eps) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (pow.f64 (/.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (neg.f64 eps) eps) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (pow.f64 (neg.f64 eps) #s(literal 1 binary64)) (pow.f64 (/.f64 (neg.f64 eps) eps) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (pow.f64 (neg.f64 eps) #s(literal 1 binary64)) (pow.f64 (/.f64 (neg.f64 eps) eps) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (pow.f64 (*.f64 (neg.f64 eps) eps) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) eps) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (pow.f64 (*.f64 (neg.f64 eps) eps) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) eps) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x)) eps eps)","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) eps)","(fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (*.f64 #s(literal 1/24 binary64) x)) x (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (*.f64 x x)) #s(literal 1/24 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) (*.f64 x eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) (*.f64 x x)) eps (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) eps) (*.f64 x x) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (/.f64 eps #s(literal 1 binary64)) (/.f64 eps eps) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (/.f64 eps #s(literal 1 binary64)) (/.f64 eps eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (/.f64 eps #s(literal -1 binary64)) (/.f64 (neg.f64 eps) eps) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (/.f64 eps #s(literal -1 binary64)) (/.f64 (neg.f64 eps) eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) (*.f64 x x) eps)","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) (*.f64 x (*.f64 (*.f64 x x) eps)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 eps) eps)) (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 eps) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 eps) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 #s(literal -1 binary64) (neg.f64 eps) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 #s(literal -1 binary64) (neg.f64 eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) (*.f64 (*.f64 x x) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (neg.f64 eps) (/.f64 (neg.f64 eps) eps) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (neg.f64 eps) (/.f64 (neg.f64 eps) eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (*.f64 (neg.f64 eps) eps) (/.f64 #s(literal -1 binary64) eps) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 (*.f64 (neg.f64 eps) eps) (/.f64 #s(literal -1 binary64) eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) eps) eps)","(fma.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) eps)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (*.f64 (*.f64 x x) eps) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)","(fma.f64 #s(literal 1 binary64) eps (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 #s(literal 1 binary64) eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) eps)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (*.f64 x x) (*.f64 eps (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) eps)","(fma.f64 x (*.f64 (*.f64 x eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) eps)","(fma.f64 x (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 x (*.f64 (*.f64 x eps) (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(fma.f64 eps (pow.f64 (/.f64 eps eps) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 eps (pow.f64 (/.f64 eps eps) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 eps (/.f64 eps eps) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(fma.f64 eps (/.f64 eps eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(fma.f64 eps (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) eps)","(fma.f64 eps (*.f64 (*.f64 x x) (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))) (/.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps))) (/.f64 (*.f64 eps eps) (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps) (neg.f64 eps))))","(+.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps) (*.f64 x x) #s(literal 0 binary64)) eps)","(+.f64 (+.f64 eps (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x))) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) eps) #s(literal 1/24 binary64)) (*.f64 x x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)) eps)","(+.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) eps) eps) #s(literal 0 binary64))","(+.f64 eps (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps))))","(+.f64 eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) (*.f64 x eps)))","(+.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) eps) eps))","(*.f64 (*.f64 x eps) x)","(*.f64 (*.f64 x x) eps)","(*.f64 x (*.f64 x eps))","(*.f64 eps (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 x x))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (*.f64 x x))) eps)","(/.f64 (neg.f64 (*.f64 (*.f64 x x) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (*.f64 x x) (*.f64 (neg.f64 eps) eps))) eps)","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 x x)) (*.f64 eps eps))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (*.f64 x x)) (neg.f64 eps))","(/.f64 (*.f64 (*.f64 x x) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (*.f64 x x) (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(fma.f64 (*.f64 x eps) x (*.f64 #s(literal 0 binary64) (*.f64 x x)))","(fma.f64 (*.f64 x eps) x (*.f64 (*.f64 x x) #s(literal 0 binary64)))","(fma.f64 (*.f64 x x) eps (*.f64 #s(literal 0 binary64) (*.f64 x x)))","(fma.f64 (*.f64 x x) eps (*.f64 (*.f64 x x) #s(literal 0 binary64)))","(fma.f64 (*.f64 x x) #s(literal 0 binary64) (*.f64 (*.f64 x x) eps))","(fma.f64 x (*.f64 x eps) (*.f64 #s(literal 0 binary64) (*.f64 x x)))","(fma.f64 x (*.f64 x eps) (*.f64 (*.f64 x x) #s(literal 0 binary64)))","(fma.f64 eps (*.f64 x x) (*.f64 #s(literal 0 binary64) (*.f64 x x)))","(fma.f64 eps (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (*.f64 x x) (*.f64 (*.f64 x x) eps))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 x x)) (*.f64 (*.f64 x x) eps))","(+.f64 (*.f64 (*.f64 x x) #s(literal 0 binary64)) (*.f64 (*.f64 x x) eps))","(+.f64 (*.f64 (*.f64 x x) eps) (*.f64 #s(literal 0 binary64) (*.f64 x x)))","(+.f64 (*.f64 (*.f64 x x) eps) (*.f64 (*.f64 x x) #s(literal 0 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 eps (*.f64 (neg.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 eps))","(*.f64 (/.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1 binary64)) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps)) (*.f64 (neg.f64 eps) eps))","(*.f64 #s(literal -1 binary64) (*.f64 (*.f64 eps eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps)))","(*.f64 (/.f64 #s(literal -1 binary64) eps) (pow.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) eps)))","(*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) (pow.f64 eps #s(literal -1 binary64)))","(*.f64 (neg.f64 eps) (*.f64 eps (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps))))","(*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) eps)) (/.f64 #s(literal -1 binary64) eps))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps)","(*.f64 (*.f64 (neg.f64 eps) eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps)))","(*.f64 #s(literal 1 binary64) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 eps (*.f64 (neg.f64 eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps))))","(pow.f64 (/.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) #s(literal 1 binary64))) (neg.f64 eps))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) eps)) #s(literal 1 binary64))) eps)","(/.f64 (/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) #s(literal 1 binary64)) eps)","(/.f64 (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) eps)) #s(literal 1 binary64)) (neg.f64 eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) eps)","(/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1 binary64)))","(neg.f64 (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) (/.f64 #s(literal -1 binary64) eps)))","(neg.f64 (*.f64 (*.f64 eps eps) (/.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps))))","(neg.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps)))","(-.f64 (/.f64 #s(literal 0 binary64) eps) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps)))","(-.f64 #s(literal 0 binary64) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1 binary64))) #s(literal -1 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","(*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 eps eps))","(*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (neg.f64 eps)) eps)","(*.f64 #s(literal -1 binary64) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)))","(*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) (neg.f64 eps))","(*.f64 (neg.f64 eps) (*.f64 eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) eps))","(*.f64 (*.f64 (neg.f64 eps) eps) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(*.f64 (*.f64 eps eps) (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(*.f64 eps (*.f64 (neg.f64 eps) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(neg.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)))","(-.f64 #s(literal 0 binary64) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)))","(*.f64 #s(literal -1 binary64) (*.f64 eps eps))","(*.f64 (neg.f64 eps) eps)","(*.f64 (*.f64 eps eps) #s(literal -1 binary64))","(*.f64 eps (neg.f64 eps))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 eps))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (neg.f64 eps))) eps)","(/.f64 (neg.f64 (*.f64 (neg.f64 eps) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps))) eps)","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps))))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 eps)) (*.f64 eps eps))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (neg.f64 eps)) (neg.f64 eps))","(/.f64 (*.f64 (neg.f64 eps) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (neg.f64 eps) (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 eps eps))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))))","(neg.f64 (*.f64 eps eps))","(fma.f64 #s(literal -1 binary64) (*.f64 eps eps) (*.f64 #s(literal 0 binary64) (neg.f64 eps)))","(fma.f64 #s(literal -1 binary64) (*.f64 eps eps) (*.f64 (neg.f64 eps) #s(literal 0 binary64)))","(fma.f64 (neg.f64 eps) eps (*.f64 #s(literal 0 binary64) (neg.f64 eps)))","(fma.f64 (neg.f64 eps) eps (*.f64 (neg.f64 eps) #s(literal 0 binary64)))","(fma.f64 (neg.f64 eps) #s(literal 0 binary64) (*.f64 (neg.f64 eps) eps))","(fma.f64 (*.f64 eps eps) #s(literal -1 binary64) (*.f64 #s(literal 0 binary64) (neg.f64 eps)))","(fma.f64 (*.f64 eps eps) #s(literal -1 binary64) (*.f64 (neg.f64 eps) #s(literal 0 binary64)))","(fma.f64 eps (neg.f64 eps) (*.f64 #s(literal 0 binary64) (neg.f64 eps)))","(fma.f64 eps (neg.f64 eps) (*.f64 (neg.f64 eps) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (neg.f64 eps) (*.f64 (neg.f64 eps) eps))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps))))) (/.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 eps eps)) (*.f64 eps eps))","(-.f64 #s(literal 0 binary64) (*.f64 eps eps))","(+.f64 (*.f64 #s(literal 0 binary64) (neg.f64 eps)) (*.f64 (neg.f64 eps) eps))","(+.f64 (*.f64 (neg.f64 eps) #s(literal 0 binary64)) (*.f64 (neg.f64 eps) eps))","(+.f64 (*.f64 (neg.f64 eps) eps) (*.f64 #s(literal 0 binary64) (neg.f64 eps)))","(+.f64 (*.f64 (neg.f64 eps) eps) (*.f64 (neg.f64 eps) #s(literal 0 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 eps) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps)","(*.f64 eps (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)) (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)))) eps)","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) (*.f64 (neg.f64 eps) eps))) eps)","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 eps (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) eps))) (neg.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))) (*.f64 (neg.f64 eps) eps))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))) (neg.f64 eps))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 eps eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))) eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))) (*.f64 eps eps))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 eps (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) (*.f64 eps eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) (neg.f64 eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))) (*.f64 eps eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))) (*.f64 (neg.f64 eps) eps)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)))))","(fma.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) eps (*.f64 (cos.f64 x) eps))","(fma.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))))","(fma.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) #s(literal 0 binary64) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(fma.f64 (cos.f64 x) eps (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) eps))","(fma.f64 (cos.f64 x) eps (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)))","(fma.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) (*.f64 (cos.f64 x) eps))","(fma.f64 eps (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))))","(fma.f64 eps (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(fma.f64 eps (cos.f64 x) (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) eps))","(fma.f64 eps (cos.f64 x) (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)))","(fma.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) eps) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))))","(+.f64 (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) #s(literal 0 binary64)))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 eps (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x)))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (cos.f64 x) eps))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (cos.f64 x) eps)))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 3 binary64)))))","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x))","(fma.f64 eps #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) (cos.f64 x))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps))) (/.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) #s(literal 2 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (neg.f64 (cos.f64 x)))))","(+.f64 (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps) (cos.f64 x))","(+.f64 (cos.f64 x) (*.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps))","#s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x))","#s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)))))))","(/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))))) #s(literal 4 binary64))","(/.f64 (-.f64 (+.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))) (-.f64 (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x)) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64))) (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x))))))","(fma.f64 (cos.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))) (*.f64 (sin.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x)))))","(fma.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (sin.f64 x)))","(fma.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x) (neg.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x))))","(fma.f64 (cos.f64 x) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (sin.f64 x)))","(fma.f64 (cos.f64 x) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (neg.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)))))) (/.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)))))))","(-.f64 (*.f64 (cos.f64 (+.f64 x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (sin.f64 (+.f64 x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) (*.f64 #s(literal 0 binary64) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))))","(-.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)))","(cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x)))) (*.f64 (sin.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 eps #s(literal 1/2 binary64)) x)))))","(+.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x))))","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 (pow.f64 (/.f64 eps #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps eps) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 eps #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 (neg.f64 eps) eps) #s(literal 2 binary64)))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) eps) #s(literal 2 binary64)))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)))","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 #s(literal 1 binary64) (*.f64 eps eps))","(*.f64 (*.f64 eps eps) (pow.f64 (/.f64 (neg.f64 eps) eps) #s(literal 2 binary64)))","(*.f64 (*.f64 eps eps) (pow.f64 (/.f64 eps eps) #s(literal 2 binary64)))","(*.f64 eps (-.f64 eps #s(literal 0 binary64)))","(*.f64 eps eps)","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) eps)) eps)","(/.f64 (neg.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (*.f64 eps (*.f64 (neg.f64 eps) eps))) eps)","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 (*.f64 (neg.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 eps) eps))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64))) (neg.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (neg.f64 eps) eps))) (pow.f64 eps #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 eps #s(literal 3 binary64)))","(/.f64 (neg.f64 (pow.f64 eps #s(literal 4 binary64))) (*.f64 (neg.f64 eps) eps))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) eps) (neg.f64 eps))","(/.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (*.f64 (neg.f64 eps) eps)) (neg.f64 eps))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (neg.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)) (*.f64 eps eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))))","(/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 eps eps))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (neg.f64 eps) eps)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) eps) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (neg.f64 (pow.f64 eps #s(literal 6 binary64))) (neg.f64 (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 eps #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps eps) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 eps #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 (neg.f64 eps) eps) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) eps) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 eps) (neg.f64 eps) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 eps eps) #s(literal 0 binary64))","(fma.f64 (*.f64 eps eps) (pow.f64 (/.f64 (neg.f64 eps) eps) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 eps eps) (pow.f64 (/.f64 eps eps) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 eps (-.f64 eps #s(literal 0 binary64)) #s(literal 0 binary64))","(fma.f64 eps eps #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 eps) eps)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (neg.f64 eps) eps)))","(-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))) (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64))))))","(-.f64 (*.f64 eps eps) (/.f64 #s(literal 0 binary64) (*.f64 eps eps)))","(-.f64 (*.f64 eps eps) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","(+.f64 (*.f64 eps eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 eps eps))","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(*.f64 x x)","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":278.55322265625,"type":"rewrite"},{"compiler":[[31291,3369]],"memory":[[9165392,71663136]],"time":95.0439453125,"type":"eval"},{"alts":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","done",0.0,"binary64"],["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","fresh",0.05708084277528902,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) eps))","fresh",28.7948316121343,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","done",0.1734274614722409,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","done",0.3729998641294394,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","done",0.21169215505544486,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","done",0.3733116665873605,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","done",0.645905779592545,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (*.f64 x x)) #s(literal 1/24 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))))","fresh",0.25893901677106446,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","done",0.2589390167759072,"binary64"]],"compiler":[[451,130],[32,25],[27,22],[33,20],[22,15],[28,19],[29,18],[19,14],[14,11],[32,18],[26,16]],"count":[[751,10]],"kept":[{"done":[4,3],"fresh":[0,0],"new":[742,3],"picked":[5,4]}],"memory":[[-2968480,32604848]],"min-error":[[0.0,"binary64"]],"time":17.411865234375,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["x",0.0,1,"binary64"],["eps",0.0,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.0,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[20,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (*.f64 x x)) #s(literal 1/24 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))"]],"memory":[[1722656,9808752]],"oracle":[42.03206697894557],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))"]],"repr":["binary64"],"time":14.843017578125,"times":[[4.522216796875,"x"],[4.698974609375,"eps"],[4.448974609375,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.05708084277528902],"baseline":[0.05708084277528902],"branch":[["x",0.05708084277528902,1,"binary64"],["eps",0.05708084277528902,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.05708084277528902,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[15,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (*.f64 x x)) #s(literal 1/24 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))"]],"memory":[[157616,8360128]],"oracle":[29.225138987301865],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))"]],"repr":["binary64"],"time":11.844970703125,"times":[[3.676025390625,"x"],[3.447998046875,"eps"],[3.719970703125,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.1734274614722409],"baseline":[0.1734274614722409],"branch":[["x",0.1734274614722409,1,"binary64"],["eps",0.1734274614722409,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.1734274614722409,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[12,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (*.f64 x x)) #s(literal 1/24 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))"]],"memory":[[-598864,7675456]],"oracle":[29.225138987301865],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))"]],"repr":["binary64"],"time":11.232177734375,"times":[[2.9951171875,"x"],[3.614990234375,"eps"],[3.7080078125,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.21169215505544486],"baseline":[0.21169215505544486],"branch":[["x",0.21169215505544486,1,"binary64"],["eps",0.21169215505544486,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.21169215505544486,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[11,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 (*.f64 x x) eps) (*.f64 x x)) #s(literal 1/24 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 eps eps)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (neg.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))"]],"memory":[[-4483584,7363872]],"oracle":[29.225138987301865],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))"]],"repr":["binary64"],"time":14.68896484375,"times":[[2.838134765625,"x"],[8.025146484375,"eps"],[2.98388671875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.2589390167759072],"baseline":[0.2589390167759072],"branch":[["x",0.2589390167759072,1,"binary64"],["eps",0.2589390167759072,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.2589390167759072,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[5,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))"]],"memory":[[-2541712,5736640]],"oracle":[0.645905779592545],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))"]],"repr":["binary64"],"time":6.555908203125,"times":[[2.160888671875,"x"],[1.85302734375,"eps"],[1.97216796875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.3729998641294394],"baseline":[0.3729998641294394],"branch":[["x",0.3729998641294394,1,"binary64"],["eps",0.3729998641294394,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.3729998641294394,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[4,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))"]],"memory":[[5474848,5474848]],"oracle":[0.645905779592545],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))"]],"repr":["binary64"],"time":5.81591796875,"times":[[1.742919921875,"x"],[1.717041015625,"eps"],[1.690185546875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.3733116665873605],"baseline":[0.3733116665873605],"branch":[["x",0.3733116665873605,1,"binary64"],["eps",0.3733116665873605,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.3733116665873605,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[3,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps))"]],"memory":[[-3084080,5232592]],"oracle":[0.645905779592545],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))"]],"repr":["binary64"],"time":5.109130859375,"times":[[1.446044921875,"x"],[1.4541015625,"eps"],[1.718994140625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.6459057795925449],"baseline":[0.645905779592545],"branch":[["x",0.6459057795925449,1,"binary64"],["eps",0.6459057795925449,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.6459057795925449,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[1,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))"]],"link":["."],"memory":[[-3585968,4759648]],"name":["2sin (example 3.3)"],"oracle":[0.645905779592545],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))"]],"repr":["binary64"],"time":4.198974609375,"times":[[1.239013671875,"x"],[1.14599609375,"eps"],[1.387939453125,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"egraph":[[18,5993,193,0.026831394],[17,3830,193,0.022759583],[16,2105,193,0.015049863],[15,1885,193,0.006228375],[14,1746,193,0.004993386],[13,1657,193,0.00487803],[12,1575,193,0.004218078],[11,1365,193,0.007189613],[10,762,193,0.007214889],[9,519,193,0.003632416],[8,438,193,0.002629283],[7,392,193,0.002337848],[6,256,193,0.002604792],[5,207,193,0.002364207],[4,186,193,0.001699894],[3,175,193,0.001522322],[2,141,193,0.001611039],[1,92,193,0.001411198],[0,71,193,0.001188756]],"inputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))"]],"memory":[[2082528,10279696]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))"]],"stop":[["node limit",1]],"time":142.319091796875,"type":"simplify"},{"compiler":[[197,74]],"memory":[[1558064,1558064]],"stop":[["fuel",1]],"time":2.182861328125,"type":"soundness"},{"compiler":[[197,74],[197,74],[15,13],[15,13],[7,6],[7,6]],"memory":[[1832688,34406256]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[]],"time":63.379150390625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02001953125,"type":"end"}]