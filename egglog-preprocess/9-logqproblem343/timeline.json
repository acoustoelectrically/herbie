[{"memory":[[13008,13008]],"time":0.02783203125,"type":"start"},{"compiler":[[13,9]],"memory":[[847216,847216]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.00048780441284179693,"valid":0.4990239143371582}],[11,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0009756088256835938,"valid":0.4985361099243164}],[10,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0019512176513671875,"valid":0.4975605010986328}],[9,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.003902435302734375,"valid":0.4956092834472656}],[8,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.00780487060546875,"valid":0.49170684814453125}],[7,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0156097412109375,"valid":0.4839019775390625}],[6,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.031219482421875,"valid":0.468292236328125}],[5,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.06243896484375,"valid":0.43707275390625}],[4,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.1248779296875,"valid":0.3746337890625}],[3,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.249755859375,"valid":0.249755859375}],[2,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":3.366943359375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[19605120,375644560]],"mixsample":[[74.643798828125,"ival-div",0],[179.555908203125,"adjust",800],[69.703369140625,"ival-div",400],[20.031494140625,"ival-sub",1600],[4.103515625,"ival-assert",0],[37.8017578125,"ival-div",1600],[60.392822265625,"ival-sub",0],[60.959228515625,"ival-sub",400],[64.7529296875,"adjust",2000],[54.623779296875,"ival-add",0],[67.642578125,"ival-fabs",0],[16.06298828125,"ival-add",1600],[0.635986328125,"ival-log",400],[45.663330078125,"ival-add",400],[1475.96728515625,"ival-log",0],[2.73095703125,"ival-log",800],[7.06005859375,"exact",0],[27.027099609375,"ival-<",0]],"outcomes":[[1051.716064453125,1,"valid",4851],[1518.419189453125,2,"valid",3105],[24.665283203125,0,"valid",300]],"time":3009.43603515625,"type":"sample"},{"compiler":[[8,6],[25,8],[25,8]],"confusion":[[256,0,0,0]],"explanations":[["log.f64","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","sensitivity",256,0,[],[[]]]],"fperrors":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",256,0,false,0,false],["(+.f64 #s(literal 1 binary64) eps)",0,0,false,0,false],["eps",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0,0,false,0,false],["(-.f64 #s(literal 1 binary64) eps)",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-6908928,51328880]],"mixsample":[[11.0419921875,"adjust",800],[4.3115234375,"ival-div",0],[3.632080078125,"ival-add",0],[1.160400390625,"ival-add",1600],[1.34033203125,"ival-sub",1600],[4.11669921875,"ival-div",400],[2.25048828125,"ival-div",1600],[0.28369140625,"ival-assert",0],[3.121337890625,"ival-add",400],[4.427001953125,"ival-sub",0],[0.621826171875,"ival-true",0],[95.02880859375,"ival-log",0],[3.1044921875,"ival-sub",400],[0.39013671875,"exact",0],[4.190185546875,"adjust",2000]],"outcomes":[[64.882568359375,1,"valid",292],[102.279296875,2,"valid",212],[0.541259765625,0,"valid",8]],"time":233.818115234375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"egraph":[[0,574,8,0.002031357],[10,574,8,0.00298535],[9,528,8,0.004222172],[8,331,8,0.003168932],[7,202,8,0.001903892],[6,129,8,0.000887971],[5,92,8,0.000619595],[4,58,8,0.000497395],[3,35,8,0.000268022],[2,24,8,0.000227477],[1,18,8,0.000158183],[0,10,8,0.000229878],[0,6,8,0.000103188]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"]],"memory":[[5501040,14988640]],"method":["egg-herbie"],"outputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(log.f64 (/.f64 (-.f64 eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":174.718017578125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06689453125,"type":"eval"},{"alts":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","next",59.527301879812164,"binary64"]],"compiler":[[8,6]],"memory":[[314368,314368]],"time":0.635986328125,"type":"prune"},{"egraph":[[0,574,23,0.001834501],[10,574,23,0.003239747],[9,528,23,0.004247541],[8,331,23,0.003250443],[7,202,23,0.001755558],[6,129,23,0.000912774],[5,92,23,0.000589983],[4,58,23,0.000497844],[3,35,23,0.000273727],[2,24,23,0.000183948],[1,18,23,0.000138443],[0,10,23,0.000165114],[0,6,23,0.000108849]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(+.f64 #s(literal 1 binary64) eps)"]],"locations":[["(+.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(-.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","cost-diff",0],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","cost-diff",0]],"memory":[[-6626464,1385408]],"method":["egg-herbie"],"outputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(log.f64 (/.f64 (-.f64 eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(/.f64 (-.f64 eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(+.f64 #s(literal 1 binary64) eps)","(-.f64 eps #s(literal -1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":26.72900390625,"type":"simplify"},{"compiler":[[25,8]],"locations":[["(-.f64 #s(literal 1 binary64) eps)","accuracy",0.0],["(+.f64 #s(literal 1 binary64) eps)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","accuracy",0.01171875],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","accuracy",59.50587927362364]],"memory":[[5097936,13015840]],"mixsample":[[4.9990234375,"adjust",800],[1.96337890625,"ival-div",0],[6.16015625,"ival-add",0],[0.439208984375,"ival-add",1600],[0.651123046875,"ival-sub",1600],[2.688720703125,"ival-div",400],[1.027099609375,"ival-div",1600],[0.107177734375,"ival-assert",0],[1.242431640625,"ival-add",400],[1.893798828125,"ival-sub",0],[0.216064453125,"ival-true",0],[43.14697265625,"ival-log",0],[2.030029296875,"ival-sub",400],[0.186279296875,"exact",0],[1.765625,"adjust",2000]],"outcomes":[[29.375244140625,1,"valid",146],[51.60302734375,2,"valid",106],[0.274169921875,0,"valid",4]],"time":90.282958984375,"type":"localize"},{"count":[[4,26]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","(+.f64 #s(literal 1 binary64) eps)"]],"memory":[[1205328,1205328]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(+ 1 (* -1 eps))","(+ 1 eps)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(* -1 eps)","(* eps (- (/ 1 eps) 1))","eps","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(* -1 (* eps (- 1 (/ 1 eps))))"]],"series":[[0.90087890625,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","-inf"],[0.925048828125,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","inf"],[1.3349609375,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","0"]],"time":3.51416015625,"type":"series"},{"count":[[26,25]],"egraph":[[0,8376,188,0.055493868],[5,6278,200,0.032099063],[4,2881,200,0.032222542],[3,1309,200,0.013726374],[2,488,204,0.005085876],[1,220,212,0.00180665],[0,89,218,0.000838815]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(+ 1 (* -1 eps))","(+ 1 eps)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(* -1 eps)","(* eps (- (/ 1 eps) 1))","eps","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(* -1 (* eps (- 1 (/ 1 eps))))"]],"memory":[[2081152,26550384]],"method":["egg-herbie"],"outputs":[["(* -2 eps)","(*.f64 #s(literal -2 binary64) eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","1","#s(literal 1 binary64)","(+ 1 (* -2 eps))","(fma.f64 #s(literal -2 binary64) eps #s(literal 1 binary64))","(+ 1 (* eps (- (* 2 eps) 2)))","(fma.f64 (fma.f64 #s(literal 2 binary64) eps #s(literal -2 binary64)) eps #s(literal 1 binary64))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) eps #s(literal 2 binary64)) eps #s(literal -2 binary64)) eps #s(literal 1 binary64))","(+ 1 (* -1 eps))","(-.f64 #s(literal 1 binary64) eps)","(+ 1 eps)","(+.f64 #s(literal 1 binary64) eps)","(log -1)","(log.f64 #s(literal -1 binary64))","(- (log -1) (* 2 (/ 1 eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64)) eps))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","-1","#s(literal -1 binary64)","(- (* 2 (/ 1 eps)) 1)","(-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 1 binary64))","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps)) eps))","(* -1 eps)","(neg.f64 eps)","(* eps (- (/ 1 eps) 1))","(-.f64 #s(literal 1 binary64) eps)","eps","(* eps (+ 1 (/ 1 eps)))","(+.f64 #s(literal 1 binary64) eps)","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps))","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps)) eps))","(* -1 (* eps (- 1 (/ 1 eps))))","(-.f64 #s(literal 1 binary64) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":222.287841796875,"type":"simplify"},{"count":[[4,304]],"egraph":[[0,10104,8,0.038031113],[3,4567,8,0.03458984],[2,328,21,0.013609673],[1,44,21,0.001254624],[0,10,21,0.000612012],[0,6,21,9.8907e-5]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","(+.f64 #s(literal 1 binary64) eps)"]],"memory":[[774976,33652592]],"outputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (fma.f64 eps eps #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) eps))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (exp.f64 (neg.f64 (log1p.f64 eps))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps))","(pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) eps) (fma.f64 eps eps #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 eps)))) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 eps)))) (fma.f64 eps eps #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -3 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))))","(/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (neg.f64 (fma.f64 eps eps #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 eps eps #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps eps #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 3 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (-.f64 #s(literal -1 binary64) eps) (*.f64 (-.f64 #s(literal -1 binary64) eps) (*.f64 eps eps))) (*.f64 (-.f64 #s(literal -1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) eps) (*.f64 eps (fma.f64 eps eps eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 eps eps #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (fma.f64 eps eps #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) eps) (fma.f64 eps eps #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 eps))))","(neg.f64 (-.f64 #s(literal -1 binary64) eps))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (fma.f64 eps eps #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64)))) (fma.f64 eps eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64)))) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -1/2 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (exp.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 eps)) (log1p.f64 (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) eps))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (fma.f64 eps eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 eps (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 eps) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) eps #s(literal 1 binary64))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (neg.f64 eps) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (-.f64 #s(literal 1 binary64) eps) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 eps #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 eps #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 eps) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal 1 binary64) eps #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)) (/.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 #s(literal -1 binary64) eps)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) eps))","(-.f64 #s(literal 1 binary64) (neg.f64 eps))","(-.f64 #s(literal 1 binary64) eps)","(exp.f64 (*.f64 (neg.f64 (log1p.f64 eps)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 eps))","(+.f64 (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 eps (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) eps))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)))","(+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(+.f64 (neg.f64 eps) #s(literal 1 binary64))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(+.f64 eps #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 eps))","(+.f64 #s(literal 1 binary64) eps)","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(*.f64 (fma.f64 eps eps #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) eps))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (exp.f64 (neg.f64 (log1p.f64 eps))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps))","(pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) eps) (fma.f64 eps eps #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 eps)))) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 eps)))) (fma.f64 eps eps #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -3 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))))","(/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (neg.f64 (fma.f64 eps eps #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 eps eps #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps eps #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 3 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 eps eps))) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (-.f64 #s(literal -1 binary64) eps) (*.f64 (-.f64 #s(literal -1 binary64) eps) (*.f64 eps eps))) (*.f64 (-.f64 #s(literal -1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) eps) (*.f64 eps (fma.f64 eps eps eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 eps eps #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (fma.f64 eps eps #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (-.f64 #s(literal -1 binary64) eps))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) eps) (fma.f64 eps eps #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 eps))))","(neg.f64 (-.f64 #s(literal -1 binary64) eps))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps eps eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 eps eps eps) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 eps eps eps) (-.f64 (fma.f64 eps eps eps) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 9 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (fma.f64 eps eps #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 4 binary64)))) (fma.f64 eps eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (+.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 6 binary64)))) (+.f64 (fma.f64 eps eps (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -1/2 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (exp.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 eps)) (log1p.f64 (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) eps))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (fma.f64 eps eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 eps (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) eps) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 eps) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) eps #s(literal 1 binary64))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (neg.f64 eps) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 (-.f64 #s(literal 1 binary64) eps) (pow.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal -2 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 eps #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 eps #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 eps) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(fma.f64 #s(literal 1 binary64) eps #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) #s(literal 1 binary64)) (/.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 #s(literal -1 binary64) eps)) (pow.f64 (-.f64 #s(literal -1 binary64) eps) #s(literal -1 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) eps))","(-.f64 #s(literal 1 binary64) (neg.f64 eps))","(-.f64 #s(literal 1 binary64) eps)","(exp.f64 (*.f64 (neg.f64 (log1p.f64 eps)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 eps))","(+.f64 (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 eps (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (fma.f64 eps eps eps) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) eps))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 eps eps)) (+.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps eps eps)))","(+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) eps) eps #s(literal 1 binary64)))))","(+.f64 (neg.f64 eps) #s(literal 1 binary64))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 #s(literal 1 binary64) eps)))))","(+.f64 eps #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 eps))","(+.f64 #s(literal 1 binary64) eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":171.316162109375,"type":"rewrite"},{"compiler":[[3731,709]],"memory":[[2102096,17492224]],"time":22.803955078125,"type":"eval"},{"alts":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","next",0.01171875,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","next",0.24354912779190274,"binary64"],["#s(literal 0 binary64)","next",60.42310941610405,"binary64"]],"compiler":[[17,12],[12,9],[1,2]],"count":[[173,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[172,3],"picked":[1,0]}],"memory":[[-2938304,6983632]],"min-error":[[0.01171875,"binary64"]],"time":5.091064453125,"type":"prune"},{"egraph":[[0,1207,55,0.004641185],[13,1207,55,0.007752883],[12,1179,55,0.009264706],[11,1085,55,0.008807035],[10,753,55,0.00551039],[9,630,55,0.005265986],[8,409,55,0.003846154],[7,257,55,0.002462998],[6,160,55,0.001115004],[5,125,55,0.000744665],[4,91,55,0.00062924],[3,65,55,0.000424199],[2,48,55,0.000314747],[1,33,55,0.000240671],[0,20,55,0.000245254],[0,15,55,0.00012016]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","eps","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)"]],"locations":[["(*.f64 eps eps)","cost-diff",0],["(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","cost-diff",0],["(*.f64 #s(literal -2 binary64) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","cost-diff",0]],"memory":[[-5091184,2968384]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","eps","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":66.18994140625,"type":"simplify"},{"compiler":[[46,16]],"locations":[["(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","accuracy",0.0],["(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","accuracy",0.01171875],["(*.f64 #s(literal -2 binary64) eps)","accuracy",0.0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","accuracy",0.24354912779190274]],"memory":[[4073776,19866544]],"mixsample":[[7.33544921875,"adjust",800],[1.791015625,"ival-div",0],[2.028564453125,"ival-div",400],[0.619873046875,"ival-sub",1600],[0.107666015625,"ival-assert",0],[1.044921875,"ival-div",1600],[1.8056640625,"ival-sub",0],[4.421142578125,"const",0],[1.6123046875,"ival-sub",400],[2.692626953125,"adjust",2000],[3.332275390625,"ival-add",0],[6.974609375,"ival-mult",0],[0.443603515625,"ival-add",1600],[1.169189453125,"ival-add",400],[43.754150390625,"ival-log",0],[0.23193359375,"ival-true",0],[0.422607421875,"exact",0]],"outcomes":[[39.24365234375,1,"valid",146],[57.373779296875,2,"valid",106],[0.563720703125,0,"valid",4]],"time":109.712890625,"type":"localize"},{"count":[[6,16]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(*.f64 eps eps)"]],"memory":[[2037504,2037504]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","-2","(- (* -2/3 (pow eps 2)) 2)","(pow eps 2)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/3 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))"]],"series":[[1.100830078125,"((log (/ (- 1 eps) (+ 1 eps))) (* -2 eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (* eps eps) -2/3) -2) eps) (+ (* (* eps eps) -2/3) -2) (* eps eps))","eps","-inf"],[1.432861328125,"((log (/ (- 1 eps) (+ 1 eps))) (* -2 eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (* eps eps) -2/3) -2) eps) (+ (* (* eps eps) -2/3) -2) (* eps eps))","eps","inf"],[1.135009765625,"((log (/ (- 1 eps) (+ 1 eps))) (* -2 eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (* eps eps) -2/3) -2) eps) (+ (* (* eps eps) -2/3) -2) (* eps eps))","eps","0"]],"time":4.06103515625,"type":"series"},{"count":[[16,16]],"egraph":[[0,8141,132,0.060798685],[5,6423,141,0.022605869],[4,2551,141,0.020727641],[3,1110,141,0.009047286],[2,427,141,0.003508511],[1,148,141,0.001453172],[0,60,144,0.000615032]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","-2","(- (* -2/3 (pow eps 2)) 2)","(pow eps 2)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/3 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))"]],"memory":[[-2207216,29194656]],"method":["egg-herbie"],"outputs":[["(* -2 eps)","(*.f64 #s(literal -2 binary64) eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","-2","#s(literal -2 binary64)","(- (* -2/3 (pow eps 2)) 2)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(pow eps 2)","(*.f64 eps eps)","(log -1)","(log.f64 #s(literal -1 binary64))","(- (log -1) (* 2 (/ 1 eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64)) eps))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","(* -2/3 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* -2/3 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -2/3 binary64))","(* -1 (* (pow eps 2) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 #s(literal 2/5 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64))) eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":195.616943359375,"type":"simplify"},{"count":[[6,134]],"egraph":[[0,8072,45,0.062429653],[3,6114,49,0.038282652],[2,505,49,0.021170304],[1,74,49,0.002653067],[0,19,49,0.000820641],[0,14,49,0.000126833]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(*.f64 eps eps)"]],"memory":[[3001872,37608080]],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal -2 binary64) eps)","(*.f64 eps #s(literal -2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8 binary64))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps) (-.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) #s(literal 2 binary64)))) (-.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (*.f64 (*.f64 eps eps) #s(literal -4/3 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps) (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) #s(literal 3 binary64)))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64))))","(*.f64 (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) #s(literal 1 binary64)) eps)","(*.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps) (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps) (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (/.f64 eps (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)) eps))","(*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (/.f64 eps (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)))))","(*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) eps))","(*.f64 (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(*.f64 eps (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(/.f64 (*.f64 (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)))) eps) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))))","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) eps) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) eps) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)))))","(/.f64 (*.f64 eps (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))))) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))))","(/.f64 (*.f64 eps (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(/.f64 (*.f64 eps (neg.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps))) (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps)) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))) (-.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps)) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 #s(literal -2 binary64) eps) (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps)) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps)) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) eps)))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 eps eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 1 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(fma.f64 #s(literal -2 binary64) eps (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(fma.f64 eps (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(+.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8 binary64))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) #s(literal 2 binary64)))) (-.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (*.f64 (*.f64 eps eps) #s(literal -4/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) #s(literal 3 binary64)))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(*.f64 (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))))","(*.f64 (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))))","(*.f64 (neg.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))))))","(*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) #s(literal 16 binary64)) (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -64 binary64)) (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 16/9 binary64) #s(literal 16 binary64)) (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -64 binary64)) (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal -512/19683 binary64) (pow.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal -512 binary64)) (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 64 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 64/27 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))) (*.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))) (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))) (fma.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))) (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))) (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))) (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)))) (neg.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) #s(literal 16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 16/9 binary64) #s(literal 16 binary64)) (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64))) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal -512/19683 binary64) (pow.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal -512 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 64 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 64/27 binary64)))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) #s(literal 16 binary64)) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal 4 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))))","(/.f64 (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -64 binary64)) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) (+.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 16/9 binary64) #s(literal 16 binary64)) (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -64 binary64)) (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8 binary64))))","(/.f64 (fma.f64 #s(literal -512/19683 binary64) (pow.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal -512 binary64)) (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) (fma.f64 #s(literal 64/729 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 64 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 64/27 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)))))","(neg.f64 (/.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64)) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))))","(neg.f64 (/.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 8 binary64))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -4 binary64))) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) (/.f64 #s(literal -2/3 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (/.f64 (*.f64 #s(literal -2/3 binary64) eps) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 #s(literal 4/9 binary64) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 (*.f64 #s(literal 4/9 binary64) (*.f64 eps eps)) (/.f64 (*.f64 eps eps) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64))","(fma.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) (/.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 1 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal -2/3 binary64) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (*.f64 eps eps) (/.f64 (*.f64 #s(literal 4/9 binary64) (*.f64 eps eps)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(fma.f64 eps (/.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) #s(literal -2/3 binary64)) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(fma.f64 eps (*.f64 #s(literal -2/3 binary64) eps) #s(literal -2 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))) (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))))","(-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))) (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))))","(+.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 #s(literal 4/9 binary64) (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 #s(literal -4 binary64) (fma.f64 #s(literal 2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)))))","(+.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)))","(*.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) eps)","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 eps) eps))","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 (*.f64 eps eps) #s(literal 1 binary64))","(*.f64 eps eps)","(*.f64 #s(literal 1 binary64) (*.f64 eps eps))","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(neg.f64 (*.f64 (neg.f64 eps) eps))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":284.69921875,"type":"rewrite"},{"compiler":[[4139,599]],"memory":[[-7023888,14442128]],"time":45.54296875,"type":"eval"},{"alts":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","next",0.0,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","done",0.01171875,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","done",0.24354912779190274,"binary64"],["#s(literal 0 binary64)","done",60.42310941610405,"binary64"]],"compiler":[[19,13],[17,12],[12,9],[1,2]],"count":[[151,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[148,1],"picked":[3,3]}],"memory":[[-1624112,6652304]],"min-error":[[0.0,"binary64"]],"time":3.671875,"type":"prune"},{"egraph":[[0,1200,37,0.00612758],[13,1200,39,0.009116384],[12,1173,39,0.00904561],[11,1077,39,0.010602871],[10,752,39,0.005768084],[9,632,39,0.005265384],[8,409,39,0.003666867],[7,260,39,0.002334103],[6,163,39,0.001137215],[5,128,39,0.000717007],[4,94,39,0.00062822],[3,71,39,0.000411059],[2,56,39,0.000326684],[1,34,39,0.000254268],[0,18,41,0.000219773],[0,13,41,0.000114581]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps))","(*.f64 eps eps)","eps","(*.f64 #s(literal -2/3 binary64) eps)","#s(literal -2/3 binary64)","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)"]],"locations":[["(*.f64 #s(literal -2/3 binary64) eps)","cost-diff",0],["(*.f64 eps eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","cost-diff",0],["(fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps))","cost-diff",2]],"memory":[[2891232,2891232]],"method":["egg-herbie"],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps)","(*.f64 eps eps)","eps","(*.f64 #s(literal -2/3 binary64) eps)","#s(literal -2/3 binary64)","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":67.632080078125,"type":"simplify"},{"compiler":[[33,15]],"locations":[["(*.f64 eps eps)","accuracy",0.0],["(*.f64 #s(literal -2 binary64) eps)","accuracy",0.0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","accuracy",0.0],["(*.f64 #s(literal -2/3 binary64) eps)","accuracy",0.34375]],"memory":[[1513424,18354304]],"mixsample":[[6.661865234375,"adjust",800],[6.628173828125,"ival-div",0],[1.855712890625,"ival-div",400],[0.686767578125,"ival-sub",1600],[0.10888671875,"ival-assert",0],[1.12744140625,"ival-div",1600],[1.722412109375,"ival-sub",0],[4.125,"const",0],[1.565673828125,"ival-sub",400],[2.71875,"adjust",2000],[2.4794921875,"ival-add",0],[6.441162109375,"ival-mult",0],[0.556396484375,"ival-add",1600],[1.263916015625,"ival-add",400],[43.4326171875,"ival-log",0],[0.218017578125,"ival-true",0],[0.33935546875,"exact",0]],"outcomes":[[41.38916015625,1,"valid",146],[55.62353515625,2,"valid",106],[0.52001953125,0,"valid",4]],"time":109.4580078125,"type":"localize"},{"count":[[5,13]],"inputs":[["(fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","(*.f64 eps eps)","(*.f64 #s(literal -2/3 binary64) eps)","(*.f64 #s(literal -2 binary64) eps)"]],"memory":[[-5412384,2468880]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(pow eps 2)","(* -2/3 eps)","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))"]],"series":[[2.400146484375,"((+ (* (* eps eps) (* -2/3 eps)) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* eps eps) (* -2/3 eps) (* -2 eps))","eps","-inf"],[1.39794921875,"((+ (* (* eps eps) (* -2/3 eps)) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* eps eps) (* -2/3 eps) (* -2 eps))","eps","inf"],[1.029052734375,"((+ (* (* eps eps) (* -2/3 eps)) (* -2 eps)) (log (/ (- 1 eps) (+ 1 eps))) (* eps eps) (* -2/3 eps) (* -2 eps))","eps","0"]],"time":5.199951171875,"type":"series"},{"count":[[13,13]],"egraph":[[0,8274,117,0.072069189],[6,7654,124,0.016826892],[5,4753,124,0.028846206],[4,2273,124,0.017318369],[3,949,124,0.009380899],[2,362,124,0.002981106],[1,137,124,0.001215915],[0,59,127,0.000585496]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(pow eps 2)","(* -2/3 eps)","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))"]],"memory":[[1798256,34561840]],"method":["egg-herbie"],"outputs":[["(* -2 eps)","(*.f64 #s(literal -2 binary64) eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(pow eps 2)","(*.f64 eps eps)","(* -2/3 eps)","(*.f64 #s(literal -2/3 binary64) eps)","(* -2/3 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(log -1)","(log.f64 #s(literal -1 binary64))","(- (log -1) (* 2 (/ 1 eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64)) eps))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))"]],"stop":[["iter limit",1],["node limit",1]],"time":228.98388671875,"type":"simplify"},{"count":[[5,121]],"egraph":[[0,9074,32,0.09549012],[3,6968,36,0.043160591],[2,551,36,0.021819964],[1,73,36,0.002195492],[0,18,38,0.000779217],[0,13,38,0.000115189]],"inputs":[["(fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","(*.f64 eps eps)","(*.f64 #s(literal -2/3 binary64) eps)","(*.f64 #s(literal -2 binary64) eps)"]],"memory":[[6980368,44961936]],"outputs":[["(*.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 9 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (fma.f64 #s(literal 4 binary64) eps (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))))","(*.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)))) #s(literal 2 binary64)))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) eps) (fma.f64 #s(literal -2 binary64) eps (*.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 3 binary64)))))))","(*.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (+.f64 (pow.f64 (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)))) (fma.f64 (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)))) (-.f64 (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)))) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))) (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 2 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps) eps) (/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))","(*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps)","(*.f64 (*.f64 (*.f64 eps eps) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2 binary64) eps (*.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(*.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))))","(*.f64 (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) #s(literal -1 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))))","(*.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))))))","(*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))) (/.f64 (/.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))","(*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) (/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)))))))","(*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps) (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) #s(literal -1 binary64))))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps) (/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps) (/.f64 (/.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))))","(*.f64 eps (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64))))","(*.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps)) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 16 binary64) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 (/.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 64 binary64) (pow.f64 eps #s(literal 6 binary64)))) (/.f64 (/.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))) (+.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)) eps) #s(literal 2 binary64))) (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 64 binary64) (pow.f64 eps #s(literal 6 binary64)))) (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) #s(literal -1 binary64))) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 9 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal -512 binary64) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 9 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 64 binary64) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (pow.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) #s(literal 3 binary64)) #s(literal -8 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps))","(/.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) #s(literal 1 binary64)) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps))) (*.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))))) (+.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (fma.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (*.f64 (*.f64 eps eps) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)))))) (neg.f64 (fma.f64 #s(literal -2 binary64) eps (*.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))))) (neg.f64 (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 16 binary64) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 64 binary64) (pow.f64 eps #s(literal 6 binary64)))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)) eps) #s(literal 2 binary64))) (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 2 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 64 binary64) (pow.f64 eps #s(literal 6 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 9 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)))))))","(/.f64 (*.f64 (fma.f64 #s(literal -512 binary64) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 9 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 64 binary64) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (pow.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) #s(literal 3 binary64)) #s(literal -8 binary64))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 16 binary64) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 64 binary64) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps) (+.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)) eps) #s(literal 2 binary64))) (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 64 binary64) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 9 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 (*.f64 (*.f64 eps eps) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))))) (fma.f64 #s(literal -2 binary64) eps (*.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 (fma.f64 #s(literal -512 binary64) (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (*.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 9 binary64))) #s(literal 3 binary64))) (*.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 64 binary64) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (pow.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) #s(literal 3 binary64)) #s(literal -8 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps))))","(/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -2 binary64) eps (*.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)))","(neg.f64 (/.f64 (neg.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64)))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64)))))))","(neg.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))))","(neg.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -8 binary64))) (neg.f64 (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (-.f64 (*.f64 #s(literal 4 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))))))","(fma.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (fma.f64 #s(literal -8/27 binary64) (pow.f64 eps #s(literal 9 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64)) (*.f64 eps (fma.f64 #s(literal 4 binary64) eps (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64))))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (fma.f64 #s(literal -4 binary64) (*.f64 eps eps) (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 3/2 binary64))) (pow.f64 eps #s(literal 3/2 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) eps) eps) (/.f64 (*.f64 #s(literal -2/3 binary64) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) eps) (/.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) eps) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (*.f64 eps eps)) eps) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) eps) (/.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) eps) (/.f64 (*.f64 #s(literal 4/9 binary64) (*.f64 eps eps)) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) eps) eps) eps) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) eps) (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) eps) eps) (/.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 eps eps) eps) (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (/.f64 eps eps) (/.f64 (*.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) eps) (/.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) eps) (/.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) (/.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) eps) eps) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 #s(literal 4/9 binary64) (*.f64 eps eps)) (/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (/.f64 (*.f64 eps eps) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (pow.f64 eps #s(literal 3/2 binary64)) (*.f64 (pow.f64 eps #s(literal 3/2 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (pow.f64 eps #s(literal 4 binary64)) (/.f64 (*.f64 #s(literal 4/9 binary64) (*.f64 eps eps)) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) eps) eps) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) eps) eps) eps (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (/.f64 (/.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(fma.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 1 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(fma.f64 #s(literal -2 binary64) eps (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(fma.f64 (*.f64 #s(literal -2/3 binary64) eps) (/.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64)) eps) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 #s(literal -2/3 binary64) eps) (*.f64 eps eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 (*.f64 eps eps) (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps (/.f64 (*.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 4 binary64))) eps) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(fma.f64 eps (*.f64 (*.f64 #s(literal -2/3 binary64) eps) eps) (*.f64 #s(literal -2 binary64) eps))","(fma.f64 eps #s(literal -2 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 eps eps)) (fma.f64 #s(literal -2 binary64) eps (*.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) eps (*.f64 #s(literal 2/3 binary64) (pow.f64 eps #s(literal 3 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)))))","(+.f64 (/.f64 (*.f64 #s(literal 4/9 binary64) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (*.f64 #s(literal 4 binary64) eps) eps) (/.f64 eps (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal 2 binary64))))))","(+.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) eps) eps #s(literal -2 binary64)) eps))","(*.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) eps)","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 eps) eps))","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 #s(literal 1 binary64) (*.f64 eps eps))","(*.f64 (*.f64 eps eps) #s(literal 1 binary64))","(*.f64 eps eps)","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(neg.f64 (*.f64 (neg.f64 eps) eps))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2/3 binary64) eps))","(*.f64 (*.f64 #s(literal -2/3 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal -2/3 binary64) eps)","(*.f64 eps #s(literal -2/3 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) eps))","(*.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal -2 binary64) eps)","(*.f64 eps #s(literal -2 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":326.01220703125,"type":"rewrite"},{"compiler":[[4481,508]],"memory":[[4434352,12187648]],"time":18.700927734375,"type":"eval"},{"alts":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","done",0.0,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","done",0.01171875,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","done",0.24354912779190274,"binary64"],["#s(literal 0 binary64)","done",60.42310941610405,"binary64"]],"compiler":[[57,23],[19,13],[17,12],[12,9],[1,2]],"count":[[136,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[132,0],"picked":[1,1]}],"memory":[[-5060928,6525088]],"min-error":[[0.0,"binary64"]],"time":5.592041015625,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["eps",0.0,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.0,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.0,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[5,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"]],"memory":[[-3336592,4809104]],"oracle":[60.42310941610405],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))"]],"repr":["binary64"],"time":5.640869140625,"times":[[1.781005859375,"eps"],[1.7890625,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.489013671875,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["eps",0.01171875,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.01171875,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.01171875,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[3,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))"]],"memory":[[4209440,4209440]],"oracle":[60.42310941610405],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))"]],"repr":["binary64"],"time":4.172119140625,"times":[[1.408935546875,"eps"],[1.178955078125,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.154052734375,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.24354912779190274],"baseline":[0.24354912779190274],"branch":[["eps",0.24354912779190274,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.24354912779190274,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.24354912779190274,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[2,1]],"inputs":[["#s(literal 0 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"]],"memory":[[-4435536,3885312]],"oracle":[60.42310941610405],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"]],"repr":["binary64"],"time":3.806884765625,"times":[[1.2529296875,"eps"],[1.14892578125,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[0.968994140625,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[60.423109416104026],"baseline":[60.42310941610405],"branch":[["eps",60.423109416104026,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",60.42310941610404,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",60.42310941610404,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[1,1]],"inputs":[["#s(literal 0 binary64)"]],"link":["."],"memory":[[3713680,3713680]],"name":["logq (problem 3.4.3)"],"oracle":[60.42310941610405],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":3.34716796875,"times":[[1.03515625,"eps"],[0.87109375,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[0.9208984375,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"egraph":[[12,1559,49,0.003834359],[11,1557,49,0.004084674],[10,1532,49,0.005170922],[9,1482,49,0.004074909],[8,1203,49,0.007847943],[7,429,49,0.006256666],[6,201,49,0.001385651],[5,115,49,0.000885795],[4,72,49,0.000593406],[3,43,49,0.00042857],[2,31,49,0.000326528],[1,25,49,0.000296719],[0,18,49,0.00035285]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(literal 0 binary64)"]],"memory":[[-2643536,5653824]],"method":["egg-herbie"],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(literal 0 binary64)"]],"stop":[["saturated",1]],"time":46.665771484375,"type":"simplify"},{"compiler":[[49,18]],"memory":[[729104,729104]],"stop":[["done",1]],"time":1.1201171875,"type":"soundness"},{"compiler":[[49,18],[49,18],[6,5],[6,5],[8,6],[8,6]],"memory":[[4537840,20994128]],"remove-preprocessing":[[],[],[],[],[]],"time":35.365966796875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02099609375,"type":"end"}]