[{"memory":[[13424,13424]],"time":0.031005859375,"type":"start"},{"compiler":[[13,11]],"memory":[[79024,79024]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.49590492248535156,"unknown":0.0,"valid":0.5040950775146484}],[0,{"invalid":0.0,"precondition":0.49590492248535156,"unknown":0.5040950775146484,"valid":0.0}]],"time":0.33203125,"type":"analyze"},{"bogosity":[{"infinite":6.10580277997394e-5,"invalid":0.0,"precondition":0.49590492248535156,"valid":0.5040340194868487}],"memory":[[23001104,471002704]],"mixsample":[[220.574462890625,"adjust",800],[133.599609375,"ival-add",0],[207.614990234375,"ival-exp",0],[71.706298828125,"ival-fabs",0],[41.940185546875,"ival-sub",1600],[4.611083984375,"ival-assert",0],[0.01318359375,"ival-add",400],[56.40869140625,"ival-sub",0],[1425.426513671875,"ival-exp",1600],[625.571533203125,"ival-exp",400],[55.2314453125,"ival-sub",400],[0.029296875,"ival-add",800],[34.90478515625,"ival-<=",0],[12.6640625,"exact",0],[127.647705078125,"adjust",2000],[43.476806640625,"ival-neg",0]],"outcomes":[[504.989013671875,1,"valid",2456],[2924.66796875,2,"valid",5591],[19.815673828125,0,"valid",209]],"time":3962.287841796875,"type":"sample"},{"compiler":[[8,7],[23,9],[23,9]],"confusion":[[145,0,0,111]],"explanations":[["+.f64","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cancellation",145,0,[],[[]]]],"fperrors":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",145,0,false,0,false],["(-.f64 (exp.f64 x) #s(literal 2 binary64))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["(exp.f64 (neg.f64 x))",0,0,false,0,false],["(neg.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,145],[0,111]],"maybe-confusion":[[145,0,0,0,0,111]],"memory":[[-512848,57704496]],"mixsample":[[10.885986328125,"adjust",800],[6.56982421875,"ival-add",0],[10.151611328125,"ival-exp",0],[1.93212890625,"ival-sub",1600],[0.21875,"ival-assert",0],[2.948486328125,"ival-sub",0],[0.528076171875,"ival-true",0],[74.04296875,"ival-exp",1600],[34.895751953125,"ival-exp",400],[2.793701171875,"ival-sub",400],[0.372802734375,"exact",0],[6.21240234375,"adjust",2000],[2.632568359375,"ival-neg",0]],"outcomes":[[26.0517578125,1,"valid",152],[155.1337890625,2,"valid",354],[0.416259765625,0,"valid",6]],"time":247.72216796875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,7]],"egraph":[[0,402,8,0.001601412],[9,402,8,0.002217454],[8,400,8,0.002685331],[7,342,8,0.002317101],[6,274,8,0.002821769],[5,168,8,0.001944528],[4,102,8,0.00126129],[3,63,8,0.00054798],[2,40,8,0.000312056],[1,24,8,0.000215676],[0,12,8,0.000229116],[0,7,8,0.000139332]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"memory":[[-5892672,14832208]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(abs x)"]],"time":180.10498046875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.06787109375,"type":"eval"},{"alts":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","next",33.06710400133444,"binary64"]],"compiler":[[8,7]],"memory":[[306720,306720]],"time":0.52294921875,"type":"prune"},{"egraph":[[0,402,21,0.001810294],[9,402,21,0.002071696],[8,400,21,0.002314466],[7,342,21,0.002694329],[6,274,21,0.002872327],[5,168,21,0.001611405],[4,102,21,0.000952737],[3,63,21,0.000520546],[2,40,21,0.000291782],[1,24,21,0.000200769],[0,12,21,0.000211862],[0,7,21,0.000118229]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"locations":[["(exp.f64 (neg.f64 x))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cost-diff",0]],"memory":[[1549888,1549888]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":24.14501953125,"type":"simplify"},{"compiler":[[23,9]],"locations":[["(exp.f64 (neg.f64 x))","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","accuracy",33.11430250230032]],"memory":[[20912,16049712]],"mixsample":[[5.41748046875,"adjust",800],[3.401611328125,"ival-add",0],[9.038330078125,"ival-exp",0],[0.959716796875,"ival-sub",1600],[0.1044921875,"ival-assert",0],[1.56494140625,"ival-sub",0],[0.199462890625,"ival-true",0],[37.6630859375,"ival-exp",1600],[16.48095703125,"ival-exp",400],[1.393310546875,"ival-sub",400],[0.0087890625,"ival-add",800],[0.208740234375,"exact",0],[3.096435546875,"adjust",2000],[1.14111328125,"ival-neg",0]],"outcomes":[[16.566162109375,1,"valid",76],[77.627197265625,2,"valid",177],[0.204833984375,0,"valid",3]],"time":105.467041015625,"type":"localize"},{"count":[[4,21]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(exp.f64 (neg.f64 x))"]],"memory":[[676144,676144]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(- (+ (exp x) (exp (neg x))) 2)","(- (exp x) 2)","(exp x)","(exp (neg x))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"series":[[0.2451171875,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","-inf"],[0.31494140625,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","inf"],[0.7470703125,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","0"]],"time":1.5849609375,"type":"series"},{"count":[[21,21]],"egraph":[[0,8428,132,0.099317437],[8,6661,153,0.020416249],[7,5255,153,0.024558903],[6,3863,153,0.020532071],[5,3034,153,0.013280089],[4,1762,153,0.012161977],[3,1060,153,0.005417352],[2,397,153,0.003353188],[1,168,159,0.001325761],[0,60,160,0.000564162]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(- (+ (exp x) (exp (neg x))) 2)","(- (exp x) 2)","(exp x)","(exp (neg x))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"memory":[[1431520,43095664]],"method":["egg-herbie"],"outputs":[["(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* 1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- (* 1/2 x) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(- (exp x) 2)","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp x)","(exp.f64 x)","(exp (neg x))","(exp.f64 (neg.f64 x))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(exp (* -1 x))","(exp.f64 (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":347.758056640625,"type":"simplify"},{"count":[[4,237]],"egraph":[[0,8346,14,0.054528069],[3,6874,15,0.037238403],[2,394,17,0.017921071],[1,51,17,0.00157862],[0,12,17,0.000651212],[0,7,17,9.9528e-5]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(exp.f64 (neg.f64 x))"]],"memory":[[5480208,44916480]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x)))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x))))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)))) (fma.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (-.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(*.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x))))","(*.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x))))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))","(*.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(*.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","(/.f64 (/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (exp.f64 x))","(/.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 4 binary64))) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 9 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))) (+.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (*.f64 #s(literal 2 binary64) (cosh.f64 x))) #s(literal 4 binary64)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (*.f64 #s(literal 2 binary64) (cosh.f64 x))) #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal -2 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))) (-.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (+.f64 #s(literal 4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 3 binary64)) #s(literal -8 binary64)) (fma.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal -2 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (*.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))) (*.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 9 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 4 binary64))) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) (*.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (exp.f64 (neg.f64 x)) #s(literal 9 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x)) (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(fma.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 (neg.f64 x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (-.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (exp.f64 (neg.f64 x)))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (exp.f64 x)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))) (exp.f64 (neg.f64 x)))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 #s(literal -1 binary64) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (exp.f64 x))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (exp.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (exp.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(+.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) (exp.f64 x))","(+.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal -2 binary64))","(+.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x)))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (sinh.f64 x))))))","(+.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (cosh.f64 x)))","(+.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (-.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))","(*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 16 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 4 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 16 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64))) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 512 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 64 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (*.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -2 binary64) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 64 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 4 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 16 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 4 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal 8 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 16 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 512 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (+.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 64 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 512 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (+.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 64 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (+.f64 (fma.f64 #s(literal 4 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 16 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 64 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (exp.f64 x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x)))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (-.f64 (fma.f64 #s(literal 2 binary64) (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal 8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (exp.f64 x) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 #s(literal -2 binary64) (exp.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(+.f64 #s(literal -2 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(/.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) x)","(pow.f64 (exp.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x))))","(/.f64 #s(literal 1 binary64) (exp.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) x))","(exp.f64 (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":209.010986328125,"type":"rewrite"},{"compiler":[[6353,791]],"memory":[[-22874464,23593488]],"time":65.7880859375,"type":"eval"},{"alts":[["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","next",33.220121495730965,"binary64"],["(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","fresh",33.122818511160254,"binary64"],["(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","next",33.145139619081135,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",33.06710400133444,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","next",0.10225352933453738,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","next",0.14303040991957267,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","next",0.38426984475012493,"binary64"]],"compiler":[[5,5],[20,12],[9,7],[8,7],[22,17],[17,13],[12,9],[5,5],[20,12],[9,7],[22,17],[17,13],[12,9]],"count":[[257,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[256,6],"picked":[1,1]}],"memory":[[-4312192,11713792]],"min-error":[[0.00390625,"binary64"]],"time":11.931884765625,"type":"prune"},{"egraph":[[0,8028,126,0.036114763],[9,7296,126,0.01459747],[8,4426,126,0.028936087],[7,2103,126,0.023359015],[6,781,126,0.013044862],[5,444,126,0.005700612],[4,245,126,0.002585048],[3,154,126,0.001349706],[2,104,135,0.000720021],[1,65,135,0.000466248],[0,41,135,0.000400803],[0,27,139,0.000248418]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","x","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","#s(literal 2 binary64)","(cosh.f64 x)","x","#s(literal -2 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(/.f64 #s(literal -1 binary64) (exp.f64 x))","#s(literal -1 binary64)"]],"locations":[["(/.f64 #s(literal -1 binary64) (exp.f64 x))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","cost-diff",4],["(*.f64 x x)","cost-diff",0],["(pow.f64 x #s(literal 4 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["(cosh.f64 x)","cost-diff",0],["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","cost-diff",0],["(pow.f64 x #s(literal 6 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","cost-diff",0]],"memory":[[3082512,20548272]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","x","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal -2 binary64))","#s(literal 2 binary64)","(cosh.f64 x)","x","#s(literal -2 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal -2 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(/.f64 #s(literal -1 binary64) (exp.f64 x))","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":213.989990234375,"type":"simplify"},{"compiler":[[119,27]],"locations":[["(exp.f64 x)","accuracy",0.0],["(/.f64 #s(literal -1 binary64) (exp.f64 x))","accuracy",0.03125],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","accuracy",33.11430250230032],["(pow.f64 x #s(literal 4 binary64))","accuracy",0.0],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","accuracy",0.01171875],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","accuracy",0.13521790991935861],["(cosh.f64 x)","accuracy",0.0],["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","accuracy",33.220121495730965],["(*.f64 x x)","accuracy",0.0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","accuracy",0.38426984475012493],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","accuracy",0.0078125],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","accuracy",0.01171875],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","accuracy",0.09444102903739716]],"memory":[[5017056,46022672]],"mixsample":[[17.570068359375,"adjust",800],[2.334716796875,"ival-div",0],[6.5517578125,"ival-exp",0],[3.34228515625,"ival-cosh",0],[2.196044921875,"ival-div",400],[1.239013671875,"ival-sub",1600],[0.12939453125,"ival-assert",0],[1.826171875,"ival-div",1600],[6.585205078125,"ival-sub",0],[19.677734375,"ival-exp",400],[8.7568359375,"const",0],[1.865966796875,"ival-sub",400],[25.760009765625,"ival-cosh",1600],[8.001708984375,"ival-pow",0],[10.796142578125,"adjust",2000],[11.722900390625,"ival-add",0],[0.008056640625,"ival-sub",800],[1.745849609375,"ival-mult",400],[9.431884765625,"ival-mult",0],[5.19287109375,"ival-cosh",400],[1.645263671875,"ival-mult",1600],[0.289306640625,"ival-true",0],[41.1279296875,"ival-exp",1600],[0.010986328125,"ival-add",800],[0.940185546875,"exact",0],[1.37158203125,"ival-neg",0]],"outcomes":[[42.26220703125,1,"valid",76],[188.55517578125,2,"valid",177],[0.94287109375,0,"valid",3]],"time":261.399169921875,"type":"localize"},{"count":[[14,31]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(cosh.f64 x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 4 binary64))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(/.f64 #s(literal -1 binary64) (exp.f64 x))"]],"memory":[[-2597552,4999648]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(pow x 6)","1","(+ 1 (* 1/2 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/2 (* 1/24 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))))","(pow x 4)","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (* x (+ 1 (* -1/2 x))) 1)","(- (* x (+ 1 (* x (- (* 1/6 x) 1/2)))) 1)","(- (+ (exp x) (exp (neg x))) 2)","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(- (+ (exp x) (/ 1 (exp x))) 2)","(* 1/2 (+ (exp x) (/ 1 (exp x))))","(- (exp x) 2)","(exp x)","(/ -1 (exp x))","(- (+ (exp x) (exp (* -1 x))) 2)"]],"series":[[3.364013671875,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) 1/360) (+ (* (pow x 4) 1/12) (* x x))) (pow x 6) (+ (* (pow x 4) 1/12) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (* x x) (+ (* 2 (cosh x)) -2) (cosh x) (+ (- (exp x) 2) (exp (neg x))) (pow x 4) (- (- (exp x) 2) (/ -1 (exp x))) (- (exp x) 2) (exp x) (/ -1 (exp x)))","x","-inf"],[4.49609375,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) 1/360) (+ (* (pow x 4) 1/12) (* x x))) (pow x 6) (+ (* (pow x 4) 1/12) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (* x x) (+ (* 2 (cosh x)) -2) (cosh x) (+ (- (exp x) 2) (exp (neg x))) (pow x 4) (- (- (exp x) 2) (/ -1 (exp x))) (- (exp x) 2) (exp x) (/ -1 (exp x)))","x","inf"],[4.1240234375,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) 1/360) (+ (* (pow x 4) 1/12) (* x x))) (pow x 6) (+ (* (pow x 4) 1/12) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (* x x) (+ (* 2 (cosh x)) -2) (cosh x) (+ (- (exp x) 2) (exp (neg x))) (pow x 4) (- (- (exp x) 2) (/ -1 (exp x))) (- (exp x) 2) (exp x) (/ -1 (exp x)))","x","0"]],"time":12.7939453125,"type":"series"},{"count":[[31,31]],"egraph":[[0,8273,223,0.090643327],[6,5902,254,0.022575538],[5,3719,254,0.022787105],[4,2416,254,0.01552113],[3,1576,254,0.00990461],[2,633,254,0.006115121],[1,267,264,0.003214606],[0,94,264,0.001126916]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(pow x 6)","1","(+ 1 (* 1/2 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/2 (* 1/24 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))))","(pow x 4)","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (* x (+ 1 (* -1/2 x))) 1)","(- (* x (+ 1 (* x (- (* 1/6 x) 1/2)))) 1)","(- (+ (exp x) (exp (neg x))) 2)","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(- (+ (exp x) (/ 1 (exp x))) 2)","(* 1/2 (+ (exp x) (/ 1 (exp x))))","(- (exp x) 2)","(exp x)","(/ -1 (exp x))","(- (+ (exp x) (exp (* -1 x))) 2)"]],"memory":[[36800,37749920]],"method":["egg-herbie"],"outputs":[["(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(pow x 6)","(pow.f64 x #s(literal 6 binary64))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 (pow x 2)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/2 (* 1/24 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* 1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(- (* x (+ 1 (* -1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (- (* 1/6 x) 1/2)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* 1/360 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(* 1/12 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(- (+ (exp x) (/ 1 (exp x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* 1/2 (+ (exp x) (/ 1 (exp x))))","(fma.f64 #s(literal 1/2 binary64) (exp.f64 x) (/.f64 #s(literal 1/2 binary64) (exp.f64 x)))","(- (exp x) 2)","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp x)","(exp.f64 x)","(/ -1 (exp x))","(/.f64 #s(literal -1 binary64) (exp.f64 x))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":275.533935546875,"type":"simplify"},{"count":[[14,622]],"egraph":[[0,8105,94,0.076974847],[2,1224,94,0.028400824],[1,156,94,0.006023315],[0,41,103,0.001460915],[0,27,107,0.000244478]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(cosh.f64 x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 4 binary64))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(/.f64 #s(literal -1 binary64) (exp.f64 x))"]],"memory":[[-1499472,60768352]],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(*.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (*.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)))) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (*.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))))","(/.f64 (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (-.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))) (fma.f64 #s(literal 1/46656000 binary64) (pow.f64 x #s(literal 18 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 3 binary64))))))","(fma.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/360 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal -1 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 x x (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))) (/.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (-.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/129600 binary64) (pow.f64 x #s(literal 12 binary64))) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(+.f64 (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))","(+.f64 (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(+.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(+.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(+.f64 (*.f64 x x) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(pow.f64 (exp.f64 #s(literal 6 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3/2 binary64))","(pow.f64 x #s(literal 6 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 3 binary64) (*.f64 (log.f64 x) #s(literal 3 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 4 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 4 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 6 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) (*.f64 x x))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(+.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 x x))","(+.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (pow.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (*.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (exp.f64 x)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (exp.f64 x)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (cosh.f64 x) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(-.f64 (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))) (/.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))))","(-.f64 (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (/.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(-.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x)))) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x)))))","(-.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(-.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (-.f64 #s(literal -2 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x))))","(+.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (exp.f64 x) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(+.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))","(+.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (/.f64 #s(literal 2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)))) #s(literal 2 binary64))","(/.f64 (neg.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))))","(cosh.f64 x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x (pow.f64 x #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 x))","(pow.f64 (*.f64 x x) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (pow.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (*.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (exp.f64 x)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x)))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (exp.f64 x)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (exp.f64 x))) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (cosh.f64 x) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (cosh.f64 x) #s(literal -4 binary64)))) (fma.f64 (pow.f64 (cosh.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))))))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(-.f64 (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))) (/.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))))","(-.f64 (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (/.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(-.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (*.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x)))) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x)))))","(-.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (cosh.f64 x) #s(literal 2 binary64) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(-.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (*.f64 (cosh.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (-.f64 #s(literal -2 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x))))","(+.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (exp.f64 x) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(+.f64 #s(literal -2 binary64) (*.f64 (cosh.f64 x) #s(literal 2 binary64)))","(+.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 8 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (exp.f64 x))","(exp.f64 x)","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 x)))","(*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (exp.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (exp.f64 x))))","(/.f64 #s(literal -1 binary64) (exp.f64 x))","(neg.f64 (exp.f64 (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (exp.f64 x))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":313.5,"type":"rewrite"},{"compiler":[[13714,1434]],"memory":[[4086880,41467680]],"time":53.5810546875,"type":"eval"},{"alts":[["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","done",33.220121495730965,"binary64"],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","next",33.29827376117428,"binary64"],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","next",33.42013959070325,"binary64"],["(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","next",33.122818511160254,"binary64"],["(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","done",33.145139619081135,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",33.06710400133444,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","next",0.14303040991957267,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","next",0.13521790991935861,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","done",0.38426984475012493,"binary64"]],"compiler":[[5,5],[22,14],[12,10],[20,12],[9,7],[8,7],[21,12],[17,13],[12,9],[22,14],[12,10],[20,12],[21,12],[17,13]],"count":[[478,9]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[471,5],"picked":[5,3]}],"memory":[[496944,19945680]],"min-error":[[0.0,"binary64"]],"time":15.208984375,"type":"prune"},{"egraph":[[0,8018,251,0.052421001],[8,7703,251,0.020995527],[7,6153,251,0.032811267],[6,3173,251,0.029146879],[5,1592,251,0.013832648],[4,833,251,0.005564527],[3,412,251,0.003032172],[2,209,251,0.002679754],[1,121,251,0.001352765],[0,68,251,0.001016433],[0,40,263,0.000404782]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","x","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(literal 1/12 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(literal 2 binary64)","#s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","#s(literal 1/2 binary64)","(*.f64 x x)","x","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x x)","x","#s(literal 1/12 binary64)","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(literal 2 binary64)","#s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","#s(literal 1/720 binary64)","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(pow.f64 (exp.f64 x) #s(literal -2 binary64))","#s(literal -2 binary64)","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"locations":[["(-.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","cost-diff",0],["(-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))","cost-diff",0],["(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","cost-diff",0],["#s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","cost-diff",0],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(*.f64 x x)","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","cost-diff",0],["#s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))","cost-diff",0],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","cost-diff",0],["(pow.f64 x #s(literal 4 binary64))","cost-diff",0],["(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","cost-diff",0],["(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","cost-diff",0]],"memory":[[-1046800,27959600]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x)","x","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","#s(literal 1/12 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","(fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal -2 binary64))","#s(literal 2 binary64)","#s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))","#s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))","#s(literal 1/2 binary64)","(*.f64 x x)","x","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x)","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","(*.f64 x x)","x","#s(literal 1/12 binary64)","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","(fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal -2 binary64))","#s(literal 2 binary64)","#s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","#s(literal 1/720 binary64)","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -2 binary64)) (exp.f64 x)))","(-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(pow.f64 (exp.f64 x) #s(literal -2 binary64))","#s(literal -2 binary64)","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":266.385986328125,"type":"simplify"},{"compiler":[[206,39]],"locations":[["(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","accuracy",0.0234375],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["(pow.f64 (exp.f64 x) #s(literal -2 binary64))","accuracy",0.03972626953688403],["(-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))","accuracy",33.15184836515959],["(*.f64 x x)","accuracy",0.0],["(fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","accuracy",0.01171875],["#s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","accuracy",0.07100354864861745],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","accuracy",33.220121495730965],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","accuracy",0.01171875],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.109375],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","accuracy",0.13521790991935861],["(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","accuracy",0.0],["(*.f64 x x)","accuracy",0.0],["#s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))","accuracy",0.17446291045894],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","accuracy",33.220121495730965],["(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","accuracy",0.0],["(pow.f64 x #s(literal 4 binary64))","accuracy",0.0],["(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","accuracy",0.0859375],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","accuracy",0.13521790991935861]],"memory":[[1917728,67168064]],"mixsample":[[26.039306640625,"adjust",800],[6.631591796875,"ival-div",0],[7.027587890625,"ival-exp",0],[3.208251953125,"ival-cosh",0],[1.096923828125,"ival-sub",1600],[2.93701171875,"ival-pow2",400],[3.984130859375,"ival-pow",1600],[0.139892578125,"ival-assert",0],[8.819580078125,"ival-sub",0],[21.729736328125,"ival-exp",400],[1.72216796875,"ival-sub",400],[15.360595703125,"const",0],[26.20166015625,"ival-cosh",1600],[7.03125,"ival-pow",0],[17.752197265625,"adjust",2000],[19.242919921875,"ival-add",0],[17.86572265625,"ival-mult",0],[1.972412109375,"ival-mult",400],[2.235595703125,"ival-pow2",1600],[5.535888671875,"ival-cosh",400],[0.06494140625,"ival-exp",800],[1.654296875,"ival-mult",1600],[0.317138671875,"ival-true",0],[41.781005859375,"ival-exp",1600],[4.13330078125,"ival-pow",400],[0.761474609375,"exact",0],[1.26806640625,"ival-neg",0],[2.86376953125,"ival-pow2",0]],"outcomes":[[56.096435546875,1,"valid",76],[248.843017578125,2,"valid",177],[0.9287109375,0,"valid",3]],"time":348.764892578125,"type":"localize"},{"count":[[21,50]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 (*.f64 x x) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(pow.f64 (exp.f64 x) #s(literal -2 binary64))"]],"memory":[[-1007296,6400720]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(* 1/12 (pow x 4))","(pow x 4)","1","(+ 1 (* 1/2 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/2 (* 1/24 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))))","1/2","(+ 1/2 (* 1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))","(* -2 (pow x 2))","(* (pow x 2) (- (* 2 x) 2))","(* (pow x 2) (- (* x (+ 2 (* -1/6 x))) 2))","(* (pow x 2) (- (* x (+ 2 (* x (- (* 1/2 x) 1/6)))) 2))","(+ 1 (* -2 x))","(+ 1 (* x (- (* 2/3 (pow x 2)) 2)))","(+ 1 (* x (- (* (pow x 2) (+ 2/3 (* 1/2 x))) 2)))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1/24","(+ 1/24 (* 1/720 (pow x 2)))","(+ 1 (* x (- (* 2 x) 2)))","(+ 1 (* x (- (* x (+ 2 (* -4/3 x))) 2)))","(- (+ (exp x) (exp (neg x))) 2)","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(- (+ (exp x) (/ 1 (exp x))) 2)","(* 1/2 (+ (exp x) (/ 1 (exp x))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 (pow x 2))))","(* 1/720 (pow x 6))","(* (pow x 6) (+ 1/720 (* 1/24 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/720 (+ (/ 1/2 (pow x 4)) (* 1/24 (/ 1 (pow x 2))))))","(* (pow x 6) (+ 1/720 (+ (/ 1/2 (pow x 4)) (+ (* 1/24 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/720 (pow x 4))","(* (pow x 4) (+ 1/720 (* 1/24 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 1/720 (+ (/ 1/2 (pow x 4)) (* 1/24 (/ 1 (pow x 2))))))","(/ (- (pow (- (exp x) 2) 2) (/ 1 (pow (exp x) 2))) (- (exp x) (+ 2 (exp (neg x)))))","(- (pow (- (exp x) 2) 2) (/ 1 (pow (exp x) 2)))","(pow (- (exp x) 2) 2)","(- (exp x) 2)","(* 1/720 (pow x 2))","(* (pow x 2) (+ 1/720 (* 1/24 (/ 1 (pow x 2)))))","(/ 1 (pow (exp x) 2))","(- (+ (exp x) (exp (* -1 x))) 2)","(/ (- (pow (- (exp x) 2) 2) (/ 1 (pow (exp x) 2))) (- (exp x) (+ 2 (exp (* -1 x)))))"]],"series":[[4.403076171875,"((+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* 1/12 (pow x 4))) (* 1/12 (pow x 4)) (pow x 4) (+ (* 2 (cosh x)) -2) (cosh x) (+ (* 1/2 (* x x)) 1) (* x x) (* (* x x) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (* (* x x) (* x x)) 1/12) (* x x)) (+ (* 2 (cosh x)) -2) (cosh x) (+ (* (+ (* (+ (* 1/720 (* x x)) 1/24) (* x x)) 1/2) (* x x)) 1) (+ (* (+ (* 1/720 (* x x)) 1/24) (* x x)) 1/2) (/ (- (pow (- (exp x) 2) 2) (pow (exp x) -2)) (- (- (exp x) 2) (exp (neg x)))) (- (pow (- (exp x) 2) 2) (pow (exp x) -2)) (pow (- (exp x) 2) 2) (- (exp x) 2) (+ (* 1/720 (* x x)) 1/24) (pow (exp x) -2))","x","-inf"],[4.85400390625,"((+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* 1/12 (pow x 4))) (* 1/12 (pow x 4)) (pow x 4) (+ (* 2 (cosh x)) -2) (cosh x) (+ (* 1/2 (* x x)) 1) (* x x) (* (* x x) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (* (* x x) (* x x)) 1/12) (* x x)) (+ (* 2 (cosh x)) -2) (cosh x) (+ (* (+ (* (+ (* 1/720 (* x x)) 1/24) (* x x)) 1/2) (* x x)) 1) (+ (* (+ (* 1/720 (* x x)) 1/24) (* x x)) 1/2) (/ (- (pow (- (exp x) 2) 2) (pow (exp x) -2)) (- (- (exp x) 2) (exp (neg x)))) (- (pow (- (exp x) 2) 2) (pow (exp x) -2)) (pow (- (exp x) 2) 2) (- (exp x) 2) (+ (* 1/720 (* x x)) 1/24) (pow (exp x) -2))","x","inf"],[5.635986328125,"((+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* 1/12 (pow x 4))) (* 1/12 (pow x 4)) (pow x 4) (+ (* 2 (cosh x)) -2) (cosh x) (+ (* 1/2 (* x x)) 1) (* x x) (* (* x x) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (* (* x x) (* x x)) 1/12) (* x x)) (+ (* 2 (cosh x)) -2) (cosh x) (+ (* (+ (* (+ (* 1/720 (* x x)) 1/24) (* x x)) 1/2) (* x x)) 1) (+ (* (+ (* 1/720 (* x x)) 1/24) (* x x)) 1/2) (/ (- (pow (- (exp x) 2) 2) (pow (exp x) -2)) (- (- (exp x) 2) (exp (neg x)))) (- (pow (- (exp x) 2) 2) (pow (exp x) -2)) (pow (- (exp x) 2) 2) (- (exp x) 2) (+ (* 1/720 (* x x)) 1/24) (pow (exp x) -2))","x","0"]],"time":16.0,"type":"series"},{"count":[[50,50]],"egraph":[[0,8300,409,0.088969642],[5,6797,459,0.024903353],[4,4361,459,0.019886987],[3,2537,459,0.015887732],[2,945,463,0.009566536],[1,404,475,0.003004201],[0,139,475,0.00116972]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(* 1/12 (pow x 4))","(pow x 4)","1","(+ 1 (* 1/2 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/2 (* 1/24 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))))","1/2","(+ 1/2 (* 1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))","(* -2 (pow x 2))","(* (pow x 2) (- (* 2 x) 2))","(* (pow x 2) (- (* x (+ 2 (* -1/6 x))) 2))","(* (pow x 2) (- (* x (+ 2 (* x (- (* 1/2 x) 1/6)))) 2))","(+ 1 (* -2 x))","(+ 1 (* x (- (* 2/3 (pow x 2)) 2)))","(+ 1 (* x (- (* (pow x 2) (+ 2/3 (* 1/2 x))) 2)))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1/24","(+ 1/24 (* 1/720 (pow x 2)))","(+ 1 (* x (- (* 2 x) 2)))","(+ 1 (* x (- (* x (+ 2 (* -4/3 x))) 2)))","(- (+ (exp x) (exp (neg x))) 2)","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(- (+ (exp x) (/ 1 (exp x))) 2)","(* 1/2 (+ (exp x) (/ 1 (exp x))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 (pow x 2))))","(* 1/720 (pow x 6))","(* (pow x 6) (+ 1/720 (* 1/24 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/720 (+ (/ 1/2 (pow x 4)) (* 1/24 (/ 1 (pow x 2))))))","(* (pow x 6) (+ 1/720 (+ (/ 1/2 (pow x 4)) (+ (* 1/24 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/720 (pow x 4))","(* (pow x 4) (+ 1/720 (* 1/24 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 1/720 (+ (/ 1/2 (pow x 4)) (* 1/24 (/ 1 (pow x 2))))))","(/ (- (pow (- (exp x) 2) 2) (/ 1 (pow (exp x) 2))) (- (exp x) (+ 2 (exp (neg x)))))","(- (pow (- (exp x) 2) 2) (/ 1 (pow (exp x) 2)))","(pow (- (exp x) 2) 2)","(- (exp x) 2)","(* 1/720 (pow x 2))","(* (pow x 2) (+ 1/720 (* 1/24 (/ 1 (pow x 2)))))","(/ 1 (pow (exp x) 2))","(- (+ (exp x) (exp (* -1 x))) 2)","(/ (- (pow (- (exp x) 2) 2) (/ 1 (pow (exp x) 2))) (- (exp x) (+ 2 (exp (* -1 x)))))"]],"memory":[[2722672,39653888]],"method":["egg-herbie"],"outputs":[["(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64)))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x))","(* 1/12 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 (pow x 2)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/2 (* 1/24 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/24 (pow x 2)))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (+ 1/24 (* 1/720 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* -2 (pow x 2))","(*.f64 #s(literal -2 binary64) (*.f64 x x))","(* (pow x 2) (- (* 2 x) 2))","(*.f64 (*.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -2 binary64)) x) x)","(* (pow x 2) (- (* x (+ 2 (* -1/6 x))) 2))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 2 binary64)) x #s(literal -2 binary64)) x) x)","(* (pow x 2) (- (* x (+ 2 (* x (- (* 1/2 x) 1/6)))) 2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/6 binary64)) x #s(literal 2 binary64)) x #s(literal -2 binary64)) x) x)","(+ 1 (* -2 x))","(fma.f64 #s(literal -2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (- (* 2/3 (pow x 2)) 2)))","(fma.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal -2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* (pow x 2) (+ 2/3 (* 1/2 x))) 2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 2/3 binary64)) (*.f64 x x) #s(literal -2 binary64)) x #s(literal 1 binary64))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* 1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","1/24","#s(literal 1/24 binary64)","(+ 1/24 (* 1/720 (pow x 2)))","(fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(+ 1 (* x (- (* 2 x) 2)))","(fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 2 (* -4/3 x))) 2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -4/3 binary64) x #s(literal 2 binary64)) x #s(literal -2 binary64)) x #s(literal 1 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x)","(- (+ (exp x) (/ 1 (exp x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* 1/2 (+ (exp x) (/ 1 (exp x))))","(fma.f64 #s(literal 1/2 binary64) (exp.f64 x) (/.f64 #s(literal 1/2 binary64) (exp.f64 x)))","(* 1/2 (pow x 2))","(*.f64 #s(literal 1/2 binary64) (*.f64 x x))","(* (pow x 2) (+ 1/2 (/ 1 (pow x 2))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64))","(* 1/720 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/720 binary64))","(* (pow x 6) (+ 1/720 (* 1/24 (/ 1 (pow x 2)))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/720 binary64) (*.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 4 binary64))))","(* (pow x 6) (+ 1/720 (+ (/ 1/2 (pow x 4)) (* 1/24 (/ 1 (pow x 2))))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 6) (+ 1/720 (+ (/ 1/2 (pow x 4)) (+ (* 1/24 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* 1/720 (pow x 4))","(*.f64 #s(literal 1/720 binary64) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/720 (* 1/24 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/720 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))","(* (pow x 4) (+ 1/720 (+ (/ 1/2 (pow x 4)) (* 1/24 (/ 1 (pow x 2))))))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(/ (- (pow (- (exp x) 2) 2) (/ 1 (pow (exp x) 2))) (- (exp x) (+ 2 (exp (neg x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -2 binary64)) (exp.f64 x)))","(- (pow (- (exp x) 2) 2) (/ 1 (pow (exp x) 2)))","(-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))","(pow (- (exp x) 2) 2)","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(- (exp x) 2)","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(* 1/720 (pow x 2))","(*.f64 #s(literal 1/720 binary64) (*.f64 x x))","(* (pow x 2) (+ 1/720 (* 1/24 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(/ 1 (pow (exp x) 2))","(pow.f64 (exp.f64 x) #s(literal -2 binary64))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(/ (- (pow (- (exp x) 2) 2) (/ 1 (pow (exp x) 2))) (- (exp x) (+ 2 (exp (* -1 x)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -2 binary64)) (exp.f64 x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":259.843994140625,"type":"simplify"},{"count":[[21,616]],"egraph":[[0,9129,189,0.088647088],[2,2038,192,0.035258979],[1,288,192,0.008580228],[0,68,210,0.002159793],[0,40,222,0.000397081]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 (*.f64 x x) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(pow.f64 (exp.f64 x) #s(literal -2 binary64))"]],"memory":[[2899504,71213376]],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(*.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))) (neg.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 3 binary64))) x (*.f64 x x))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 x (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))) (*.f64 x x))","(fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(+.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(*.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 3 binary64))) x)","(*.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/12 binary64)))","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","(*.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)))","(*.f64 x (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x (pow.f64 x #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)))","(*.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -4 binary64)))) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (-.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64))) (-.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -4 binary64))))))","(/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -4 binary64)))) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))))","(/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -4 binary64)))))","(/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -4 binary64)))) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))))","(fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))))","(+.f64 (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 2 binary64)))","#s(approx (cosh x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 x x)","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x (pow.f64 x #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 2 binary64) (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(*.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))) (neg.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 12 binary64)) #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 3 binary64))) x (*.f64 x x))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 x (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/12 binary64))) (*.f64 x x))","(fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(+.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(*.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (pow.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -4 binary64)))) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (-.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64))) (-.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))) (neg.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -4 binary64))))))","(/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -4 binary64)))) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)))))","(/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -4 binary64)))))","(/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64)) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -4 binary64)))) (fma.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 8 binary64) #s(literal -8 binary64))))","(fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))))","(+.f64 (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (*.f64 #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)))","#s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x))) (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 1/2 binary64))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(*.f64 (pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (pow.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)))","(pow.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))) (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 3 binary64)) #s(literal -8 binary64)) (fma.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (*.f64 #s(literal 2 binary64) (cosh.f64 x)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal -2 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (*.f64 (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))) (*.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (*.f64 (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (neg.f64 (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (neg.f64 (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))) (*.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (*.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal 1 binary64))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))) (*.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (*.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (neg.f64 (exp.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (neg.f64 (exp.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (exp.f64 x)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))) (*.f64 (exp.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (neg.f64 (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (exp.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (exp.f64 x) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64)))) (neg.f64 (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (*.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (exp.f64 x) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(neg.f64 (-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(fma.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(fma.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(fma.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(fma.f64 (pow.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64)))) (fma.f64 (exp.f64 (neg.f64 x)) (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(fma.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (+.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))) (/.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (*.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -4 binary64)) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -6 binary64)) (*.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))) (/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -4 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -6 binary64)) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(-.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))))","(+.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 x)) #s(literal -2 binary64))","(+.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (+.f64 #s(literal -2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (exp.f64 x) (neg.f64 (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(pow.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) #s(literal -6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -4 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal -4 binary64)))) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal -6 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 (neg.f64 x)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 (neg.f64 x)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 2 binary64)) (exp.f64 x)) (*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 2 binary64)) (exp.f64 x)) (*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)) (*.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (exp.f64 x)) (*.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))) (*.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (exp.f64 x)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x)))) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 2 binary64)) (exp.f64 x)) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 2 binary64)) (exp.f64 x)) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal -4 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal -4 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64))) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (exp.f64 x) #s(literal -6 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (exp.f64 (neg.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(fma.f64 (exp.f64 (neg.f64 x)) (/.f64 #s(literal -1 binary64) (exp.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -4 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -4 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -6 binary64)) (+.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal -4 binary64))) (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))","(+.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) (-.f64 (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))) (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))","(fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(+.f64 (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal -2 binary64) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))","(pow.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal -8 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 8 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))) (exp.f64 (log.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (exp.f64 (log.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(/.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))) (neg.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64)))","(/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 8 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 (exp.f64 x) #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 4 binary64) (*.f64 (exp.f64 x) #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))) (/.f64 #s(literal 8 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 (exp.f64 x) #s(literal 2 binary64) #s(literal 4 binary64)))))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 (log.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (exp.f64 x))","(*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)) (pow.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)) (pow.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal 1/17280 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal 1/17280 binary64)))) (fma.f64 #s(literal 1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/576 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/24 binary64) (*.f64 #s(literal 1/720 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal 1/17280 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64))) (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) #s(literal 1/576 binary64))) (*.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64))))","(/.f64 (-.f64 #s(literal 1/576 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/24 binary64) (*.f64 #s(literal 1/720 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64))) (neg.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))) (neg.f64 (+.f64 #s(literal 1/576 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/17280 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))) (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal 1/17280 binary64))))))","(/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)) (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal 1/17280 binary64)))) (fma.f64 #s(literal 1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)))))","(/.f64 (fma.f64 #s(literal 1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)) (+.f64 #s(literal 1/576 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/17280 binary64)))))","(/.f64 (fma.f64 #s(literal 1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal 1/17280 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal 1/17280 binary64)))) (fma.f64 #s(literal 1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))))","(fma.f64 (*.f64 #s(literal 1/720 binary64) x) x #s(literal 1/24 binary64))","(fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal 1/24 binary64))","(fma.f64 x (*.f64 #s(literal 1/720 binary64) x) #s(literal 1/24 binary64))","(-.f64 (/.f64 #s(literal 1/576 binary64) (-.f64 #s(literal 1/24 binary64) (*.f64 #s(literal 1/720 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/24 binary64) (*.f64 #s(literal 1/720 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64))) (/.f64 #s(literal 1/576 binary64) (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64))))","(+.f64 (*.f64 #s(literal 1/720 binary64) (*.f64 x x)) #s(literal 1/24 binary64))","(+.f64 #s(literal 1/24 binary64) (*.f64 #s(literal 1/720 binary64) (*.f64 x x)))","(*.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","(*.f64 (exp.f64 (neg.f64 x)) (exp.f64 (neg.f64 x)))","(*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal -2 binary64)))","(pow.f64 (exp.f64 #s(literal -2 binary64)) x)","(pow.f64 (*.f64 (exp.f64 #s(literal -1 binary64)) (exp.f64 #s(literal -1 binary64))) x)","(pow.f64 (exp.f64 #s(literal -1 binary64)) (*.f64 x #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (+.f64 x x))","(pow.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 x)) #s(literal 2 binary64))","(pow.f64 (exp.f64 x) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))) (neg.f64 (exp.f64 x)))","(/.f64 (*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)) (exp.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) (neg.f64 (exp.f64 x)))","(/.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(/.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))","(exp.f64 (*.f64 (+.f64 x x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))","(exp.f64 (*.f64 #s(literal -2 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":323.30322265625,"type":"rewrite"},{"compiler":[[23193,2544]],"memory":[[4206832,64564064]],"time":89.4609375,"type":"eval"},{"alts":[["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","done",33.220121495730965,"binary64"],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","done",33.29827376117428,"binary64"],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","done",33.42013959070325,"binary64"],["(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","done",33.122818511160254,"binary64"],["(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","done",33.145139619081135,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",33.06710400133444,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","next",0.13521790991935861,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","done",0.38426984475012493,"binary64"]],"compiler":[[5,5],[22,14],[12,10],[20,12],[9,7],[8,7],[21,13],[12,9]],"count":[[688,8]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[679,1],"picked":[5,3]}],"memory":[[-9140304,26604512]],"min-error":[[0.0,"binary64"]],"time":52.869873046875,"type":"prune"},{"egraph":[[0,1238,40,0.005727171],[14,1238,40,0.009794277],[13,1238,40,0.006707987],[12,1214,40,0.007254923],[11,1119,40,0.007853587],[10,976,40,0.006615353],[9,858,40,0.00649772],[8,764,40,0.006028618],[7,608,40,0.004116048],[6,425,40,0.004906132],[5,268,40,0.002337689],[4,176,40,0.001442102],[3,127,44,0.000781473],[2,80,50,0.000525152],[1,39,50,0.000327729],[0,17,50,0.00027369],[0,13,52,0.000124331]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","(fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","x","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(*.f64 (*.f64 x x) #s(literal 1/12 binary64))","(*.f64 x x)","#s(literal 1/12 binary64)"]],"locations":[["(*.f64 (*.f64 x x) #s(literal 1/12 binary64))","cost-diff",0],["(fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","cost-diff",0],["(*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","cost-diff",4]],"memory":[[-4310256,3749184]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","x","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(*.f64 (*.f64 x x) #s(literal 1/12 binary64))","(*.f64 #s(literal 1/12 binary64) (*.f64 x x))","(*.f64 x x)","#s(literal 1/12 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":88.469970703125,"type":"simplify"},{"compiler":[[42,14]],"locations":[["(*.f64 x x)","accuracy",0.0],["(*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","accuracy",0.09765625],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","accuracy",0.13521790991935861],["(*.f64 (*.f64 x x) #s(literal 1/12 binary64))","accuracy",0.1640625]],"memory":[[5502768,21777248]],"mixsample":[[7.004638671875,"adjust",800],[5.281982421875,"ival-exp",0],[5.480712890625,"ival-add",0],[12.632080078125,"ival-mult",0],[0.9892578125,"ival-sub",1600],[0.107421875,"ival-assert",0],[1.475341796875,"ival-sub",0],[0.194580078125,"ival-true",0],[37.45556640625,"ival-exp",1600],[16.59326171875,"ival-exp",400],[1.389404296875,"ival-sub",400],[5.144775390625,"const",0],[0.0078125,"ival-add",800],[0.205322265625,"exact",0],[1.1982421875,"ival-neg",0],[4.353271484375,"adjust",2000]],"outcomes":[[22.083740234375,1,"valid",76],[91.62158203125,2,"valid",177],[0.31103515625,0,"valid",3]],"time":128.72802734375,"type":"localize"},{"count":[[5,9]],"inputs":[["(*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","(fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","(*.f64 (*.f64 x x) #s(literal 1/12 binary64))","(*.f64 x x)"]],"memory":[[-5447360,2491440]],"outputs":[["(* 1/12 (pow x 4))","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(* 1/12 (pow x 2))","(- (+ (exp x) (exp (neg x))) 2)","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(- (+ (exp x) (exp (* -1 x))) 2)"]],"series":[[2.98095703125,"((* (* (* x x) 1/12) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* (* (* x x) 1/12) (* x x))) (* (* x x) 1/12) (* x x))","x","-inf"],[1.497802734375,"((* (* (* x x) 1/12) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* (* (* x x) 1/12) (* x x))) (* (* x x) 1/12) (* x x))","x","inf"],[1.22119140625,"((* (* (* x x) 1/12) (* x x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* x x) (* (* (* x x) 1/12) (* x x))) (* (* x x) 1/12) (* x x))","x","0"]],"time":6.152099609375,"type":"series"},{"count":[[9,9]],"egraph":[[0,8270,76,0.068946367],[7,5935,83,0.021593146],[6,3898,83,0.017213509],[5,2206,83,0.011752268],[4,1535,83,0.007685277],[3,721,83,0.00788802],[2,266,83,0.002160828],[1,108,91,0.000816637],[0,38,91,0.000509509]],"inputs":[["(* 1/12 (pow x 4))","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(* 1/12 (pow x 2))","(- (+ (exp x) (exp (neg x))) 2)","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(- (+ (exp x) (exp (* -1 x))) 2)"]],"memory":[[2082768,35202880]],"method":["egg-herbie"],"outputs":[["(* 1/12 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(* 1/12 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/12 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":263.5849609375,"type":"simplify"},{"count":[[5,116]],"egraph":[[0,8502,38,0.072180706],[2,608,38,0.025038884],[1,79,38,0.002240294],[0,17,48,0.000797734],[0,13,50,0.000143551]],"inputs":[["(*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","(fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","(*.f64 (*.f64 x x) #s(literal 1/12 binary64))","(*.f64 x x)"]],"memory":[[1667408,40921008]],"outputs":[["(*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) x)","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","(*.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (*.f64 x x)))","(*.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x))","(*.f64 (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x) x) (/.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (+.f64 x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 3 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x)","(*.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))))","(*.f64 (*.f64 x x) (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)))","(*.f64 x (*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64))))","(*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x))","(pow.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x)) #s(literal -1 binary64))","(/.f64 (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 x x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 8 binary64)) (pow.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal 2 binary64))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 12 binary64)) (pow.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 8 binary64)) (*.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 12 binary64)) (pow.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 18 binary64)) (pow.f64 (*.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 12 binary64)) (pow.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal 3 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 1 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) (fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1 binary64)))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 x x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))) (*.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))) (+.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))))) (neg.f64 (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 8 binary64)) (pow.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 12 binary64)) (pow.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 8 binary64)) (*.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 12 binary64)) (pow.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 18 binary64)) (pow.f64 (*.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 12 binary64)) (pow.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal 3 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (*.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x))))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64) x) x)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)))) (neg.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 x #s(literal 6 binary64))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64)) (fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) x) (/.f64 x (+.f64 x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(fma.f64 (/.f64 (*.f64 x x) x) (/.f64 (*.f64 x x) (+.f64 x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(fma.f64 (/.f64 x x) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(fma.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/12 binary64) x) (*.f64 #s(literal 1 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/12 binary64) x) (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/12 binary64) x) (*.f64 x x))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 x x)))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) x (*.f64 #s(literal 1 binary64) (*.f64 x x)))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) x (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) x (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 #s(literal 1 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) (*.f64 #s(literal 1 binary64) (*.f64 x x)))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 x x)))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 #s(literal 1 binary64) (*.f64 x x)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 x x)))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(fma.f64 x x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(+.f64 (*.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(+.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 x x (*.f64 #s(literal -1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 x x)))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)) (*.f64 x x))","(+.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))","(*.f64 (*.f64 #s(literal 1/12 binary64) x) (*.f64 x #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1/12 binary64) x) x)","(*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 1 binary64))","(*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) #s(literal 1 binary64)))","(*.f64 #s(literal 1/12 binary64) (*.f64 x x))","(*.f64 (*.f64 x x) #s(literal 1/12 binary64))","(*.f64 x (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1 binary64)))","(*.f64 x (*.f64 #s(literal 1/12 binary64) x))","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(*.f64 x x)","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":198.5380859375,"type":"rewrite"},{"compiler":[[3612,450]],"memory":[[2740144,10466224]],"time":15.94091796875,"type":"eval"},{"alts":[["(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","done",33.220121495730965,"binary64"],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","done",33.29827376117428,"binary64"],["(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","done",33.42013959070325,"binary64"],["(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","done",33.122818511160254,"binary64"],["(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","done",33.145139619081135,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",33.06710400133444,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","done",0.13521790991935861,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)))))","fresh",0.13912415991935861,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","done",0.38426984475012493,"binary64"]],"compiler":[[225,66],[5,5],[22,14],[12,10],[20,12],[9,7],[8,7],[21,13],[19,14],[12,9]],"count":[[138,9]],"kept":[{"done":[7,7],"fresh":[0,0],"new":[130,1],"picked":[1,1]}],"memory":[[-6883184,8182848]],"min-error":[[0.0,"binary64"]],"time":36.010009765625,"type":"prune"},{"accuracy":[0.10225352933453738],"baseline":[0.10225352933453738],"branch":[["x",0.10225352933453738,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.10225352933453738,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[14,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))"]],"memory":[[5379920,5379920]],"oracle":[33.42020137270482],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))"]],"repr":["binary64"],"time":8.35205078125,"times":[[3.661865234375,"x"],[3.736083984375,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[0.13521790991935861],"baseline":[0.13521790991935861],"branch":[["x",0.13521790991935861,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.13521790991935861,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[11,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","(fma.f64 #s(literal 2 binary64) (cosh.f64 x) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (exp.f64 x)))"]],"memory":[[-3490720,4793920]],"oracle":[33.42020137270482],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))"]],"repr":["binary64"],"time":7.0390625,"times":[[3.190185546875,"x"],[2.73486328125,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[0.13912415991935861],"baseline":[0.13912415991935861],"branch":[["x",0.13912415991935861,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.13912415991935861,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[3,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)))))"]],"memory":[[3059184,3059184]],"oracle":[33.42020137270482],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)))))"]],"repr":["binary64"],"time":3.552001953125,"times":[[1.763916015625,"x"],[1.35205078125,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[0.38426984475012493],"baseline":[0.38426984475012493],"branch":[["x",0.38426984475012493,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.38426984475012493,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[2,1]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(fma.f64 #s(literal 2 binary64) #s(approx (cosh x) (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal 1 binary64))) #s(literal -2 binary64))"]],"link":["."],"memory":[[-5449920,2817504]],"name":["exp2 (problem 3.3.7)"],"oracle":[33.42020137270482],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"]],"repr":["binary64"],"time":2.94189453125,"times":[[1.1728515625,"x"],[1.30517578125,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"egraph":[[9,7250,74,0.055954767],[8,4149,74,0.029563303],[7,1951,74,0.015547756],[6,751,74,0.012198979],[5,326,74,0.004698032],[4,155,74,0.001842213],[3,86,74,0.001346877],[2,54,74,0.000653687],[1,38,74,0.000857096],[0,27,74,0.000576374]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"]],"memory":[[3698448,11511280]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"]],"stop":[["node limit",1]],"time":149.62890625,"type":"simplify"},{"compiler":[[74,27]],"memory":[[855536,855536]],"stop":[["fuel",1]],"time":1.5341796875,"type":"soundness"},{"compiler":[[74,27],[74,27],[11,7],[11,7],[8,7],[8,7],[22,17],[22,17]],"memory":[[-3883696,20812496]],"remove-preprocessing":[["(abs x)"],[],[],[],[]],"time":46.143798828125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.022216796875,"type":"end"}]