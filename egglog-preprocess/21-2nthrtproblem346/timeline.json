[{"memory":[[15664,15664]],"time":0.0498046875,"type":"start"},{"compiler":[[15,10]],"memory":[[2020224,51481472]],"method":["search"],"sampling":[[12,{"invalid":0.10146334208548069,"precondition":0.0009763240814208984,"unknown":0.41365824081003666,"valid":0.48390209302306175}],[11,{"invalid":0.10146334208548069,"precondition":0.0009763240814208984,"unknown":0.41365824081003666,"valid":0.48390209302306175}],[10,{"invalid":0.07804872468113899,"precondition":0.0009763240814208984,"unknown":0.45268260315060616,"valid":0.46829234808683395}],[9,{"invalid":0.07804872468113899,"precondition":0.0009763240814208984,"unknown":0.45268260315060616,"valid":0.46829234808683395}],[8,{"invalid":0.031219489872455597,"precondition":0.0009763240814208984,"unknown":0.5307313278317451,"valid":0.43707285821437836}],[7,{"invalid":0.031219489872455597,"precondition":0.0009763240814208984,"unknown":0.5307313278317451,"valid":0.43707285821437836}],[6,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.6243897974491119,"valid":0.37463387846946716}],[5,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.6243897974491119,"valid":0.37463387846946716}],[4,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.7492677569389343,"valid":0.24975591897964478}],[3,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.7492677569389343,"valid":0.24975591897964478}],[2,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}]],"time":373.632080078125,"type":"analyze"},{"bogosity":[{"exit":0.4601705264829591,"infinite":0.09106989811469107,"invalid":0.10146334208548069,"precondition":0.0009763240814208984,"valid":0.34631990923544825}],"memory":[[-52929816,1315254480]],"mixsample":[[415.775146484375,"adjust",800],[0.005126953125,"ival-add",9600],[276.235107421875,"ival-pow",2800],[155.720703125,"adjust",4000],[0.077880859375,"ival-sub",400],[1.994140625,"ival-pow",9200],[0.0,"exact",2400],[21.449951171875,"ival-add",400],[0.0048828125,"ival-add",2400],[14.651611328125,"ival-div",4000],[17.38671875,"ival-div",2400],[10.89208984375,"ival-add",1200],[13.579833984375,"ival-div",8400],[2.234130859375,"ival-pow",5200],[0.403076171875,"ival-pow",3600],[1030.31396484375,"ival-pow",2000],[0.0,"exact",7600],[2.13818359375,"ival-div",3200],[0.006103515625,"ival-add",4000],[9.77978515625,"ival-div",2800],[32.57177734375,"ival-div",1200],[3.66796875,"ival-add",1600],[9.467041015625,"ival-div",8800],[557.938720703125,"ival-pow",4800],[0.006103515625,"ival-add",2800],[0.0009765625,"ival-assert",400],[18.251708984375,"ival-true",0],[5.884033203125,"ival-div",3600],[0.011962890625,"ival-add",7200],[0.244873046875,"ival-div",5200],[2252.54052734375,"ival-pow",4000],[0.0009765625,"ival-true",400],[1.177001953125,"ival-pow",6800],[0.005126953125,"ival-add",4400],[170.798095703125,"ival-div",0],[0.0,"exact",4000],[180.817138671875,"adjust",4800],[25.576416015625,"ival-div",400],[1256.14453125,"ival-pow",1600],[28.9951171875,"ival-div",1600],[8.344970703125,"ival-assert",0],[0.0,"ival-true",2000],[264.13916015625,"ival-sub",0],[1.53271484375,"ival-div",7200],[671.38720703125,"ival-pow",800],[12.548583984375,"ival-div",4800],[1250.44580078125,"ival-pow",0],[1.642822265625,"ival-div",9200],[153.18310546875,"ival-add",0],[0.035888671875,"ival-sub",800],[525.417724609375,"ival-pow",4400],[5.746826171875,"ival-div",7600],[0.324951171875,"ival-pow",3200],[152.135986328125,"adjust",2800],[22.515625,"ival-div",2000],[1473.119140625,"ival-pow",400],[293.455078125,"ival-pow",2400],[0.0087890625,"ival-div",9600],[0.02001953125,"ival-div",6400],[0.0,"ival-assert",800],[0.0009765625,"exact",2800],[0.005126953125,"ival-sub",2000],[17.417236328125,"ival-div",4400],[11.114990234375,"ival-div",8000],[6.982177734375,"ival-pow",7200],[0.002197265625,"ival-true",800],[0.0009765625,"ival-assert",2000],[221.421875,"adjust",2000],[223.17236328125,"ival-pow",1200],[0.0009765625,"exact",4400],[0.293212890625,"ival-add",2000],[34.657958984375,"ival-div",800],[13.644287109375,"exact",0],[24.347900390625,"ival-add",800]],"outcomes":[[1034.70068359375,1,"valid",2886],[193.1611328125,0,"exit",1500],[5.0771484375,3,"exit",3],[463.513916015625,1,"exit",2278],[5.74072265625,4,"exit",3],[1622.716796875,2,"valid",2797],[9370.22900390625,5,"exit",4899],[467.056640625,0,"valid",2573],[2.126953125,2,"exit",3]],"time":14469.69189453125,"type":"sample"},{"compiler":[[13,8],[36,10],[36,10]],"confusion":[[115,1,59,81]],"explanations":[["pow.f64","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","sensitivity",71,0,[],[[1]]],["-.f64","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cancellation",103,1,[],[[]]]],"fperrors":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",103,1,[1.5651639970992642e+94,1.8921217893606173e+228],1,[1.8437516139224867e-34,-3706.6094018592353]],["(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))",38,33,[1.4088809434094844e-248,1.0267479068912904e-226],0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))",0,0,false,0,false],["n",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) n)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,174],[0,82]],"maybe-confusion":[[115,1,0,59,0,81]],"memory":[[-3704320,63735024]],"mixsample":[[0.34912109375,"ival-add",1200],[5.560302734375,"ival-div",0],[12.019287109375,"adjust",800],[1.207763671875,"ival-div",400],[52.889404296875,"ival-pow",1600],[0.271728515625,"ival-assert",0],[0.91015625,"ival-div",1600],[6.460693359375,"ival-sub",0],[36.82177734375,"ival-pow",0],[4.2705078125,"adjust",2000],[1.177001953125,"ival-div",1200],[4.009521484375,"ival-add",0],[0.065673828125,"ival-add",1600],[1.072998046875,"ival-div",800],[0.570068359375,"ival-add",400],[0.666748046875,"ival-true",0],[0.4130859375,"ival-div",2000],[44.86865234375,"ival-pow",400],[0.5517578125,"exact",0],[1.068115234375,"ival-add",800],[0.080322265625,"ival-div",2400]],"outcomes":[[87.854248046875,1,"valid",226],[103.336669921875,2,"valid",162],[14.594482421875,0,"valid",124]],"time":301.26513671875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,8]],"egraph":[[0,185,13,0.000631181],[10,185,13,0.000846463],[9,177,13,0.001110512],[8,161,13,0.000925043],[7,112,13,0.000830195],[6,83,13,0.001143925],[5,51,13,0.00057896],[4,36,13,0.000262071],[3,28,13,0.000223511],[2,22,13,0.000246071],[1,18,13,0.000317293],[0,13,13,0.000197391],[0,8,13,0.000121606]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"memory":[[7312768,15587856]],"method":["egg-herbie"],"outputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":158.9169921875,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.0859375,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",26.19886445177454,"binary64"]],"compiler":[[13,8]],"memory":[[318368,318368]],"time":0.818115234375,"type":"prune"},{"egraph":[[0,185,34,0.000743226],[10,185,34,0.000792637],[9,177,34,0.001040818],[8,161,34,0.001351037],[7,112,34,0.000833484],[6,83,34,0.000770023],[5,51,34,0.000473229],[4,36,34,0.000268681],[3,28,34,0.000205115],[2,22,34,0.000155723],[1,18,34,0.000139963],[0,13,34,0.000166902],[0,8,34,0.000100794]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) n)","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"locations":[["(/.f64 #s(literal 1 binary64) n)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","cost-diff",0],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0]],"memory":[[-6905584,913984]],"method":["egg-herbie"],"outputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) n)","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":17.791015625,"type":"simplify"},{"compiler":[[36,10]],"locations":[["(/.f64 #s(literal 1 binary64) n)","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","accuracy",8.437359871489997],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",23.256184063079623]],"memory":[[5824768,13770512]],"mixsample":[[0.1708984375,"ival-add",1200],[2.47265625,"ival-div",0],[5.55859375,"adjust",800],[0.527587890625,"ival-div",400],[26.33056640625,"ival-pow",1600],[0.100830078125,"ival-assert",0],[0.396728515625,"ival-div",1600],[3.038330078125,"ival-sub",0],[17.648681640625,"ival-pow",0],[2.02587890625,"adjust",2000],[0.441162109375,"ival-div",1200],[1.898681640625,"ival-add",0],[0.02197265625,"ival-add",1600],[0.4560546875,"ival-div",800],[0.265869140625,"ival-add",400],[0.208251953125,"ival-true",0],[0.1689453125,"ival-div",2000],[21.495361328125,"ival-pow",400],[0.189208984375,"exact",0],[0.5322265625,"ival-add",800],[0.040771484375,"ival-div",2400]],"outcomes":[[41.609375,1,"valid",113],[50.0859375,2,"valid",81],[6.364013671875,0,"valid",62]],"time":107.720947265625,"type":"localize"},{"count":[[4,43]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) n)"]],"memory":[[-6022048,3133104]],"outputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","x","(* x (+ 1 (/ 1 x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))"]],"series":[[1.295166015625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","n","-inf"],[1.35009765625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","n","inf"],[0.56298828125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","n","0"],[2.118896484375,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","x","-inf"],[1.798828125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","x","inf"],[1.128173828125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","x","0"]],"time":11.159912109375,"type":"series"},{"count":[[43,42]],"egraph":[[0,8318,1082,0.146631565],[3,7118,1182,0.029962341],[2,2006,1182,0.027124072],[1,700,1251,0.006376558],[0,240,1357,0.00221459]],"inputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","x","(* x (+ 1 (/ 1 x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))"]],"memory":[[9448400,49043392]],"method":["egg-herbie"],"outputs":[["(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (*.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (*.f64 x x) (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","1","#s(literal 1 binary64)","(+ 1 (/ x n))","(+.f64 (/.f64 x n) #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (+.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+.f64 (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(fma.f64 (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (+.f64 (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n) (pow.f64 x (/.f64 #s(literal 1 binary64) n))))","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x))) x)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x)) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(+.f64 (/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp (/ (log (+ 1 x)) n))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/ 1 n)","(/.f64 #s(literal 1 binary64) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (+.f64 (-.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (log.f64 x))) (log1p.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (+.f64 (fma.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (log1p.f64 x))) (-.f64 (-.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (log.f64 x))) (*.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (pow.f64 (log.f64 x) #s(literal 4 binary64))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(fma.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1/2 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))) n)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1/6 binary64) (*.f64 #s(literal -1/24 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n))) (neg.f64 n))) n)) (neg.f64 n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (neg.f64 (log1p.f64 x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) #s(literal -1/6 binary64))) n) (log1p.f64 x)) n))"]],"stop":[["iter limit",1],["node limit",1]],"time":370.838134765625,"type":"simplify"},{"count":[[4,271]],"egraph":[[0,8424,22,0.06894122],[3,4335,26,0.048494869],[2,407,26,0.020858016],[1,63,26,0.002747399],[0,13,26,0.001079326],[0,8,26,0.000115291]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) n)"]],"memory":[[2020800,49150480]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 2 binary64)))) (-.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 3 binary64)) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))))) (fma.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (-.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (+.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (pow.f64 (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (pow.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (/.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (*.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64)))","(*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (/.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64))) (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 2 binary64) n))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 9 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 18 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))) (+.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 3 binary64) n))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (-.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (exp.f64 (/.f64 (log1p.f64 x) n))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 1 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 2 binary64) n))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 9 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 18 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 3 binary64) n))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 9 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 18 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (+.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 3 binary64) n)))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (*.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (+.f64 (+.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 8 binary64))) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 2 binary64) n)))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 12 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (neg.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (neg.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (neg.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (-.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n)))) (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64))) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 2 binary64)))) (-.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 3 binary64)) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))))) (fma.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (*.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64))) (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64)) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/4 binary64))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/2 binary64))) (/.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/2 binary64))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/2 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (/.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(fma.f64 #s(literal -1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(fma.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(-.f64 (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 0 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64)))))))","(+.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))))","(*.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))))","(*.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3/4 binary64))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/4 binary64))) (pow.f64 n #s(literal -1/4 binary64)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (pow.f64 n #s(literal -1/2 binary64)))) (pow.f64 n #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (neg.f64 (pow.f64 n #s(literal -1/2 binary64))))","(pow.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (log1p.f64 x))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 2 binary64) n))","(pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 x))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 n #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) n)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 2 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) n) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n)) #s(literal 1/2 binary64))","(pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1 binary64)))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (*.f64 (neg.f64 x) x))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (neg.f64 x))))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (neg.f64 x))))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (log1p.f64 x))))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) n)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) (pow.f64 n #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (log1p.f64 x) n)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64)))) (log1p.f64 x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64)))) (pow.f64 n #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) (/.f64 #s(literal 1/2 binary64) n)))","(exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (log1p.f64 x) n)) #s(literal 2 binary64)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (+.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))","(*.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 2 binary64) n))","(*.f64 (/.f64 #s(literal 2 binary64) n) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (*.f64 n n) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 n #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) n)) #s(literal -2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) n) #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal 2 binary64) n) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal -2 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal -2 binary64) n)))","(/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) (pow.f64 n #s(literal -1 binary64)))) #s(literal -4 binary64))","(/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal 2 binary64) n) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) n)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) n) (/.f64 #s(literal -1 binary64) n))) (*.f64 (*.f64 #s(literal -2 binary64) n) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n) (*.f64 (*.f64 #s(literal -2 binary64) n) #s(literal -1 binary64))) (pow.f64 (*.f64 #s(literal -2 binary64) n) #s(literal 2 binary64)))","(/.f64 (+.f64 #s(literal -2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) n) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) n) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) n) (*.f64 (*.f64 #s(literal -2 binary64) n) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) n) (*.f64 #s(literal 2 binary64) n)))","(/.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) n))) #s(literal -4 binary64))","(/.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) n) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) n)))","(/.f64 (fma.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) n) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)))","(/.f64 (+.f64 #s(literal -2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) n) (/.f64 #s(literal -1 binary64) n))) (*.f64 (*.f64 #s(literal 2 binary64) n) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) n) (*.f64 #s(literal 2 binary64) n)) (pow.f64 (*.f64 #s(literal 2 binary64) n) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) n) (*.f64 (*.f64 #s(literal 2 binary64) n) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) n) (*.f64 #s(literal -2 binary64) n)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) n) (pow.f64 n #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) n) #s(literal 2 binary64)))","(/.f64 (+.f64 (/.f64 #s(literal 2 binary64) n) (/.f64 #s(literal 2 binary64) n)) #s(literal 4 binary64))","(/.f64 #s(literal -2 binary64) (*.f64 #s(literal -2 binary64) n))","(/.f64 (/.f64 #s(literal 2 binary64) n) #s(literal 2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n))","(/.f64 #s(literal -1 binary64) (neg.f64 n))","(/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) n)","(neg.f64 (/.f64 #s(literal -1 binary64) n))","(fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 n #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) n) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) n))","(exp.f64 (*.f64 (*.f64 (log.f64 n) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 n n)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 n #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":264.7080078125,"type":"rewrite"},{"compiler":[[10290,1319]],"memory":[[-1656048,34276016]],"time":131.476806640625,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",26.19886445177454,"binary64"],["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",23.256184063079623,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",53.877266952511064,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",50.549504161401046,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",41.42091932982589,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",36.140811160513366,"binary64"],["(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 3 binary64)) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))))) (fma.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64)))))","fresh",52.25224111282882,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","next",43.14774539018304,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",39.86041597208689,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","next",19.64284102853086,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","next",26.799618493204516,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","next",26.04603721646485,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","fresh",27.872892917488514,"binary64"]],"compiler":[[13,8],[11,9],[48,27],[31,18],[19,13],[15,11],[83,32],[40,21],[58,31],[34,20],[23,14],[21,13],[23,14],[11,9],[48,27],[31,18],[19,13],[15,11],[83,32],[40,21],[58,31],[34,20],[23,14],[21,13],[23,14]],"count":[[368,13]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[367,12],"picked":[1,1]}],"memory":[[-6382896,19536768]],"min-error":[[0.109375,"binary64"]],"time":27.68310546875,"type":"prune"},{"egraph":[[0,8452,352,0.059348385],[6,6800,355,0.023472348],[5,3029,367,0.026166327],[4,825,367,0.012104698],[3,318,373,0.00472073],[2,154,373,0.001831407],[1,95,373,0.001387311],[0,62,373,0.00095449],[0,37,373,0.000691385]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 (log1p.f64 x) #s(literal 2 binary64))","(log1p.f64 x)","x","#s(literal 2 binary64)","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(log.f64 x)","n","#s(literal 1/2 binary64)","(-.f64 (log1p.f64 x) (log.f64 x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)"]],"locations":[["(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","cost-diff",0],["(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","cost-diff",0],["(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","cost-diff",5],["(log1p.f64 x)","cost-diff",0],["(-.f64 (log1p.f64 x) (log.f64 x))","cost-diff",0],["(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","cost-diff",0],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","cost-diff",0],["(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","cost-diff",0],["(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","cost-diff",0],["(/.f64 #s(literal 1 binary64) n)","cost-diff",0],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","cost-diff",0],["#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","cost-diff",0],["(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","cost-diff",0],["(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","cost-diff",2]],"memory":[[9425152,31692688]],"method":["egg-herbie"],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal 1/2 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(*.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal 1/2 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal 1/2 binary64) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 (log1p.f64 x) #s(literal 2 binary64))","(log1p.f64 x)","x","#s(literal 2 binary64)","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(log.f64 x)","n","#s(literal 1/2 binary64)","(-.f64 (log1p.f64 x) (log.f64 x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (*.f64 n x)))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (*.f64 n x))","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n) (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x))) x))","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(/.f64 (*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n) (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x))) x)","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n) (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":212.223876953125,"type":"simplify"},{"compiler":[[333,33]],"locations":[["(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","accuracy",0.08984375],["(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","accuracy",0.125],["(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","accuracy",8.871046965007679],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","accuracy",27.768771262729963],["(log1p.f64 x)","accuracy",0.0078125],["(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","accuracy",0.1953125],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","accuracy",18.45945820604552],["(-.f64 (log1p.f64 x) (log.f64 x))","accuracy",22.873015921089134],["(/.f64 #s(literal 1 binary64) n)","accuracy",0.0],["(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","accuracy",0.015625],["(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","accuracy",0.1484375],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","accuracy",26.764462243204516],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) n)","accuracy",0.0],["#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","accuracy",12.941683837199651],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",23.256184063079623],["(pow.f64 (log.f64 x) #s(literal 2 binary64))","accuracy",0.44140625],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","accuracy",18.65668467515047],["(-.f64 (log1p.f64 x) (log.f64 x))","accuracy",22.873015921089134],["(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","accuracy",22.92946755532414]],"memory":[[-12099232,58423440]],"mixsample":[[0.1064453125,"ival-sub",1200],[14.500244140625,"adjust",800],[29.111572265625,"ival-div",0],[0.130859375,"ival-mult",1200],[0.0048828125,"ival-sub",1600],[1.547119140625,"ival-div",400],[0.865234375,"ival-pow2",400],[26.263671875,"ival-pow",1600],[0.494140625,"ival-div",1600],[0.140869140625,"ival-assert",0],[8.01904296875,"ival-sub",0],[0.6376953125,"ival-sub",400],[1.869873046875,"ival-log",1600],[0.46044921875,"ival-pow2",1200],[0.031982421875,"ival-log1p",400],[3.630126953125,"ival-log1p",1200],[13.66748046875,"ival-pow",0],[0.166259765625,"ival-mult",800],[6.668212890625,"ival-add",0],[3.2685546875,"ival-log",1200],[0.1396484375,"ival-sub",800],[0.239501953125,"ival-add",400],[4.106689453125,"ival-log1p",0],[0.242919921875,"ival-div",2000],[21.014892578125,"ival-pow",400],[0.096435546875,"ival-div",2400],[9.072998046875,"ival-pow2",0],[0.23486328125,"ival-add",1200],[0.505126953125,"ival-pow2",800],[0.087646484375,"ival-pow2",2000],[2.142578125,"ival-log1p",1600],[0.010009765625,"ival-div",3200],[0.2587890625,"ival-log",2000],[0.052001953125,"ival-div",2800],[5.796142578125,"adjust",2000],[0.65234375,"ival-div",1200],[0.020263671875,"ival-add",1600],[6.96875,"ival-mult",0],[0.27880859375,"ival-mult",400],[0.026123046875,"ival-log",400],[0.708251953125,"ival-pow2",1600],[0.345947265625,"ival-log1p",2000],[0.779052734375,"ival-div",800],[0.2890625,"ival-true",0],[4.935302734375,"ival-log",0],[0.4443359375,"exact",0],[0.446533203125,"ival-add",800]],"outcomes":[[91.059814453125,1,"valid",117],[104.324951171875,2,"valid",80],[15.19140625,0,"exit",44],[5.455078125,0,"valid",15]],"time":286.2890625,"type":"localize"},{"count":[[21,184]],"inputs":[["(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))"]],"memory":[[4497328,79965280]],"outputs":[["(- (* -1/2 (/ (pow (log x) 2) n)) (log x))","(- (+ x (* -1/2 (/ (pow (log x) 2) n))) (log x))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (* 1/2 (/ 1 n)) 1/2))))) (log x))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (+ (* 1/2 (/ 1 n)) (* x (- 1/3 (* 1/2 (/ 1 n))))) 1/2))))) (log x))","(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(/ (- (* -1/2 (/ (pow (log x) 2) n)) (log x)) n)","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (/ x n)) (/ (log x) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (* 1/3 (/ 1 n)) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(* -1 (/ (pow (log x) 2) n))","(+ (* -1 (/ (pow (log x) 2) n)) (/ (pow x 2) n))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* -1 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* x (- (* 11/12 (/ x n)) (/ 1 n))) (/ 1 n))))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(exp (/ (log x) n))","(/ (exp (/ (log x) n)) (* n x))","(/ (exp (/ (log x) n)) x)","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) x)","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) (pow x 2))","(* -1 (pow (log x) 2))","(- (pow x 2) (pow (log x) 2))","(- (* (pow x 2) (+ 1 (* -1 x))) (pow (log x) 2))","(- (* (pow x 2) (+ 1 (* x (- (* 11/12 x) 1)))) (pow (log x) 2))","(pow (log x) 2)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2)))))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (pow x 3))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2))))))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (/ 1 n))) (/ 1/2 (* n x))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2)))))))) (/ 1/2 (* n x))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (* n (pow x 3)))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))))))) (+ (/ 1/4 (* n (pow x 3))) (/ 1/2 (* n x)))) x)","(* -2 (/ (log (/ 1 x)) (* n x)))","(/ (+ (* -2 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))) (/ 1 (* n (pow x 2)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (pow x 3)))) (+ (/ 11/12 (* n (pow x 3))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))))) (/ 1 (* n (pow x 2)))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) n)","(+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(* -2 (/ (log (/ 1 x)) x))","(/ (+ (* -2 (log (/ 1 x))) (+ (/ 1 x) (/ (log (/ 1 x)) x))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (/ 1 x) (/ (log (/ 1 x)) x)))) (/ 1 (pow x 2))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (* 1/2 (/ (log (/ 1 x)) (pow x 3))) (+ (/ 1 x) (+ (* 11/12 (/ 1 (pow x 3))) (/ (log (/ 1 x)) x)))))) (/ 1 (pow x 2))) x)","(pow (log (/ 1 x)) 2)","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/2) x))) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n)))) 1/4) x)) (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) (* n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) n)) (* 1/4 (/ 1 n))) x)) (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n x)))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x))) x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x)) (/ 1 n))) x))) x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) x)) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) x)) (/ 1 n))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)","(+ (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n) (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) x))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) x)))) x))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (/ (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) x)) (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) x)))) x))) x))","(pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow n 2)))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) (pow n 2))","(/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n)","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) x)))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) x)) (* n (+ (exp (/ (log x) n)) (* -1/2 (/ (exp (/ (log x) n)) x))))) (pow n 2))","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) (pow x 2))))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) (pow x 2))) (* n (+ (* -1/2 (/ (exp (/ (log x) n)) (pow x 2))) (/ (exp (/ (log x) n)) x)))) (pow n 2))","(/ 1/2 (pow n 2))","(- (log (+ 1 x)) (log x))","(- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x)) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(+ (/ 1 x) (/ (log x) (* n x)))","(+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))","(+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))))","(/ (- 1 (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (/ 1/2 (* n x)) (/ (log x) n)))) (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n))))))) (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n)))))))))) (* 1/2 (/ 1 x))) n)","(/ (- 1 (* 1/2 (/ 1 x))) (* n x))","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))) (/ 1/2 (pow x 2))) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x)))))))) (/ 1/2 (pow x 2))) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) (pow x 2)))) (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))))))))) (/ 1/2 (pow x 2))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (+ (* -1 (- (log (+ 1 x)) (log x))) (* -1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1/2 (/ (pow (log x) 2) (* n x)))) n)) (/ 1 x))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) (* n x))) (* 1/2 (/ (pow (log x) 2) x))) n))) n)) (/ 1 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x)))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) x)) (+ (* 1/6 (pow (log x) 3)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x))))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) (* n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) (pow x 2))) (+ (* 1/6 (/ (pow (log x) 3) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2)))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))"]],"series":[[31.989013671875,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (/ 1/2 (* n n)))","n","-inf"],[43.677978515625,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (/ 1/2 (* n n)))","n","inf"],[68.1220703125,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (/ 1/2 (* n n)))","n","0"],[47.758056640625,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (/ 1/2 (* n n)))","x","-inf"],[41.955810546875,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (/ 1/2 (* n n)))","x","inf"],[44.444091796875,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (/ 1/2 (* n n)))","x","0"]],"time":282.280029296875,"type":"series"},{"count":[[184,183]],"egraph":[[0,8308,4548,0.106911447],[1,2922,4799,0.033732418],[0,939,5170,0.0092108]],"inputs":[["(- (* -1/2 (/ (pow (log x) 2) n)) (log x))","(- (+ x (* -1/2 (/ (pow (log x) 2) n))) (log x))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (* 1/2 (/ 1 n)) 1/2))))) (log x))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (+ (* 1/2 (/ 1 n)) (* x (- 1/3 (* 1/2 (/ 1 n))))) 1/2))))) (log x))","(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(/ (- (* -1/2 (/ (pow (log x) 2) n)) (log x)) n)","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (/ x n)) (/ (log x) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (* 1/3 (/ 1 n)) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(* -1 (/ (pow (log x) 2) n))","(+ (* -1 (/ (pow (log x) 2) n)) (/ (pow x 2) n))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* -1 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* x (- (* 11/12 (/ x n)) (/ 1 n))) (/ 1 n))))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(exp (/ (log x) n))","(/ (exp (/ (log x) n)) (* n x))","(/ (exp (/ (log x) n)) x)","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) x)","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) (pow x 2))","(* -1 (pow (log x) 2))","(- (pow x 2) (pow (log x) 2))","(- (* (pow x 2) (+ 1 (* -1 x))) (pow (log x) 2))","(- (* (pow x 2) (+ 1 (* x (- (* 11/12 x) 1)))) (pow (log x) 2))","(pow (log x) 2)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2)))))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (pow x 3))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2))))))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (/ 1 n))) (/ 1/2 (* n x))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2)))))))) (/ 1/2 (* n x))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (* n (pow x 3)))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))))))) (+ (/ 1/4 (* n (pow x 3))) (/ 1/2 (* n x)))) x)","(* -2 (/ (log (/ 1 x)) (* n x)))","(/ (+ (* -2 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))) (/ 1 (* n (pow x 2)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (pow x 3)))) (+ (/ 11/12 (* n (pow x 3))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))))) (/ 1 (* n (pow x 2)))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) n)","(+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(* -2 (/ (log (/ 1 x)) x))","(/ (+ (* -2 (log (/ 1 x))) (+ (/ 1 x) (/ (log (/ 1 x)) x))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (/ 1 x) (/ (log (/ 1 x)) x)))) (/ 1 (pow x 2))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (* 1/2 (/ (log (/ 1 x)) (pow x 3))) (+ (/ 1 x) (+ (* 11/12 (/ 1 (pow x 3))) (/ (log (/ 1 x)) x)))))) (/ 1 (pow x 2))) x)","(pow (log (/ 1 x)) 2)","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/2) x))) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n)))) 1/4) x)) (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) (* n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) n)) (* 1/4 (/ 1 n))) x)) (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n x)))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x))) x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x)) (/ 1 n))) x))) x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) x)) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) x)) (/ 1 n))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)","(+ (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n) (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) x))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) x)))) x))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (/ (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) x)) (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) x)))) x))) x))","(pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow n 2)))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) (pow n 2))","(/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n)","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) x)))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) x)) (* n (+ (exp (/ (log x) n)) (* -1/2 (/ (exp (/ (log x) n)) x))))) (pow n 2))","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) (pow x 2))))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) (pow x 2))) (* n (+ (* -1/2 (/ (exp (/ (log x) n)) (pow x 2))) (/ (exp (/ (log x) n)) x)))) (pow n 2))","(/ 1/2 (pow n 2))","(- (log (+ 1 x)) (log x))","(- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x)) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(+ (/ 1 x) (/ (log x) (* n x)))","(+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))","(+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))))","(/ (- 1 (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (/ 1/2 (* n x)) (/ (log x) n)))) (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n))))))) (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n)))))))))) (* 1/2 (/ 1 x))) n)","(/ (- 1 (* 1/2 (/ 1 x))) (* n x))","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))) (/ 1/2 (pow x 2))) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x)))))))) (/ 1/2 (pow x 2))) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) (pow x 2)))) (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))))))))) (/ 1/2 (pow x 2))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (+ (* -1 (- (log (+ 1 x)) (log x))) (* -1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1/2 (/ (pow (log x) 2) (* n x)))) n)) (/ 1 x))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) (* n x))) (* 1/2 (/ (pow (log x) 2) x))) n))) n)) (/ 1 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x)))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) x)) (+ (* 1/6 (pow (log x) 3)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x))))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) (* n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) (pow x 2))) (+ (* 1/6 (/ (pow (log x) 3) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2)))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))"]],"memory":[[-1822112,56686160]],"method":["egg-herbie"],"outputs":[["(- (* -1/2 (/ (pow (log x) 2) n)) (log x))","(-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))","(- (+ x (* -1/2 (/ (pow (log x) 2) n))) (log x))","(fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64) (-.f64 x (log.f64 x)))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (* 1/2 (/ 1 n)) 1/2))))) (log x))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (+ (* 1/2 (/ 1 n)) (* x (- 1/3 (* 1/2 (/ 1 n))))) 1/2))))) (log x))","(fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) x (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) x #s(literal 1 binary64)) x (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)))","(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (+.f64 (/.f64 x n) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) x (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(/ (- (* -1/2 (/ (pow (log x) 2) n)) (log x)) n)","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n)","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (/ x n)) (/ (log x) n))","(+.f64 (/.f64 x n) (/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(fma.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (* 1/3 (/ 1 n)) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) x (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n))","(* -1 (/ (pow (log x) 2) n))","(/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 n))","(+ (* -1 (/ (pow (log x) 2) n)) (/ (pow x 2) n))","(fma.f64 (/.f64 x n) x (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 n)))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* -1 (/ x n)) (/ 1 n))))","(fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 x n)) (*.f64 x x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 n)))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* x (- (* 11/12 (/ x n)) (/ 1 n))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) (/.f64 x n) (/.f64 #s(literal -1 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) (*.f64 x x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 n)))","1","#s(literal 1 binary64)","(+ 1 (/ x n))","(+.f64 (/.f64 x n) #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) x (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(exp (/ (log x) n))","(exp.f64 (/.f64 (log.f64 x) n))","(/ (exp (/ (log x) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (exp (/ (log x) n)) x)","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)","(* -1 (/ (log x) n))","(/.f64 (neg.f64 (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (/ x n))","(-.f64 (/.f64 x n) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(-.f64 (*.f64 (fma.f64 (/.f64 x n) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) n)) x) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(-.f64 (fma.f64 (fma.f64 (/.f64 x n) #s(literal 1/3 binary64) (/.f64 #s(literal -1/2 binary64) n)) (*.f64 x x) (/.f64 x n)) (/.f64 (log.f64 x) n))","(* -1 (log x))","(neg.f64 (log.f64 x))","(- x (log x))","(-.f64 x (log.f64 x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x) (log.f64 x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x) (log.f64 x))","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)","(*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x))","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) x)","(/.f64 (fma.f64 x (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n) (*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)))) x)","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))","(*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 x x)))","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) (pow x 2))","(/.f64 (fma.f64 x (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n) (*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)))) (*.f64 x x))","(* -1 (pow (log x) 2))","(neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(- (pow x 2) (pow (log x) 2))","(-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(- (* (pow x 2) (+ 1 (* -1 x))) (pow (log x) 2))","(-.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x) x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(- (* (pow x 2) (+ 1 (* x (- (* 11/12 x) 1)))) (pow (log x) 2))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) x) x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow (log x) 2)","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) x)","(/.f64 (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64)) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)))) (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2)))))) (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 (+.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 x x))) (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n))) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (pow x 3))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2))))))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal -1/2 binary64) (/.f64 #s(literal 11/12 binary64) n)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 x x))) (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n)))) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) x))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (*.f64 x x)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (*.f64 x x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))) x)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (/.f64 (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64)) x) n)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (/ 1 n))) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) n) (fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) n) #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2)))))))) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) n) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) n) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 (*.f64 n x) x))) (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (* n (pow x 3)))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))))))) (+ (/ 1/4 (* n (pow x 3))) (/ 1/2 (* n x)))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal -1/2 binary64) (/.f64 #s(literal 11/12 binary64) n)) n) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) n) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 (*.f64 n x) x))) (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 #s(literal 1 binary64) n)) (/.f64 (/.f64 (log.f64 x) n) n)))) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n) (/.f64 (/.f64 #s(literal 1/2 binary64) x) n))) x)","(* -2 (/ (log (/ 1 x)) (* n x)))","(*.f64 (/.f64 (/.f64 (log.f64 x) n) x) #s(literal 2 binary64))","(/ (+ (* -2 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x)))) x)","(/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (/.f64 (log.f64 x) n) x))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))) (/ 1 (* n (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64) (+.f64 (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (/.f64 (log.f64 x) n) x)) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 x x)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (pow x 3)))) (+ (/ 11/12 (* n (pow x 3))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))))) (/ 1 (* n (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64) (+.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (neg.f64 (log.f64 x)) n) (+.f64 (/.f64 #s(literal 11/12 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n)) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (/.f64 (log.f64 x) n) x)))) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 x x)))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(exp.f64 (/.f64 (log.f64 x) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 x x)) (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 x x))) (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n))))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) x)","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)","(/ 1 (* n x))","(/.f64 (/.f64 #s(literal 1 binary64) x) n)","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x) n)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(+.f64 (log.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (log.f64 x) (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) n)","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)","(+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))","(* -2 (/ (log (/ 1 x)) x))","(*.f64 (/.f64 (log.f64 x) x) #s(literal 2 binary64))","(/ (+ (* -2 (log (/ 1 x))) (+ (/ 1 x) (/ (log (/ 1 x)) x))) x)","(/.f64 (fma.f64 #s(literal 2 binary64) (log.f64 x) (-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (log.f64 x) x))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (/ 1 x) (/ (log (/ 1 x)) x)))) (/ 1 (pow x 2))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -2/3 binary64) x) (/.f64 (neg.f64 (log.f64 x)) x) (fma.f64 #s(literal 2 binary64) (log.f64 x) (-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (log.f64 x) x)))) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (* 1/2 (/ (log (/ 1 x)) (pow x 3))) (+ (/ 1 x) (+ (* 11/12 (/ 1 (pow x 3))) (/ (log (/ 1 x)) x)))))) (/ 1 (pow x 2))) x)","(/.f64 (-.f64 (fma.f64 #s(literal 2 binary64) (log.f64 x) (fma.f64 (/.f64 #s(literal -2/3 binary64) x) (/.f64 (neg.f64 (log.f64 x)) x) (fma.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (+.f64 (-.f64 (/.f64 #s(literal 11/12 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (log.f64 x) x)) (/.f64 #s(literal 1 binary64) x))))) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x)","(pow (log (/ 1 x)) 2)","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal -1 binary64) #s(literal 1 binary64)) x)","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/2) x))) 1) x))","(/.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) (neg.f64 x)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) #s(literal -1 binary64) #s(literal 1 binary64)) x)","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64))) x)) #s(literal 1/2 binary64)) x) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) #s(literal -1 binary64)) (neg.f64 x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n)))) 1/4) x)) (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(/.f64 (-.f64 (-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (-.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/4 binary64) (-.f64 (/.f64 #s(literal 11/24 binary64) n) #s(literal 1/4 binary64))) x)) #s(literal 1/3 binary64)) x)) #s(literal 1/2 binary64)) (neg.f64 x)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) #s(literal 1 binary64)) (neg.f64 x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (neg.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n))) (neg.f64 x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (-.f64 (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)))) (neg.f64 x)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) (neg.f64 x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x)))) x)) (neg.f64 x)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) (* n x)))","(/.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal 1 binary64)) (neg.f64 (*.f64 n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) n)) x) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal 1 binary64)) n)) (neg.f64 x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 #s(literal 1/3 binary64) n)) x)) (/.f64 #s(literal 1/2 binary64) n)) x) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal 1 binary64)) n)) (neg.f64 x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) n)) (* 1/4 (/ 1 n))) x)) (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (-.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/4 binary64) (/.f64 #s(literal 11/24 binary64) n)) n) (/.f64 #s(literal 1/4 binary64) n)) x)) (/.f64 #s(literal 1/3 binary64) n)) x)) (/.f64 #s(literal 1/2 binary64) n)) x) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal 1 binary64)) n)) (neg.f64 x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n x)))","(*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (*.f64 n x)) #s(literal 2 binary64))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x))) x))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) x)) (neg.f64 x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x)) (/ 1 n))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) n)) x)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 x))) (neg.f64 x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) x)) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) x)) (/ 1 n))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) n)) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 11/12 binary64) n)) x)) x)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 x))) (neg.f64 x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x)) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(-.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (neg.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n))) x))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(-.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)))) (neg.f64 x)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) x)","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) n) x) (/.f64 #s(literal 1/3 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)","(+ (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n) (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) x))","(*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) x) #s(literal 2 binary64))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) x))) x))","(/.f64 (-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) x)) (neg.f64 x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) x)))) x))) x))","(/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) x)) (neg.f64 x))) (neg.f64 x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (/ (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) x)) (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) x)))) x))) x))","(/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -1/2 binary64) #s(literal 11/12 binary64)) x) #s(literal -1 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64))) x)) (neg.f64 x))) (neg.f64 x))","(pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) n)","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow n 2)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n n)) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) (pow n 2))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) (*.f64 n n))","(/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(exp (/ (log (+ 1 x)) n))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/ 1 n)","(/.f64 #s(literal 1 binary64) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) x)))","(*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 (*.f64 n x) n)) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) x)) (* n (+ (exp (/ (log x) n)) (* -1/2 (/ (exp (/ (log x) n)) x))))) (pow n 2))","(/.f64 (fma.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal -1/2 binary64) (exp.f64 (/.f64 (log.f64 x) n))) n (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal 1/2 binary64))) (*.f64 n n))","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) (pow x 2))))","(*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 (*.f64 (*.f64 n x) n) x)) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) (pow x 2))) (* n (+ (* -1/2 (/ (exp (/ (log x) n)) (pow x 2))) (/ (exp (/ (log x) n)) x)))) (pow n 2))","(/.f64 (fma.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) #s(literal -1/2 binary64) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)) n (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) #s(literal 1/2 binary64))) (*.f64 n n))","(/ 1/2 (pow n 2))","(/.f64 (/.f64 #s(literal 1/2 binary64) n) n)","(- (log (+ 1 x)) (log x))","(-.f64 (log1p.f64 x) (log.f64 x))","(- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (log.f64 x)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/24 binary64) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/24 binary64) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (log.f64 x))))) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x)) n)","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))))","(+ 1 (/ (log x) n))","(+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))))","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))) n)","(+ (/ 1 x) (/ (log x) (* n x)))","(+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))","(+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))","(fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))","(+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))))","(fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))))","(/ (- 1 (* 1/2 (/ 1 x))) n)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (/ 1/2 (* n x)) (/ (log x) n)))) (* 1/2 (/ 1 x))) n)","(/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (/.f64 (/.f64 (log.f64 x) n) x) #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal 1/2 binary64) x) n))) (/.f64 (log.f64 x) n)) (/.f64 #s(literal 1/2 binary64) x)) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n))))))) (* 1/2 (/ 1 x))) n)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) n) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 n n)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (log.f64 x) n) n) x) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n)) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) n) (/.f64 (log.f64 x) n))))) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n)))))))))) (* 1/2 (/ 1 x))) n)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) n) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 n n)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (fma.f64 (/.f64 #s(literal -1/12 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) x) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/4 binary64) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (log.f64 x) n) n) x) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n)) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) n) (/.f64 (log.f64 x) n)))))))) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) n)","(/ (- 1 (* 1/2 (/ 1 x))) (* n x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))) (/ 1/2 (pow x 2))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n) (+.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x)))))))) (/ 1/2 (pow x 2))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (log.f64 x) n) n) (*.f64 x x)) (/.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) x)) (+.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) (pow x 2)))) (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))))))))) (/ 1/2 (pow x 2))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) (fma.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 x x)) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 x x)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (log.f64 x) n) n) (*.f64 x x)) (/.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) x)) (+.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))))))))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log.f64 x)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal -1/2 binary64) (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (+.f64 (-.f64 (/.f64 (+.f64 (/.f64 (*.f64 #s(literal 1/6 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (neg.f64 n)) (log1p.f64 x)) (log.f64 x)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (+.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (+.f64 (/.f64 (*.f64 #s(literal -1/24 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) n) (*.f64 #s(literal -1/6 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) n) #s(literal -1 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (neg.f64 n)) (log1p.f64 x)) (log.f64 x)) (neg.f64 n))","(* -1 (/ (+ (* -1 (- (log (+ 1 x)) (log x))) (* -1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal -1/2 binary64) (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log.f64 x))) (neg.f64 n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64) (neg.f64 (log1p.f64 x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (neg.f64 n)) (log1p.f64 x)) n))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 n)) (log.f64 x)) n))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) x) #s(literal 1/2 binary64) (/.f64 (log.f64 x) x)) n) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (log.f64 x) x) (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) x) #s(literal -1/6 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) n)) n) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1/2 (/ (pow (log x) 2) (* n x)))) n)) (/ 1 x))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (/.f64 (neg.f64 (log.f64 x)) x)) n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) (* n x))) (* 1/2 (/ (pow (log x) 2) x))) n))) n)) (/ 1 x))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) x) #s(literal 1/6 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (neg.f64 n)) (/.f64 (log.f64 x) x)) n))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) n))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) n)","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x)))) n)) (* 1/2 (/ 1 x))) 1) n))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (+.f64 (fma.f64 (/.f64 (log.f64 x) x) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) x)) (log.f64 x)) n)) #s(literal 1 binary64)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(/.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (+.f64 (-.f64 (log.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (log.f64 x) x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal 1/4 binary64))) n)) (fma.f64 (/.f64 (log.f64 x) x) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) x))) n)) #s(literal -1 binary64) #s(literal 1 binary64)) n)","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) x)) (+ (* 1/6 (pow (log x) 3)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x))))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (+.f64 (-.f64 (fma.f64 (/.f64 (log.f64 x) x) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (log.f64 x) x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal 1/4 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) x) #s(literal -1/12 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal 1/4 binary64) (*.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) #s(literal 1/6 binary64)))) (neg.f64 n)))) n)) (log.f64 x)) n)) #s(literal 1 binary64)) (neg.f64 n))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) (* n x)))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) x) (+.f64 (/.f64 (log.f64 x) x) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))) n) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) x) (+.f64 (/.f64 (log.f64 x) x) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))) (/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (log.f64 x) x) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x)) (*.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) x) #s(literal 1/4 binary64))) n)) (neg.f64 n)) #s(literal -1 binary64) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x)) n)","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) (pow x 2))) (+ (* 1/6 (/ (pow (log x) 3) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2)))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) x) (+.f64 (/.f64 (log.f64 x) x) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))) (/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (log.f64 x) x) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x)) (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) x) #s(literal 1/4 binary64) (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) x) x) #s(literal -1/12 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) x) #s(literal 1/4 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) x) #s(literal 1/6 binary64)))) (neg.f64 n)))) n)) n) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)) (neg.f64 n))"]],"stop":[["iter limit",1],["node limit",1]],"time":335.258056640625,"type":"simplify"},{"count":[[21,716]],"egraph":[[0,8440,279,0.082777471],[2,2503,279,0.045273004],[1,280,279,0.012052668],[0,62,297,0.003168287],[0,37,297,0.000391892]],"inputs":[["(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))"]],"memory":[[1685216,66914544]],"outputs":[["(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 2 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)) (*.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))) (neg.f64 (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n)))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64))) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 2 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) (-.f64 (log1p.f64 x) (log.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)) (*.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))","(fma.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n) (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 (/.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (log.f64 x) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))","(fma.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x)) (fma.f64 #s(literal -1 binary64) (log.f64 x) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) n) (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) n) (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 2 binary64)) (+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 2 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) #s(literal 2 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x))))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (log.f64 x))","(-.f64 (log1p.f64 x) (-.f64 (log.f64 x) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))","(+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (neg.f64 (log.f64 x)))","(+.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) (-.f64 (log1p.f64 x) (log.f64 x)))","(+.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))","(+.f64 (log1p.f64 x) (fma.f64 #s(literal -1 binary64) (log.f64 x) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) n))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) n) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 n (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) n) #s(literal 1 binary64))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) n))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) n)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) n)))","(/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) (pow.f64 n #s(literal -1 binary64))) (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))) (neg.f64 (*.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)))) (neg.f64 (*.f64 n (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) n))","(/.f64 (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) (neg.f64 n)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))))) n))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (*.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) (*.f64 n (fma.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x)))) n))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 n)))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (*.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (*.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 n)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))) n) (/.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))) n))","(-.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (log1p.f64 x)) n) (/.f64 (log.f64 x) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (-.f64 (log.f64 x) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))) n))","(exp.f64 (*.f64 (log.f64 (/.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (log.f64 x))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n) (/.f64 (pow.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) n) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1 binary64))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log1p.f64 x) (/.f64 (log1p.f64 x) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) n)))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (*.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 n #s(literal -1 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 n #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64))) (fma.f64 (log1p.f64 x) (/.f64 (log1p.f64 x) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 n (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 n (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) n)","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) n))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (*.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 n n))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (*.f64 n (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (*.f64 n (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) n))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (neg.f64 n)))","(fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log1p.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n)))","(fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n)))","(fma.f64 (log1p.f64 x) (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n)))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (/.f64 (log1p.f64 x) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (/.f64 (log1p.f64 x) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (*.f64 n n)) (/.f64 (*.f64 n (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n n)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (*.f64 n (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (*.f64 n (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (*.f64 n (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (*.f64 n (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (neg.f64 n)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n)))","(*.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))))","(fma.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(-.f64 (/.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(+.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))","(+.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","(*.f64 (pow.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64))))","(pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log.f64 x))","(pow.f64 (pow.f64 (*.f64 x x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 (*.f64 x x) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (pow.f64 x (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (*.f64 x x) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))","(pow.f64 x (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)))","(pow.f64 x (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)))","(pow.f64 x (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)))","(pow.f64 x (pow.f64 n #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) n)))","(/.f64 #s(literal 1 binary64) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64)))))","(exp.f64 (fma.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n) (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) (/.f64 #s(literal 1/2 binary64) n)))","(exp.f64 (*.f64 (log.f64 x) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(exp.f64 (*.f64 (log.f64 x) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(exp.f64 (/.f64 (log.f64 x) n))","(*.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 n)) #s(literal -1 binary64))","(pow.f64 (pow.f64 n #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 n)) #s(literal -1 binary64))","(pow.f64 (*.f64 n n) #s(literal -1/2 binary64))","(pow.f64 n #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 #s(literal -1 binary64) (neg.f64 n))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 n)))","(/.f64 #s(literal 1 binary64) n)","(neg.f64 (/.f64 #s(literal -1 binary64) n))","(exp.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n))","(*.f64 (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1 binary64)) x))","(*.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) n) x))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))","(*.f64 (/.f64 (pow.f64 n #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64))))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) n) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64))))))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 n #s(literal -1 binary64)) x) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) n))","(*.f64 (/.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) n) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 n #s(literal -1 binary64)) x))","(*.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) n))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 n #s(literal -1 binary64))) x))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n) x))","(*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 n #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (/.f64 n (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (pow.f64 x (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (*.f64 n x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64))))))","(*.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n) #s(literal 1 binary64))","(*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) n))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 (*.f64 n x) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n))","(pow.f64 (/.f64 (*.f64 n x) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 x) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) n)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 x (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 n x)))","(/.f64 (*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 n #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (*.f64 n (neg.f64 x))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (neg.f64 (*.f64 n x))))","(/.f64 (neg.f64 (pow.f64 n #s(literal -1 binary64))) (neg.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 x) (neg.f64 n)))","(/.f64 (*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 x) n))","(/.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 x (neg.f64 n)))","(/.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 n x))","(/.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (neg.f64 n))","(/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (*.f64 n (neg.f64 x)))","(/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (*.f64 n x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 n x) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 n)))","(/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) x)","(/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (neg.f64 (neg.f64 n)))","(/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)","(/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 n x))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 n x) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x))","(neg.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) n))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 n (neg.f64 x))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 n (neg.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 n x))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (neg.f64 (*.f64 n x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) n))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(literal -1 binary64)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x))","(*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) x))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))))","(*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(*.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64))","(*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))","(pow.f64 (/.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 x (+.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(pow.f64 x (+.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(pow.f64 x (+.f64 #s(literal -1 binary64) (pow.f64 n #s(literal -1 binary64))))","(pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64)))","(pow.f64 x (+.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) #s(literal -1 binary64)))","(pow.f64 x (+.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n) (/.f64 (pow.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) n) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (pow.f64 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 n #s(literal -1 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n)))","(/.f64 (neg.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (log.f64 x) #s(literal -1 binary64))) (neg.f64 n))","(/.f64 (-.f64 (neg.f64 (log1p.f64 x)) (*.f64 (log.f64 x) #s(literal -1 binary64))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (log1p.f64 x) (*.f64 (log.f64 x) #s(literal 1 binary64))) n)","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (neg.f64 n))","(/.f64 (-.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log.f64 x))) (neg.f64 n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (log.f64 x)) n)","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 n #s(literal -1 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) n)","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) n))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 n))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) n))","(neg.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 n)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) n) (/.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(-.f64 (/.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))) (/.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(-.f64 (/.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))) (/.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(-.f64 (/.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n)) (/.f64 (*.f64 n (log.f64 x)) (*.f64 n n)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 n)))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n)))","(*.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (neg.f64 (log.f64 x)))","(fma.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (log1p.f64 x))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x)))) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x))) (log.f64 (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 x) (log.f64 x))","(+.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))","(+.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))","(log.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x)))","(pow.f64 (sqrt.f64 (log1p.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (log1p.f64 x) #s(literal 1 binary64))","(log1p.f64 x)","(neg.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x)))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(exp.f64 (log.f64 (log1p.f64 x)))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(log.f64 (+.f64 #s(literal 1 binary64) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 n) (*.f64 x (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))) (neg.f64 (*.f64 x (neg.f64 n))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n (*.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (neg.f64 (*.f64 n x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x)) (neg.f64 (*.f64 x (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x (*.f64 (neg.f64 n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))) (neg.f64 (*.f64 (neg.f64 n) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x (*.f64 n (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))) (neg.f64 (*.f64 n x)))","(/.f64 (neg.f64 (+.f64 x (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))) (neg.f64 (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (neg.f64 n) (*.f64 x (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 x (neg.f64 n)))","(/.f64 (fma.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) n (*.f64 x (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (*.f64 n x))","(/.f64 (fma.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (*.f64 x (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x (*.f64 (neg.f64 n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 (neg.f64 n) x))","(/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x (*.f64 n (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 n x))","(/.f64 (+.f64 x (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))) (*.f64 (/.f64 n (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))) (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))","(/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))))","(/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(literal -1 binary64)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 n n)) #s(literal 1/2 binary64)) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (+.f64 (pow.f64 n #s(literal -2 binary64)) (pow.f64 n #s(literal -1 binary64)))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1/2 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 n n)) (+.f64 (pow.f64 n #s(literal -2 binary64)) (pow.f64 n #s(literal -1 binary64)))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) n (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1/2 binary64))) n) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (*.f64 n n)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (*.f64 n n)) (/.f64 (fma.f64 #s(literal 1/2 binary64) n (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1/2 binary64))) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 1 binary64)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 n n)) x) (/.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) #s(literal -1 binary64)) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (fma.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64) (*.f64 #s(literal -1/8 binary64) (pow.f64 n #s(literal -3 binary64)))) x) (/.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -4 binary64)) #s(literal 1/4 binary64) (fma.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))))) #s(literal -1 binary64)) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) n (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1/2 binary64))) x) (/.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 (-.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) n) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) x) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) n (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1/2 binary64))) (*.f64 n n)) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) #s(literal 1 binary64)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (*.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (*.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 n #s(literal -1 binary64))) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n) (/.f64 (fma.f64 #s(literal 1/2 binary64) n (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1/2 binary64))) (*.f64 n n)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 1 binary64)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (pow.f64 n #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 x (neg.f64 (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))) (/.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) (/.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))))","(+.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))","(+.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) x))","(*.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) x) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))","(*.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) x) (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))))","(*.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) x))","(pow.f64 (/.f64 (/.f64 x (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))","(/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)))) (neg.f64 (*.f64 x (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64)))) (neg.f64 (*.f64 x (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64))) x))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64))) (*.f64 x (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))))","(/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 3 binary64))) (*.f64 x (fma.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (-.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x))) (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) x))","(neg.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (*.f64 x (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))) (/.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)) (*.f64 x (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) x) (/.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x)) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n))) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) n)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (-.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (-.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64)))))","(fma.f64 (neg.f64 (log.f64 x)) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(fma.f64 (log.f64 x) (neg.f64 (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(fma.f64 (log1p.f64 x) (log1p.f64 x) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 x) (log1p.f64 x)) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(+.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(+.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(*.f64 (neg.f64 (log.f64 x)) (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (log.f64 x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log.f64 x)))","(pow.f64 (neg.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 #s(literal -1/2 binary64) n) (/.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1 binary64)))","(*.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 n #s(literal -1 binary64))) n))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 (neg.f64 n) n) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 n #s(literal -2 binary64)))","(pow.f64 (/.f64 (*.f64 (*.f64 n n) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 n n) #s(literal 2 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1/2 binary64) n) (neg.f64 n))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 n) n))))","(/.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 n) n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 n n) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 n n) #s(literal 2 binary64))))","(/.f64 (/.f64 #s(literal 1/2 binary64) n) (neg.f64 (neg.f64 n)))","(/.f64 (/.f64 #s(literal 1/2 binary64) n) n)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 n n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n n) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n n) #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (neg.f64 n) n)))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","(neg.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 n n)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 (/.f64 #s(literal 1/2 binary64) n) (neg.f64 n)))","(exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 n n) #s(literal 2 binary64))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":315.208984375,"type":"rewrite"},{"compiler":[[53869,5115]],"memory":[[10678144,118526000]],"time":208.534912109375,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",26.19886445177454,"binary64"],["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",23.256184063079623,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",53.877266952511064,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",50.549504161401046,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",41.42091932982589,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",36.140811160513366,"binary64"],["(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 3 binary64)) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))))) (fma.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64)))))","fresh",52.25224111282882,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","fresh",26.84614736815703,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","done",26.799618493204516,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (*.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","fresh",37.97625094039755,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","fresh",26.54508565330697,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","fresh",26.310538910936696,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","fresh",30.201949366938923,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","fresh",26.014787225507632,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","fresh",26.01769704999973,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (/ (pow x (/ 1 n)) x) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n))","fresh",39.054353826159684,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","fresh",36.73806616355415,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","next",40.29630713099678,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","next",43.998615419999595,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","fresh",43.79878159325183,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (fma.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal -1/2 binary64) (exp.f64 (/.f64 (log.f64 x) n))) n (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal 1/2 binary64))) (*.f64 n n))) x))","fresh",44.568947266225244,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (+.f64 (fma.f64 (/.f64 (log.f64 x) x) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) x)) (log.f64 x)) n)) #s(literal 1 binary64)) (neg.f64 n))) x))","fresh",45.2940159187749,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","fresh",48.188402406739804,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","fresh",45.30351499011298,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))) n))","fresh",37.42960753693761,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","fresh",26.04670098598988,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","fresh",27.872892917488514,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","fresh",26.142207567794326,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","fresh",26.11045424074975,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (/.f64 #s(literal -1 binary64) n)))","fresh",26.80190350297114,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","next",26.07566597422972,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","fresh",36.71318847130004,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","fresh",43.5573340287942,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","fresh",48.46278688969202,"binary64"]],"compiler":[[13,8],[11,9],[48,27],[31,18],[19,13],[15,11],[83,32],[24,16],[23,14],[59,26],[38,21],[31,18],[27,16],[23,15],[22,14],[34,18],[35,23],[27,17],[28,17],[27,17],[71,31],[65,33],[49,25],[64,35],[51,30],[23,15],[23,14],[42,25],[33,20],[26,16],[24,16],[43,27],[41,26],[33,21],[11,9],[48,27],[31,18],[19,13],[83,32],[24,16],[59,26],[38,21],[31,18],[27,16],[23,15],[22,14],[34,18],[35,23],[27,17],[28,17],[27,17],[71,31],[65,33],[49,25],[64,35],[51,30],[23,15],[23,14],[42,25],[33,20],[26,16],[24,16],[43,27],[41,26],[33,21]],"count":[[1243,34]],"kept":[{"done":[1,1],"fresh":[7,6],"new":[1230,25],"picked":[5,2]}],"memory":[[4591056,64449072]],"min-error":[[0.01171875,"binary64"]],"time":58.74609375,"type":"prune"},{"egraph":[[0,8228,414,0.082189678],[5,6393,424,0.024013056],[4,1830,429,0.022339501],[3,615,439,0.006870485],[2,216,439,0.00199045],[1,118,444,0.00091546],[0,83,446,0.000668757],[0,51,446,0.000748442]],"inputs":[["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/.f64 (log1p.f64 x) n)","(log1p.f64 x)","x","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)","#s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))","(-.f64 x (log.f64 x))","x","(log.f64 x)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n))","(neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","(/.f64 #s(literal -1 binary64) n)","#s(literal -1 binary64)","n","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))","(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))","(+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))","(/.f64 #s(literal 1/3 binary64) n)","#s(literal 1/3 binary64)","n","(/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))","#s(literal 1/6 binary64)","(pow.f64 n #s(literal 3 binary64))","#s(literal 3 binary64)","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","x","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"locations":[["(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0],["(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","cost-diff",3],["(-.f64 (log1p.f64 x) (log.f64 x))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","cost-diff",0],["(neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))","cost-diff",1],["(*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n))","cost-diff",2],["(-.f64 x (log.f64 x))","cost-diff",0],["#s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))","cost-diff",0],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","cost-diff",0],["(log1p.f64 x)","cost-diff",0],["(/.f64 (log1p.f64 x) n)","cost-diff",0],["(exp.f64 (/.f64 (log1p.f64 x) n))","cost-diff",0],["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0]],"memory":[[-6798464,39963040]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/.f64 (log1p.f64 x) n)","(log1p.f64 x)","x","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)","#s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))","(-.f64 x (log.f64 x))","x","(log.f64 x)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (log.f64 x) (log1p.f64 x))","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","(/.f64 #s(literal -1 binary64) n)","#s(literal -1 binary64)","n","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))","(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (fma.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) x (/.f64 #s(literal -1/2 binary64) n)))","(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))","(-.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))","(+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))","(+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) n))","(/.f64 #s(literal 1/3 binary64) n)","#s(literal 1/3 binary64)","n","(/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))","#s(literal 1/6 binary64)","(pow.f64 n #s(literal 3 binary64))","#s(literal 3 binary64)","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","x","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n)))","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":235.427978515625,"type":"simplify"},{"compiler":[[354,42]],"locations":[["(fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))","accuracy",3.911602887505932],["(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","accuracy",12.660162789506748],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",23.256184063079623],["#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","accuracy",30.676815844662546],["(log1p.f64 x)","accuracy",0.0078125],["(*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n))","accuracy",0.313163769536884],["(-.f64 (log1p.f64 x) (log.f64 x))","accuracy",22.876922171089134],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","accuracy",28.85448697003561],["(-.f64 x (log.f64 x))","accuracy",0.015625],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)","accuracy",0.23046875],["#s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))","accuracy",24.34278844516974],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","accuracy",28.85448697003561],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","accuracy",0.23046875],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","accuracy",28.85448697003561],["#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","accuracy",37.386720165902034],["(exp.f64 (/.f64 (log1p.f64 x) n))","accuracy",0.0],["(log1p.f64 x)","accuracy",0.0078125],["(/.f64 (log1p.f64 x) n)","accuracy",0.08984375],["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",23.256184063079623]],"memory":[[-4096720,71951312]],"mixsample":[[23.218017578125,"adjust",800],[22.8955078125,"ival-div",0],[3.10205078125,"ival-exp",0],[0.830322265625,"ival-div",400],[25.09716796875,"ival-pow",1600],[0.13427734375,"ival-assert",0],[0.624755859375,"ival-div",1600],[0.009033203125,"ival-neg",800],[14.488525390625,"ival-sub",0],[2.0869140625,"ival-log1p",800],[11.75,"const",0],[2.127685546875,"ival-log",1600],[3.548095703125,"ival-log1p",400],[1.514892578125,"ival-log1p",1200],[25.995361328125,"ival-pow",0],[0.007080078125,"ival-mult",800],[11.600830078125,"ival-add",0],[0.010986328125,"ival-sub",800],[0.21142578125,"ival-add",400],[4.09033203125,"ival-log1p",0],[0.286376953125,"ival-div",2000],[4.5595703125,"ival-exp",1600],[21.380126953125,"ival-pow",400],[0.096435546875,"ival-div",2400],[0.141357421875,"ival-add",1200],[2.45068359375,"ival-exp",400],[2.925048828125,"ival-log1p",1600],[0.007080078125,"ival-div",2800],[9.05908203125,"adjust",2000],[0.8955078125,"ival-div",1200],[0.016845703125,"ival-add",1600],[15.552001953125,"ival-mult",0],[2.757080078125,"ival-log",400],[0.15380859375,"ival-log1p",2000],[0.919189453125,"ival-div",800],[0.281494140625,"ival-true",0],[5.134765625,"ival-log",0],[0.030029296875,"ival-log",800],[0.595947265625,"exact",0],[0.34619140625,"ival-add",800],[2.41552734375,"ival-neg",0]],"outcomes":[[124.962890625,1,"valid",134],[139.211181640625,2,"valid",97],[10.03759765625,0,"valid",25]],"time":321.98095703125,"type":"localize"},{"count":[[21,147]],"inputs":[["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/.f64 (log1p.f64 x) n)","(log1p.f64 x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)","#s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))","(-.f64 x (log.f64 x))","(*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n))","(neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","(-.f64 (log1p.f64 x) (log.f64 x))","(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))"]],"memory":[[-623696,53888560]],"outputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(/ x n)","(* x (+ (* -1/2 (/ x n)) (/ 1 n)))","(* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n)))","(* x (+ (* x (- (* x (+ (* -1/4 (/ x n)) (* 1/3 (/ 1 n)))) (* 1/2 (/ 1 n)))) (/ 1 n)))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(/ 1 x)","(log x)","(+ (log x) (* -1 x))","(+ (log x) (* x (- (* 1/2 x) 1)))","(+ (log x) (* x (- (* x (+ 1/2 (* -1/3 x))) 1)))","(- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))","(- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))","(/ 1 n)","(+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))","(+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(* -1 (/ (log (/ 1 x)) n))","(+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x)))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x))) (/ 1/2 (* n (pow x 2))))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (* 1/3 (/ 1 (* n (pow x 3)))))) (* 1/2 (/ 1 (* n (pow x 2)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* x (+ 1 (/ (log (/ 1 x)) x)))","(/ -1 x)","(/ (- (* 1/2 (/ 1 x)) 1) x)","(/ (- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2)))) x)","(/ (- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2)))) x)","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (/ 1 (* n (pow x 2)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (+ (/ 1 (* n (pow x 2))) (/ 1 (pow x 3)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 2) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* (pow x 2) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 2) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (/ 1 (* n (pow x 2)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (/ 1 (* n x)) (/ (log -1) n)))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x)) (/ (log -1) n)))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x)) (/ (log -1) n)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(* -1 (* x (- (+ (* -1 (/ (log (/ -1 x)) x)) (/ (log -1) x)) 1)))","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))) x))) x))","(* -1 (* x (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (+ (/ 1 (* n x)) (/ 1 (pow x 2)))) (* 1/2 (/ 1 n))) x)))))","(* (pow x 2) (- (+ (* -1 (/ (- (* -1 (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 (* n x))) x)) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))) (* 1/2 (/ 1 (pow n 2)))))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ (log (+ 1 x)) n)","(/ (- (log (+ 1 x)) (log x)) n)","(* -1 (/ (- (log x) (log (+ 1 x))) n))","(* 1/6 (/ x (pow n 3)))","(/ (+ (* 1/6 x) (* n (+ 1/2 (* -1/2 x)))) (pow n 3))","(/ (+ (* 1/6 x) (* n (+ 1/2 (+ (* -1/2 x) (* n (- (* 1/3 x) 1/2)))))) (pow n 3))","(* 1/6 (/ (pow x 3) (pow n 3)))","(/ (+ (* 1/6 (pow x 3)) (* n (* (pow x 2) (+ 1/2 (* -1/2 x))))) (pow n 3))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (* x (+ 1 (* x (- (* 1/3 x) 1/2))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (+ n (* x (+ 1 (* x (- (* 1/3 x) 1/2)))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(* 1/6 (/ (pow x 2) (pow n 3)))","(/ (+ (* 1/6 (pow x 2)) (* n (* x (+ 1/2 (* -1/2 x))))) (pow n 3))","(/ (+ (* 1/6 (pow x 2)) (* n (+ (* n (+ 1 (* x (- (* 1/3 x) 1/2)))) (* x (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(/ (- (* 1/3 x) 1/2) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/3 x) (* 1/2 (/ 1 n)))) 1/2) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/6 (/ x (pow n 2))) (+ (* 1/3 x) (* 1/2 (/ 1 n))))) 1/2) n)","(+ 1 (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n))","(+ 1 (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2))))","(+ 1 (+ (* 1/6 (/ (pow x 3) (pow n 3))) (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2)))))","(/ (+ 1 (* x (- (* 1/3 x) 1/2))) n)","(/ (+ 1 (+ (* x (- (* 1/3 x) 1/2)) (/ (* x (+ 1/2 (* -1/2 x))) n))) n)","(/ (+ 1 (+ (* 1/6 (/ (pow x 2) (pow n 2))) (+ (* x (- (* 1/3 x) 1/2)) (/ (* x (+ 1/2 (* -1/2 x))) n)))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(* -1 (/ (+ 1/2 (* -1/3 x)) n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (* -1/2 x)) n)) (* -1/3 x))) n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (+ (* -1/2 x) (* 1/6 (/ x n)))) n)) (* -1/3 x))) n))","(+ 1 (* -1 (/ (* x (- (* x (+ 1/2 (* -1/3 x))) 1)) n)))","(+ 1 (* -1 (/ (+ (* -1 (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(+ 1 (* -1 (/ (+ (* -1 (/ (+ (* 1/6 (/ (pow x 3) n)) (* (pow x 2) (+ 1/2 (* -1/2 x)))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(* -1 (/ (- (* x (+ 1/2 (* -1/3 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (* x (+ 1/2 (* -1/2 x))) n)) (* x (+ 1/2 (* -1/3 x)))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/6 (/ (pow x 2) n)) (* x (+ 1/2 (* -1/2 x)))) n)) (* x (+ 1/2 (* -1/3 x)))) 1) n))"]],"series":[[23.649169921875,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (- x (log x)) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (neg (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (log (+ 1 x)) (log x)) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)))","n","-inf"],[72.652099609375,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (- x (log x)) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (neg (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (log (+ 1 x)) (log x)) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)))","n","inf"],[18.555908203125,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (- x (log x)) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (neg (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (log (+ 1 x)) (log x)) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)))","n","0"],[6.673828125,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (- x (log x)) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (neg (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (log (+ 1 x)) (log x)) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)))","x","-inf"],[5.81005859375,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (- x (log x)) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (neg (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (log (+ 1 x)) (log x)) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)))","x","inf"],[4.47705078125,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (- x (log x)) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (neg (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (- (log (+ 1 x)) (log x)) (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ (* (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) x) 1) (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)))","x","0"]],"time":134.93994140625,"type":"series"},{"count":[[147,146]],"egraph":[[0,8294,2752,0.081527613],[2,5587,2957,0.02944627],[1,1842,3094,0.019505714],[0,600,3278,0.005933171]],"inputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(/ x n)","(* x (+ (* -1/2 (/ x n)) (/ 1 n)))","(* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n)))","(* x (+ (* x (- (* x (+ (* -1/4 (/ x n)) (* 1/3 (/ 1 n)))) (* 1/2 (/ 1 n)))) (/ 1 n)))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(/ 1 x)","(log x)","(+ (log x) (* -1 x))","(+ (log x) (* x (- (* 1/2 x) 1)))","(+ (log x) (* x (- (* x (+ 1/2 (* -1/3 x))) 1)))","(- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))","(- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))","(/ 1 n)","(+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))","(+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(* -1 (/ (log (/ 1 x)) n))","(+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x)))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x))) (/ 1/2 (* n (pow x 2))))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (* 1/3 (/ 1 (* n (pow x 3)))))) (* 1/2 (/ 1 (* n (pow x 2)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* x (+ 1 (/ (log (/ 1 x)) x)))","(/ -1 x)","(/ (- (* 1/2 (/ 1 x)) 1) x)","(/ (- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2)))) x)","(/ (- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2)))) x)","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (/ 1 (* n (pow x 2)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (+ (/ 1 (* n (pow x 2))) (/ 1 (pow x 3)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 2) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(* (pow x 2) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(* (pow x 2) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (/ 1 (* n (pow x 2)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (/ 1 (* n x)) (/ (log -1) n)))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x)) (/ (log -1) n)))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x)) (/ (log -1) n)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(* -1 (* x (- (+ (* -1 (/ (log (/ -1 x)) x)) (/ (log -1) x)) 1)))","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))) x))) x))","(* -1 (* x (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)))))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (+ (/ 1 (* n x)) (/ 1 (pow x 2)))) (* 1/2 (/ 1 n))) x)))))","(* (pow x 2) (- (+ (* -1 (/ (- (* -1 (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 (* n x))) x)) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))) (* 1/2 (/ 1 (pow n 2)))))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ (log (+ 1 x)) n)","(/ (- (log (+ 1 x)) (log x)) n)","(* -1 (/ (- (log x) (log (+ 1 x))) n))","(* 1/6 (/ x (pow n 3)))","(/ (+ (* 1/6 x) (* n (+ 1/2 (* -1/2 x)))) (pow n 3))","(/ (+ (* 1/6 x) (* n (+ 1/2 (+ (* -1/2 x) (* n (- (* 1/3 x) 1/2)))))) (pow n 3))","(* 1/6 (/ (pow x 3) (pow n 3)))","(/ (+ (* 1/6 (pow x 3)) (* n (* (pow x 2) (+ 1/2 (* -1/2 x))))) (pow n 3))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (* x (+ 1 (* x (- (* 1/3 x) 1/2))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (+ n (* x (+ 1 (* x (- (* 1/3 x) 1/2)))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(* 1/6 (/ (pow x 2) (pow n 3)))","(/ (+ (* 1/6 (pow x 2)) (* n (* x (+ 1/2 (* -1/2 x))))) (pow n 3))","(/ (+ (* 1/6 (pow x 2)) (* n (+ (* n (+ 1 (* x (- (* 1/3 x) 1/2)))) (* x (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(/ (- (* 1/3 x) 1/2) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/3 x) (* 1/2 (/ 1 n)))) 1/2) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/6 (/ x (pow n 2))) (+ (* 1/3 x) (* 1/2 (/ 1 n))))) 1/2) n)","(+ 1 (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n))","(+ 1 (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2))))","(+ 1 (+ (* 1/6 (/ (pow x 3) (pow n 3))) (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2)))))","(/ (+ 1 (* x (- (* 1/3 x) 1/2))) n)","(/ (+ 1 (+ (* x (- (* 1/3 x) 1/2)) (/ (* x (+ 1/2 (* -1/2 x))) n))) n)","(/ (+ 1 (+ (* 1/6 (/ (pow x 2) (pow n 2))) (+ (* x (- (* 1/3 x) 1/2)) (/ (* x (+ 1/2 (* -1/2 x))) n)))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(* -1 (/ (+ 1/2 (* -1/3 x)) n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (* -1/2 x)) n)) (* -1/3 x))) n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (+ (* -1/2 x) (* 1/6 (/ x n)))) n)) (* -1/3 x))) n))","(+ 1 (* -1 (/ (* x (- (* x (+ 1/2 (* -1/3 x))) 1)) n)))","(+ 1 (* -1 (/ (+ (* -1 (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(+ 1 (* -1 (/ (+ (* -1 (/ (+ (* 1/6 (/ (pow x 3) n)) (* (pow x 2) (+ 1/2 (* -1/2 x)))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(* -1 (/ (- (* x (+ 1/2 (* -1/3 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (* x (+ 1/2 (* -1/2 x))) n)) (* x (+ 1/2 (* -1/3 x)))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/6 (/ (pow x 2) n)) (* x (+ 1/2 (* -1/2 x)))) n)) (* x (+ 1/2 (* -1/3 x)))) 1) n))"]],"memory":[[-2712944,46467760]],"method":["egg-herbie"],"outputs":[["(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (+.f64 (/.f64 x n) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","1","#s(literal 1 binary64)","(+ 1 (/ x n))","(+.f64 (/.f64 x n) #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(/ x n)","(/.f64 x n)","(* x (+ (* -1/2 (/ x n)) (/ 1 n)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (/.f64 x n))","(* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n)))","(*.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n) x (/.f64 #s(literal 1 binary64) n)) x)","(* x (+ (* x (- (* x (+ (* -1/4 (/ x n)) (* 1/3 (/ 1 n)))) (* 1/2 (/ 1 n)))) (/ 1 n)))","(*.f64 (fma.f64 (fma.f64 (/.f64 x n) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) (/.f64 #s(literal -1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 (/ (log x) n))","(/.f64 (neg.f64 (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (/ x n))","(-.f64 (/.f64 x n) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (/.f64 x n) (/.f64 (neg.f64 (log.f64 x)) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))","(* -1 (log x))","(neg.f64 (log.f64 x))","(- x (log x))","(-.f64 x (log.f64 x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x) (log.f64 x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x) (log.f64 x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(log x)","(log.f64 x)","(+ (log x) (* -1 x))","(-.f64 (log.f64 x) x)","(+ (log x) (* x (- (* 1/2 x) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (log.f64 x))","(+ (log x) (* x (- (* x (+ 1/2 (* -1/3 x))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (log.f64 x))","(- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))","(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(/ 1 n)","(/.f64 #s(literal 1 binary64) n)","(+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))","(fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n))","(+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))","(fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(exp.f64 (/.f64 (log.f64 x) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(fma.f64 (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) x) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n))))","(* -1 (/ (log (/ 1 x)) n))","(/.f64 (log.f64 x) n)","(+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x)))","(+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (log.f64 x) n))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x))) (/ 1/2 (* n (pow x 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x) (/.f64 (log.f64 x) n))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (* 1/3 (/ 1 (* n (pow x 3)))))) (* 1/2 (/ 1 (* n (pow x 2)))))","(+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)) (/.f64 (log.f64 x) n))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(/ 1 (* n x))","(/.f64 (/.f64 #s(literal 1 binary64) x) n)","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal 1/2 binary64)) x)) x)","(* x (+ 1 (/ (log (/ 1 x)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) x)) x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* 1/2 (/ 1 x)) 1) x)","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)","(/ (- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2)))) x)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)","(/ (- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2)))) x)","(/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x))) x)","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)","(* x (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) n) n) (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/2 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) n) n) (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/2 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (/ 1 (* n (pow x 2)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) x) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) x)) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (+ (/ 1 (* n (pow x 2))) (/ 1 (pow x 3)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) x)) (/.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) x)) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))","(*.f64 (*.f64 x x) (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))))","(* (pow x 2) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (/ 1/2 (* (pow n 2) x)))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) n) n) (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/2 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) (*.f64 x x))","(* (pow x 2) (- (+ (* 1/6 (/ 1 (pow n 3))) (+ (* 1/3 (/ 1 n)) (+ (/ 1/2 (* (pow n 2) x)) (/ 1 (* n (pow x 2)))))) (+ (* 1/2 (/ 1 (pow n 2))) (/ 1/2 (* n x)))))","(*.f64 (-.f64 (+.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) x) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) x)) (/.f64 #s(literal 1/3 binary64) n)) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))) (*.f64 x x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x))) (neg.f64 x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x)) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(+.f64 (/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (/ 1 (* n x)) (/ (log -1) n)))","(+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x)) (/ (log -1) n)))","(fma.f64 (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))) #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x)) (/ (log -1) n)))","(+.f64 (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n) (/.f64 #s(literal -1/2 binary64) (*.f64 n x))) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)))) x) (/.f64 #s(literal 1 binary64) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal 1/2 binary64)) x)) x)","(* -1 (* x (- (+ (* -1 (/ (log (/ -1 x)) x)) (/ (log -1) x)) 1)))","(*.f64 (-.f64 (-.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) #s(literal 1 binary64)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x)) (neg.f64 x))","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))) x))) x))","(/.f64 (-.f64 (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(* -1 (* x (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))) x)","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))) x)))))","(*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)))))","(*.f64 (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (/.f64 #s(literal 1/2 binary64) n)) x) (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (* -1 (/ (- (+ (* 1/2 (/ 1 (pow n 2))) (+ (/ 1 (* n x)) (/ 1 (pow x 2)))) (* 1/2 (/ 1 n))) x)))))","(*.f64 (+.f64 (/.f64 (-.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (/.f64 (/.f64 #s(literal 1 binary64) x) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (/.f64 #s(literal 1/2 binary64) n)) x) (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (- (+ (* -1 (/ (- (* -1 (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 (* n x))) x)) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))) (* 1/2 (/ 1 (pow n 2)))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal -1 binary64) n) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(exp (/ (log (+ 1 x)) n))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/ (log (+ 1 x)) n)","(/.f64 (log1p.f64 x) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (log x) (log (+ 1 x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* 1/6 (/ x (pow n 3)))","(*.f64 (/.f64 x (pow.f64 n #s(literal 3 binary64))) #s(literal 1/6 binary64))","(/ (+ (* 1/6 x) (* n (+ 1/2 (* -1/2 x)))) (pow n 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n (*.f64 #s(literal 1/6 binary64) x)) (pow.f64 n #s(literal 3 binary64)))","(/ (+ (* 1/6 x) (* n (+ 1/2 (+ (* -1/2 x) (* n (- (* 1/3 x) 1/2)))))) (pow n 3))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))) n (*.f64 #s(literal 1/6 binary64) x)) (pow.f64 n #s(literal 3 binary64)))","(* 1/6 (/ (pow x 3) (pow n 3)))","(*.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) #s(literal 1/6 binary64))","(/ (+ (* 1/6 (pow x 3)) (* n (* (pow x 2) (+ 1/2 (* -1/2 x))))) (pow n 3))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n (*.f64 #s(literal 1/6 binary64) x))) (pow.f64 n #s(literal 3 binary64)))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (* x (+ 1 (* x (- (* 1/3 x) 1/2))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/.f64 (fma.f64 (*.f64 x (+.f64 n (*.f64 x (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)))))) n (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) (pow.f64 n #s(literal 3 binary64)))","(/ (+ (* 1/6 (pow x 3)) (* n (+ (* n (+ n (* x (+ 1 (* x (- (* 1/3 x) 1/2)))))) (* (pow x 2) (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/.f64 (fma.f64 (fma.f64 n n (*.f64 x (+.f64 n (*.f64 x (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))))))) n (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) (pow.f64 n #s(literal 3 binary64)))","(* 1/6 (/ (pow x 2) (pow n 3)))","(*.f64 (*.f64 x (/.f64 x (pow.f64 n #s(literal 3 binary64)))) #s(literal 1/6 binary64))","(/ (+ (* 1/6 (pow x 2)) (* n (* x (+ 1/2 (* -1/2 x))))) (pow n 3))","(/.f64 (*.f64 x (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n (*.f64 #s(literal 1/6 binary64) x))) (pow.f64 n #s(literal 3 binary64)))","(/ (+ (* 1/6 (pow x 2)) (* n (+ (* n (+ 1 (* x (- (* 1/3 x) 1/2)))) (* x (+ 1/2 (* -1/2 x)))))) (pow n 3))","(/.f64 (fma.f64 (+.f64 n (*.f64 x (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64))))) n (*.f64 (*.f64 #s(literal 1/6 binary64) x) x)) (pow.f64 n #s(literal 3 binary64)))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (log1p.f64 x)) (log.f64 x)) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (-.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)))) (fma.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(fma.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))))","(/ (- (* 1/3 x) 1/2) n)","(/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/3 x) (* 1/2 (/ 1 n)))) 1/2) n)","(/.f64 (fma.f64 x (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/2 binary64) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) n)","(/ (- (+ (* -1/2 (/ x n)) (+ (* 1/6 (/ x (pow n 2))) (+ (* 1/3 x) (* 1/2 (/ 1 n))))) 1/2) n)","(/.f64 (fma.f64 (/.f64 x n) (+.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal -1/2 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) x (/.f64 #s(literal 1/2 binary64) n)) #s(literal 1/2 binary64))) n)","(+ 1 (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (/.f64 x n) #s(literal 1 binary64))","(+ 1 (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2))))","(fma.f64 x (fma.f64 x (/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) n) (/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) n)) #s(literal 1 binary64))","(+ 1 (+ (* 1/6 (/ (pow x 3) (pow n 3))) (+ (/ (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) n) (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) (pow n 2)))))","(fma.f64 (pow.f64 (/.f64 x n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 x (fma.f64 x (/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) n) (/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) n)) #s(literal 1 binary64)))","(/ (+ 1 (* x (- (* 1/3 x) 1/2))) n)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) n)","(/ (+ 1 (+ (* x (- (* 1/3 x) 1/2)) (/ (* x (+ 1/2 (* -1/2 x))) n))) n)","(/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)","(/ (+ 1 (+ (* 1/6 (/ (pow x 2) (pow n 2))) (+ (* x (- (* 1/3 x) 1/2)) (/ (* x (+ 1/2 (* -1/2 x))) n)))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (*.f64 x (/.f64 x n)) (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (+.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (+.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -1/24 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1/6 binary64))) (neg.f64 n))) n) (log1p.f64 x))) (neg.f64 n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64) (neg.f64 (log1p.f64 x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) n) (log1p.f64 x)) n) #s(literal 1 binary64))","(* -1 (/ (+ 1/2 (* -1/3 x)) n))","(/.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) (neg.f64 n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (* -1/2 x)) n)) (* -1/3 x))) n))","(/.f64 (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n))) (neg.f64 n))","(* -1 (/ (+ 1/2 (+ (* -1 (/ (+ 1/2 (+ (* -1/2 x) (* 1/6 (/ x n)))) n)) (* -1/3 x))) n))","(/.f64 (-.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) (/.f64 (fma.f64 x (+.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) n)) (neg.f64 n))","(+ 1 (* -1 (/ (* x (- (* x (+ 1/2 (* -1/3 x))) 1)) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) n))","(+ 1 (* -1 (/ (+ (* -1 (/ (* (pow x 2) (+ 1/2 (* -1/2 x))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 x (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n))) #s(literal -1 binary64))) n))","(+ 1 (* -1 (/ (+ (* -1 (/ (+ (* 1/6 (/ (pow x 3) n)) (* (pow x 2) (+ 1/2 (* -1/2 x)))) n)) (* x (- (* x (+ 1/2 (* -1/3 x))) 1))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) (neg.f64 n))) n))","(* -1 (/ (- (* x (+ 1/2 (* -1/3 x))) 1) n))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (/ (* x (+ 1/2 (* -1/2 x))) n)) (* x (+ 1/2 (* -1/3 x)))) 1) n))","(/.f64 (fma.f64 x (fma.f64 #s(literal -1/3 binary64) x (-.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n))) #s(literal -1 binary64)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/6 (/ (pow x 2) n)) (* x (+ 1/2 (* -1/2 x)))) n)) (* x (+ 1/2 (* -1/3 x)))) 1) n))","(/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) (neg.f64 n))"]],"stop":[["iter limit",1],["node limit",1]],"time":236.97509765625,"type":"simplify"},{"count":[[21,439]],"egraph":[[0,8409,311,0.070982096],[2,3072,316,0.049357604],[1,351,326,0.013354718],[0,83,338,0.002920289],[0,51,348,0.000483896]],"inputs":[["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/.f64 (log1p.f64 x) n)","(log1p.f64 x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)","#s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))","(-.f64 x (log.f64 x))","(*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n))","(neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","(-.f64 (log1p.f64 x) (log.f64 x))","(fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n))"]],"memory":[[4169120,59061328]],"outputs":[["(*.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (-.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(-.f64 (/.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n)))))","(-.f64 (/.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (exp.f64 (/.f64 (log1p.f64 x) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(+.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (exp.f64 (/.f64 (log1p.f64 x) n)))","(+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (exp.f64 #s(literal 1 binary64)) (/.f64 (log1p.f64 x) n))","(pow.f64 (exp.f64 (pow.f64 n #s(literal -1 binary64))) (log1p.f64 x))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1/2 binary64))) (pow.f64 n #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal 1/2 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (neg.f64 (log1p.f64 x)) n)))","(/.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log1p.f64 x) (neg.f64 n))))","(/.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (/.f64 #s(literal -1/2 binary64) n)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) n)))","(exp.f64 (fma.f64 (log1p.f64 x) (/.f64 #s(literal 1/2 binary64) n) (*.f64 (log1p.f64 x) (/.f64 #s(literal 1/2 binary64) n))))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) (/.f64 #s(literal 1/2 binary64) n)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) n)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n))))","(exp.f64 (*.f64 (log1p.f64 x) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n))))","(exp.f64 (/.f64 (log1p.f64 x) n))","(*.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (log1p.f64 x))","(*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1/2 binary64) n)) (log1p.f64 x))","(*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x))","(*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n))","(*.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 n (log1p.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)) n)","(/.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (neg.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (log1p.f64 x)) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n (log1p.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (log1p.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n (log1p.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (log1p.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (log1p.f64 x)))","(/.f64 (log1p.f64 x) n)","(neg.f64 (/.f64 (neg.f64 (log1p.f64 x)) n))","(neg.f64 (/.f64 (log1p.f64 x) (neg.f64 n)))","(exp.f64 (*.f64 (log.f64 (/.f64 n (log1p.f64 x))) #s(literal -1 binary64)))","(+.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1/2 binary64) n))))","(log.f64 (exp.f64 (/.f64 (log1p.f64 x) n)))","(log1p.f64 x)","(neg.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x)))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(log.f64 (+.f64 #s(literal 1 binary64) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","(*.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) n))","(*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","(pow.f64 (/.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))) n))","(neg.f64 (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 n)))","(exp.f64 (*.f64 (log.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))))) #s(literal -1 binary64)))","#s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(exp.f64 (neg.f64 (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(*.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))) (/.f64 #s(literal -1 binary64) n))","(*.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(pow.f64 (/.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) #s(literal -1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) #s(literal 1 binary64))) (neg.f64 n))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 n))))","(/.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) #s(literal 1 binary64)) n)","(/.f64 (neg.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))) n))","(neg.f64 (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) (neg.f64 n)))","(exp.f64 (*.f64 (log.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))) #s(literal -1 binary64)))","#s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x)))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) x) (*.f64 x x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (log.f64 x) x) (-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) x) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (neg.f64 (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 x (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 x (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 x (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) x) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 x) x) (-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) x) (-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) (log.f64 x) x)","(fma.f64 (log.f64 x) #s(literal -1 binary64) x)","(fma.f64 #s(literal 1 binary64) x (neg.f64 (log.f64 x)))","(fma.f64 x #s(literal 1 binary64) (neg.f64 (log.f64 x)))","(-.f64 (/.f64 (*.f64 x x) (+.f64 (log.f64 x) x)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) x) (*.f64 x x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) x) (*.f64 x x))))","(-.f64 x (log.f64 x))","(+.f64 (neg.f64 (log.f64 x)) x)","(+.f64 x (neg.f64 (log.f64 x)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))))","(*.f64 #s(literal -1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) n))","(*.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(pow.f64 (/.f64 n (neg.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)))) (neg.f64 (*.f64 n #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))) (neg.f64 (*.f64 n #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))))) (neg.f64 (neg.f64 n)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))) (*.f64 n #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))) (neg.f64 n))","(/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (*.f64 n #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)) (neg.f64 n))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)))) (neg.f64 n))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))) (neg.f64 (*.f64 n #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))) (neg.f64 (neg.f64 n)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))) n)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (neg.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) (*.f64 n #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) (neg.f64 n))","(/.f64 #s(literal 1 binary64) (/.f64 n (neg.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)))))","(neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) n))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)) n))","(*.f64 #s(literal -1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))","(fma.f64 (log1p.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(-.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))","(-.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(+.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(+.f64 (neg.f64 (log1p.f64 x)) (*.f64 #s(literal -1 binary64) (neg.f64 (log.f64 x))))","(+.f64 (neg.f64 (log1p.f64 x)) (log.f64 x))","(+.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x)))","(log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(log.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(log.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (log1p.f64 x))","(fma.f64 (log.f64 x) #s(literal -1 binary64) (log1p.f64 x))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x))) (log.f64 (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 x) (log.f64 x))","(+.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))","(+.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))","(log.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64))) (pow.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64))))) (neg.f64 (+.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 n #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64)))) (+.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 n #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64))) (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))))","(/.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)))))","(/.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))) (-.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64))) #s(literal 1/4 binary64)) (*.f64 n n)) (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -6 binary64)) #s(literal 1/8 binary64) (*.f64 #s(literal -1/8 binary64) (pow.f64 n #s(literal -3 binary64)))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -4 binary64)) #s(literal 1/4 binary64) (fma.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal -2 binary64)) (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))))) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 (neg.f64 n) n) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) n (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1/2 binary64))) (pow.f64 n #s(literal -3 binary64)) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) (pow.f64 n #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (expm1.f64 (neg.f64 (log.f64 n))) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 n #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(fma.f64 x (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)))) (/.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 2 binary64)) (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)))))","(-.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal 1/2 binary64) n))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(+.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 #s(literal -1/2 binary64) n))","(+.f64 (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x))","(+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)))","(*.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)))))","(fma.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))))","(fma.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1/2 binary64) n))) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 3 binary64)) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) #s(literal 3 binary64)) (fma.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) (+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (pow.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))","(+.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))))","(+.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))) (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))))","#s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64))) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -2 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (/.f64 #s(literal -1 binary64) n)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 n #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) n)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (/.f64 #s(literal -1 binary64) n)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 n #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) n)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 n #s(literal -2 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (/.f64 #s(literal -1 binary64) n)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 n #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) n)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 n #s(literal -2 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64))) (-.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -2 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (/.f64 #s(literal -1 binary64) n))))","(/.f64 (neg.f64 (+.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 n #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) n)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 n #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) n)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -2 binary64))) (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (/.f64 #s(literal -1 binary64) n)))","(/.f64 (+.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 3 binary64))) (+.f64 (pow.f64 n #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) n))))","(/.f64 (+.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 3 binary64))) (+.f64 (-.f64 (pow.f64 n #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) n)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (/.f64 #s(literal -1 binary64) n)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 n #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) n)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (/.f64 #s(literal -1 binary64) n)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (pow.f64 n #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 n #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) n)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 n #s(literal -3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 n #s(literal -1/2 binary64)) (pow.f64 n #s(literal -1/2 binary64)) (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x))","(fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (pow.f64 n #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n) (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 n #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x))","(fma.f64 x (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) (pow.f64 n #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (/.f64 #s(literal -1 binary64) n))) (/.f64 (pow.f64 n #s(literal -2 binary64)) (fma.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x (/.f64 #s(literal -1 binary64) n))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x) (pow.f64 n #s(literal -1 binary64)))","(+.f64 (pow.f64 n #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/6 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) n)) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":291.375,"type":"rewrite"},{"compiler":[[26575,2687]],"memory":[[2502400,60110320]],"time":131.18505859375,"type":"eval"},{"alts":[["(-.f64 (exp.f64 #s(approx (/ (log (+ 1 x)) n) (/.f64 x n))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",28.613305604634167,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",50.549504161401046,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 #s(approx (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/.f64 (-.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) (/.f64 (fma.f64 x (+.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) n)) (neg.f64 n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",45.27157387092379,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",47.06662132598706,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) (neg.f64 n))) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",43.13085629596345,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",41.42091932982589,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",36.140811160513366,"binary64"],["(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 3 binary64)) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))))) (fma.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64)))))","fresh",52.25224111282882,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","fresh",26.84614736815703,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","done",26.799618493204516,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (*.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","fresh",37.97625094039755,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","fresh",26.54508565330697,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","fresh",26.310538910936696,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","next",30.201949366938923,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","next",26.014787225507632,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","fresh",26.01769704999973,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (/ (pow x (/ 1 n)) x) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n))","fresh",39.054353826159684,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","fresh",36.6299973986295,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","fresh",40.29630713099678,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","fresh",36.73806616355415,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","done",40.29630713099678,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","done",43.998615419999595,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","next",43.79878159325183,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) #s(approx (- x (log x)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) x)) x))) n))","fresh",44.276906037437215,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (fma.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal -1/2 binary64) (exp.f64 (/.f64 (log.f64 x) n))) n (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal 1/2 binary64))) (*.f64 n n))) x))","fresh",44.568947266225244,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","fresh",48.188402406739804,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))) n))","fresh",37.42960753693761,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","fresh",26.04670098598988,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","fresh",44.007091689525026,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","fresh",27.872892917488514,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","fresh",26.11045424074975,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))))) (/.f64 #s(literal -1 binary64) n)))","fresh",44.18345832490227,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","next",26.044415985276075,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","fresh",36.73806616355415,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","next",40.29630713099496,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","fresh",44.032150429768436,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","fresh",43.832316603020274,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","fresh",36.71318847130004,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","fresh",36.71318847130004,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","fresh",43.5573340287942,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","fresh",48.46278688969202,"binary64"]],"compiler":[[17,13],[31,18],[68,41],[67,39],[76,46],[19,13],[15,11],[83,32],[24,16],[23,14],[59,26],[38,21],[31,18],[27,16],[23,15],[22,14],[34,18],[29,18],[27,17],[35,23],[27,17],[28,17],[27,17],[37,22],[71,31],[49,25],[51,30],[23,15],[30,19],[23,14],[33,20],[45,25],[26,18],[38,25],[30,19],[31,20],[29,19],[40,25],[43,27],[41,26],[33,21],[17,13],[31,18],[68,41],[67,39],[76,46],[19,13],[83,32],[24,16],[59,26],[38,21],[31,18],[27,16],[23,15],[22,14],[34,18],[29,18],[27,17],[35,23],[27,17],[37,22],[71,31],[49,25],[51,30],[23,15],[30,19],[23,14],[33,20],[45,25],[26,18],[38,25],[30,19],[31,20],[29,19],[40,25],[43,27],[41,26],[33,21]],"count":[[646,41]],"kept":[{"done":[3,2],"fresh":[26,21],"new":[612,16],"picked":[5,2]}],"memory":[[-1092448,43051744]],"min-error":[[0.01171875,"binary64"]],"time":43.281982421875,"type":"prune"},{"egraph":[[0,8206,282,0.093678964],[11,7619,282,0.015597542],[10,5644,282,0.036075548],[9,5434,282,0.01661852],[8,5228,282,0.017915112],[7,4895,282,0.019726961],[6,4161,282,0.017963648],[5,2682,282,0.021472067],[4,743,282,0.01765334],[3,395,282,0.005332007],[2,183,286,0.001702514],[1,97,295,0.000922876],[0,59,301,0.000528025],[0,40,309,0.000358705]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(/.f64 x (+.f64 #s(literal 1 binary64) x))","x","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","(*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))","#s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(literal -1 binary64) n)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)","#s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))","(neg.f64 (log.f64 x))","(log.f64 x)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","(*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n))","(neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(/.f64 x (+.f64 #s(literal 1 binary64) x))","x","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) n)","#s(literal -1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x)))","(*.f64 (log1p.f64 x) n)","(log1p.f64 x)","x","n","(*.f64 n (log.f64 x))","(log.f64 x)","(*.f64 n n)"]],"locations":[["(*.f64 (log1p.f64 x) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","cost-diff",0],["(-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x)))","cost-diff",2],["(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","cost-diff",4],["(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","cost-diff",0],["(*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n))","cost-diff",1],["(neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","cost-diff",2],["(neg.f64 (log.f64 x))","cost-diff",0],["#s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))","cost-diff",0],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","cost-diff",0],["(*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))","cost-diff",1],["(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","cost-diff",0]],"memory":[[-322048,44012672]],"method":["egg-herbie"],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n)))","(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","(/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(/.f64 x (+.f64 #s(literal 1 binary64) x))","x","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n)))","(*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))","(/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n))","#s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(literal -1 binary64) n)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)","#s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))","(neg.f64 (log.f64 x))","(log.f64 x)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n)))","(*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n))","(/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))","(neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(/.f64 x (+.f64 #s(literal 1 binary64) x))","x","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) n)","#s(literal -1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(*.f64 (log1p.f64 x) n)","(log1p.f64 x)","x","n","(*.f64 n (log.f64 x))","(*.f64 (log.f64 x) n)","(log.f64 x)","(*.f64 n n)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":435.510009765625,"type":"simplify"},{"compiler":[[247,32]],"locations":[["(*.f64 n (log.f64 x))","accuracy",0.28515625],["(-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x)))","accuracy",19.864847697505827],["(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","accuracy",24.811639050362587],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","accuracy",28.85448697003561],["(/.f64 x (+.f64 #s(literal 1 binary64) x))","accuracy",0.01953125],["(*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n))","accuracy",0.313163769536884],["(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","accuracy",22.77964000924283],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","accuracy",28.85448697003561],["(log.f64 x)","accuracy",0.0],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)","accuracy",0.23046875],["#s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))","accuracy",25.124743124463873],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","accuracy",28.85448697003561],["(/.f64 #s(literal -1 binary64) n)","accuracy",0.0],["(*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))","accuracy",0.313163769536884],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","accuracy",28.85448697003561],["#s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))","accuracy",37.386720165902034],["(/.f64 x (+.f64 #s(literal 1 binary64) x))","accuracy",0.01953125],["(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","accuracy",0.23046875],["(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","accuracy",22.77964000924283],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","accuracy",28.85448697003561]],"memory":[[2642736,50961312]],"mixsample":[[17.318115234375,"ival-div",0],[12.25048828125,"adjust",800],[0.3046875,"ival-mult",1200],[1.539306640625,"ival-div",400],[25.861083984375,"ival-pow",1600],[0.1181640625,"ival-assert",0],[0.613037109375,"ival-div",1600],[0.003173828125,"ival-neg",800],[7.496337890625,"ival-sub",0],[1.062744140625,"ival-log1p",800],[0.935302734375,"ival-log",1600],[1.36083984375,"ival-log1p",400],[1.203857421875,"ival-log1p",1200],[13.204833984375,"ival-pow",0],[0.30419921875,"ival-mult",800],[3.17578125,"ival-add",0],[0.94775390625,"ival-log",1200],[0.0048828125,"ival-sub",800],[0.177734375,"ival-mult",1600],[0.77880859375,"ival-add",400],[3.024169921875,"ival-log1p",0],[0.13134765625,"ival-div",2000],[20.722900390625,"ival-pow",400],[0.01611328125,"ival-div",2400],[0.218017578125,"ival-add",1200],[1.0458984375,"ival-log1p",1600],[5.53515625,"adjust",2000],[0.384765625,"ival-div",1200],[10.826171875,"ival-mult",0],[0.191162109375,"ival-add",1600],[0.5458984375,"ival-mult",400],[1.2041015625,"ival-log",400],[0.502197265625,"ival-div",800],[0.256591796875,"ival-true",0],[19.727294921875,"ival-log",0],[0.902099609375,"ival-log",800],[0.355224609375,"exact",0],[0.41748046875,"ival-add",800],[7.548583984375,"ival-neg",0]],"outcomes":[[71.203125,1,"valid",102],[113.528564453125,2,"valid",97],[18.057373046875,0,"valid",57]],"time":235.370849609375,"type":"localize"},{"count":[[23,98]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)","#s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))","(neg.f64 (log.f64 x))","(neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","(*.f64 (log1p.f64 x) n)","(/.f64 x (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) n)","(log.f64 x)","(*.f64 n (log.f64 x))"]],"memory":[[-4062432,89174112]],"outputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(log x)","(+ (log x) (* -1 x))","(+ (log x) (* x (- (* 1/2 x) 1)))","(+ (log x) (* x (- (* x (+ 1/2 (* -1/3 x))) 1)))","(/ -1 x)","(* -1 (* n (log x)))","(- (* n x) (* n (log x)))","(- (* x (+ n (* -1/2 (* n x)))) (* n (log x)))","(- (* x (+ n (* x (+ (* -1/2 n) (* 1/3 (* n x)))))) (* n (log x)))","(* n x)","(* x (+ n (* -1/2 (* n x))))","(* x (+ n (* x (+ (* -1/2 n) (* 1/3 (* n x))))))","(* x (+ n (* x (+ (* -1/2 n) (* x (+ (* -1/4 (* n x)) (* 1/3 n)))))))","x","(* x (+ 1 (* -1 x)))","(* x (+ 1 (* x (- x 1))))","(* x (+ 1 (* x (- (* x (+ 1 (* -1 x))) 1))))","(* n (log x))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/ (- (* 1/2 (/ 1 x)) 1) x)","(/ (- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2)))) x)","(/ (- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2)))) x)","(log (/ 1 x))","(/ n x)","(/ (+ n (* -1/2 (/ n x))) x)","(/ (+ n (+ (* -1/2 (/ n x)) (* 1/3 (/ n (pow x 2))))) x)","(/ (+ n (+ (* -1/2 (/ n x)) (+ (* -1/4 (/ n (pow x 3))) (* 1/3 (/ n (pow x 2)))))) x)","(* -1 (* n (log (/ 1 x))))","(+ (* -1 (* n (log (/ 1 x)))) (/ n x))","(+ (* -1 (* n (log (/ 1 x)))) (+ (* -1/2 (/ n (pow x 2))) (/ n x)))","(+ (* -1 (* n (log (/ 1 x)))) (+ (* -1/2 (/ n (pow x 2))) (+ (* 1/3 (/ n (pow x 3))) (/ n x))))","1","(- 1 (/ 1 x))","(- (+ 1 (/ 1 (pow x 2))) (/ 1 x))","(- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3))))","(* -1 (log (/ 1 x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))) x))) x))","(* -1 (+ (log -1) (* -1 (log (/ -1 x)))))","(* -1 (/ (+ (* -1 n) (* 1/2 (/ n x))) x))","(* -1 (/ (+ (* -1 n) (* -1 (/ (+ (* -1/2 n) (* 1/3 (/ n x))) x))) x))","(* -1 (/ (+ (* -1 n) (* -1 (/ (+ (* -1 (/ (+ (* -1/3 n) (* 1/4 (/ n x))) x)) (* -1/2 n)) x))) x))","(* n (+ (log -1) (* -1 (log (/ -1 x)))))","(+ (* n (+ (log -1) (* -1 (log (/ -1 x))))) (/ n x))","(+ (* -1 (/ (+ (* -1 n) (* 1/2 (/ n x))) x)) (* n (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 n) (* -1 (/ (+ (* -1/2 n) (* 1/3 (/ n x))) x))) x)) (* n (+ (log -1) (* -1 (log (/ -1 x))))))","(+ 1 (* -1 (/ (- 1 (/ 1 x)) x)))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(* -1 (/ (log (/ x (+ 1 x))) n))","(* -1 (/ (- (log x) (log (+ 1 x))) n))","(/ (- (log (+ 1 x)) (log x)) n)","(* n (- (log (+ 1 x)) (log x)))","(* n (log (+ 1 x)))","(/ -1 n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (* n (- (* -1 (log (+ 1 x))) (* -1 (log x)))))"]],"series":[[35.36083984375,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (neg (- (log (+ 1 x)) (log x))) (/ -1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (neg (log x)) (neg (neg (log (/ x (+ 1 x))))) (* (neg (neg (log (/ x (+ 1 x))))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (* (log (+ 1 x)) n) (* n (log x))) (* n n)) (- (* (log (+ 1 x)) n) (* n (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (* (log (+ 1 x)) n) (/ x (+ 1 x)) (/ -1 n) (log x) (* n (log x)))","n","-inf"],[37.4638671875,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (neg (- (log (+ 1 x)) (log x))) (/ -1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (neg (log x)) (neg (neg (log (/ x (+ 1 x))))) (* (neg (neg (log (/ x (+ 1 x))))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (* (log (+ 1 x)) n) (* n (log x))) (* n n)) (- (* (log (+ 1 x)) n) (* n (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (* (log (+ 1 x)) n) (/ x (+ 1 x)) (/ -1 n) (log x) (* n (log x)))","n","inf"],[42.881103515625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (neg (- (log (+ 1 x)) (log x))) (/ -1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (neg (log x)) (neg (neg (log (/ x (+ 1 x))))) (* (neg (neg (log (/ x (+ 1 x))))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (* (log (+ 1 x)) n) (* n (log x))) (* n n)) (- (* (log (+ 1 x)) n) (* n (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (* (log (+ 1 x)) n) (/ x (+ 1 x)) (/ -1 n) (log x) (* n (log x)))","n","0"],[10.5849609375,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (neg (- (log (+ 1 x)) (log x))) (/ -1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (neg (log x)) (neg (neg (log (/ x (+ 1 x))))) (* (neg (neg (log (/ x (+ 1 x))))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (* (log (+ 1 x)) n) (* n (log x))) (* n n)) (- (* (log (+ 1 x)) n) (* n (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (* (log (+ 1 x)) n) (/ x (+ 1 x)) (/ -1 n) (log x) (* n (log x)))","x","-inf"],[10.380859375,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (neg (- (log (+ 1 x)) (log x))) (/ -1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (neg (log x)) (neg (neg (log (/ x (+ 1 x))))) (* (neg (neg (log (/ x (+ 1 x))))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (* (log (+ 1 x)) n) (* n (log x))) (* n n)) (- (* (log (+ 1 x)) n) (* n (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (* (log (+ 1 x)) n) (/ x (+ 1 x)) (/ -1 n) (log x) (* n (log x)))","x","inf"],[10.7890625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (neg (log (/ x (+ 1 x)))) n) (neg (log (/ x (+ 1 x)))) (log (/ x (+ 1 x))) (* (neg (- (log (+ 1 x)) (log x))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (neg (- (log (+ 1 x)) (log x))) (/ -1 x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (neg (log x)) (neg (neg (log (/ x (+ 1 x))))) (* (neg (neg (log (/ x (+ 1 x))))) (/ -1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (* (log (+ 1 x)) n) (* n (log x))) (* n n)) (- (* (log (+ 1 x)) n) (* n (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (* (log (+ 1 x)) n) (/ x (+ 1 x)) (/ -1 n) (log x) (* n (log x)))","x","0"]],"time":149.572021484375,"type":"series"},{"count":[[98,97]],"egraph":[[0,8133,1437,0.093348338],[2,3641,1547,0.028305624],[1,1362,1629,0.012692469],[0,442,1741,0.004026605]],"inputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(log x)","(+ (log x) (* -1 x))","(+ (log x) (* x (- (* 1/2 x) 1)))","(+ (log x) (* x (- (* x (+ 1/2 (* -1/3 x))) 1)))","(/ -1 x)","(* -1 (* n (log x)))","(- (* n x) (* n (log x)))","(- (* x (+ n (* -1/2 (* n x)))) (* n (log x)))","(- (* x (+ n (* x (+ (* -1/2 n) (* 1/3 (* n x)))))) (* n (log x)))","(* n x)","(* x (+ n (* -1/2 (* n x))))","(* x (+ n (* x (+ (* -1/2 n) (* 1/3 (* n x))))))","(* x (+ n (* x (+ (* -1/2 n) (* x (+ (* -1/4 (* n x)) (* 1/3 n)))))))","x","(* x (+ 1 (* -1 x)))","(* x (+ 1 (* x (- x 1))))","(* x (+ 1 (* x (- (* x (+ 1 (* -1 x))) 1))))","(* n (log x))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/ (- (* 1/2 (/ 1 x)) 1) x)","(/ (- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2)))) x)","(/ (- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2)))) x)","(log (/ 1 x))","(/ n x)","(/ (+ n (* -1/2 (/ n x))) x)","(/ (+ n (+ (* -1/2 (/ n x)) (* 1/3 (/ n (pow x 2))))) x)","(/ (+ n (+ (* -1/2 (/ n x)) (+ (* -1/4 (/ n (pow x 3))) (* 1/3 (/ n (pow x 2)))))) x)","(* -1 (* n (log (/ 1 x))))","(+ (* -1 (* n (log (/ 1 x)))) (/ n x))","(+ (* -1 (* n (log (/ 1 x)))) (+ (* -1/2 (/ n (pow x 2))) (/ n x)))","(+ (* -1 (* n (log (/ 1 x)))) (+ (* -1/2 (/ n (pow x 2))) (+ (* 1/3 (/ n (pow x 3))) (/ n x))))","1","(- 1 (/ 1 x))","(- (+ 1 (/ 1 (pow x 2))) (/ 1 x))","(- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3))))","(* -1 (log (/ 1 x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))) x))) x))","(* -1 (+ (log -1) (* -1 (log (/ -1 x)))))","(* -1 (/ (+ (* -1 n) (* 1/2 (/ n x))) x))","(* -1 (/ (+ (* -1 n) (* -1 (/ (+ (* -1/2 n) (* 1/3 (/ n x))) x))) x))","(* -1 (/ (+ (* -1 n) (* -1 (/ (+ (* -1 (/ (+ (* -1/3 n) (* 1/4 (/ n x))) x)) (* -1/2 n)) x))) x))","(* n (+ (log -1) (* -1 (log (/ -1 x)))))","(+ (* n (+ (log -1) (* -1 (log (/ -1 x))))) (/ n x))","(+ (* -1 (/ (+ (* -1 n) (* 1/2 (/ n x))) x)) (* n (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 n) (* -1 (/ (+ (* -1/2 n) (* 1/3 (/ n x))) x))) x)) (* n (+ (log -1) (* -1 (log (/ -1 x))))))","(+ 1 (* -1 (/ (- 1 (/ 1 x)) x)))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(* -1 (/ (log (/ x (+ 1 x))) n))","(* -1 (/ (- (log x) (log (+ 1 x))) n))","(/ (- (log (+ 1 x)) (log x)) n)","(* n (- (log (+ 1 x)) (log x)))","(* n (log (+ 1 x)))","(/ -1 n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (* n (- (* -1 (log (+ 1 x))) (* -1 (log x)))))"]],"memory":[[3992736,48253984]],"method":["egg-herbie"],"outputs":[["(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (+.f64 (/.f64 x n) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(* -1 (/ (log x) n))","(/.f64 (neg.f64 (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (/ x n))","(-.f64 (/.f64 x n) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (/.f64 x n) (/.f64 (neg.f64 (log.f64 x)) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (/.f64 x n) (/.f64 #s(literal -1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))","(* -1 (log x))","(neg.f64 (log.f64 x))","(- x (log x))","(-.f64 x (log.f64 x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x) x (-.f64 x (log.f64 x)))","(log x)","(log.f64 x)","(+ (log x) (* -1 x))","(-.f64 (log.f64 x) x)","(+ (log x) (* x (- (* 1/2 x) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (log.f64 x))","(+ (log x) (* x (- (* x (+ 1/2 (* -1/3 x))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (log.f64 x))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (* n (log x)))","(*.f64 (neg.f64 n) (log.f64 x))","(- (* n x) (* n (log x)))","(*.f64 (-.f64 x (log.f64 x)) n)","(- (* x (+ n (* -1/2 (* n x)))) (* n (log x)))","(fma.f64 (*.f64 (*.f64 n x) #s(literal -1/2 binary64)) x (*.f64 (-.f64 x (log.f64 x)) n))","(- (* x (+ n (* x (+ (* -1/2 n) (* 1/3 (* n x)))))) (* n (log x)))","(fma.f64 (*.f64 (*.f64 n (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x) x (*.f64 (-.f64 x (log.f64 x)) n))","(* n x)","(*.f64 n x)","(* x (+ n (* -1/2 (* n x))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) n) x)","(* x (+ n (* x (+ (* -1/2 n) (* 1/3 (* n x))))))","(*.f64 (fma.f64 (*.f64 n (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x n) x)","(* x (+ n (* x (+ (* -1/2 n) (* x (+ (* -1/4 (* n x)) (* 1/3 n)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 n (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) x (*.f64 #s(literal -1/2 binary64) n)) x n) x)","x","(* x (+ 1 (* -1 x)))","(*.f64 (-.f64 #s(literal 1 binary64) x) x)","(* x (+ 1 (* x (- x 1))))","(*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1 (* -1 x))) 1))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) x #s(literal 1 binary64)) x)","(* n (log x))","(*.f64 (log.f64 x) n)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ 1 (* n x))","(/.f64 (/.f64 #s(literal 1 binary64) x) n)","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)","(/ (- (* 1/2 (/ 1 x)) 1) x)","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)","(/ (- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2)))) x)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)","(/ (- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2)))) x)","(/.f64 (+.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(log (/ 1 x))","(neg.f64 (log.f64 x))","(/ n x)","(/.f64 n x)","(/ (+ n (* -1/2 (/ n x))) x)","(/.f64 (fma.f64 (/.f64 n x) #s(literal -1/2 binary64) n) x)","(/ (+ n (+ (* -1/2 (/ n x)) (* 1/3 (/ n (pow x 2))))) x)","(/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)","(/ (+ n (+ (* -1/2 (/ n x)) (+ (* -1/4 (/ n (pow x 3))) (* 1/3 (/ n (pow x 2)))))) x)","(/.f64 (fma.f64 (/.f64 n (pow.f64 x #s(literal 3 binary64))) #s(literal -1/4 binary64) (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n)) x)","(* -1 (* n (log (/ 1 x))))","(*.f64 (log.f64 x) n)","(+ (* -1 (* n (log (/ 1 x)))) (/ n x))","(fma.f64 (log.f64 x) n (/.f64 n x))","(+ (* -1 (* n (log (/ 1 x)))) (+ (* -1/2 (/ n (pow x 2))) (/ n x)))","(fma.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 n x) (*.f64 (log.f64 x) n))","(+ (* -1 (* n (log (/ 1 x)))) (+ (* -1/2 (/ n (pow x 2))) (+ (* 1/3 (/ n (pow x 3))) (/ n x))))","(fma.f64 (/.f64 (/.f64 n x) x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (fma.f64 (log.f64 x) n (/.f64 n x)))","1","#s(literal 1 binary64)","(- 1 (/ 1 x))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x))","(- (+ 1 (/ 1 (pow x 2))) (/ 1 x))","(-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","(- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3))))","(-.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (log (/ 1 x)))","(log.f64 x)","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x))) x)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n) (/.f64 (/.f64 #s(literal -1/2 binary64) x) n)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)))) x) (/.f64 #s(literal 1 binary64) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))) x))) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) x)","(* -1 (+ (log -1) (* -1 (log (/ -1 x)))))","(-.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))","(* -1 (/ (+ (* -1 n) (* 1/2 (/ n x))) x))","(/.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) (neg.f64 n)) (neg.f64 x))","(* -1 (/ (+ (* -1 n) (* -1 (/ (+ (* -1/2 n) (* 1/3 (/ n x))) x))) x))","(/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)","(* -1 (/ (+ (* -1 n) (* -1 (/ (+ (* -1 (/ (+ (* -1/3 n) (* 1/4 (/ n x))) x)) (* -1/2 n)) x))) x))","(/.f64 (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) n (/.f64 (fma.f64 (/.f64 n x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/3 binary64) n)) (neg.f64 x))) x) n) x)","(* n (+ (log -1) (* -1 (log (/ -1 x)))))","(*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)","(+ (* n (+ (log -1) (* -1 (log (/ -1 x))))) (/ n x))","(fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n (/.f64 n x))","(+ (* -1 (/ (+ (* -1 n) (* 1/2 (/ n x))) x)) (* n (+ (log -1) (* -1 (log (/ -1 x))))))","(fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n (/.f64 (fma.f64 (/.f64 n x) #s(literal 1/2 binary64) (neg.f64 n)) (neg.f64 x)))","(+ (* -1 (/ (+ (* -1 n) (* -1 (/ (+ (* -1/2 n) (* 1/3 (/ n x))) x))) x)) (* n (+ (log -1) (* -1 (log (/ -1 x))))))","(fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x))","(+ 1 (* -1 (/ (- 1 (/ 1 x)) x)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(* -1 (/ (log (/ x (+ 1 x))) n))","(/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))","(* -1 (/ (- (log x) (log (+ 1 x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* n (- (log (+ 1 x)) (log x)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* n (log (+ 1 x)))","(*.f64 (log1p.f64 x) n)","(/ -1 n)","(/.f64 #s(literal -1 binary64) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (-.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)))) (fma.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal -1/2 binary64) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n) #s(literal -1/24 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1/6 binary64))) (neg.f64 n))) n)) (neg.f64 n))","(* -1 (* n (- (* -1 (log (+ 1 x))) (* -1 (log x)))))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)"]],"stop":[["iter limit",1],["node limit",1]],"time":242.177001953125,"type":"simplify"},{"count":[[23,1384]],"egraph":[[0,8523,212,0.070575654],[2,1334,212,0.029498952],[1,213,212,0.004881979],[0,59,236,0.001677473],[0,40,261,0.000351035]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)","(neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)","#s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))","(neg.f64 (log.f64 x))","(neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","(/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n))","(-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","(*.f64 (log1p.f64 x) n)","(/.f64 x (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) n)","(log.f64 x)","(*.f64 n (log.f64 x))"]],"memory":[[6163984,72493104]],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n)) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) n) (/.f64 (pow.f64 n #s(literal -2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) n))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)) n))","(*.f64 (pow.f64 (/.f64 (*.f64 n n) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 n n) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64))) (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(*.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(*.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(*.f64 (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n))) (/.f64 #s(literal 1 binary64) (pow.f64 n #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(*.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal -1 binary64) (*.f64 n n)))","(*.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 n)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (neg.f64 (log.f64 x)) n)) (*.f64 (/.f64 (log1p.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)))) (fma.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) n) (/.f64 (log1p.f64 x) (neg.f64 n))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) (neg.f64 (/.f64 (log.f64 x) n)))) (-.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 (log.f64 x)) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log1p.f64 x) (neg.f64 n)) #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (neg.f64 (log.f64 x)) n) (fma.f64 (/.f64 (log1p.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (log1p.f64 x) (neg.f64 n))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) (*.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n)))))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) (neg.f64 (/.f64 (log.f64 x) n))) (*.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64)))) (neg.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n)))) (neg.f64 (pow.f64 n #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 n)) (*.f64 (neg.f64 n) (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 (neg.f64 n) (-.f64 (log.f64 x) (log1p.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 n)) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) n) (*.f64 n (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) (neg.f64 n)) (*.f64 (neg.f64 n) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (log.f64 x)) (*.f64 (neg.f64 n) (log1p.f64 x))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) n) (*.f64 n (*.f64 (/.f64 (log.f64 x) n) n))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 (neg.f64 n) n)) (*.f64 n (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 n (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 n n)) (*.f64 n (*.f64 (log.f64 x) n))) (pow.f64 n #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) n) (*.f64 n (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (/.f64 (log.f64 x) n) n))) (*.f64 (*.f64 (neg.f64 n) n) n))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 n) n)) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (*.f64 n n)) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n))) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 n n)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 n) n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) n) (*.f64 (*.f64 n n) (*.f64 (/.f64 (log.f64 x) n) n))) (pow.f64 n #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) n)) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) (*.f64 n n)) (*.f64 (*.f64 n n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 n (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (/.f64 (log.f64 x) n) n))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) n))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) n)) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 n n)) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (log.f64 x) n))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 n n)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64))) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64))) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n))) (pow.f64 n #s(literal 4 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n)))","(/.f64 (pow.f64 n #s(literal -2 binary64)) (pow.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n)))","(/.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n))","(/.f64 #s(literal -1 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)) (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))) (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n)) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n)) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 n #s(literal 4 binary64)) (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n) (/.f64 (neg.f64 (log.f64 x)) n))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64)) (/.f64 (log1p.f64 x) n))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x)) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x))))","(fma.f64 #s(literal 0 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)) (/.f64 (log1p.f64 x) n))","(fma.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log1p.f64 x) (neg.f64 n))))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)) (/.f64 (log1p.f64 x) n))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n)))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 (log.f64 (neg.f64 x)) (neg.f64 n)) (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (neg.f64 n)))","(-.f64 (/.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))) (/.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(-.f64 (/.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))) (/.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(-.f64 (/.f64 (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n)) (pow.f64 n #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 n n) (*.f64 (log.f64 x) n)) (pow.f64 n #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n n)) (/.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n n)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (*.f64 n n)) (/.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (*.f64 n n)))","(-.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (log1p.f64 x) (neg.f64 n)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(+.f64 (*.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))) (*.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(+.f64 (*.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))) (*.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(+.f64 (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)) (/.f64 (neg.f64 (log.f64 x)) n))","(+.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) (/.f64 (log1p.f64 x) n))","(+.f64 (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n)))","(+.f64 (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n)) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x))))","(+.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) #s(literal 0 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(+.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 0 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x))))","(+.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (/.f64 (log1p.f64 x) n))","(+.f64 (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))) (/.f64 (log1p.f64 x) n))","(+.f64 (/.f64 (neg.f64 (log.f64 x)) n) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)))","(+.f64 (/.f64 (neg.f64 (log.f64 x)) n) (neg.f64 (/.f64 (log1p.f64 x) (neg.f64 n))))","(+.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(+.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n)))","(*.f64 (/.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) n) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(*.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x))))","(*.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 n (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 n (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(*.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal -1 binary64) n))","(*.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 (/.f64 (log1p.f64 x) n) n)) (*.f64 (*.f64 (/.f64 (log.f64 x) n) n) (*.f64 (/.f64 (log.f64 x) n) n))) (fma.f64 (/.f64 (log1p.f64 x) n) n (*.f64 (/.f64 (log.f64 x) n) n)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))))) (+.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (log.f64 x) n) n) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 (/.f64 (log1p.f64 x) n) n) (fma.f64 (*.f64 (/.f64 (log.f64 x) n) n) (*.f64 (/.f64 (log.f64 x) n) n) (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 (/.f64 (log.f64 x) n) n)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (log1p.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) n) (*.f64 n (*.f64 (log.f64 x) n))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (log.f64 x)) (log1p.f64 x)))","(/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64)))","(/.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)) (neg.f64 (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (*.f64 n (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (*.f64 n (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (+.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (*.f64 n (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (*.f64 n (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 n))","(/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 n (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 n (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log1p.f64 x) (log1p.f64 x) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 (log.f64 x) (log1p.f64 x)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64) (neg.f64 (log.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 x)) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 x)) (*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x))))","(fma.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 x)) (log1p.f64 x))","(fma.f64 (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 x) (log.f64 x) #s(literal 0 binary64))) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 x) (log.f64 x) #s(literal 0 binary64))) (*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 x) (log.f64 x) #s(literal 0 binary64))) (log1p.f64 x))","(fma.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x)))))","(fma.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (log1p.f64 x) n) n (neg.f64 (*.f64 (/.f64 (log.f64 x) n) n)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 (log.f64 x) n) n)))","(fma.f64 (log1p.f64 x) #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64)))","(fma.f64 (log1p.f64 x) #s(literal 1 binary64) (neg.f64 (log.f64 x)))","(fma.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64) (log1p.f64 x))","(fma.f64 (log.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(fma.f64 (log.f64 x) #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x))))","(fma.f64 (log.f64 x) #s(literal -1 binary64) (log1p.f64 x))","(fma.f64 #s(literal -1 binary64) (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (log.f64 x) (log1p.f64 x))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) #s(literal 1 binary64)) (neg.f64 (*.f64 (/.f64 (log.f64 x) n) n)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (log.f64 x)) (*.f64 #s(literal 1 binary64) (log1p.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (*.f64 n (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (*.f64 n (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) n) (/.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (-.f64 (log.f64 x) (log1p.f64 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x))))","(-.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 (/.f64 (log.f64 x) n) n))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 (fma.f64 x x (neg.f64 x)) x x)))","(-.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (log.f64 (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 n)))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(-.f64 (log1p.f64 x) (log.f64 x))","(-.f64 (neg.f64 (log.f64 x)) (neg.f64 (log1p.f64 x)))","(+.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)) (neg.f64 (log.f64 x)))","(+.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64)) (log1p.f64 x))","(+.f64 (*.f64 #s(literal -1 binary64) (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x))) (neg.f64 (log.f64 x)))","(+.f64 (*.f64 #s(literal 1 binary64) (log1p.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 x))))","(+.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 x))) (*.f64 #s(literal 1 binary64) (log1p.f64 x)))","(+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(+.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (neg.f64 (*.f64 (/.f64 (log.f64 x) n) n)))","(+.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x)))))","(+.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(+.f64 (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64)))","(+.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(+.f64 (neg.f64 (log.f64 x)) (*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x))))","(+.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x))))))","(*.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(*.f64 #s(literal -1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (*.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 x))) (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (log.f64 (-.f64 #s(literal -1 binary64) x)))) (+.f64 (log.f64 (neg.f64 x)) (log.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))) (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x))) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x))) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (log1p.f64 x)) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)))) (-.f64 (log.f64 x) (neg.f64 (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))) (fma.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (neg.f64 x)) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 x)) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (log.f64 (-.f64 #s(literal -1 binary64) x)) (*.f64 (log.f64 (neg.f64 x)) (log.f64 (-.f64 #s(literal -1 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (log1p.f64 x)) (log.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))) (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (-.f64 (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x))) (*.f64 (log.f64 x) (neg.f64 (log1p.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)) (neg.f64 (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64) (log.f64 x))","(fma.f64 (log1p.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64) (*.f64 (log1p.f64 x) #s(literal -1 binary64)))","(fma.f64 (log.f64 x) #s(literal 1 binary64) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(fma.f64 (log.f64 x) #s(literal 1 binary64) (neg.f64 (log1p.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (log.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log.f64 x)) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log.f64 x)) (neg.f64 (log1p.f64 x)))","(fma.f64 #s(literal 1 binary64) (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x)) (*.f64 #s(literal 1 binary64) (log.f64 x)))","(fma.f64 #s(literal 1 binary64) (log.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (log.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))) (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x))))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))))","(-.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))","(-.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))))","(-.f64 (log.f64 (neg.f64 x)) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (log.f64 x) (log1p.f64 x))","(+.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)) (log.f64 x))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))) (*.f64 #s(literal 1 binary64) (log.f64 x)))","(+.f64 (*.f64 #s(literal 1 binary64) (log.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))))","(+.f64 (log.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log1p.f64 (neg.f64 x)))","(+.f64 (log.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(+.f64 (log.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(+.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(+.f64 (neg.f64 (log1p.f64 x)) (*.f64 #s(literal 1 binary64) (log.f64 x)))","(+.f64 (neg.f64 (log1p.f64 x)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(+.f64 (neg.f64 (log1p.f64 x)) (log.f64 x))","(+.f64 (log.f64 (neg.f64 x)) (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) x))))","(+.f64 (log.f64 (neg.f64 x)) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(+.f64 (log.f64 x) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(+.f64 (log.f64 x) (neg.f64 (log1p.f64 x)))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) n) #s(literal -1 binary64))","(*.f64 (neg.f64 (neg.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal -1 binary64) n))","(*.f64 (neg.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))","(*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 #s(literal -1 binary64) (/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) n))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n)))","(pow.f64 (/.f64 n (neg.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))))) n)","(/.f64 (neg.f64 (neg.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))) (neg.f64 n))","(/.f64 (neg.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))) n)","(/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n (neg.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 n (neg.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 n (neg.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","(neg.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n)))","(*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))","#s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (neg.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (neg.f64 x))","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal -1 binary64)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(*.f64 (pow.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n) #s(literal 1 binary64))","(*.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) (pow.f64 n #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) (neg.f64 n)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(pow.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) #s(literal -1 binary64))) n)","(/.f64 (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) #s(literal -1 binary64)) (neg.f64 n))","(/.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))) (neg.f64 n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) (*.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))))","(neg.f64 (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) (neg.f64 n)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) (neg.f64 n)))","(exp.f64 (*.f64 (log.f64 (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))))","#s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))","(neg.f64 (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x)))))","(*.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 x)))","(*.f64 (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 x) (log.f64 x) #s(literal 0 binary64))))","(*.f64 (log.f64 x) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (log.f64 x))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (log.f64 x)))","(/.f64 (neg.f64 (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 x) (log.f64 x) #s(literal 0 binary64))))","(/.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) (log.f64 x))","(/.f64 (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (neg.f64 (log.f64 x))))))","(/.f64 (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (log.f64 x) #s(literal 0 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (log.f64 x) #s(literal 0 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))","(neg.f64 (log.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (log.f64 x)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (log.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 (log.f64 x) (log.f64 x) #s(literal 0 binary64))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (log.f64 x) #s(literal 0 binary64))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (log.f64 x))","(+.f64 #s(literal 0 binary64) (neg.f64 (log.f64 x)))","(log.f64 (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x))))))","(*.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(*.f64 #s(literal -1 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (-.f64 (*.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 x))) (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (log.f64 (-.f64 #s(literal -1 binary64) x)))) (+.f64 (log.f64 (neg.f64 x)) (log.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))) (-.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x))) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (log1p.f64 x) (neg.f64 (log.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x))) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (log1p.f64 x)) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)))) (-.f64 (log.f64 x) (neg.f64 (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))) (fma.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (neg.f64 x)) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 x)) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (log.f64 (-.f64 #s(literal -1 binary64) x)) (*.f64 (log.f64 (neg.f64 x)) (log.f64 (-.f64 #s(literal -1 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (fma.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (log1p.f64 x)) (log.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))) (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (-.f64 (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x))) (*.f64 (log.f64 x) (neg.f64 (log1p.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))) (-.f64 (log.f64 x) (log1p.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64)) (neg.f64 (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (+.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64)) (pow.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log1p.f64 x) (log.f64 x)) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))))","(neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64) (log.f64 x))","(fma.f64 (log1p.f64 x) #s(literal -1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64) (*.f64 (log1p.f64 x) #s(literal -1 binary64)))","(fma.f64 (log.f64 x) #s(literal 1 binary64) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(fma.f64 (log.f64 x) #s(literal 1 binary64) (neg.f64 (log1p.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (log.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log.f64 x))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log.f64 x)) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log.f64 x)) (neg.f64 (log1p.f64 x)))","(fma.f64 #s(literal 1 binary64) (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x)) (*.f64 #s(literal 1 binary64) (log.f64 x)))","(fma.f64 #s(literal 1 binary64) (log.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (-.f64 (log1p.f64 x) (log.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))) (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x))))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (log.f64 x) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 x) (log.f64 x))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))))","(-.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))","(-.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))))","(-.f64 (log.f64 (neg.f64 x)) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(-.f64 (log.f64 x) (log1p.f64 x))","(+.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)) (log.f64 x))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))) (*.f64 #s(literal 1 binary64) (log.f64 x)))","(+.f64 (*.f64 #s(literal 1 binary64) (log.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))))","(+.f64 (log.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log1p.f64 (neg.f64 x)))","(+.f64 (log.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(+.f64 (log.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(+.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(+.f64 (neg.f64 (log1p.f64 x)) (*.f64 #s(literal 1 binary64) (log.f64 x)))","(+.f64 (neg.f64 (log1p.f64 x)) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(+.f64 (neg.f64 (log1p.f64 x)) (log.f64 x))","(+.f64 (log.f64 (neg.f64 x)) (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) x))))","(+.f64 (log.f64 (neg.f64 x)) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (-.f64 (log.f64 x) (log1p.f64 x)))","(+.f64 (log.f64 x) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(+.f64 (log.f64 x) (neg.f64 (log1p.f64 x)))","(log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n)) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) n) (/.f64 (pow.f64 n #s(literal -2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) n))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)) n))","(*.f64 (pow.f64 (/.f64 (*.f64 n n) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 n n) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64))) (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(*.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(*.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(*.f64 (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n))) (/.f64 #s(literal 1 binary64) (pow.f64 n #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(*.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal -1 binary64) (*.f64 n n)))","(*.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 n)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (neg.f64 (log.f64 x)) n)) (*.f64 (/.f64 (log1p.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)))) (fma.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) n) (/.f64 (log1p.f64 x) (neg.f64 n))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) (neg.f64 (/.f64 (log.f64 x) n)))) (-.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 (log.f64 x)) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log1p.f64 x) (neg.f64 n)) #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (neg.f64 (log.f64 x)) n) (fma.f64 (/.f64 (log1p.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (log1p.f64 x) (neg.f64 n))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) (*.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n)))))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) (neg.f64 (/.f64 (log.f64 x) n))) (*.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64)))) (neg.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n)))) (neg.f64 (pow.f64 n #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 n)) (*.f64 (neg.f64 n) (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 (neg.f64 n) (-.f64 (log.f64 x) (log1p.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 n)) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) n) (*.f64 n (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) (neg.f64 n)) (*.f64 (neg.f64 n) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (log.f64 x)) (*.f64 (neg.f64 n) (log1p.f64 x))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) n) (*.f64 n (*.f64 (/.f64 (log.f64 x) n) n))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 (neg.f64 n) n)) (*.f64 n (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 n (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 n n)) (*.f64 n (*.f64 (log.f64 x) n))) (pow.f64 n #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) n) (*.f64 n (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (/.f64 (log.f64 x) n) n))) (*.f64 (*.f64 (neg.f64 n) n) n))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 n) n)) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (*.f64 n n)) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n))) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 n n)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 n) n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) n) (*.f64 (*.f64 n n) (*.f64 (/.f64 (log.f64 x) n) n))) (pow.f64 n #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) n)) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) (*.f64 n n)) (*.f64 (*.f64 n n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 n (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (/.f64 (log.f64 x) n) n))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) n))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) n)) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 n n)) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (log.f64 x) n))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 n n)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64))) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64))) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n))) (pow.f64 n #s(literal 4 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n)))","(/.f64 (pow.f64 n #s(literal -2 binary64)) (pow.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n)))","(/.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n))","(/.f64 #s(literal -1 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)) (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))) (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n)) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n)) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 n #s(literal 4 binary64)) (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n) (/.f64 (neg.f64 (log.f64 x)) n))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64)) (/.f64 (log1p.f64 x) n))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x)) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x))))","(fma.f64 #s(literal 0 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)) (/.f64 (log1p.f64 x) n))","(fma.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log1p.f64 x) (neg.f64 n))))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)) (/.f64 (log1p.f64 x) n))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n)))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 (log.f64 (neg.f64 x)) (neg.f64 n)) (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (neg.f64 n)))","(-.f64 (/.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))) (/.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(-.f64 (/.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))) (/.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(-.f64 (/.f64 (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n)) (pow.f64 n #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 n n) (*.f64 (log.f64 x) n)) (pow.f64 n #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n n)) (/.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n n)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (*.f64 n n)) (/.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (*.f64 n n)))","(-.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (log1p.f64 x) (neg.f64 n)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(+.f64 (*.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))) (*.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(+.f64 (*.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))) (*.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(+.f64 (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)) (/.f64 (neg.f64 (log.f64 x)) n))","(+.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) (/.f64 (log1p.f64 x) n))","(+.f64 (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n)))","(+.f64 (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n)) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x))))","(+.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) #s(literal 0 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(+.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 0 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x))))","(+.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (/.f64 (log1p.f64 x) n))","(+.f64 (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))) (/.f64 (log1p.f64 x) n))","(+.f64 (/.f64 (neg.f64 (log.f64 x)) n) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)))","(+.f64 (/.f64 (neg.f64 (log.f64 x)) n) (neg.f64 (/.f64 (log1p.f64 x) (neg.f64 n))))","(+.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(+.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n)) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) n) (/.f64 (pow.f64 n #s(literal -2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) n) (/.f64 (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) n))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)) n))","(*.f64 (pow.f64 (/.f64 (*.f64 n n) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 n n) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64))) (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(*.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(*.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(*.f64 (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n))) (/.f64 #s(literal 1 binary64) (pow.f64 n #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(*.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal -1 binary64) (*.f64 n n)))","(*.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 n #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 n)))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(*.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) #s(literal 1 binary64))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (/.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(pow.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (neg.f64 (log.f64 x)) n)) (*.f64 (/.f64 (log1p.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)))) (fma.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) n) (/.f64 (log1p.f64 x) (neg.f64 n))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) (neg.f64 (/.f64 (log.f64 x) n)))) (-.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 (log.f64 x)) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log1p.f64 x) (neg.f64 n)) #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (neg.f64 (log.f64 x)) n) (fma.f64 (/.f64 (log1p.f64 x) (neg.f64 n)) (/.f64 (log1p.f64 x) (neg.f64 n)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (log1p.f64 x) (neg.f64 n))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n) (*.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n)))))","(/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) (neg.f64 (/.f64 (log.f64 x) n))) (*.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64)))) (neg.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n)))) (neg.f64 (pow.f64 n #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 n)) (*.f64 (neg.f64 n) (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 (neg.f64 n) (-.f64 (log.f64 x) (log1p.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 n)) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) n) (*.f64 n (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))) (neg.f64 n)) (*.f64 (neg.f64 n) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 n) (log.f64 x)) (*.f64 (neg.f64 n) (log1p.f64 x))) (*.f64 (neg.f64 n) (neg.f64 n)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) n) (*.f64 n (*.f64 (/.f64 (log.f64 x) n) n))) (*.f64 n n))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 (neg.f64 n) n)) (*.f64 n (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 n (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 n n)) (*.f64 n (*.f64 (log.f64 x) n))) (pow.f64 n #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) n) (*.f64 n (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (/.f64 (log.f64 x) n) n))) (*.f64 (*.f64 (neg.f64 n) n) n))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 n) n)) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (*.f64 n n)) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n))) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 n n)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) (*.f64 (*.f64 (neg.f64 n) n) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 n) n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) n) (*.f64 (*.f64 n n) (*.f64 (/.f64 (log.f64 x) n) n))) (pow.f64 n #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) n)) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) (*.f64 n n)) (*.f64 (*.f64 n n) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (-.f64 n (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (/.f64 (log.f64 x) n) n))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) n))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) n)) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 n) n)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 n n)) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 (log.f64 x) n))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (*.f64 n n)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n)) (/.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) n))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64))) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64))) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64))) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))","(/.f64 (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n))) (pow.f64 n #s(literal 4 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n)))","(/.f64 (pow.f64 n #s(literal -2 binary64)) (pow.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n)))","(/.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (neg.f64 n) n))","(/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n))","(/.f64 #s(literal -1 binary64) (/.f64 n (-.f64 (log.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (neg.f64 n))","(/.f64 (pow.f64 n #s(literal -1 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 n #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 n #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)) (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n)))) (-.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n n)) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (*.f64 n n)) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 n #s(literal 4 binary64)) (fma.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n) (*.f64 (*.f64 (neg.f64 n) n) (*.f64 (log.f64 x) n)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(neg.f64 (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (/.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) n)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n) (/.f64 (neg.f64 (log.f64 x)) n))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (neg.f64 (*.f64 (log1p.f64 x) n)) (/.f64 #s(literal -1 binary64) (*.f64 n n)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64)) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64)) (/.f64 (log1p.f64 x) n))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x)) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n)))","(fma.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x))))","(fma.f64 #s(literal 0 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 #s(literal 2 binary64) (log.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) #s(literal 1/2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (*.f64 (log1p.f64 x) n) (pow.f64 n #s(literal -2 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (*.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64)) (/.f64 (log1p.f64 x) n))","(fma.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) n) (neg.f64 (/.f64 (log1p.f64 x) (neg.f64 n))))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (log1p.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (log1p.f64 x) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x)) (/.f64 (log1p.f64 x) n))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 n (*.f64 (log1p.f64 x) (pow.f64 n #s(literal -2 binary64))) (neg.f64 (/.f64 (log.f64 x) n)))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n)))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) n))","(-.f64 (/.f64 (log.f64 (neg.f64 x)) (neg.f64 n)) (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (neg.f64 n)))","(-.f64 (/.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))) (/.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (+.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))","(-.f64 (/.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))) (/.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))))))","(-.f64 (/.f64 (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 n n)) (pow.f64 n #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 n n) (*.f64 (log.f64 x) n)) (pow.f64 n #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 n n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (*.f64 (*.f64 n n) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) n)) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n n)) (/.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 n n)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (*.f64 n n)) (/.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (*.f64 n n)))","(-.f64 (/.f64 (neg.f64 (log.f64 x)) n) (/.f64 (log1p.f64 x) (neg.f64 n)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log.f64 x) (log1p.f64 x)) n))","(-.f64 (/.f64 (log1p.f64 x) n) (/.f64 (log.f64 x) n))","(exp.f64 (*.f64 (log.f64 (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(+.f64 (*.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))) (*.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(+.f64 (*.f64 (neg.f64 (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))) (*.f64 (log1p.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))))","(+.f64 (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)) (/.f64 (neg.f64 (log.f64 x)) n))","(+.f64 (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))) (/.f64 (log1p.f64 x) n))","(+.f64 (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n)))","(+.f64 (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (log1p.f64 x) n)) (*.f64 (pow.f64 n #s(literal -2 binary64)) (*.f64 (neg.f64 n) (log.f64 x))))","(+.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) #s(literal 0 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x)) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(+.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64)) (log1p.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (log1p.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) n) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 0 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) n) (log.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) n) (neg.f64 (log1p.f64 x))))","(+.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 0 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))) (/.f64 (log1p.f64 x) n))","(+.f64 (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))) (/.f64 (log1p.f64 x) n))","(+.f64 (/.f64 (neg.f64 (log.f64 x)) n) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) n)))","(+.f64 (/.f64 (neg.f64 (log.f64 x)) n) (neg.f64 (/.f64 (log1p.f64 x) (neg.f64 n))))","(+.f64 #s(literal 0 binary64) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (/.f64 (log.f64 x) n)) #s(literal 1 binary64)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 (log.f64 x)) (pow.f64 n #s(literal -1 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log.f64 x) n))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (pow.f64 n #s(literal -1 binary64)) (neg.f64 (log.f64 x))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (pow.f64 n #s(literal -2 binary64))))","(+.f64 (/.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (*.f64 (log.f64 x) (pow.f64 n #s(literal -2 binary64)))))","(+.f64 (/.f64 (log1p.f64 x) n) (neg.f64 (/.f64 (log.f64 x) n)))","(*.f64 (/.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) n) (/.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) (+.f64 (log1p.f64 x) (log.f64 x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (log.f64 x)))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 #s(literal 1 binary64) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(pow.f64 (pow.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))) (*.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))) (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (log1p.f64 x) (*.f64 (log1p.f64 x) n)) (+.f64 (log1p.f64 x) (log.f64 x))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (-.f64 (*.f64 (neg.f64 n) (log.f64 x)) (*.f64 (log1p.f64 x) n)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 x)) (*.f64 (log1p.f64 x) n)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (*.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (log.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64))) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (log.f64 x))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64))) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))))","(/.f64 n (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (log.f64 x))))) (-.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (log1p.f64 x) n) (log1p.f64 x)) n) (/.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (log1p.f64 x) n) n) n) (/.f64 (log1p.f64 x) (+.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (/.f64 (*.f64 n n) (+.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(fma.f64 (/.f64 (*.f64 n n) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(fma.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (/.f64 (*.f64 (log1p.f64 x) n) (+.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(fma.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (pow.f64 (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(fma.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(fma.f64 (neg.f64 n) (log.f64 x) (*.f64 (log1p.f64 x) n))","(fma.f64 #s(literal 0 binary64) n (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (/.f64 (log1p.f64 x) n) (/.f64 (*.f64 n (*.f64 (log1p.f64 x) n)) (+.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(fma.f64 (log1p.f64 x) n (*.f64 (neg.f64 n) (log.f64 x)))","(fma.f64 (neg.f64 (log.f64 x)) n (*.f64 (log1p.f64 x) n))","(fma.f64 (log.f64 x) (neg.f64 n) (*.f64 (log1p.f64 x) n))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 x) n) (*.f64 (log1p.f64 x) n))","(fma.f64 n #s(literal 0 binary64) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(fma.f64 n (log1p.f64 x) (*.f64 (neg.f64 n) (log.f64 x)))","(fma.f64 n (neg.f64 (log.f64 x)) (*.f64 (log1p.f64 x) n))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (log1p.f64 x) (*.f64 (log1p.f64 x) n)) (+.f64 (log1p.f64 x) (log.f64 x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))))","(-.f64 #s(literal 0 binary64) (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(-.f64 (*.f64 (log1p.f64 x) n) (*.f64 (log.f64 x) n))","(+.f64 (*.f64 n #s(literal 0 binary64)) (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x))))","(+.f64 (*.f64 #s(literal 0 binary64) n) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(+.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 2 binary64)) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))))))","(+.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 x) n) (*.f64 n (+.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (*.f64 (log1p.f64 x) n) #s(literal 2 binary64))))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 x)) (*.f64 (log1p.f64 x) n))","(+.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(*.f64 (log1p.f64 x) n)","(*.f64 n (log1p.f64 x))","(/.f64 (log1p.f64 x) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(*.f64 (neg.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))))","(*.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 x (+.f64 #s(literal 1 binary64) x)))","(*.f64 x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64))","(pow.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(/.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 x) (-.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 x (+.f64 #s(literal 1 binary64) x))","(neg.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)))","(fma.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) x (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 x)))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (neg.f64 x)) (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 x x) (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64) (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (neg.f64 x))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 x x) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (fma.f64 x x (neg.f64 x)) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (*.f64 x x) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(fma.f64 #s(literal 1 binary64) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (neg.f64 x)) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 x (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (*.f64 #s(literal -1 binary64) (/.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x)) (/.f64 x (-.f64 #s(literal -1 binary64) x)))","(-.f64 #s(literal 0 binary64) (/.f64 x (-.f64 #s(literal -1 binary64) x)))","(exp.f64 (-.f64 (log.f64 x) (log1p.f64 x)))","(+.f64 (*.f64 x (/.f64 x (fma.f64 x x #s(literal -1 binary64)))) (*.f64 #s(literal -1 binary64) (/.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(+.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 x x) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (*.f64 x x) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (fma.f64 x x (neg.f64 x)) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 x x (neg.f64 x)) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) x) (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1 binary64)) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 x)))","(+.f64 (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(+.f64 (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 x x)) (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(+.f64 (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (neg.f64 x))) (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (neg.f64 x))))","(*.f64 (pow.f64 (neg.f64 n) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 n) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 n #s(literal -1 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) n))","(pow.f64 (neg.f64 n) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) n)","(/.f64 #s(literal 1 binary64) (neg.f64 n))","(neg.f64 (pow.f64 n #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 n #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 n)) #s(literal -1 binary64)))","(*.f64 (log.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (log.f64 x)))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64))) (neg.f64 (log.f64 x)))","(neg.f64 (neg.f64 (log.f64 x)))","(fma.f64 (log.f64 x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log.f64 x)) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (log.f64 x)))","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 0 binary64))","(log.f64 x)","(*.f64 (log.f64 x) n)","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 n) (log.f64 x)))","(*.f64 n (log.f64 x))","(/.f64 (log.f64 x) (pow.f64 n #s(literal -1 binary64)))","(neg.f64 (*.f64 (neg.f64 n) (log.f64 x)))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 n) (log.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":276.04296875,"type":"rewrite"},{"compiler":[[40959,4270]],"memory":[[2754272,108045232]],"time":190.131103515625,"type":"eval"},{"alts":[["(-.f64 (exp.f64 #s(approx (/ (log (+ 1 x)) n) (/.f64 x n))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",28.613305604634167,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",50.549504161401046,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 #s(approx (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/.f64 (-.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) (/.f64 (fma.f64 x (+.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) n)) (neg.f64 n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",45.27157387092379,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",47.06662132598706,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) (neg.f64 n))) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",43.13085629596345,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",41.42091932982589,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",36.140811160513366,"binary64"],["(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 3 binary64)) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))))) (fma.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64)))))","fresh",52.25224111282882,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","fresh",26.84614736815703,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","done",26.799618493204516,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) n))","fresh",26.13020974177296,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (*.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","fresh",37.97625094039755,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","fresh",26.54508565330697,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 (neg.f64 n) n)) (*.f64 n (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 n (*.f64 (neg.f64 n) n))))","fresh",51.31445621139699,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) n)) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) n))))","fresh",54.9286759424687,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","done",26.014787225507632,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","fresh",43.985138279020255,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","fresh",26.01769704999973,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (/ (pow x (/ 1 n)) x) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n))","fresh",39.054353826159684,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","fresh",36.770235614451884,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","fresh",36.770235614451884,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","fresh",38.54745766296926,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","fresh",38.038905623955856,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","fresh",36.73806616355415,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","done",40.29630713099678,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","done",43.998615419999595,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","done",43.79878159325183,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","fresh",48.188402406739804,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))) n))","fresh",37.42960753693761,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","fresh",40.5862600035904,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","fresh",26.04670098598988,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","fresh",43.807257862776865,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","fresh",27.872892917488514,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal -1 binary64) (*.f64 n n))))","fresh",29.716544858373652,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","done",26.044415985276075,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (*.f64 (pow.f64 (neg.f64 n) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 n) #s(literal -1/2 binary64)))))","fresh",39.861668859554946,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","done",40.29630713099496,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","fresh",44.032150429768436,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","fresh",43.832316603020274,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","fresh",36.71318847130004,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","fresh",48.46278688969202,"binary64"]],"compiler":[[2441,439],[17,13],[31,18],[68,41],[67,39],[76,46],[19,13],[15,11],[83,32],[24,16],[23,14],[77,24],[59,26],[38,21],[40,21],[42,21],[23,15],[25,16],[22,14],[34,18],[42,25],[43,26],[33,19],[35,21],[35,23],[27,17],[28,17],[27,17],[49,25],[51,30],[31,21],[23,15],[29,19],[23,14],[28,18],[26,18],[32,20],[30,19],[31,20],[29,19],[40,25],[33,21]],"count":[[1186,41]],"kept":[{"done":[4,4],"fresh":[32,21],"new":[1145,12],"picked":[5,4]}],"memory":[[-7123616,67198720]],"min-error":[[0.0078125,"binary64"]],"time":57.68798828125,"type":"prune"},{"accuracy":[4.158961108920335],"baseline":[19.64284102853086],"branch":[["x",4.158961108920335,2,"binary64"],["n",5.958420287599429,3,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",6.406346388957231,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",5.989670247098942,3,"binary64"]],"compiler":[[1,2],[1,2],[13,8],[3,4]],"count":[[66,2]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) #s(approx (- x (log x)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) x)) x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (/ (pow x (/ 1 n)) x) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) (neg.f64 n))) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 #s(approx (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/.f64 (-.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) (/.f64 (fma.f64 x (+.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) n)) (neg.f64 n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))))","(-.f64 (exp.f64 #s(approx (/ (log (+ 1 x)) n) (/.f64 x n))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (log1p.f64 x) n) (*.f64 n (log.f64 x))) (*.f64 n n)))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (*.f64 n (-.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 #s(literal -1 binary64) (*.f64 n n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 (neg.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) x) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 x) n) (*.f64 (neg.f64 n) n)) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 (*.f64 n n) (*.f64 (neg.f64 n) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (*.f64 (*.f64 (/.f64 (log1p.f64 x) n) n) (*.f64 (neg.f64 n) n)) (*.f64 n (*.f64 (neg.f64 n) (log.f64 x)))) (*.f64 n (*.f64 (neg.f64 n) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (+.f64 (fma.f64 (/.f64 (log.f64 x) x) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) x)) (log.f64 x)) n)) #s(literal 1 binary64)) (neg.f64 n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (/.f64 #s(literal 1/2 binary64) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (*.f64 (pow.f64 (neg.f64 n) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 n) #s(literal -1/2 binary64)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n (+.f64 (log.f64 x) (log1p.f64 x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (fma.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal -1/2 binary64) (exp.f64 (/.f64 (log.f64 x) n))) n (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal 1/2 binary64))) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (pow.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))))) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (*.f64 n (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (/.f64 (pow.f64 (fma.f64 (log.f64 x) (+.f64 (log.f64 x) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 2 binary64)) (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 2 binary64))) (*.f64 n (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x)))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (+.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) #s(literal 3 binary64)) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 6 binary64))))) (fma.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (-.f64 (+.f64 (pow.f64 (fma.f64 x x x) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) n))) (exp.f64 (*.f64 (/.f64 (log1p.f64 x) n) #s(literal 4 binary64)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (fma.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))))) n))"]],"memory":[[425440,32947760]],"oracle":[63.946527357043315],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))"]],"repr":["binary64"],"time":64.741943359375,"times":[[15.177978515625,"x"],[15.715087890625,"n"],[13.429931640625,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[15.8359375,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[7.852129907461695],"baseline":[26.014787225507632],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",8.128488899930474,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",7.852129907461695,3,"binary64"],["n",7.852129907461695,4,"binary64"],["x",15.048363449702366,4,"binary64"]],"compiler":[[13,8],[3,4],[1,2],[1,2]],"count":[[39,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) #s(approx (- x (log x)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) x)) x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (/ (pow x (/ 1 n)) x) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) (neg.f64 n))) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 #s(approx (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/.f64 (-.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) (/.f64 (fma.f64 x (+.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) n)) (neg.f64 n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) n)))"]],"memory":[[-2182960,21644992]],"oracle":[63.51091741062599],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) (neg.f64 n))) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"repr":["binary64"],"time":38.611083984375,"times":[[7.3330078125,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[9.467041015625,"(/.f64 #s(literal 1 binary64) n)"],[9.10888671875,"n"],[9.47509765625,"x"]],"type":"regimes"},{"accuracy":[8.36965375585249],"baseline":[26.014787225507632],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",8.646012748321269,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",8.36965375585249,3,"binary64"]],"compiler":[[13,8],[3,4]],"count":[[35,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) #s(approx (- x (log x)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) x)) x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (/ (pow x (/ 1 n)) x) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"memory":[[1574000,11120928]],"oracle":[63.432573037406925],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"repr":["binary64"],"time":22.778076171875,"times":[[11.05615234375,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[8.657958984375,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[8.175908841339494],"baseline":[26.014787225507632],"branch":[["n",8.175908841339494,5,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",10.114906003203375,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",8.175908841339494,4,"binary64"]],"compiler":[[1,2],[13,8],[3,4]],"count":[[33,4]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) #s(approx (- x (log x)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) x)) x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (/ (pow x (/ 1 n)) x) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n))"]],"memory":[[-1491536,14721200]],"oracle":[63.24713479415647],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))"]],"repr":["binary64"],"time":28.98193359375,"times":[[8.740966796875,"n"],[8.007080078125,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[9.616943359375,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[8.222437716292008],"baseline":[26.014787225507632],"branch":[["(/.f64 #s(literal 1 binary64) n)",8.222437716292008,4,"binary64"]],"compiler":[[3,4]],"count":[[31,4]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) #s(approx (- x (log x)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (log.f64 x) x)) x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (neg.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 #s(literal -1 binary64) n)))"]],"memory":[[6161520,6161520]],"oracle":[63.24435320911834],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))"]],"repr":["binary64"],"time":11.173095703125,"times":[[8.9560546875,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[8.367811671479599],"baseline":[26.014787225507632],"branch":[["(/.f64 #s(literal 1 binary64) n)",8.367811671479599,4,"binary64"]],"compiler":[[3,4]],"count":[[28,4]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))"]],"memory":[[-2494672,5662544]],"oracle":[63.24435320911834],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))"]],"repr":["binary64"],"time":11.91796875,"times":[[9.5908203125,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[10.299145548764306],"baseline":[26.014787225507632],"branch":[["n",16.77848368625202,4,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",10.299145548764306,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",16.778483686252027,4,"binary64"]],"compiler":[[1,2],[13,8],[3,4]],"count":[[27,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))"]],"memory":[[-6997456,12850128]],"oracle":[63.24435320911834],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"repr":["binary64"],"time":27.205810546875,"times":[[8.10205078125,"n"],[6.632080078125,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[9.501953125,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[10.302055373256403],"baseline":[26.01769704999973],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",10.302055373256403,3,"binary64"]],"compiler":[[13,8]],"count":[[26,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))"]],"memory":[[4937840,4937840]],"oracle":[63.24435320911834],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"repr":["binary64"],"time":8.9140625,"times":[[6.93408203125,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"type":"regimes"},{"accuracy":[21.64305132626213],"baseline":[36.140811160513366],"branch":[["(/.f64 #s(literal 1 binary64) n)",22.604377825379128,7,"binary64"],["n",22.604377825379135,7,"binary64"],["x",21.64305132626213,4,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",26.925426951774543,3,"binary64"]],"compiler":[[3,4],[1,2],[1,2],[13,8]],"count":[[25,4]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 n #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))))))"]],"memory":[[-231232,15861344]],"oracle":[63.24435320911834],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))"]],"repr":["binary64"],"time":28.77197265625,"times":[[6.39306640625,"(/.f64 #s(literal 1 binary64) n)"],[6.8349609375,"n"],[6.594970703125,"x"],[6.69677734375,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"type":"regimes"},{"accuracy":[22.34237688260178],"baseline":[36.140811160513366],"branch":[["x",22.34237688260178,4,"binary64"]],"compiler":[[1,2]],"count":[[22,4]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (-.f64 (log.f64 x) x)) (/.f64 #s(literal -1 binary64) n)))"]],"memory":[[-4345664,4764112]],"oracle":[63.22656865889385],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n))"]],"repr":["binary64"],"time":7.423095703125,"times":[[5.9580078125,"x"]],"type":"regimes"},{"accuracy":[22.386462274242547],"baseline":[36.140811160513366],"branch":[["x",22.386462274242547,4,"binary64"]],"compiler":[[1,2]],"count":[[20,4]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (log.f64 x)) (/.f64 #s(literal -1 binary64) n)))"]],"memory":[[4568400,4568400]],"oracle":[63.22656865889385],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))"]],"repr":["binary64"],"time":6.654052734375,"times":[[5.172119140625,"x"]],"type":"regimes"},{"accuracy":[24.26911074901471],"baseline":[36.71318847130004],"branch":[["x",24.26911074901471,3,"binary64"]],"compiler":[[1,2]],"count":[[18,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))"]],"memory":[[-3889232,4191808]],"oracle":[63.22656864510299],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))"]],"repr":["binary64"],"time":6.3349609375,"times":[[4.9599609375,"x"]],"type":"regimes"},{"accuracy":[27.568583607654503],"baseline":[36.71318847130004],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",32.16090643442195,3,"binary64"],["n",31.153664792049973,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",30.70618268227133,3,"binary64"],["x",27.568583607654503,3,"binary64"]],"compiler":[[13,8],[1,2],[3,4],[1,2]],"count":[[16,3]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))"]],"memory":[[3813648,12001504]],"oracle":[62.8789158982635],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))"]],"repr":["binary64"],"time":19.35205078125,"times":[[3.899169921875,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[4.697021484375,"n"],[4.64892578125,"(/.f64 #s(literal 1 binary64) n)"],[4.239990234375,"x"]],"type":"regimes"},{"accuracy":[35.16859606482344],"baseline":[36.71318847130004],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",35.321155559847334,2,"binary64"],["n",34.68682249567009,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",35.16859606482344,2,"binary64"],["x",35.34159999440042,2,"binary64"]],"compiler":[[13,8],[1,2],[3,4],[1,2]],"count":[[15,2]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))"]],"memory":[[-5602784,11724272]],"oracle":[50.22131235747953],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))"]],"repr":["binary64"],"time":18.0,"times":[[3.463134765625,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[3.93896484375,"n"],[4.154052734375,"(/.f64 #s(literal 1 binary64) n)"],[4.333984375,"x"]],"type":"regimes"},{"accuracy":[35.19342084093755],"baseline":[36.73806616355415],"branch":[["(/.f64 #s(literal 1 binary64) n)",35.19342084093755,2,"binary64"]],"compiler":[[3,4]],"count":[[11,2]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (+.f64 (/.f64 (*.f64 n (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))) x) n) x)) (*.f64 n n)))"]],"memory":[[3211616,3211616]],"oracle":[50.20173911815429],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))"]],"repr":["binary64"],"time":4.725830078125,"times":[[3.587890625,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[35.193474006575386],"baseline":[36.73806616355415],"branch":[["(/.f64 #s(literal 1 binary64) n)",35.193474006575386,2,"binary64"]],"compiler":[[3,4]],"count":[[9,2]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (/.f64 #s(literal -1 binary64) n)))"]],"memory":[[2905584,2905584]],"oracle":[50.17150006893648],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))"]],"repr":["binary64"],"time":3.97705078125,"times":[[3.007080078125,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[37.0788099235327],"baseline":[38.54745766296926],"branch":[["n",38.54745766296926,1,"binary64"],["x",37.0788099235327,2,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",38.54745766296927,1,"binary64"],["(/.f64 #s(literal 1 binary64) n)",38.54745766296927,1,"binary64"]],"compiler":[[1,2],[1,2],[13,8],[3,4]],"count":[[6,2]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))"]],"memory":[[-297664,7961472]],"oracle":[50.17150006893648],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))"]],"repr":["binary64"],"time":11.787109375,"times":[[2.322021484375,"n"],[2.84814453125,"x"],[2.4599609375,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[2.927978515625,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[37.245942668611555],"baseline":[38.54745766296926],"branch":[["x",37.245942668611555,2,"binary64"]],"compiler":[[1,2]],"count":[[5,2]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 n) #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)))))"]],"memory":[[2308784,2308784]],"oracle":[50.17150006893648],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))"]],"repr":["binary64"],"time":3.8818359375,"times":[[2.993896484375,"x"]],"type":"regimes"},{"accuracy":[40.296307130994954],"baseline":[40.29630713099496],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",40.29630713099501,1,"binary64"],["(/.f64 #s(literal 1 binary64) n)",40.29630713099501,1,"binary64"],["n",40.29630713099497,1,"binary64"],["x",40.296307130994954,1,"binary64"]],"compiler":[[13,8],[3,4],[1,2],[1,2]],"count":[[2,1]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))"]],"memory":[[-2047328,6297200]],"oracle":[40.30411963099678],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))"]],"repr":["binary64"],"time":8.337158203125,"times":[[1.278076171875,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[1.508056640625,"(/.f64 #s(literal 1 binary64) n)"],[2.2470703125,"n"],[2.08203125,"x"]],"type":"regimes"},{"accuracy":[40.29630713099677],"baseline":[40.29630713099678],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",40.29630713099682,1,"binary64"],["(/.f64 #s(literal 1 binary64) n)",40.29630713099682,1,"binary64"],["n",40.29630713099679,1,"binary64"],["x",40.29630713099677,1,"binary64"]],"compiler":[[13,8],[3,4],[1,2],[1,2]],"count":[[1,1]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))"]],"link":["."],"memory":[[-2388624,5884432]],"name":["2nthrt (problem 3.4.6)"],"oracle":[40.29630713099678],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))"]],"repr":["binary64"],"time":5.843017578125,"times":[[1.447998046875,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[1.2080078125,"(/.f64 #s(literal 1 binary64) n)"],[1.245849609375,"n"],[1.198974609375,"x"]],"type":"regimes"},{"bstep":[[49.81298828125,0.20624583839556976,1355512.076898059]],"compiler":[[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[15,11],[1,2]],"memory":[[-1236512,7073440]],"method":["binary-search"],"mixsample":[[1.79345703125,"ival-div",0],[2.84326171875,"adjust",800],[0.971435546875,"ival-add",0],[0.2939453125,"ival-div",400],[8.807861328125,"ival-pow",1600],[0.0732421875,"ival-assert",0],[0.329345703125,"ival-div",800],[1.760498046875,"ival-sub",0],[0.151123046875,"ival-true",0],[8.51904296875,"ival-pow",400],[0.116943359375,"exact",0],[1.03955078125,"adjust",2000],[8.1982421875,"ival-pow",0]],"outcomes":[[15.580322265625,1,"valid",55],[19.05322265625,2,"valid",37],[1.18603515625,0,"exit",8],[5.754150390625,0,"valid",52]],"stop":[["narrow-enough",1]],"time":53.909912109375,"type":"bsearch"},{"bstep":[[0.06201171875,1.3197560677739937e-21,0.0006876605072794434],[0.179931640625,-2.0528600669726897e-33,-1.0685557775306574e-34]],"compiler":[[11,10],[3,4]],"memory":[[351328,351328]],"method":["left-value","left-value"],"time":1.076904296875,"type":"bsearch"},{"bstep":[[0.05810546875,1.3197560677739937e-21,0.0006876605072794434],[0.12109375,-2.0528600669726897e-33,-1.0685557775306574e-34]],"compiler":[[11,10],[3,4]],"memory":[[339552,339552]],"method":["left-value","left-value"],"time":0.7841796875,"type":"bsearch"},{"bstep":[[0.05712890625,9.7394890536249e+225,6.823694681951568e+229],[0.05810546875,1.3197560677739937e-21,0.0006876605072794434],[0.1201171875,-2.0528600669726897e-33,-1.0685557775306574e-34]],"compiler":[[11,10],[3,4]],"memory":[[427936,427936]],"method":["left-value","left-value","left-value"],"time":0.887939453125,"type":"bsearch"},{"bstep":[[0.054931640625,9.7394890536249e+225,6.823694681951568e+229],[0.056884765625,1.3197560677739937e-21,0.0006876605072794434],[0.121826171875,-2.0528600669726897e-33,-1.0685557775306574e-34]],"compiler":[[11,10],[3,4]],"memory":[[426736,426736]],"method":["left-value","left-value","left-value"],"time":0.931884765625,"type":"bsearch"},{"bstep":[[0.054931640625,9.7394890536249e+225,6.823694681951568e+229],[0.112060546875,1.3197560677739937e-21,0.0006876605072794434],[0.114990234375,-2.0528600669726897e-33,-1.0685557775306574e-34]],"compiler":[[11,10],[3,4]],"memory":[[421648,421648]],"method":["left-value","left-value","left-value"],"time":1.01904296875,"type":"bsearch"},{"bstep":[[0.027099609375,0.0,0.17195492924591038],[0.133056640625,-1.1217900786064661e-7,-1.5112167073283445e-9]],"compiler":[[3,5],[13,8]],"memory":[[314608,314608]],"method":["left-value","left-value"],"time":0.716064453125,"type":"bsearch"},{"bstep":[[0.026123046875,0.0,0.17195492924591038],[0.116943359375,-1.1217900786064661e-7,-1.5112167073283445e-9]],"compiler":[[3,5],[13,8]],"memory":[[309904,309904]],"method":["left-value","left-value"],"time":0.593017578125,"type":"bsearch"},{"bstep":[[1.136962890625,0.20624583839556976,1355512.076898059],[36.2890625,1.082011272408734e-145,1.6156194651352774e-144],[41.76513671875,4.6049259079734994e-232,7.166499816210969e-231]],"compiler":[[29,19],[35,22],[29,19],[35,22],[29,19],[35,22],[29,19],[35,22],[29,19],[35,22],[29,19],[35,22],[29,19],[35,22],[29,19],[35,22],[29,19],[35,22],[35,22],[27,18],[35,22],[27,18],[35,22],[27,18],[35,22],[27,18],[35,22],[27,18],[35,22],[27,18],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[15,11],[1,2]],"memory":[[2094720,10097936]],"method":["binary-search","binary-search","binary-search"],"mixsample":[[0.053955078125,"ival-add",1200],[3.709228515625,"adjust",800],[2.05322265625,"ival-div",0],[0.431884765625,"ival-div",400],[22.728759765625,"ival-pow",1600],[0.164306640625,"ival-div",1600],[0.0966796875,"ival-assert",0],[1.95947265625,"ival-sub",0],[11.20458984375,"ival-pow",0],[1.125,"adjust",2000],[0.44287109375,"ival-pow",1200],[0.341552734375,"ival-div",1200],[1.49267578125,"ival-add",0],[0.005859375,"ival-add",1600],[0.3369140625,"ival-div",800],[0.177001953125,"ival-add",400],[0.171142578125,"ival-true",0],[14.759765625,"ival-pow",400],[0.9638671875,"ival-add",800],[0.142578125,"exact",0]],"outcomes":[[25.162353515625,1,"valid",75],[35.811767578125,2,"valid",50],[8.677734375,0,"valid",67]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":83.375,"type":"bsearch"},{"bstep":[[25.0400390625,0.016039260386228656,0.20624583839556976],[32.27783203125,1.2981726654075295e-43,2.3278112532601486e-41],[0.698974609375,4.6049259079734994e-232,7.166499816210969e-231]],"compiler":[[29,19],[15,12],[29,19],[15,12],[29,19],[15,12],[29,19],[15,12],[29,19],[15,12],[29,19],[15,12],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[15,11],[1,2]],"memory":[[1726880,9832720]],"method":["binary-search","binary-search","binary-search"],"mixsample":[[0.01806640625,"ival-add",1200],[2.174560546875,"ival-div",0],[3.242431640625,"adjust",800],[0.33251953125,"ival-div",400],[9.5498046875,"ival-pow",1600],[0.0087890625,"ival-div",1600],[0.084716796875,"ival-assert",0],[1.904296875,"ival-sub",0],[0.898681640625,"adjust",2000],[10.6015625,"ival-pow",0],[0.210205078125,"ival-pow",1200],[1.358642578125,"ival-add",0],[0.06689453125,"ival-div",1200],[0.010986328125,"ival-add",1600],[0.307373046875,"ival-div",800],[0.0595703125,"ival-add",400],[0.17724609375,"ival-true",0],[10.060302734375,"ival-pow",400],[0.1376953125,"exact",0],[0.142578125,"ival-add",800]],"outcomes":[[20.288818359375,1,"valid",80],[18.693359375,2,"valid",40],[9.1865234375,0,"valid",88]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":62.48388671875,"type":"bsearch"},{"bstep":[[12.357177734375,0.016039260386228656,0.20624583839556976],[0.7548828125,1.2981726654075295e-43,2.3278112532601486e-41],[1.2880859375,4.6049259079734994e-232,7.166499816210969e-231]],"compiler":[[25,17],[15,12],[25,17],[15,12],[25,17],[15,12],[25,17],[15,12],[25,17],[15,12],[25,17],[15,12],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[27,18],[15,12],[15,11],[1,2]],"memory":[[-4780496,3391712]],"method":["binary-search","binary-search","binary-search"],"mixsample":[[0.607666015625,"adjust",800],[0.448974609375,"ival-div",0],[0.2568359375,"ival-add",0],[0.06005859375,"ival-div",400],[2.445068359375,"ival-pow",1600],[0.02197265625,"ival-assert",0],[0.080078125,"ival-div",800],[0.42529296875,"ival-sub",0],[0.041259765625,"ival-true",0],[1.8564453125,"ival-pow",400],[0.030517578125,"exact",0],[0.24169921875,"adjust",2000],[2.0498046875,"ival-pow",0]],"outcomes":[[3.1025390625,1,"valid",14],[4.6650390625,2,"valid",11],[2.317626953125,0,"valid",23]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":16.068115234375,"type":"bsearch"},{"bstep":[[36.5458984375,2473389.569469039,116553228660.5982],[33.386962890625,4.825503885379792e-47,3.377309870375098e-45]],"compiler":[[25,17],[42,26],[25,17],[42,26],[25,17],[42,26],[25,17],[42,26],[25,17],[42,26],[25,17],[42,26],[25,17],[42,26],[25,17],[42,26],[42,26],[27,18],[42,26],[27,18],[42,26],[27,18],[42,26],[27,18],[42,26],[27,18],[42,26],[27,18],[42,26],[27,18],[15,11],[1,2]],"memory":[[2196240,11603536]],"method":["binary-search","binary-search"],"mixsample":[[0.0322265625,"ival-add",1200],[3.69921875,"adjust",800],[2.5849609375,"ival-div",0],[0.308349609375,"ival-div",400],[12.062744140625,"ival-pow",1600],[0.162353515625,"ival-assert",0],[2.209716796875,"ival-sub",0],[11.702392578125,"ival-pow",0],[1.1962890625,"adjust",2000],[1.517822265625,"ival-add",0],[0.08642578125,"ival-div",1200],[0.406005859375,"ival-div",800],[0.054443359375,"ival-add",400],[0.198486328125,"ival-true",0],[12.220947265625,"ival-pow",400],[0.173828125,"exact",0],[0.1357421875,"ival-add",800]],"outcomes":[[22.028076171875,1,"valid",87],[23.9501953125,2,"valid",51],[1.234130859375,0,"exit",12],[9.97998046875,0,"valid",102]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":74.718017578125,"type":"bsearch"},{"bstep":[[1.2919921875,0.20624583839556976,1355512.076898059],[0.943115234375,4.825503885379792e-47,3.377309870375098e-45]],"compiler":[[40,26],[33,20],[40,26],[33,20],[40,26],[33,20],[40,26],[33,20],[40,26],[33,20],[40,26],[33,20],[40,26],[33,20],[40,26],[33,20],[40,26],[33,20],[33,20],[27,18],[33,20],[27,18],[33,20],[27,18],[33,20],[27,18],[33,20],[27,18],[33,20],[27,18],[33,20],[27,18],[15,11],[1,2]],"memory":[[1434544,1434544]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":2.95703125,"type":"bsearch"},{"bstep":[[0.119873046875,-408.6044125122643,-0.0002697883406593638]],"compiler":[[11,10],[3,4]],"memory":[[211120,211120]],"method":["left-value"],"time":0.552978515625,"type":"bsearch"},{"bstep":[[0.106201171875,-6.473562871194813e-17,-1.3876502793138071e-17]],"compiler":[[11,10],[3,4]],"memory":[[196144,196144]],"method":["left-value"],"time":0.419921875,"type":"bsearch"},{"bstep":[[0.10107421875,-1.6022762151560725e+138,-5.569055856333631e+135]],"compiler":[[11,10],[3,4]],"memory":[[189792,189792]],"method":["left-value"],"time":0.3720703125,"type":"bsearch"},{"bstep":[[1.273193359375,0.20624583839556976,1355512.076898059]],"compiler":[[49,26],[33,20],[49,26],[33,20],[49,26],[33,20],[49,26],[33,20],[49,26],[33,20],[49,26],[33,20],[49,26],[33,20],[49,26],[33,20],[49,26],[33,20],[15,11],[1,2]],"memory":[[-7295008,851248]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":2.244873046875,"type":"bsearch"},{"bstep":[[0.760986328125,0.016039260386228656,0.20624583839556976]],"compiler":[[30,20],[33,20],[30,20],[33,20],[30,20],[33,20],[30,20],[33,20],[30,20],[33,20],[30,20],[33,20],[15,11],[1,2]],"memory":[[582336,582336]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.113037109375,"type":"bsearch"},{"egraph":[[5,4486,1741,0.033202427],[4,1807,1744,0.021535621],[3,789,1745,0.009932676],[2,429,1747,0.006104917],[1,298,1749,0.004860486],[0,224,1771,0.004203763]],"inputs":[["(if (<=.f64 x #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) (neg.f64 n))) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(literal -944473296573929/9444732965739290427392 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(literal 0 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(literal -944473296573929/9444732965739290427392 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(literal 0 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 2196735251241795/1757388200993436087035366604564836663620975436836686184804982645551499054949799949343375268009332366074187855716219099657503228927927460816018951242525454630912 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 2206763817411543/2251799813685248 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n)))))","(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 6904811908925349/6277101735386680763835789423207666416102355444464034512896 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 5224175567749775/36028797018963968 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n)))))","(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 6904811908925349/6277101735386680763835789423207666416102355444464034512896 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 3602879701896397/18014398509481984 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n)))))","(if (<=.f64 x #s(literal 1325723886513667/401734511064747568885490523085290650630550748445698208825344 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 3000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))))","(if (<=.f64 x #s(literal 1325723886513667/401734511064747568885490523085290650630550748445698208825344 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 2206763817411543/2251799813685248 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -400 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -2028240960365167/40564819207303340847894502572032 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n)))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1000000000000000032841562489204926078987012566359611695512313426258747006898787995544001315627727412683949504784322435578648490634211491840 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n)))","(if (<=.f64 x #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","(if (<=.f64 x #s(literal 3602879701896397/18014398509481984 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))"]],"memory":[[1597680,16956432]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)))","(if (<=.f64 x #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) (neg.f64 n))) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (+.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) n)) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(literal -944473296573929/9444732965739290427392 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(literal 0 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -944473296573929/9444732965739290427392 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 0 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(literal -944473296573929/9444732965739290427392 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(literal 0 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -944473296573929/9444732965739290427392 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 0 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))","(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 2196735251241795/1757388200993436087035366604564836663620975436836686184804982645551499054949799949343375268009332366074187855716219099657503228927927460816018951242525454630912 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 2206763817411543/2251799813685248 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n)))))","(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 2196735251241795/1757388200993436087035366604564836663620975436836686184804982645551499054949799949343375268009332366074187855716219099657503228927927460816018951242525454630912 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 2206763817411543/2251799813685248 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n)))))","(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 6904811908925349/6277101735386680763835789423207666416102355444464034512896 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 5224175567749775/36028797018963968 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n)))))","(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 6904811908925349/6277101735386680763835789423207666416102355444464034512896 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 5224175567749775/36028797018963968 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n)))))","(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 6904811908925349/6277101735386680763835789423207666416102355444464034512896 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 3602879701896397/18014398509481984 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n)))))","(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 6904811908925349/6277101735386680763835789423207666416102355444464034512896 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 3602879701896397/18014398509481984 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64))) (neg.f64 n))))))","(if (<=.f64 x #s(literal 1325723886513667/401734511064747568885490523085290650630550748445698208825344 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 3000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64)))) n))))","(if (<=.f64 x #s(literal 1325723886513667/401734511064747568885490523085290650630550748445698208825344 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 3000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64))) (neg.f64 n)))))","(if (<=.f64 x #s(literal 1325723886513667/401734511064747568885490523085290650630550748445698208825344 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 2206763817411543/2251799813685248 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))))","(if (<=.f64 x #s(literal 1325723886513667/401734511064747568885490523085290650630550748445698208825344 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 2206763817411543/2251799813685248 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64))) x)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -400 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -400 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64))) x))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -2028240960365167/40564819207303340847894502572032 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n)))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -2028240960365167/40564819207303340847894502572032 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n)))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -1000000000000000032841562489204926078987012566359611695512313426258747006898787995544001315627727412683949504784322435578648490634211491840 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n)))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1000000000000000032841562489204926078987012566359611695512313426258747006898787995544001315627727412683949504784322435578648490634211491840 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n)))","(if (<=.f64 x #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","(if (<=.f64 x #s(literal 3602879701896397/18014398509481984 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))"]],"stop":[["node limit",1]],"time":113.1201171875,"type":"simplify"},{"compiler":[[1799,227]],"memory":[[-3131728,6941392]],"stop":[["fuel",1]],"time":14.870849609375,"type":"soundness"},{"compiler":[[1799,227],[1799,227],[13,8],[13,8]],"memory":[[10589856,64711680]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":99.2861328125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02392578125,"type":"end"}]