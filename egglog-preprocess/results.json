{"branch":"varun10p-egglog-multi","commit":"debf1aed9e26cbfa45cab9e280b538180329feb3","date":1733877268,"flags":["rules:arithmetic","rules:polynomials","rules:fractions","rules:exponents","rules:trigonometry","rules:hyperbolic","rules:numerics","rules:special","rules:bools","rules:branches","generate:rr","generate:taylor","generate:simplify","generate:proofs","generate:egglog","localize:costs","localize:errors","reduce:regimes","reduce:binary-search","reduce:branch-expressions","setup:simplify","setup:search"],"hostname":"Varuns-MacBook-Pro-2.local","iterations":4,"merged-cost-accuracy":[[1.0,0.3502410432643972],[[0.9282312931414775,0.9733128899307236],[1.0373258841659898,0.9733128201762593],[1.0481991250072917,0.9733093428697202],[1.085732679451309,0.9732452130631092],[1.087519537049548,0.9732419594284367],[1.088530985027078,0.9732387657702921],[1.1049245012279885,0.9731789023364049],[1.1453534277775954,0.9730367388135153],[1.3644774266701194,0.9723890493638078],[1.415550388361383,0.9722473591667949],[1.4362968222857586,0.9721366532408124],[1.5163337146278804,0.9716866147463161],[1.522707580304998,0.9716396702028715],[1.5268974889203333,0.9716017419321858],[1.5703348128795722,0.9711911337113059],[1.6163159208342373,0.9707478744411896],[1.619929886972192,0.9707120473307379],[1.6253549440824748,0.9706479740097701],[1.62672347567867,0.9706281734797421],[1.6315062582542286,0.9705528205544972],[1.639847994342354,0.9704131532219602],[1.642495546466459,0.9703598553321847],[1.651526683709649,0.9701761154773432],[1.6643311275028143,0.9699141258281079],[1.6700581806927888,0.9697863869375066],[1.6777188453066145,0.9695851340310753],[1.6818793114841497,0.9694705691724529],[1.6872650149586403,0.9692848053573748],[1.6921205520480334,0.9691013190885123],[1.70056058132066,0.9687650184051231],[1.705788097044303,0.9685468860199421],[1.708805550634816,0.9683839435010337],[1.7329083693346115,0.9669836161617598],[1.9400069753212954,0.9543382965054462],[2.0478876142925593,0.9483369671396074],[2.1684728708810046,0.9420952299711998],[2.2975448276015524,0.9359774556524341],[2.302818077864381,0.9357391347862358],[2.3495069834263096,0.9335497353629216],[2.4906593174644422,0.9273769793923378],[2.4968574782710564,0.9271149030923392],[2.515638447049219,0.9263028826542398],[2.5211096343554735,0.9260597574808842],[2.6630185944218563,0.9197552184012012],[2.917592768521585,0.9079898762717441],[2.924216738716047,0.9075920397608832],[3.211719737147634,0.8901217314328467],[3.2903986294098924,0.8857437839988409],[3.4706955489967,0.8755615955843049],[3.4819350733278887,0.8748217223851953],[3.487903940495062,0.8744208014113429],[3.500071295108573,0.8734628168120127],[3.702381221376428,0.8568823488345063],[3.7261834151369655,0.8538058661249321],[3.9931683862790344,0.8216249923491827],[4.048959193206732,0.8149646699908589],[4.0574625577638495,0.8138413051318516],[4.073937490151517,0.811665425555117],[4.165075592525916,0.7999376760055574],[4.462765462874854,0.764778987505419],[4.572364733169489,0.7529684374650445],[4.732248217338678,0.7356781562889403],[4.830470418628555,0.7240799501330137],[4.952526713459335,0.7084015753841448],[5.226431938780919,0.6740422318576578],[5.387650128288773,0.6537094102833358],[5.622851661482362,0.620513921630391],[5.66838377739759,0.611679695823372],[5.673932781630413,0.610541414684218],[5.794074672819303,0.5818455585887174],[5.85616299091057,0.5653876080634983],[5.95191961557431,0.5319172826480374],[6.043950695964391,0.49701345362218974],[6.0997414596451165,0.463581220655667],[6.124221254069421,0.44667445884558377],[6.156748245495419,0.41562665887140526],[6.176430817752469,0.38450597598534786]]],"note":false,"points":256,"seed":"80361537","tests":[{"bits":64,"conversions":[],"cost-accuracy":[[13760,30.438735452463465],[20288,0.31994118479178896],[[6784,0.2939949281504205,"(tan.f64 (*.f64 #s(literal 1/2 binary64) x))"],[2881,29.930833761582573,"(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64))"],[2177,29.950239171479936,"(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64))"],[1793,29.982081407665277,"(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))"],[1473,29.98419995412792,"(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64))"],[769,30.006193543841476,"(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))"],[64,59.49884088503429,"#s(literal 1 binary64)"]]],"end":0.31994118479178896,"end-est":0.25818256837909415,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (sin x))","link":"0-tanhfexample34","name":"tanhf (example 3.4)","output":"(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (sin x))","start":30.438735452463465,"start-est":30.460076481654603,"status":"eq-target","target":[[7168,0.2939949281504205]],"target-prog":"(((! :herbie-platform default (tan (/ x 2))) . #t))","time":7076.533935546875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14912,40.81900915238995],[7296,0.04469632265126007],[[704,18.291177961499823,"(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]]],"end":0.04469632265126007,"end-est":0.23644720021076088,"identifier":"#f","input":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","link":"1-sqrtexpproblem344","name":"sqrtexp (problem 3.4.4)","output":"(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","start":40.81900915238995,"start-est":42.557640404245994,"status":"imp-start","target":[],"target-prog":"()","time":7215.948974609375,"vars":["x"],"warnings":["ground-truth"]},{"bits":64,"conversions":[],"cost-accuracy":[[13952,62.97599408238038],[2176,0.04470806859068647],[[1472,0.11267552965943316,"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"],[768,0.24770797169814984,"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))"],[64,0.6386012059425001,"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]]],"end":0.04470806859068647,"end-est":0.0,"identifier":"#f","input":"(/ (- eps (sin eps)) (- eps (tan eps)))","link":"2-sintanproblem345","name":"sintan (problem 3.4.5)","output":"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","pre":"(and (<= -0.4 eps) (<= eps 0.4))","prec":"binary64","preprocess":"()","spec":"(/ (- eps (sin eps)) (- eps (tan eps)))","start":62.97599408238038,"start-est":63.00481528870159,"status":"gt-target","target":[[896,0.24770797169814984]],"target-prog":"(((! :herbie-platform default (- (* 9/40 eps eps) 1/2)) . #t))","time":15839.8759765625,"vars":["eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3200,30.680709130231076],[4610,9.196678558258002],[[3714,9.202909891576207,"(if (<=.f64 b #s(literal -19999999999999999781741223642818392253569612520802717890360030929450604798220516297708225612915260122593317856641907797168065523046908674225209344 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[3714,9.263205746324925,"(if (<=.f64 b #s(literal -85999999999999996768418412426612073315747874889589646515688096711661853630447377650054942490015517144101285970256608784338158354432 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[3330,12.338078049155433,"(if (<=.f64 b #s(literal -6304320991423117/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[3330,12.442497504588511,"(if (<=.f64 b #s(literal -6556493831080041/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 b (+.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 c (*.f64 b b))))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[3330,12.455914985163687,"(if (<=.f64 b #s(literal -6556493831080041/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 b (+.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 c (*.f64 b b))))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[1281,20.3881028973627,"(if (<=.f64 b #s(literal 202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))"],[1281,35.81062998363624,"(if (<=.f64 b #s(literal 25/2 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b)))"],[768,56.824519158547574,"#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))"],[768,62.37008980640328,"#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))"]]],"end":9.196678558258002,"end-est":8.655832642450601,"identifier":"#f","input":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"3-quadpp42positive","name":"quadp (p42, positive)","output":"(if (<=.f64 b #s(literal -19999999999999999781741223642818392253569612520802717890360030929450604798220516297708225612915260122593317856641907797168065523046908674225209344 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":30.680709130231076,"start-est":29.86701901748841,"status":"lt-target","target":[[18050,0.20578834688275222]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs (/ b 2)) x)) (sqrt (+ (fabs (/ b 2)) x))) (hypot (/ b 2) x))))) (if (< b 0) (/ (- sqtD (/ b 2)) a) (/ (- c) (+ (/ b 2) sqtD))))) . #t))","time":9283.843017578125,"vars":["a","b","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3200,31.068785196743033],[3714,9.735597613513436],[[3714,9.784234575887469,"(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1750000000000000102157761543315671623288685787900190011211379207802261019259679576088990448968079582389602707712449392188615529857024 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))"],[3330,12.824539031983006,"(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 8238696027695019/196159429230833773869868419475239575503198607639501078528 binary64)) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))"],[3330,13.151320970633353,"(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 7846377169233351/196159429230833773869868419475239575503198607639501078528 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))"],[2049,20.26853508611872,"(if (<=.f64 b #s(literal -20240225330731/101201126653655309176247673359458653524778324882071059178450679013715169783997673445980191850718562247593538932158405955694904368692896738433506699970369254960758712138283180682233453871046608170619883839236372534281003741712346349309051677824579778170405028256179384776166707307615251266093163754323003131653853870546747392 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))))"],[1281,20.48997983709662,"(if (<=.f64 b #s(literal -8266848337882815/3179557053031851899185109992371205233166102563054994659612778573877352351101699863205638981281067986842598872467724437926239395930347139873677900339284338973090723790890700606566943304973513615002138622348731328001828550356615286489088 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))"],[896,41.27396526851702,"#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))"],[768,57.10489791469494,"#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))"],[768,62.37170659355502,"#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))"]]],"end":9.735597613513436,"end-est":9.39147271636523,"identifier":"#f","input":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"4-quadmp42negative","name":"quadm (p42, negative)","output":"(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1800000000000000078058036195597047924105592170313145973762740256848876476073983515351609532769080294059523067440291506840888208785408 binary64)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":31.068785196743033,"start-est":29.61315973905582,"status":"lt-target","target":[[18050,0.2013921062575718]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs (/ b 2)) x)) (sqrt (+ (fabs (/ b 2)) x))) (hypot (/ b 2) x))))) (if (< b 0) (/ c (- sqtD (/ b 2))) (/ (+ (/ b 2) sqtD) (- a))))) . #t))","time":8714.08984375,"vars":["a","b","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2560,31.004839220479237],[3202,9.174418484761405],[[2818,12.369857489255276,"(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 8726832914295267/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))"],[1473,20.235997184047573,"(if (<=.f64 b_2 #s(literal 7115704217835139/197658450495420525734858737030192682665582665785295037457911482448662440984370455949180062208434691889831130726871886632216610095103313942252942773379627451095231859645084337269987214591887906583241960623508540106017585433031926463494241558251132379239072320812850360890950600210186037629088210457662115491511433340911616 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)))"],[1473,20.238872272952985,"(if (<=.f64 b_2 #s(literal 7115704217835139/197658450495420525734858737030192682665582665785295037457911482448662440984370455949180062208434691889831130726871886632216610095103313942252942773379627451095231859645084337269987214591887906583241960623508540106017585433031926463494241558251132379239072320812850360890950600210186037629088210457662115491511433340911616 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))))"],[1088,41.252124376858305,"#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))"]]],"end":9.174418484761405,"end-est":6.348045951143504,"identifier":"#f","input":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"5-quad2pproblem321positive","name":"quad2p (problem 3.2.1, positive)","output":"(if (<=.f64 b_2 #s(literal -50000000000000002312554067952099737000613136197536344245944363600636276876889825461691709941101712565994831225244845295459698844758220898317376004554752 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 8726832914295267/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":31.004839220479237,"start-est":26.038966591759444,"status":"lt-target","target":[[16642,0.22403539142601944]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs b_2) x)) (sqrt (+ (fabs b_2) x))) (hypot b_2 x))))) (if (< b_2 0) (/ (- sqtD b_2) a) (/ (- c) (+ b_2 sqtD))))) . #t))","time":6954.740966796875,"vars":["a","b_2","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2560,30.99862037022943],[3330,9.27607063772349],[[2946,12.145298574152516,"(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 2037940770576765/463168356949264781694283940034751631413079938662562256157830336031652518559744 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))"],[2946,12.447994607877748,"(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 1250554563763015/926336713898529563388567880069503262826159877325124512315660672063305037119488 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))"],[2818,12.521887478171255,"(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 1250554563763015/926336713898529563388567880069503262826159877325124512315660672063305037119488 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))"],[1473,20.24665590872507,"(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a))"],[1473,20.239122216951746,"(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"],[1473,20.240997216951747,"(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"],[1473,20.308566148061136,"(if (<=.f64 b_2 #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a))))"],[1088,41.40362788930258,"#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))"]]],"end":9.27607063772349,"end-est":7.624461984884566,"identifier":"#f","input":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"6-quad2mproblem321negative","name":"quad2m (problem 3.2.1, negative)","output":"(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)) (if (<=.f64 b_2 #s(literal 329999999999999974239589617146929394309276204383559364298626595106879587722571551371952128 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":30.99862037022943,"start-est":27.74883149638816,"status":"lt-target","target":[[16642,0.21789515896866943]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs b_2) x)) (sqrt (+ (fabs b_2) x))) (hypot b_2 x))))) (if (< b_2 0) (/ c (- sqtD b_2)) (/ (+ b_2 sqtD) (- a))))) . #t))","time":7786.796875,"vars":["a","b_2","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13952,61.32690860613184],[13696,0.026648684376262027],[[3712,0.24525012203700514,"(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))"],[1216,0.281405717394612,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"],[832,0.37691553587237947,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"],[256,0.5822157625237483,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))"],[64,1.3006661476672086,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]]],"end":0.026648684376262027,"end-est":0.02734375,"identifier":"#f","input":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","link":"7-qlogexample310","name":"qlog (example 3.10)","output":"(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","pre":"(<= (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","start":61.32690860613184,"start-est":60.92527372249641,"status":"eq-target","target":[[13696,0.026648684376262027]],"target-prog":"(((! :herbie-platform default (/ (log1p (- x)) (log1p x))) . #t))","time":7967.93896484375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14272,63.003011342384426],[6464,0.0],[[768,60.83431238811463,"#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))"],[64,63.00436979224811,"#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]]],"end":0.0,"end-est":0.0,"identifier":"#f","input":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","link":"8-logsexample38","name":"logs (example 3.8)","output":"#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","pre":"(> n 6.8e+15)","prec":"binary64","preprocess":"()","spec":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","start":63.003011342384426,"start-est":63.01601884390108,"status":"eq-target","target":[[16768,0.0]],"target-prog":"(((! :herbie-platform default (- (log (+ n 1)) (- (/ 1 (* 2 n)) (- (/ 1 (* 3 (* n n))) (/ 4 (pow n 3)))))) . #t))","time":7099.80517578125,"vars":["n"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[7552,58.51345122549042],[1408,0.33436584997638374],[[1088,0.3401963633094443,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))"],[384,0.6694581831854871,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"],[64,60.5800196591943,"#s(literal 0 binary64)"]]],"end":0.33436584997638374,"end-est":0.0,"identifier":"#f","input":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","link":"9-logqproblem343","name":"logq (problem 3.4.3)","output":"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 eps eps) (*.f64 #s(literal -2/3 binary64) eps) (*.f64 #s(literal -2 binary64) eps)))","pre":"(< (fabs eps) 1.0)","prec":"binary64","preprocess":"()","spec":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","start":58.51345122549042,"start-est":59.527301879812164,"status":"lt-target","target":[[13184,0.00725]],"target-prog":"(((! :herbie-platform default (- (log1p (- eps)) (log1p eps))) . #t))","time":5535.407958984375,"vars":["eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[8064,59.9945085157623],[1472,0.06094830635686411],[[768,0.31123216626322264,"#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))"],[384,0.6400395600648856,"#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]]],"end":0.06094830635686411,"end-est":0.010097509768442016,"identifier":"#f","input":"(- (/ 1.0 x) (/ 1.0 (tan x)))","link":"10-invcotexample39","name":"invcot (example 3.9)","output":"#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","pre":"(and (< -0.026 x) (< x 0.026))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 x) (/ 1.0 (tan x)))","start":59.9945085157623,"start-est":60.07004632143718,"status":"eq-target","target":[[8577,0.07021399777743499]],"target-prog":"(((! :herbie-platform default (if (< (fabs x) 13/500) (* (/ x 3) (+ 1 (/ (* x x) 15))) (- (/ 1 x) (/ 1 (tan x))))) . #t))","time":14657.713134765625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[22336,63.9918866437727],[1664,0.14121936093777043],[[7298,13.400477859615387,"(if (<=.f64 a #s(literal -2557336412418861/6393341031047152089869511126616404594173128996177860916959553453312761321102879990006386899074031556935325554936640763689877454191182408307282280448 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a))) (if (<=.f64 a #s(literal -6292727911774283/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))))"],[6913,13.395434480530906,"(if (<=.f64 a #s(literal -6292727911774283/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64))))"],[6528,31.72494810435151,"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))"],[64,62.68888097525671,"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))"]]],"end":0.14121936093777043,"end-est":0.1484375,"identifier":"#f","input":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","link":"11-expq3problem342","name":"expq3 (problem 3.4.2)","output":"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","pre":"(and (and (<= (fabs a) 710.0) (<= (fabs b) 710.0)) (and (<= (* 1e-27 (fmin (fabs a) (fabs b))) eps) (<= eps (fmin (fabs a) (fabs b)))))","prec":"binary64","preprocess":"((sort a b))","spec":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","start":63.9918866437727,"start-est":64.0,"status":"lt-target","target":[[1664,0.031542481250360584]],"target-prog":"(((! :herbie-platform default (+ (/ 1 a) (/ 1 b))) . #t))","time":21416.382080078125,"vars":["a","b","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13760,40.49212030762822],[7296,0.01075],[[14593,4.794829277551279,"(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[14593,4.7948292775524886,"(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[14593,4.794829279191543,"(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[13889,6.489415342142913,"(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[13889,10.236254708599281,"(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[7104,20.615457353410257,"#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))"],[6720,20.640803995668822,"#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))"],[6528,20.613653982682383,"#s(approx (/ (exp x) (- (exp x) 1)) (pow.f64 x #s(literal -1 binary64)))"],[4160,2.5201365919787873,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 (fma.f64 #s(literal 3/32 binary64) x #s(literal -3/8 binary64)) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"],[3776,2.9472075842058807,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"],[3392,3.4168483138033765,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"],[3008,4.031915291319186,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"],[2240,4.87198893887759,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"],[1856,6.588697340877526,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"],[1472,10.487873542386104,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))"],[384,61.860459740175024,"#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))"],[64,61.91084766552303,"#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]]],"end":0.01075,"end-est":0.00390625,"identifier":"#f","input":"(/ (exp x) (- (exp x) 1.0))","link":"12-expq2section311","name":"expq2 (section 3.11)","output":"(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","pre":"(> 710.0 x)","prec":"binary64","preprocess":"()","spec":"(/ (exp x) (- (exp x) 1.0))","start":40.49212030762822,"start-est":41.41390938849735,"status":"eq-target","target":[[7424,0.01075]],"target-prog":"(((! :herbie-platform default (/ (- 1) (expm1 (- x)))) . #t))","time":5773.0390625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[6656,58.663825605488434],[6464,0.0],[[1536,0.253908833046956,"#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))"],[1536,0.2658039357408476,"#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"],[1152,0.3687282242212051,"#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))"],[1152,0.3786971044477711,"#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"],[768,0.5976363161787125,"#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))"],[768,0.6051866655885493,"#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))"],[448,59.35477338827949,"(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))"],[256,60.57645946068481,"(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]]],"end":0.0,"end-est":0.0,"identifier":"#f","input":"(- (exp x) 1.0)","link":"13-expm1example37","name":"expm1 (example 3.7)","output":"(expm1.f64 x)","pre":"(<= (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(- (exp x) 1.0)","start":58.663825605488434,"start-est":58.50516243972476,"status":"eq-target","target":[[6464,0.0]],"target-prog":"(((! :herbie-platform default (expm1 x)) . #t))","time":3762.1259765625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[6976,29.41654165073681],[6784,0.020793541846214684],[[13504,18.253297884248795,"(pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* -1/2 x) (/ 1 a)) x) (-.f64 (pow.f64 (*.f64 a x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))"],[8257,17.742490147172774,"(if (<=.f64 (*.f64 a x) #s(literal -10 binary64)) (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (*.f64 #s(literal -1/2 binary64) x)) x)) #s(literal -1 binary64)) #s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x))))"],[384,21.104286637833418,"#s(approx (- (exp (* x a)) 1) (*.f64 x a))"],[256,51.401203801502575,"(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]]],"end":0.020793541846214684,"end-est":0.01171875,"identifier":"#f","input":"(- (exp (* a x)) 1.0)","link":"14-expaxsection35","name":"expax (section 3.5)","output":"(expm1.f64 (*.f64 x a))","pre":"(> 710.0 (* a x))","prec":"binary64","preprocess":"()","spec":"(- (exp (* a x)) 1.0)","start":29.41654165073681,"start-est":28.886876542253585,"status":"eq-target","target":[[6784,0.020793541846214684]],"target-prog":"(((! :herbie-platform default (expm1 (* a x))) . #t))","time":4649.60888671875,"vars":["a","x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13376,30.052801727812817],[14080,0.6270984008092823],[[1728,0.7420190142561212,"#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))))"],[1408,0.7477420496513665,"#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (*.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)))))"],[384,1.108387257976352,"#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"]]],"end":0.6270984008092823,"end-est":0.10225352933453738,"identifier":"#f","input":"(+ (- (exp x) 2.0) (exp (- x)))","link":"15-exp2problem337","name":"exp2 (problem 3.3.7)","output":"#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","pre":"(<= (fabs x) 710.0)","prec":"binary64","preprocess":"()","spec":"(+ (- (exp x) 2.0) (exp (- x)))","start":30.052801727812817,"start-est":33.067567600740716,"status":"lt-target","target":[[14912,0.04483778281908052]],"target-prog":"(((! :herbie-platform default (* 4 (* (sinh (/ x 2)) (sinh (/ x 2))))) . #t))","time":8616.12109375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[7680,31.77585755022176],[14912,0.1837509353558369],[[14912,0.2702415369187873,"(*.f64 (sin.f64 x) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x))"],[8449,16.115667072678693,"(if (<=.f64 x #s(literal 7926335344172073/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))"],[8065,16.306683400142486,"(if (<=.f64 x #s(literal 7926335344172073/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))"],[1857,23.003524498583126,"(if (<=.f64 x #s(literal 849999999999999971420150533636998823936 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)))"],[1665,22.844163759469765,"(if (<=.f64 x #s(literal 160000000000000007529621519344875134264953622525866092228459352558371992502272 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)))"],[64,30.6894455612081,"#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]]],"end":0.1837509353558369,"end-est":0.17615131837909412,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (* x x))","link":"16-cos2problem341","name":"cos2 (problem 3.4.1)","output":"(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (* x x))","start":31.77585755022176,"start-est":31.630069183552916,"status":"imp-start","target":[],"target-prog":"()","time":7267.5869140625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2944,19.67499298190792],[15424,0.26403344434239817],[[14208,0.3841233231432014,"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))"],[1856,0.11713684218813102,"(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))"],[1792,0.8292546737115398,"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))"],[1472,0.5866222936176766,"(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))"],[1408,1.299545321080387,"(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))"],[768,60.78586098715759,"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]]],"end":0.26403344434239817,"end-est":0.01171875,"identifier":"#f","input":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","link":"17-3fracproblem333","name":"3frac (problem 3.3.3)","output":"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","pre":"(> (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","start":19.67499298190792,"start-est":19.118372823222444,"status":"gt-target","target":[[1600,0.5871954139302668]],"target-prog":"(((! :herbie-platform default (/ 2 (* x (- (* x x) 1)))) . #t))","time":7266.741943359375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,24.38107806476384],[20480,0.06677219904872335],[[15424,0.174047472574431,"(*.f64 #s(approx (neg (sin (+ 0 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))"],[14528,0.3273270848900364,"(*.f64 #s(approx (neg (sin (+ 0 eps))) (neg.f64 eps)) (/.f64 #s(literal -1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))"],[9344,0.8978920154162234,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))"],[8000,0.6158566151346455,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))"],[2880,0.9750147271375043,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))"],[2176,0.9680682814726476,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))))"],[1792,0.9805164547117938,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))"],[1280,1.1270167721124553,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))"],[768,1.0646410765647074,"#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 eps) x) 1) x) eps) x) 1) (fma.f64 x x #s(literal 1 binary64)))) eps))"],[384,1.3566340704485527,"#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))"]]],"end":0.06677219904872335,"end-est":0.00390625,"identifier":"#f","input":"(- (tan (+ x eps)) (tan x))","link":"18-2tanproblem332","name":"2tan (problem 3.3.2)","output":"(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (tan (+ x eps)) (tan x))","start":24.38107806476384,"start-est":24.61062264534191,"status":"gt-target","target":[[13696,0.6123324746167429]],"target-prog":"(((! :herbie-platform default (+ eps (* eps (tan x) (tan x)))) . #t))","time":11707.140869140625,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[1728,59.7789724321887],[8192,0.26519812031259016],[[7488,1.3086334690081647,"#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))"],[1408,1.4258576141885193,"#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))"],[1216,61.18054913718546,"(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))"],[896,62.99780121365335,"(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]]],"end":0.26519812031259016,"end-est":0.28515625,"identifier":"#f","input":"(- (sqrt (+ x 1.0)) (sqrt x))","link":"19-2sqrtexample31","name":"2sqrt (example 3.1)","output":"(pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (sqrt (+ x 1.0)) (sqrt x))","start":59.7789724321887,"start-est":60.42296674669221,"status":"gt-target","target":[[6848,1.1773278092767014]],"target-prog":"(((! :herbie-platform default (* 1/2 (pow x -1/2))) . #t))","time":5546.9580078125,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,24.374360878713436],[8512,0.15143527668414986],[[7808,0.3039194021004081,"(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))"],[7488,0.5645090055993631,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))"],[2496,0.8950687578430256,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps))"],[1792,0.9457558887324755,"#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 (*.f64 x x) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))"],[1280,1.0099580706620197,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))"],[1088,1.0454406204722657,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))) eps))"],[384,1.37832937709208,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))"]]],"end":0.15143527668414986,"end-est":0.0,"identifier":"#f","input":"(- (sin (+ x eps)) (sin x))","link":"20-2sinexample33","name":"2sin (example 3.3)","output":"(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (sin (+ x eps)) (sin x))","start":24.374360878713436,"start-est":24.614279958435432,"status":"eq-target","target":[[14656,0.06370693825435557]],"target-prog":"(((! :herbie-platform default (* (cos (* 1/2 (- eps (* -2 x)))) (sin (* 1/2 eps)) 2)) . #t))","time":11000.545166015625,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14784,29.57457592167103],[14849,5.209795390036384],[[66434,13.583316630135357,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -944473296573929/9444732965739290427392 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 0 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))"],[66434,13.598560393623705,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal -944473296573929/9444732965739290427392 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 n #s(literal -1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(literal 0 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))"],[34627,11.434000176598394,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))"],[34627,11.471231557489414,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))"],[33731,11.558987220040976,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (fma.f64 #s(literal 2 binary64) (/.f64 #s(literal 1/2 binary64) n) #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 9999999999999999613300728333138614158656013804472910722260188106898877933626732224819925546638620725877678611585164563028980399740553218842096696042786355031638703687528415058284784747112853848287855356936724432692495112994816 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))))))"],[31682,10.188589375947677,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (+.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 x x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/6 binary64) n)))) n)) n)) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))"],[30018,10.806659956841,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1461501637330903/730750818665451459101842416358141509827966271488 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5316911983139663/2658455991569831745807614120560689152 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 #s(approx (+ (* (+ (* (- (+ (/ 1/3 n) (/ 1/6 (pow n 3))) (/ 1/2 (* n n))) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) x) (/ 1 n)) (/.f64 (fma.f64 x (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/2 binary64)) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) n)) x #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64))))))"],[22529,33.2132510886244,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -400 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64))) x))))"],[16450,28.073132165577476,"(if (<=.f64 x #s(literal 1325723886513667/401734511064747568885490523085290650630550748445698208825344 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 2206763817411543/2251799813685248 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64))) x)))))"],[14339,25.56743114946419,"(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 6904811908925349/6277101735386680763835789423207666416102355444464034512896 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 5224175567749775/36028797018963968 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n)))))"],[14339,27.01386450847935,"(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 6904811908925349/6277101735386680763835789423207666416102355444464034512896 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 3602879701896397/18014398509481984 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64))) (neg.f64 n))))))"],[13569,24.92135452523453,"(if (<=.f64 x #s(literal 6712243105892569/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 2196735251241795/1757388200993436087035366604564836663620975436836686184804982645551499054949799949343375268009332366074187855716219099657503228927927460816018951242525454630912 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 2206763817411543/2251799813685248 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 (*.f64 x x) #s(literal -1/2 binary64))) n)))))"],[10625,33.225688447684504,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -2028240960365167/40564819207303340847894502572032 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n)))"],[10113,34.11052845281081,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -1000000000000000032841562489204926078987012566359611695512313426258747006898787995544001315627727412683949504784322435578648490634211491840 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n)))"],[8066,27.277677754008383,"(if (<=.f64 x #s(literal 1325723886513667/401734511064747568885490523085290650630550748445698208825344 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (neg.f64 (log.f64 x))) n)) (if (<=.f64 x #s(literal 3000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 (fma.f64 (/.f64 n x) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) n) x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (log.f64 #s(approx (/ x (+ 1 x)) #s(literal 1 binary64))) (neg.f64 n)))))"],[7232,37.82894823018534,"#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))"],[2753,36.291829003002924,"(if (<=.f64 x #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))"],[2177,36.516587913877814,"(if (<=.f64 x #s(literal 3602879701896397/18014398509481984 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (* (log (+ 1 x)) n) (* n (log x))) (/.f64 n x)) (*.f64 n n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n))))"],[1792,37.842440686682124,"#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 #s(approx (neg (- (log (+ 1 x)) (log x))) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) n)))"]]],"end":5.209795390036384,"end-est":4.158961108920335,"identifier":"#f","input":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","link":"21-2nthrtproblem346","name":"2nthrt (problem 3.4.6)","output":"(if (<=.f64 x #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","start":29.57457592167103,"start-est":26.19886445177454,"status":"imp-start","target":[],"target-prog":"()","time":21787.117919921875,"vars":["x","n"],"warnings":["ground-truth"]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,48.94250123409388],[9921,0.308168748998204],[[13505,0.3476159629059184,"(if (<=.f64 N #s(literal 820 binary64)) (log.f64 #s(approx (/ (+ 1 N) N) (+.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64)))) #s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) N)) #s(literal -1 binary64))))"],[9664,1.9578193007532998,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N))) #s(literal -1 binary64)))"],[9536,1.8893606713635007,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) N)) #s(literal -1 binary64)))"],[8896,2.019928102802161,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N))) #s(literal -1 binary64)))"],[8256,2.6494485039198397,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N))) #s(literal -1 binary64)))"],[6720,4.231572515577344,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1 binary64)))"],[6528,9.781868466972917,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 N #s(literal -1 binary64)))"],[64,61.89969832172041,"#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))"]]],"end":0.308168748998204,"end-est":0.375794181771735,"identifier":"#f","input":"(- (log (+ N 1.0)) (log N))","link":"22-2logproblem336","name":"2log (problem 3.3.6)","output":"(if (<=.f64 N #s(literal 960 binary64)) (neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))) #s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) N)) #s(literal -1 binary64))))","pre":"(and (> N 1.0) (< N 1e+40))","prec":"binary64","preprocess":"()","spec":"(- (log (+ N 1.0)) (log N))","start":48.94250123409388,"start-est":47.36340264876877,"status":"gt-target","target":[[23808,2.2087424347683906]],"target-prog":"(((! :herbie-platform default (+ (/ 1 N) (/ -1 (* 2 (pow N 2))) (/ 1 (* 3 (pow N 3))) (/ -1 (* 4 (pow N 4))))) . #t))","time":7328.77783203125,"vars":["N"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3136,39.26201091747754],[4928,0.6099960967525534],[[8449,11.014229240691723,"(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x)))) (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))))"],[8384,1.3523393420510623,"(/.f64 #s(approx (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))) (+.f64 x #s(literal 1 binary64)))"],[8192,1.4655651380816572,"(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))"],[7168,60.41485803720086,"#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))"],[4032,0.8083811161130576,"(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"],[2176,12.106115146905108,"#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))"],[1728,40.20176269687831,"#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))"]]],"end":0.6099960967525534,"end-est":0.3952199522072183,"identifier":"#f","input":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","link":"23-2isqrtexample36","name":"2isqrt (example 3.6)","output":"(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","start":39.26201091747754,"start-est":41.62696195065793,"status":"gt-target","target":[[13376,39.23563656779354]],"target-prog":"(((! :herbie-platform default (- (pow x -1/2) (pow (+ x 1) -1/2))) . #t))","time":7861.279052734375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[1856,14.50036083052512],[7040,0.39211009955216797],[[34114,1.3444806791075594,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))"],[34114,1.399113537897544,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))"],[1152,0.39223509955216795,"(/.f64 #s(literal -1 binary64) (fma.f64 x x x))"],[768,31.376418967131066,"#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))"]]],"end":0.39211009955216797,"end-est":0.05859375,"identifier":"#f","input":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","link":"24-2fracproblem331","name":"2frac (problem 3.3.1)","output":"(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","start":14.50036083052512,"start-est":13.913890071878667,"status":"eq-target","target":[[1280,0.39455821986475825]],"target-prog":"(((! :herbie-platform default (/ 1 (* x (- -1 x)))) . #t))","time":4774.087158203125,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,30.61668677253383],[14912,0.33232059610760706],[[14912,0.33196437824599667,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))"],[8832,0.2891733293750555,"(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"],[7680,0.8810085555399805,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))"],[6976,0.8997044058321327,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))"],[2496,0.9916138241479237,"#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))"],[2112,1.0249832611918375,"#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))"],[1792,1.4606635718449286,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"],[1536,13.249143518378203,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (neg.f64 x))) eps))"],[1408,13.249143776021105,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))"],[512,13.39596123796109,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]]],"end":0.33232059610760706,"end-est":0.1015625,"identifier":"#f","input":"(- (cos (+ x eps)) (cos x))","link":"25-2cosproblem335","name":"2cos (problem 3.3.5)","output":"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (cos (+ x eps)) (cos x))","start":30.61668677253383,"start-est":31.25478915018141,"status":"gt-target","target":[[27392,0.443381451893789]],"target-prog":"(((! :herbie-platform default (pow (cbrt (* -2 (sin (* 1/2 (fma 2 x eps))) (sin (* 1/2 eps)))) 3)) . #t))","time":16216.443115234375,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,59.59749589805748],[8576,0.9919373523033465],[[8576,0.9850042072627903,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))"],[7873,4.913443919696745,"(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x)))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))"],[7488,1.5876550318962281,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))"],[6848,7.1007120474532535,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))"],[6784,60.59288157665933,"(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))"],[6656,62.8689757792679,"(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))"]]],"end":0.9919373523033465,"end-est":0.6356557624413138,"identifier":"#f","input":"(- (cbrt (+ x 1.0)) (cbrt x))","link":"26-2cbrtproblem334","name":"2cbrt (problem 3.3.4)","output":"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) x))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (cbrt (+ x 1.0)) (cbrt x))","start":59.59749589805748,"start-est":60.21864191721207,"status":"lt-target","target":[[41088,0.5998366609896987]],"target-prog":"(((! :herbie-platform default (/ 1 (+ (* (cbrt (+ x 1)) (cbrt (+ x 1))) (* (cbrt x) (cbrt (+ x 1))) (* (cbrt x) (cbrt x))))) . #t))","time":7228.8720703125,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,58.44740875792131],[20032,0.26114624062518027],[[7104,0.25677124062518025,"(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) N) N #s(literal 1 binary64)))"],[6912,2.2698410679661603,"(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ 1 N) N) 1) (fma.f64 N N N)))"],[6848,4.309640869330193,"(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ 1 N) N) 1) (*.f64 N N)))"],[6720,58.95069285952728,"(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ 1 N) N) 1) (-.f64 N #s(literal -1 binary64))))"],[6528,59.94729842305807,"(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ 1 N) N) 1) #s(literal 1 binary64)))"]]],"end":0.26114624062518027,"end-est":0.26171875,"identifier":"#f","input":"(- (atan (+ N 1.0)) (atan N))","link":"27-2atanexample35","name":"2atan (example 3.5)","output":"(atan2.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","pre":"(and (> N 1.0) (< N 1e+100))","prec":"binary64","preprocess":"()","spec":"(- (atan (+ N 1.0)) (atan N))","start":58.44740875792131,"start-est":58.773505010387474,"status":"eq-target","target":[[7104,0.25677124062518025]],"target-prog":"(((! :herbie-platform default (atan2 1 (fma N (+ 1 N) 1))) . #t))","time":5690.7080078125,"vars":["N"],"warnings":[]}]}