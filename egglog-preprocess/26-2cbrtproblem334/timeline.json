[{"memory":[[14864,14864]],"time":0.0439453125,"type":"start"},{"compiler":[[15,11]],"memory":[[568192,568192]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":2.89208984375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[17834304,387471440]],"mixsample":[[0.470703125,"ival-cbrt",1600],[186.43115234375,"adjust",800],[4.133544921875,"ival-assert",0],[107.919921875,"ival-sub",0],[14.961181640625,"ival-and",0],[0.064208984375,"ival-sub",400],[155.25537109375,"const",0],[81.38037109375,"ival-cbrt",400],[31.429443359375,"ival-cbrt",2000],[83.890380859375,"ival-cbrt",800],[32.469482421875,"adjust",2000],[59.88427734375,"ival-add",0],[0.115966796875,"ival-sub",800],[132.732177734375,"ival-cbrt",0],[5.914306640625,"ival-add",2000],[29.44287109375,"ival-add",400],[27.813720703125,"ival->",0],[25.5869140625,"ival-add",800],[9.32177734375,"exact",0],[22.96533203125,"ival-<",0]],"outcomes":[[923.8330078125,1,"valid",6376],[358.92919921875,2,"valid",1641],[18.55712890625,0,"valid",239]],"time":1703.199951171875,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[255,0,0,1]],"explanations":[["-.f64","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","cancellation",255,1,[],[[]]]],"fperrors":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",255,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(cbrt.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[255,0,0,0,1,0]],"memory":[[-4626128,46321184]],"mixsample":[[9.685546875,"adjust",800],[3.865234375,"ival-add",0],[0.236328125,"ival-add",2000],[8.142822265625,"ival-cbrt",0],[0.246337890625,"ival-assert",0],[5.625732421875,"ival-sub",0],[1.50927734375,"ival-add",400],[0.6904296875,"ival-true",0],[5.083251953125,"ival-cbrt",400],[1.29833984375,"ival-cbrt",2000],[1.18212890625,"ival-add",800],[5.21923828125,"ival-cbrt",800],[0.360107421875,"exact",0],[1.482421875,"adjust",2000]],"outcomes":[[49.859375,1,"valid",418],[16.161376953125,2,"valid",86],[0.429931640625,0,"valid",8]],"time":123.60693359375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,7,0.000648022],[10,182,7,0.000733624],[9,174,7,0.000977922],[8,158,7,0.001180006],[7,109,7,0.000746362],[6,80,7,0.000855001],[5,48,7,0.000424053],[4,33,7,0.000222219],[3,25,7,0.000178923],[2,19,7,0.000130214],[1,15,7,0.000116983],[0,10,7,0.00014625],[0,6,7,0.000101838]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"memory":[[-6395024,14780720]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":163.580078125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06884765625,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","next",60.21864191721207,"binary64"]],"compiler":[[7,6]],"memory":[[311552,311552]],"time":0.439208984375,"type":"prune"},{"egraph":[[0,182,18,0.000875834],[10,182,18,0.000733678],[9,174,18,0.000909062],[8,158,18,0.001085551],[7,109,18,0.000782499],[6,80,18,0.000790973],[5,48,18,0.000439575],[4,33,18,0.000232809],[3,25,18,0.000186651],[2,19,18,0.000135594],[1,15,18,0.000120919],[0,10,18,0.000153948],[0,6,18,0.000138249]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(cbrt.f64 x)"]],"locations":[["(cbrt.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","cost-diff",0]],"memory":[[831888,831888]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(cbrt.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","x","#s(literal 1 binary64)","(cbrt.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.781982421875,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(cbrt.f64 x)","accuracy",0.07421875],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","accuracy",0.078125],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","accuracy",60.21929220763894]],"memory":[[3756256,11678288]],"mixsample":[[4.106689453125,"adjust",800],[1.50390625,"ival-add",0],[0.106201171875,"ival-add",2000],[5.36962890625,"ival-cbrt",0],[0.098876953125,"ival-assert",0],[2.51513671875,"ival-sub",0],[0.711181640625,"ival-add",400],[0.163330078125,"ival-true",0],[2.16943359375,"ival-cbrt",400],[0.50634765625,"ival-cbrt",2000],[0.525390625,"ival-add",800],[1.78125,"ival-cbrt",800],[0.14794921875,"exact",0],[0.595703125,"adjust",2000]],"outcomes":[[23.02490234375,1,"valid",209],[7.0302734375,2,"valid",43],[0.18408203125,0,"valid",4]],"time":38.02197265625,"type":"localize"},{"count":[[4,27]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(cbrt.f64 x)"]],"memory":[[-442928,7387312]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(+ 1 x)","(cbrt x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))"]],"series":[[7.3310546875,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","-inf"],[5.7041015625,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","inf"],[2.1298828125,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","0"]],"time":15.848876953125,"type":"series"},{"count":[[27,26]],"egraph":[[0,8190,465,0.058780589],[4,6064,498,0.027188111],[3,2619,498,0.025742548],[2,902,501,0.009699388],[1,350,501,0.002534525],[0,146,539,0.001103586]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(+ 1 x)","(cbrt x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))"]],"memory":[[6403296,28734976]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","1","#s(literal 1 binary64)","(+ 1 (* 1/3 x))","(fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(cbrt x)","(cbrt.f64 x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal 5/81 binary64) (*.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (*.f64 (/.f64 #s(literal -5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))))"]],"stop":[["iter limit",1],["node limit",1]],"time":197.9599609375,"type":"simplify"},{"count":[[4,357]],"egraph":[[0,9092,16,0.063466174],[3,3101,16,0.045151909],[2,282,16,0.008628367],[1,43,16,0.00115153],[0,10,16,0.000595956],[0,6,16,8.7273e-5]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(cbrt.f64 x)"]],"memory":[[-4244464,47699984]],"outputs":[["(*.f64 (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) #s(literal 2 binary64)))) (-.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (fma.f64 x x x))))","(*.f64 (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)) x (fma.f64 x x #s(literal 1 binary64)))) (fma.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (-.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64)))))","(*.f64 (/.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(*.f64 (/.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(*.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) x) x))","(*.f64 (neg.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (pow.f64 (neg.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (/.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (*.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(pow.f64 (/.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (*.f64 (cbrt.f64 x) x)) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (+.f64 (fma.f64 (cbrt.f64 x) x (cbrt.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64)))))","(/.f64 (*.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64))) (fma.f64 x (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 2 binary64))) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (-.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64))) (/.f64 (*.f64 x x) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) #s(literal 2 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(/.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (*.f64 (cbrt.f64 x) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (cbrt.f64 x) x (cbrt.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal 1 binary64))) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) x)) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (+.f64 (fma.f64 (cbrt.f64 x) x (cbrt.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))))))","(/.f64 (-.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) x) x)))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (*.f64 (cbrt.f64 x) x)) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (fma.f64 x (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(neg.f64 (/.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(neg.f64 (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) x) (neg.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (-.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64))) (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) #s(literal 2 binary64)))) (-.f64 (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (fma.f64 x x x))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)) x (fma.f64 x x #s(literal 1 binary64)))) (fma.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (-.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 4/3 binary64)))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) x) x)) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (-.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 x) #s(literal -1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (neg.f64 (cbrt.f64 x)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(fma.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(-.f64 (+.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) (cbrt.f64 x))","(-.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))))","(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 (/.f64 x (fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))))","(+.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(+.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (cbrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (-.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(*.f64 (cbrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64))))","(*.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 x))","(pow.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 2/3 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1/3 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/9 binary64))","(pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1/6 binary64))","(pow.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) #s(literal 1/2 binary64))","(pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (cbrt.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (cbrt.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (cbrt.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (cbrt.f64 (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (cbrt.f64 (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (cbrt.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (cbrt.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))) (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))) (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (neg.f64 (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (cbrt.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (exp.f64 (log.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (exp.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))))))","(/.f64 (exp.f64 (*.f64 #s(literal 1/3 binary64) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (exp.f64 (*.f64 #s(literal 1/3 binary64) (log1p.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64))) (cbrt.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(cbrt.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(cbrt.f64 (-.f64 #s(literal 1 binary64) x))","(exp.f64 (-.f64 (log1p.f64 x) (*.f64 #s(literal 2/3 binary64) (log1p.f64 x))))","(exp.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log1p.f64 x)) #s(literal 2/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal 3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)))","(*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))","(*.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x))))","(*.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (neg.f64 (log1p.f64 (fma.f64 x x x)))))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (-.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 5/6 binary64)))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(pow.f64 (exp.f64 #s(literal 1 binary64)) (log1p.f64 x))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 6 binary64))","(pow.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/3 binary64))","(pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))) #s(literal 3/2 binary64))","(pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) #s(literal 3 binary64)))","(/.f64 (cbrt.f64 (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 3 binary64))))","(/.f64 (cbrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))))","(/.f64 (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 3 binary64))))","(/.f64 (exp.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (exp.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x)))))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (fma.f64 x x x))))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal 1 binary64)))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (cbrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (cbrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(neg.f64 (-.f64 x #s(literal 1 binary64)))","(fma.f64 (pow.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 1/6 binary64))) #s(literal 3 binary64)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) #s(literal 3 binary64)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 3/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 7 binary64))) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 8 binary64))) (cbrt.f64 (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal 5/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (neg.f64 (cbrt.f64 x)) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 (cbrt.f64 x)) #s(literal 3/2 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 8 binary64))) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 7 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (pow.f64 x #s(literal 5/2 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 5/6 binary64)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (pow.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (neg.f64 (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (cbrt.f64 x) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) x)","(exp.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 3 binary64)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (log1p.f64 x)) #s(literal 3/2 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 5/6 binary64))) (cbrt.f64 (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (pow.f64 x #s(literal 5/6 binary64))))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/9 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(cbrt.f64 x)","(exp.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 2/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":277.005126953125,"type":"rewrite"},{"compiler":[[7589,1335]],"memory":[[-12470976,35014032]],"time":52.10009765625,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1/3 binary64)) (cbrt.f64 x))","fresh",61.54365878222438,"binary64"],["(-.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 x)) (cbrt.f64 x))","fresh",61.17477513616728,"binary64"],["(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","fresh",61.361112183359104,"binary64"],["(-.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 x))","fresh",60.002470585512285,"binary64"],["(-.f64 (cbrt.f64 (fma.f64 (pow.f64 x #s(literal 5/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64))) (cbrt.f64 x))","fresh",59.4185720158134,"binary64"],["(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","next",60.24031273943128,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64)))","fresh",59.45788736347015,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64)))","fresh",59.469360070932964,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x)))","fresh",60.15559821553242,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64)))","fresh",59.47098875040788,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x))))","fresh",60.5412875638174,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/6 binary64))))","fresh",60.001374576206366,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",60.21864191721207,"binary64"],["(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","next",60.677050318206724,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","fresh",61.28580932275047,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","next",62.87489653168161,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","fresh",61.28580932275047,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x)))","fresh",61.56057033244701,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x)))","fresh",46.21490943255082,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","next",46.13345057789388,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","fresh",46.21778820440303,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","next",29.453114287654095,"binary64"]],"compiler":[[9,8],[8,7],[8,7],[18,13],[12,10],[10,7],[10,9],[9,8],[10,9],[8,7],[14,11],[12,11],[7,6],[7,6],[12,10],[9,8],[15,12],[64,47],[32,25],[30,23],[22,17],[16,13],[9,8],[8,7],[8,7],[18,13],[12,10],[10,7],[10,9],[9,8],[10,9],[8,7],[14,11],[12,11],[7,6],[12,10],[9,8],[15,12],[64,47],[32,25],[30,23],[22,17],[16,13]],"count":[[383,22]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[382,21],"picked":[1,1]}],"memory":[[619584,24156000]],"min-error":[[28.713805587788816,"binary64"]],"time":24.451904296875,"type":"prune"},{"egraph":[[0,8017,217,0.059125725],[20,7800,217,0.014158695],[19,7464,217,0.028323974],[18,7459,217,0.016793966],[17,7372,217,0.02023372],[16,6540,217,0.02035852],[15,5666,217,0.019749141],[14,4585,217,0.019960416],[13,2120,217,0.019731459],[12,764,217,0.007905873],[11,499,217,0.003149018],[10,454,217,0.00264433],[9,412,217,0.002257601],[8,367,217,0.001999349],[7,279,217,0.001677302],[6,226,217,0.001597379],[5,171,217,0.001144485],[4,144,217,0.000740603],[3,127,217,0.000747934],[2,104,217,0.000608137],[1,79,217,0.000569881],[0,59,217,0.000490854],[0,34,226,0.000355014]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/3 binary64)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(cbrt.f64 x)","x","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(sqrt.f64 x)","x","#s(literal 1 binary64)","(cbrt.f64 x)","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(cbrt.f64 (exp.f64 (log1p.f64 x)))","(exp.f64 (log1p.f64 x))","(log1p.f64 x)","x","(cbrt.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal 5/81 binary64)","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","#s(literal -1/9 binary64)","(cbrt.f64 x)","(*.f64 x x)"]],"locations":[["(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","cost-diff",0],["(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","cost-diff",0],["(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","cost-diff",0],["(log1p.f64 x)","cost-diff",0],["(exp.f64 (log1p.f64 x))","cost-diff",0],["(cbrt.f64 (exp.f64 (log1p.f64 x)))","cost-diff",0],["(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","cost-diff",0],["(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","cost-diff",3],["(cbrt.f64 x)","cost-diff",0],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","cost-diff",0],["(/.f64 (/.f64 #s(literal 1 binary64) x) x)","cost-diff",0],["(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","cost-diff",0],["(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","cost-diff",0]],"memory":[[102960,24608960]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/3 binary64)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(cbrt.f64 x)","x","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","(cbrt.f64 (+.f64 #s(literal 1 binary64) x))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(sqrt.f64 x)","x","#s(literal 1 binary64)","(cbrt.f64 x)","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(cbrt.f64 (exp.f64 (log1p.f64 x)))","(cbrt.f64 (+.f64 #s(literal 1 binary64) x))","(exp.f64 (log1p.f64 x))","(+.f64 #s(literal 1 binary64) x)","(log1p.f64 x)","x","(cbrt.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 #s(literal 5/81 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/.f64 (fma.f64 #s(literal 5/81 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(fma.f64 #s(literal 5/81 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 #s(literal 5/81 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal 5/81 binary64)","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","#s(literal -1/9 binary64)","(cbrt.f64 x)","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":327.013916015625,"type":"simplify"},{"compiler":[[208,34]],"locations":[["(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","accuracy",0.40072250976844204],["(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","accuracy",28.636509875788597],["(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","accuracy",30.169644325108635],["(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","accuracy",30.25517322623943],["(cbrt.f64 x)","accuracy",0.07421875],["(cbrt.f64 (exp.f64 (log1p.f64 x)))","accuracy",0.078125],["(exp.f64 (log1p.f64 x))","accuracy",5.627689706921136],["(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","accuracy",60.21929220763894],["(cbrt.f64 x)","accuracy",0.07421875],["(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","accuracy",0.078125],["(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","accuracy",0.54296875],["(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","accuracy",60.21929220763894],["(cbrt.f64 x)","accuracy",0.07421875],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","accuracy",58.96306154268718],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","accuracy",60.21929220763894],["(/.f64 (/.f64 #s(literal 1 binary64) x) x)","accuracy",0.125],["(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","accuracy",0.41796875],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","accuracy",0.7050084347438683],["(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","accuracy",28.636509875788597]],"memory":[[655424,59747376]],"mixsample":[[44.623291015625,"adjust",800],[9.384765625,"ival-div",0],[6.27783203125,"ival-exp",0],[0.115234375,"ival-assert",0],[7.800537109375,"ival-sub",0],[0.01513671875,"ival-sub",400],[17.358154296875,"const",0],[2.077392578125,"ival-sqrt",0],[5.01025390625,"ival-log1p",800],[3.569580078125,"ival-log1p",400],[1.0888671875,"ival-cbrt",2000],[9.8828125,"ival-pow",0],[2.044677734375,"ival-exp",2000],[7.851318359375,"ival-add",0],[0.751708984375,"ival-mult",800],[4.530029296875,"ival-exp",800],[13.191650390625,"ival-cbrt",0],[1.541015625,"ival-add",400],[4.6435546875,"ival-log1p",0],[0.94580078125,"ival-sqrt",400],[0.228759765625,"ival-sqrt",2000],[0.207275390625,"ival-mult",2000],[1.192138671875,"ival-sqrt",800],[4.482421875,"ival-exp",400],[4.689208984375,"ival-cbrt",400],[4.2216796875,"ival-cbrt",800],[2.472412109375,"adjust",2000],[0.843017578125,"ival-mult",400],[14.5234375,"ival-mult",0],[1.802734375,"ival-log1p",2000],[0.237548828125,"ival-add",2000],[0.25048828125,"ival-true",0],[0.359619140625,"exact",0],[1.250244140625,"ival-add",800]],"outcomes":[[170.75634765625,1,"valid",209],[45.94921875,2,"valid",43],[1.257080078125,0,"valid",4]],"time":254.170166015625,"type":"localize"},{"count":[[20,70]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(cbrt.f64 x)","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","(sqrt.f64 x)","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(cbrt.f64 (exp.f64 (log1p.f64 x)))","(exp.f64 (log1p.f64 x))","(log1p.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))"]],"memory":[[717312,16625152]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(/ 1 (pow x 2))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt x)","(+ 1 x)","(sqrt x)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(cbrt (pow x 4))","(* -1/9 (cbrt x))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* x (+ 1 (/ 1 x)))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (pow (sqrt -1) 2)))","(* -1 (* x (- (pow (sqrt -1) 2) (/ 1 x))))","(* -1 (* x (- (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4)))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (cbrt (* x (pow (sqrt -1) 2))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4))))))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/9 (* (cbrt x) (cbrt -1)))"]],"series":[[10.44189453125,"((- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (cbrt x) (+ (* (sqrt x) (sqrt x)) 1) (- (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (cbrt x)) (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (sqrt x) (- (cbrt (exp (log (+ 1 x)))) (cbrt x)) (cbrt (exp (log (+ 1 x)))) (exp (log (+ 1 x))) (log (+ 1 x)) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (cbrt (pow x 4)) (* -1/9 (cbrt x)))","x","-inf"],[7.407958984375,"((- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (cbrt x) (+ (* (sqrt x) (sqrt x)) 1) (- (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (cbrt x)) (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (sqrt x) (- (cbrt (exp (log (+ 1 x)))) (cbrt x)) (cbrt (exp (log (+ 1 x)))) (exp (log (+ 1 x))) (log (+ 1 x)) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (cbrt (pow x 4)) (* -1/9 (cbrt x)))","x","inf"],[7.39111328125,"((- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (cbrt x) (+ (* (sqrt x) (sqrt x)) 1) (- (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (cbrt x)) (cbrt (+ (* (sqrt x) (sqrt x)) 1)) (sqrt x) (- (cbrt (exp (log (+ 1 x)))) (cbrt x)) (cbrt (exp (log (+ 1 x)))) (exp (log (+ 1 x))) (log (+ 1 x)) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (cbrt (pow x 4)) (* -1/9 (cbrt x)))","x","0"]],"time":26.704833984375,"type":"series"},{"count":[[70,69]],"egraph":[[0,8340,1150,0.072753583],[3,5882,1209,0.025924963],[2,2098,1221,0.021926493],[1,743,1230,0.008383229],[0,286,1315,0.002232352]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(/ 1 (pow x 2))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt x)","(+ 1 x)","(sqrt x)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(cbrt (pow x 4))","(* -1/9 (cbrt x))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* x (+ 1 (/ 1 x)))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (pow (sqrt -1) 2)))","(* -1 (* x (- (pow (sqrt -1) 2) (/ 1 x))))","(* -1 (* x (- (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4)))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (cbrt (* x (pow (sqrt -1) 2))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4))))))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/9 (* (cbrt x) (cbrt -1)))"]],"memory":[[62048,33983552]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(cbrt (/ 1 (pow x 2)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","1","#s(literal 1 binary64)","(+ 1 (* 1/3 x))","(fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(cbrt x)","(cbrt.f64 x)","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(sqrt x)","(sqrt.f64 x)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* 5/81 (cbrt (/ 1 (pow x 8))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(/.f64 (fma.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) x (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) x)","(cbrt (pow x 4))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(* -1/9 (cbrt x))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))))) x)","(* x (+ 1 (/ 1 x)))","(-.f64 x #s(literal -1 binary64))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(-.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))))","(* 1/3 (cbrt (pow x 4)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))) (*.f64 x x))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal -5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (*.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal -5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (*.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (pow (sqrt -1) 2)))","x","(* -1 (* x (- (pow (sqrt -1) 2) (/ 1 x))))","(-.f64 x #s(literal -1 binary64))","(* -1 (* x (- (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (-.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x))) x)","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4)))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (-.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)))) x)","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 (/.f64 (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 x (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 10 binary64)))) #s(literal 1/9 binary64))) (pow.f64 x #s(literal 3 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)))) x)","(* -1 (* x (- (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 (/.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) #s(literal 1/3 binary64)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 7 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 16 binary64)))) #s(literal -5/81 binary64) (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 10 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 10 binary64)))) #s(literal -1/9 binary64))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)))) x)","(* -1 (cbrt (* x (pow (sqrt -1) 2))))","(neg.f64 (cbrt.f64 (neg.f64 x)))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1/3 (cbrt (/ 1 (* (pow x 5) (pow (sqrt -1) 4))))))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x))))","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* 1/9 (cbrt (/ x (pow (sqrt -1) 10)))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(*.f64 (-.f64 (/.f64 (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 x (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 10 binary64)))) #s(literal 1/9 binary64))) (pow.f64 x #s(literal 3 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x))) x)","(* -1 (* x (+ (cbrt (/ (pow (sqrt -1) 2) (pow x 2))) (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (cbrt (/ (pow x 10) (pow (sqrt -1) 10)))) (* -5/81 (cbrt (/ (pow x 7) (pow (sqrt -1) 16))))) (pow x 3))) (* 1/3 (cbrt (/ (pow x 4) (pow (sqrt -1) 4))))) (pow x 3))))))","(neg.f64 (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x)) x (/.f64 (-.f64 (/.f64 (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 7 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 16 binary64)))) #s(literal -5/81 binary64) (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 10 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 10 binary64)))) #s(literal -1/9 binary64))) (pow.f64 x #s(literal 3 binary64))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) #s(literal 1/3 binary64))) (*.f64 x x))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(+ (log -1) (* -1 (log (/ -1 x))))","(+.f64 (log.f64 (neg.f64 x)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(-.f64 (+.f64 (log.f64 (neg.f64 x)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (+.f64 (log.f64 (neg.f64 x)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (+.f64 (log.f64 (neg.f64 x)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(-.f64 (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal -1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))) x))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal -1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))) x)) (*.f64 x x))","(* 1/9 (* (cbrt x) (cbrt -1)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":229.7080078125,"type":"simplify"},{"count":[[20,821]],"egraph":[[0,8243,138,0.092575198],[2,1282,148,0.032795807],[1,210,148,0.004913025],[0,59,162,0.001611814],[0,34,171,0.000359721]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(cbrt.f64 x)","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64)))","(sqrt.f64 x)","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(cbrt.f64 (exp.f64 (log1p.f64 x)))","(exp.f64 (log1p.f64 x))","(log1p.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))"]],"memory":[[-1287040,66304976]],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(/.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64))) (neg.f64 (cbrt.f64 x)))","(/.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x))","(/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (cbrt.f64 x))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (exp.f64 (*.f64 #s(literal -2 binary64) (log.f64 x))) #s(literal 1/3 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2/3 binary64))","(pow.f64 x #s(literal -2/3 binary64))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (cbrt.f64 x))))","(/.f64 (neg.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 (cbrt.f64 (neg.f64 x))))","(/.f64 (cbrt.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))) (cbrt.f64 (neg.f64 x)))","(/.f64 (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x)))","(/.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(cbrt.f64 (pow.f64 x #s(literal -2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (cbrt.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3/2 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3/2 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -4 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (pow.f64 x #s(literal -3/2 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (pow.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (neg.f64 x))","(/.f64 (pow.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (neg.f64 x)) #s(literal 3 binary64)))","(/.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) x)","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -3/2 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) x)","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (pow.f64 x #s(literal -3/2 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(neg.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (-.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) (log.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (*.f64 (log.f64 x) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)) #s(literal 1/3 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))))))","(*.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))) (+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (neg.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (*.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x))))) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(fma.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(fma.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(+.f64 (neg.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (sqrt.f64 x) #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 #s(literal -1 binary64)))","(/.f64 (cbrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(cbrt.f64 x)","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 2/3 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))","(*.f64 (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))))","(*.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)))","(*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/3 binary64))","(pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 3/2 binary64))","(pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)))","(/.f64 (exp.f64 (log1p.f64 (*.f64 (neg.f64 x) x))) (exp.f64 (log1p.f64 (neg.f64 x))))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (fma.f64 x x (neg.f64 x)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 (cbrt.f64 x) (pow.f64 x #s(literal 1/6 binary64))) (*.f64 (cbrt.f64 x) (pow.f64 x #s(literal 1/6 binary64))) #s(literal 1 binary64))","(fma.f64 (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 x)) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x #s(literal -1 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (neg.f64 x) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 x (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fabs.f64 (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (fabs.f64 (cbrt.f64 x)) (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 (*.f64 x #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (neg.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(+.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))))))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))) (+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))) (*.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (-.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (fma.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x))))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x))))) (-.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(fma.f64 (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(+.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/3 binary64))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(cbrt.f64 (+.f64 #s(literal 1 binary64) x))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (sqrt.f64 (cbrt.f64 x)))","(*.f64 (sqrt.f64 (cbrt.f64 x)) (sqrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3/2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (sqrt.f64 x) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 x))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/8 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 3/2 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(sqrt.f64 x)","(fabs.f64 (neg.f64 (sqrt.f64 x)))","(fabs.f64 (sqrt.f64 x))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))))))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))) (+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))) (*.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (-.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (fma.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x))))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x))))) (-.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(fma.f64 (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(+.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/3 binary64))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(cbrt.f64 (+.f64 #s(literal 1 binary64) x))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))))","(*.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1 binary64)))","(*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/3 binary64))","(pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 3/2 binary64))","(pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)))","(/.f64 (exp.f64 (log1p.f64 (*.f64 (neg.f64 x) x))) (exp.f64 (log1p.f64 (neg.f64 x))))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (fma.f64 x x (neg.f64 x)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 (cbrt.f64 x) (pow.f64 x #s(literal 1/6 binary64))) (*.f64 (cbrt.f64 x) (pow.f64 x #s(literal 1/6 binary64))) #s(literal 1 binary64))","(fma.f64 (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 x)) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x #s(literal -1 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (neg.f64 x) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 x (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fabs.f64 (cbrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (fabs.f64 (cbrt.f64 x)) (fabs.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 (*.f64 x #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x) #s(literal 1 binary64))","(fma.f64 (neg.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(+.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) #s(literal 3 binary64))","(*.f64 #s(literal 3 binary64) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(*.f64 #s(literal 1 binary64) (log1p.f64 x))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x))) (*.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (neg.f64 x)))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))) (+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 (log1p.f64 (fma.f64 x x (neg.f64 x))) (log1p.f64 (fma.f64 x x (neg.f64 x))))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (neg.f64 x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x)) (fma.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (neg.f64 x)) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log1p.f64 (fma.f64 x x (neg.f64 x))) (log1p.f64 (fma.f64 x x (neg.f64 x))) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x (neg.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))))","(neg.f64 (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (log1p.f64 x) #s(literal 1/3 binary64) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(fma.f64 #s(literal 1/3 binary64) (log1p.f64 x) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x)))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(+.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(+.f64 (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x (neg.f64 x)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(log.f64 (+.f64 #s(literal 1 binary64) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (neg.f64 (sqrt.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (*.f64 x #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 x x)) (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (*.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) #s(literal -1 binary64)) (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (*.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)) (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (sqrt.f64 x)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (neg.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (neg.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) x) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (neg.f64 x))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) x) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) x)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 x x))))","(*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (neg.f64 x)))","(*.f64 (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))","(*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (pow.f64 x #s(literal -2 binary64))))","(pow.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (neg.f64 x))) x)","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x))) x)","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (neg.f64 x))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (neg.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) x)) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (neg.f64 x))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (neg.f64 x))))","(/.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) x)) (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) x)))","(/.f64 (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) (sqrt.f64 x)) (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))","(/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (neg.f64 x)) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (neg.f64 x)) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (neg.f64 x)))","(/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) x) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) x))","(/.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (neg.f64 x)) (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (neg.f64 x)))","(/.f64 (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) x) (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) x))","(/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x)","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (*.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 x x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (neg.f64 x)) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) x) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (neg.f64 x)) (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) x) (/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (*.f64 x x)) (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))) (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))","(neg.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))) (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))","(*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))))","(*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))","(*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))","(pow.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))) (*.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (pow.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))) (-.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (fma.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)) (*.f64 #s(literal 125/531441 binary64) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (pow.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))))","(/.f64 (fma.f64 #s(literal 125/531441 binary64) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 3 binary64))) (fma.f64 #s(literal 25/6561 binary64) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (*.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/729 binary64) x (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 3 binary64))) (fma.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal -1/729 binary64) x))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal -1/729 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))) (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))","(fma.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 #s(literal 5/81 binary64) (pow.f64 x #s(literal 1/6 binary64))) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(fma.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 5/81 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(fma.f64 (/.f64 #s(literal 5/81 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 125/531441 binary64) (pow.f64 x #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (neg.f64 (fma.f64 #s(literal 125/531441 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal -1/729 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 25/6561 binary64) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (-.f64 (pow.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(fma.f64 (fma.f64 #s(literal 125/531441 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (fma.f64 #s(literal 125/531441 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal -1/729 binary64) x)) (pow.f64 (fma.f64 #s(literal 25/6561 binary64) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))) #s(literal -1 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(fma.f64 (cbrt.f64 x) #s(literal -1/9 binary64) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(fma.f64 #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) x) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (/.f64 (pow.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))))","(+.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(+.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(+.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(+.f64 (*.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(+.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(+.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 4/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 4/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 4/3 binary64)) (*.f64 (cbrt.f64 x) x))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 #s(literal 1 binary64) #s(literal 4/3 binary64)))","(*.f64 (cbrt.f64 x) x)","(*.f64 x (cbrt.f64 x))","(pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 2/3 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/3 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 8/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 4 binary64))","(pow.f64 x #s(literal 4/3 binary64))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4/3 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)) #s(literal 1/3 binary64)))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","(*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":335.964111328125,"type":"rewrite"},{"compiler":[[26432,3491]],"memory":[[1676608,87063152]],"time":128.926025390625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","fresh",59.011470609403816,"binary64"],["(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","next",61.361112183359104,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",60.21864191721207,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","next",62.87489653168161,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","done",62.87489653168161,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 4 binary64)) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",30.88384993457677,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (pow.f64 x #s(literal 4/3 binary64)) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",33.55835281886032,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",30.698322163882818,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","fresh",46.21778820440303,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x))","next",14.322315344672498,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) (sqrt.f64 x)) (sqrt.f64 x)))","fresh",14.37870045212539,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) x) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) x)))","fresh",40.27150328128417,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)))","fresh",1.2701796108057701,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x)))","fresh",1.3239096401110957,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))) (*.f64 x x)))","fresh",46.671159654822056,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))))","fresh",1.2721009551736324,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","next",1.3121908421353439,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","fresh",32.81766919081717,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","fresh",1.300826114865137,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","fresh",6.605275487041082,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x))))","fresh",14.711415070424106,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x)))","fresh",14.315166614209355,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)))","next",1.1850073941931374,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","fresh",1.3643599528303616,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","fresh",18.557355179338796,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64)))","fresh",1.2791338223404207,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (exp.f64 (*.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)) #s(literal 1/3 binary64))) #s(literal 1/3 binary64)))","fresh",6.447911031083341,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","done",29.453114287654095,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","fresh",30.428000625675992,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64)))","fresh",29.46159055719098,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64)))","fresh",29.463211797422538,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","fresh",29.969399132857053,"binary64"]],"compiler":[[21,13],[8,7],[7,6],[10,9],[9,8],[30,22],[29,22],[30,21],[22,17],[28,19],[32,21],[51,25],[15,11],[17,13],[39,29],[17,13],[14,12],[15,12],[14,12],[13,11],[36,24],[31,22],[18,15],[16,14],[19,16],[19,13],[17,14],[16,13],[16,13],[22,16],[18,13],[49,36],[21,13],[8,7],[10,9],[30,22],[29,22],[30,21],[22,17],[28,19],[32,21],[51,25],[15,11],[17,13],[39,29],[17,13],[14,12],[15,12],[14,12],[13,11],[36,24],[31,22],[18,15],[16,14],[19,16],[19,13],[17,14],[16,13],[22,16],[18,13],[49,36]],"count":[[938,32]],"kept":[{"done":[1,1],"fresh":[16,2],"new":[916,27],"picked":[5,2]}],"memory":[[5972112,49878352]],"min-error":[[0.0390625,"binary64"]],"time":48.697021484375,"type":"prune"},{"egraph":[[0,8156,214,0.055745752],[19,7503,224,0.048906846],[18,7484,224,0.02959699],[17,7447,224,0.027071405],[16,7253,224,0.018463608],[15,6938,224,0.025859427],[14,6014,224,0.036007755],[13,3843,224,0.032204855],[12,1809,224,0.02301909],[11,1117,224,0.013248415],[10,751,224,0.008378699],[9,513,224,0.003703654],[8,457,224,0.002623938],[7,364,224,0.002582856],[6,275,224,0.002364896],[5,198,224,0.001625873],[4,168,224,0.000907959],[3,152,224,0.000787833],[2,134,224,0.000758058],[1,94,224,0.00076897],[0,63,236,0.000561128],[0,38,238,0.0004068]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x)))","(cbrt.f64 (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(cbrt.f64 (neg.f64 x))","(neg.f64 x)","#s(literal 1/3 binary64)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(pow.f64 x #s(literal 1/3 binary64))","x","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","#s(literal 1/3 binary64)","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","x","#s(literal 2 binary64)","(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(*.f64 (log1p.f64 x) #s(literal 1/3 binary64))","(log1p.f64 x)","x","#s(literal 1/3 binary64)","(cbrt.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x))","(/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x)","(/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x)","(fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","#s(literal 5/81 binary64)","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(cbrt.f64 x)","x","#s(literal -2 binary64)","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","#s(literal -1/9 binary64)","(*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 x) x)","#s(literal 1/3 binary64)"]],"locations":[["(/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x)","cost-diff",0],["(/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x)","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x))","cost-diff",0],["(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","cost-diff",3],["(log1p.f64 x)","cost-diff",0],["(*.f64 (log1p.f64 x) #s(literal 1/3 binary64))","cost-diff",0],["(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","cost-diff",0],["(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","cost-diff",1],["(cbrt.f64 x)","cost-diff",0],["(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","cost-diff",0],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","cost-diff",0],["(pow.f64 x #s(literal 1/3 binary64))","cost-diff","Infinite"],["(cbrt.f64 (/.f64 #s(literal -1 binary64) x))","cost-diff",0],["(/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x)))","cost-diff",0],["(*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)))","cost-diff",0]],"memory":[[-3069952,19819680]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (/.f64 #s(literal -1 binary64) x))))","(*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (/.f64 #s(literal -1 binary64) x)))","(/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x)))","(cbrt.f64 (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(cbrt.f64 (neg.f64 x))","(neg.f64 x)","#s(literal 1/3 binary64)","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(pow.f64 x #s(literal 1/3 binary64))","(cbrt.f64 x)","x","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","#s(literal 1/3 binary64)","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","x","#s(literal 2 binary64)","(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (-.f64 x #s(literal -1 binary64))) (cbrt.f64 x))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(cbrt.f64 (-.f64 x #s(literal -1 binary64)))","(*.f64 (log1p.f64 x) #s(literal 1/3 binary64))","(log1p.f64 x)","x","#s(literal 1/3 binary64)","(cbrt.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) (cbrt.f64 x) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))) x) x))","(/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x)","(/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) (cbrt.f64 x) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))) x) x)","(/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) (cbrt.f64 x) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))) x)","(fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))))","(fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) (cbrt.f64 x) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)))","#s(literal 5/81 binary64)","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(cbrt.f64 x)","x","#s(literal -2 binary64)","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(*.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) (cbrt.f64 x))","#s(literal -1/9 binary64)","(*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 x) x)","#s(literal 1/3 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":434.68701171875,"type":"simplify"},{"compiler":[[212,35]],"locations":[["(/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x)","accuracy",0.265625],["(*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))","accuracy",0.3046875],["(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","accuracy",0.5137100586106522],["(/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x)","accuracy",13.683628649045957],["(cbrt.f64 x)","accuracy",0.07421875],["(*.f64 (log1p.f64 x) #s(literal 1/3 binary64))","accuracy",0.390625],["(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","accuracy",4.261336648774025],["(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","accuracy",60.21929220763894],["(cbrt.f64 x)","accuracy",0.07421875],["(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","accuracy",0.35775375976844204],["(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","accuracy",0.5208587890737681],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","accuracy",0.7050084347438683],["(pow.f64 x #s(literal 1/3 binary64))","accuracy",5.051328159434603],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","accuracy",58.96306154268718],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","accuracy",60.21929220763894],["(cbrt.f64 (/.f64 #s(literal -1 binary64) x))","accuracy",0.109375],["(/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x)))","accuracy",0.37890625],["(*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64))","accuracy",0.41796875],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)))","accuracy",0.7050084347438683]],"memory":[[-6281264,59035680]],"mixsample":[[3.353759765625,"const",800],[18.31005859375,"adjust",800],[16.771240234375,"ival-div",0],[5.68115234375,"ival-exp",0],[0.14208984375,"ival-assert",0],[6.6552734375,"ival-sub",0],[0.01025390625,"ival-sub",400],[12.896240234375,"const",0],[5.918701171875,"ival-log1p",800],[4.397705078125,"ival-log1p",400],[0.724365234375,"ival-cbrt",2000],[8.667236328125,"ival-pow",0],[2.41357421875,"ival-exp",2000],[8.812744140625,"ival-add",0],[1.1220703125,"ival-mult",800],[5.236572265625,"ival-exp",800],[10.691650390625,"ival-cbrt",0],[1.240966796875,"ival-add",400],[5.827880859375,"ival-log1p",0],[6.6484375,"ival-pow2",0],[0.224365234375,"ival-mult",2000],[2.43017578125,"const",400],[5.483642578125,"ival-exp",400],[2.9423828125,"ival-cbrt",400],[3.0537109375,"ival-cbrt",800],[2.6572265625,"adjust",2000],[22.9853515625,"ival-mult",0],[1.042236328125,"ival-mult",400],[2.10498046875,"ival-log1p",2000],[0.15625,"ival-add",2000],[1.194091796875,"const",2000],[0.343994140625,"ival-true",0],[0.87646484375,"ival-add",800],[0.8046875,"exact",0],[1.321044921875,"ival-neg",0]],"outcomes":[[184.861572265625,1,"valid",209],[56.403076171875,2,"valid",43],[1.460693359375,0,"valid",4]],"time":301.39697265625,"type":"localize"},{"count":[[21,76]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x)))","(cbrt.f64 (/.f64 #s(literal -1 binary64) x))","(pow.f64 x #s(literal 1/3 binary64))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","(*.f64 (log1p.f64 x) #s(literal 1/3 binary64))","(log1p.f64 x)","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x))","(/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x)","(/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x)","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))"]],"memory":[[1650688,27660608]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(* (cbrt (/ 1 x)) (cbrt -1))","(cbrt x)","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt (pow x 2))","(* 1/3 x)","(* x (+ 1/3 (* -1/6 x)))","(* x (+ 1/3 (* x (- (* 1/9 x) 1/6))))","(* x (+ 1/3 (* x (- (* x (+ 1/9 (* -1/12 x))) 1/6))))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1/9 (cbrt x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 2))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 1/3 (cbrt (pow x 4)))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* -1/3 (log (/ 1 x)))","(+ (* -1/3 (log (/ 1 x))) (* 1/3 (/ 1 x)))","(- (+ (* -1/3 (log (/ 1 x))) (* 1/3 (/ 1 x))) (/ 1/6 (pow x 2)))","(- (+ (* -1/3 (log (/ 1 x))) (+ (* 1/3 (/ 1 x)) (* 1/9 (/ 1 (pow x 3))))) (/ 1/6 (pow x 2)))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt x))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* (cbrt (pow x 2)) (pow (cbrt -1) 3)))","(* 1/3 (+ (log -1) (* -1 (log (/ -1 x)))))","(+ (* 1/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* 1/3 (/ 1 x)))","(+ (* -1 (/ (- (* 1/6 (/ 1 x)) 1/3) x)) (* 1/3 (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (- (* -1 (/ (- (* 1/9 (/ 1 x)) 1/6) x)) 1/3) x)) (* 1/3 (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1/3 (* (cbrt (pow x 4)) (cbrt -1)))","(* (pow x 2) (+ (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))))","(* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))","(+ (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2))))) x)) (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* -1/3 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* 5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2)))"]],"series":[[35.39501953125,"((- (cbrt (+ x 1)) (cbrt x)) (* (/ (cbrt (/ -1 x)) (cbrt (neg x))) 1/3) (/ (cbrt (/ -1 x)) (cbrt (neg x))) (cbrt (/ -1 x)) (pow x 1/3) (- (cbrt (+ x 1)) (pow x 1/3)) (cbrt (+ x 1)) (- (cbrt (+ x 1)) (cbrt x)) (/ 1/3 (pow (cbrt x) 2)) (pow (cbrt x) 2) (cbrt x) (exp (* (log (+ 1 x)) 1/3)) (- (exp (* (log (+ 1 x)) 1/3)) (cbrt x)) (* (log (+ 1 x)) 1/3) (log (+ 1 x)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3)) (- (cbrt (+ x 1)) (cbrt x)) (/ (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) x) (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (pow (cbrt x) -2) (* (* (cbrt x) x) 1/3))","x","-inf"],[16.5859375,"((- (cbrt (+ x 1)) (cbrt x)) (* (/ (cbrt (/ -1 x)) (cbrt (neg x))) 1/3) (/ (cbrt (/ -1 x)) (cbrt (neg x))) (cbrt (/ -1 x)) (pow x 1/3) (- (cbrt (+ x 1)) (pow x 1/3)) (cbrt (+ x 1)) (- (cbrt (+ x 1)) (cbrt x)) (/ 1/3 (pow (cbrt x) 2)) (pow (cbrt x) 2) (cbrt x) (exp (* (log (+ 1 x)) 1/3)) (- (exp (* (log (+ 1 x)) 1/3)) (cbrt x)) (* (log (+ 1 x)) 1/3) (log (+ 1 x)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3)) (- (cbrt (+ x 1)) (cbrt x)) (/ (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) x) (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (pow (cbrt x) -2) (* (* (cbrt x) x) 1/3))","x","inf"],[16.593994140625,"((- (cbrt (+ x 1)) (cbrt x)) (* (/ (cbrt (/ -1 x)) (cbrt (neg x))) 1/3) (/ (cbrt (/ -1 x)) (cbrt (neg x))) (cbrt (/ -1 x)) (pow x 1/3) (- (cbrt (+ x 1)) (pow x 1/3)) (cbrt (+ x 1)) (- (cbrt (+ x 1)) (cbrt x)) (/ 1/3 (pow (cbrt x) 2)) (pow (cbrt x) 2) (cbrt x) (exp (* (log (+ 1 x)) 1/3)) (- (exp (* (log (+ 1 x)) 1/3)) (cbrt x)) (* (log (+ 1 x)) 1/3) (log (+ 1 x)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3)) (- (cbrt (+ x 1)) (cbrt x)) (/ (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) x) (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (pow (cbrt x) -2) (* (* (cbrt x) x) 1/3))","x","0"]],"time":71.0029296875,"type":"series"},{"count":[[76,75]],"egraph":[[0,8456,1100,0.111370289],[3,5859,1172,0.057403686],[2,2052,1182,0.038124942],[1,785,1199,0.012990473],[0,285,1274,0.004994502]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(* (cbrt (/ 1 x)) (cbrt -1))","(cbrt x)","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(cbrt (pow x 2))","(* 1/3 x)","(* x (+ 1/3 (* -1/6 x)))","(* x (+ 1/3 (* x (- (* 1/9 x) 1/6))))","(* x (+ 1/3 (* x (- (* x (+ 1/9 (* -1/12 x))) 1/6))))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1/9 (cbrt x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 2))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 1/3 (cbrt (pow x 4)))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* -1/3 (log (/ 1 x)))","(+ (* -1/3 (log (/ 1 x))) (* 1/3 (/ 1 x)))","(- (+ (* -1/3 (log (/ 1 x))) (* 1/3 (/ 1 x))) (/ 1/6 (pow x 2)))","(- (+ (* -1/3 (log (/ 1 x))) (+ (* 1/3 (/ 1 x)) (* 1/9 (/ 1 (pow x 3))))) (/ 1/6 (pow x 2)))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt x))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* (cbrt (pow x 2)) (pow (cbrt -1) 3)))","(* 1/3 (+ (log -1) (* -1 (log (/ -1 x)))))","(+ (* 1/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* 1/3 (/ 1 x)))","(+ (* -1 (/ (- (* 1/6 (/ 1 x)) 1/3) x)) (* 1/3 (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (- (* -1 (/ (- (* 1/9 (/ 1 x)) 1/6) x)) 1/3) x)) (* 1/3 (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1/3 (* (cbrt (pow x 4)) (cbrt -1)))","(* (pow x 2) (+ (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))))","(* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))","(+ (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2))))) x)) (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* -1/3 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* 5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2)))"]],"memory":[[302992,40275408]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(cbrt (/ 1 (pow x 2)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(* (cbrt (/ 1 x)) (cbrt -1))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) x)))","(cbrt x)","(cbrt.f64 x)","1","#s(literal 1 binary64)","(+ 1 (* 1/3 x))","(fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(cbrt (pow x 2))","(cbrt.f64 (*.f64 x x))","(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* -1/6 x)))","(*.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* x (- (* 1/9 x) 1/6))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/9 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* x (- (* x (+ 1/9 (* -1/12 x))) 1/6))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/12 binary64) x #s(literal 1/9 binary64)) x #s(literal -1/6 binary64)) x #s(literal 1/3 binary64)) x)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1/9 (cbrt x))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 5/81 (cbrt (/ 1 (pow x 5))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (*.f64 x x))","(* 1/3 (cbrt (pow x 4)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -10/243 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))))) x)","(* -1/3 (log (/ 1 x)))","(*.f64 (log.f64 x) #s(literal 1/3 binary64))","(+ (* -1/3 (log (/ 1 x))) (* 1/3 (/ 1 x)))","(fma.f64 (log.f64 x) #s(literal 1/3 binary64) (/.f64 #s(literal 1/3 binary64) x))","(- (+ (* -1/3 (log (/ 1 x))) (* 1/3 (/ 1 x))) (/ 1/6 (pow x 2)))","(fma.f64 (log.f64 x) #s(literal 1/3 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) x)) x))","(- (+ (* -1/3 (log (/ 1 x))) (+ (* 1/3 (/ 1 x)) (* 1/9 (/ 1 (pow x 3))))) (/ 1/6 (pow x 2)))","(fma.f64 (log.f64 x) #s(literal 1/3 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/9 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/3 binary64)) x))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) x) (log.f64 x))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))))","(* 1/3 (cbrt x))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) x)","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))) x)","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal 5/81 binary64) (*.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal -1/3 binary64) (/.f64 (fma.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (*.f64 (/.f64 #s(literal -5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","(* -1 (* (cbrt (pow x 2)) (pow (cbrt -1) 3)))","(cbrt.f64 (*.f64 x x))","(* 1/3 (+ (log -1) (* -1 (log (/ -1 x)))))","(*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64))","(+ (* 1/3 (+ (log -1) (* -1 (log (/ -1 x))))) (* 1/3 (/ 1 x)))","(fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64) (/.f64 #s(literal 1/3 binary64) x))","(+ (* -1 (/ (- (* 1/6 (/ 1 x)) 1/3) x)) (* 1/3 (+ (log -1) (* -1 (log (/ -1 x))))))","(fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/6 binary64) x)) x))","(+ (* -1 (/ (- (* -1 (/ (- (* 1/9 (/ 1 x)) 1/6) x)) 1/3) x)) (* 1/3 (+ (log -1) (* -1 (log (/ -1 x))))))","(fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/9 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/3 binary64)) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(* -1/3 (* (cbrt (pow x 4)) (cbrt -1)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))","(* (pow x 2) (+ (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))))","(*.f64 (*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) x) x) (fma.f64 #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/9 binary64))))","(* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(+ (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))","(*.f64 (fma.f64 #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/9 binary64))) (cbrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2))))) x)) (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(fma.f64 (*.f64 #s(literal -1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))) x))","(* -1/3 (* (cbrt x) (cbrt -1)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) x) (fma.f64 #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/9 binary64))))","(* -1 (* x (+ (* -1 (/ (+ (* 5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(fma.f64 (*.f64 x (*.f64 #s(literal -1/3 binary64) (cbrt.f64 #s(literal -1 binary64)))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2)))","(/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":394.35302734375,"type":"simplify"},{"count":[[21,800]],"egraph":[[0,8482,150,0.094568933],[2,1418,166,0.041751406],[1,229,184,0.0056058],[0,63,192,0.00184274],[0,38,190,0.000398311]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x)))","(cbrt.f64 (/.f64 #s(literal -1 binary64) x))","(pow.f64 x #s(literal 1/3 binary64))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(cbrt.f64 x)","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","(*.f64 (log1p.f64 x) #s(literal 1/3 binary64))","(log1p.f64 x)","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x))","(/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x)","(/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x)","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))"]],"memory":[[4271824,63227280]],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x))) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64))) (cbrt.f64 x))","(/.f64 (neg.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))) (cbrt.f64 x))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))) (cbrt.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x))) (neg.f64 (cbrt.f64 x)))","(/.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) (neg.f64 (cbrt.f64 x)))","(/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cbrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cbrt.f64 x)) (*.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))","(neg.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) (cbrt.f64 #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -2/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 x #s(literal -1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -2/3 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (exp.f64 #s(literal -2 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -4 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(pow.f64 (neg.f64 x) #s(literal -2/3 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 2/3 binary64))","(pow.f64 x #s(literal -2/3 binary64))","(/.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))) (cbrt.f64 x))","(/.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(neg.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(cbrt.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cbrt.f64 x))) (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64)) (*.f64 (log.f64 (neg.f64 x)) #s(literal 1/3 binary64))))","(exp.f64 (-.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64)) (log.f64 (cbrt.f64 x))))","(exp.f64 (neg.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64) (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2/3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/12 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/12 binary64)) #s(literal -2 binary64)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 x #s(literal -1/6 binary64))) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal -1 binary64) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/3 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -1 binary64))","(pow.f64 (neg.f64 x) #s(literal -1/3 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/3 binary64))","(pow.f64 x #s(literal -1/3 binary64))","(/.f64 (neg.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 x #s(literal -1/6 binary64)))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))))","(/.f64 (neg.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64)))) (cbrt.f64 x))","(/.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 x #s(literal -1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (cbrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 1/6 binary64)) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 x #s(literal -1/6 binary64)))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(cbrt.f64 (pow.f64 x #s(literal -1 binary64)))","(cbrt.f64 (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 1/3 binary64))))","(exp.f64 (neg.f64 (log.f64 (cbrt.f64 x))))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/3 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 1/6 binary64)) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal -1/3 binary64)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x))","(*.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 x) (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))))","(*.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 x) (cbrt.f64 #s(literal -1 binary64)))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (cbrt.f64 x)))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(pow.f64 (exp.f64 (log.f64 (neg.f64 x))) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 (neg.f64 x) #s(literal 1/3 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1/3 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (neg.f64 (*.f64 x x))) (cbrt.f64 x))","(/.f64 (cbrt.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (fma.f64 x x #s(literal 0 binary64))))","(/.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 #s(literal -1 binary64))))","(/.f64 (neg.f64 (cbrt.f64 x)) #s(literal -1 binary64))","(/.f64 (cbrt.f64 x) (cbrt.f64 #s(literal -1 binary64)))","(/.f64 (cbrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (cbrt.f64 x)))","(cbrt.f64 (neg.f64 x))","(cbrt.f64 x)","(-.f64 #s(literal 0 binary64) (neg.f64 (cbrt.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 1/6 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 1/3 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))","(*.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(*.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))))))","(*.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))) (+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (neg.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (fma.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (*.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x))))) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(fma.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(+.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))) (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(+.f64 (neg.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x))) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64))) (cbrt.f64 x))","(/.f64 (neg.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))) (cbrt.f64 x))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))) (cbrt.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(/.f64 (*.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x))) (neg.f64 (cbrt.f64 x)))","(/.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) (neg.f64 (cbrt.f64 x)))","(/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cbrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cbrt.f64 x)) (*.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))","(neg.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64)))) (cbrt.f64 x))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal -1/6 binary64))) (/.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal -1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) (cbrt.f64 #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1/6 binary64))) (/.f64 (cbrt.f64 x) (pow.f64 (neg.f64 x) #s(literal -1/6 binary64))))","(*.f64 (/.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 2/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (cbrt.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x))))","(*.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(*.f64 (cbrt.f64 x) (*.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64)))))","(*.f64 (cbrt.f64 x) (cbrt.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (*.f64 x (neg.f64 x)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/6 binary64))","(pow.f64 (*.f64 (neg.f64 x) x) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1/3 binary64))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 4 binary64))","(pow.f64 (neg.f64 (cbrt.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(pow.f64 (neg.f64 x) #s(literal 2/3 binary64))","(pow.f64 x #s(literal 2/3 binary64))","(/.f64 (neg.f64 (cbrt.f64 x)) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(/.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(/.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(cbrt.f64 (*.f64 x (neg.f64 x)))","(cbrt.f64 (*.f64 (neg.f64 x) x))","(cbrt.f64 (*.f64 x x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x))) (/.f64 (cbrt.f64 x) (/.f64 #s(literal -1 binary64) (cbrt.f64 x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(exp.f64 (-.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 1/3 binary64)) (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64))))","(exp.f64 (fma.f64 (log.f64 (neg.f64 x)) #s(literal 1/3 binary64) (log.f64 (cbrt.f64 x))))","(exp.f64 (+.f64 (log.f64 (cbrt.f64 x)) (*.f64 (log.f64 (neg.f64 x)) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2/3 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x))","(*.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 x) (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))))","(*.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 x) (cbrt.f64 #s(literal -1 binary64)))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (cbrt.f64 x)))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(pow.f64 (exp.f64 (log.f64 (neg.f64 x))) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 (neg.f64 x) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 (neg.f64 x) #s(literal 1/3 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1/3 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (neg.f64 (*.f64 x x))) (cbrt.f64 x))","(/.f64 (cbrt.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (fma.f64 x x #s(literal 0 binary64))))","(/.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 #s(literal -1 binary64))))","(/.f64 (neg.f64 (cbrt.f64 x)) #s(literal -1 binary64))","(/.f64 (cbrt.f64 x) (cbrt.f64 #s(literal -1 binary64)))","(/.f64 (cbrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (cbrt.f64 x)))","(cbrt.f64 (neg.f64 x))","(cbrt.f64 x)","(-.f64 #s(literal 0 binary64) (neg.f64 (cbrt.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 1/6 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 1/3 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))","(*.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (/.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (/.f64 (log1p.f64 x) #s(literal 2 binary64))))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 x))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/6 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/3 binary64))","(pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (cbrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (cbrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (cbrt.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 (*.f64 (neg.f64 x) x))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 (neg.f64 x))))","(/.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 (fma.f64 x x (neg.f64 x)))))","(/.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64))) (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x)) (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(cbrt.f64 (+.f64 #s(literal 1 binary64) x))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal 1/3 binary64))) (log1p.f64 x)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(*.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))))))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))) (+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))) (*.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (-.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (fma.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (*.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) x)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x))))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x))))) (-.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (/.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (/.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (cbrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64)) (pow.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (cbrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (pow.f64 (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(+.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))) (neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)))))","(+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64))))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))))","(+.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (cbrt.f64 x)))","(*.f64 (log1p.f64 x) (log.f64 (exp.f64 #s(literal 1/3 binary64))))","(*.f64 (log1p.f64 x) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (log1p.f64 x))","(-.f64 (log.f64 (cbrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (cbrt.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (cbrt.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (cbrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log.f64 (cbrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (cbrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(+.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/6 binary64))))","(log.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 #s(literal 3 binary64) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) #s(literal 3 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 x))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))) (+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x))) (*.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (neg.f64 x)))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 (log1p.f64 (fma.f64 x x (neg.f64 x))) (log1p.f64 (fma.f64 x x (neg.f64 x))))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (neg.f64 x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x)) (fma.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (neg.f64 x)) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log1p.f64 (fma.f64 x x (neg.f64 x))) (log1p.f64 (fma.f64 x x (neg.f64 x))) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x (neg.f64 x)))))))","(neg.f64 (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (log1p.f64 x) (log.f64 (exp.f64 #s(literal 1/3 binary64))) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(fma.f64 (log1p.f64 x) #s(literal 1/3 binary64) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(fma.f64 #s(literal 1/3 binary64) (log1p.f64 x) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x)))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x (neg.f64 x))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(+.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))) (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))","(+.f64 (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x (neg.f64 x)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) (log.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(log.f64 (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (cbrt.f64 x)) (/.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/27 binary64) (*.f64 #s(literal -1/729 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))))","(*.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64))) (pow.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/27 binary64) (*.f64 #s(literal -1/729 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (*.f64 (cbrt.f64 x) x))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/27 binary64) (*.f64 #s(literal -1/729 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 x) (+.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))","(*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))) (fma.f64 (/.f64 #s(literal 1/81 binary64) (cbrt.f64 x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/27 binary64) (*.f64 #s(literal -1/729 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)))) (pow.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/27 binary64) (*.f64 #s(literal -1/729 binary64) x))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (*.f64 (cbrt.f64 x) x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/27 binary64) (*.f64 #s(literal -1/729 binary64) x))) (neg.f64 (fma.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/27 binary64) (*.f64 #s(literal -1/729 binary64) x)) (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (*.f64 (cbrt.f64 x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/27 binary64) (*.f64 #s(literal -1/729 binary64) x)) (fma.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (*.f64 (cbrt.f64 x) x)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/27 binary64) (*.f64 #s(literal -1/729 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) #s(literal -1/9 binary64)) (cbrt.f64 x)) (/.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x)) (/.f64 #s(literal -1/9 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(fma.f64 (/.f64 #s(literal 1/81 binary64) (cbrt.f64 x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (cbrt.f64 x)) (/.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(fma.f64 (/.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (/.f64 (*.f64 (cbrt.f64 x) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x)) (/.f64 #s(literal 1/81 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(fma.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 x)) (/.f64 (*.f64 #s(literal -1/9 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(fma.f64 (*.f64 #s(literal -1/9 binary64) (pow.f64 x #s(literal 1/6 binary64))) (pow.f64 x #s(literal 1/6 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) x (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -1/9 binary64)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 (cbrt.f64 x) (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 (cbrt.f64 x) #s(literal -1/9 binary64) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) x) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 x (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))","(+.f64 (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(+.f64 (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)))))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) (*.f64 x x)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)))))))","(*.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (pow.f64 x #s(literal 1/2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (cbrt.f64 x)))","(*.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (cbrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (pow.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (pow.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 1/2 binary64))) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/2 binary64))) (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (cbrt.f64 x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x))","(*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) x) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x))","(*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) #s(literal 1 binary64))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (cbrt.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) x))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(pow.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) (*.f64 (*.f64 x x) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (*.f64 x (neg.f64 x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) (neg.f64 x))","(/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) x)","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 (*.f64 x (neg.f64 x))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 (neg.f64 (*.f64 x x))))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (*.f64 x x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)))))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (neg.f64 x)) (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(neg.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) x))","(-.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (*.f64 (*.f64 x x) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))) (/.f64 (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x (neg.f64 x))) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (*.f64 x (neg.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 x x))) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 (*.f64 x x))))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) x))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) x))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (pow.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) x) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)))))))","(*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) (pow.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) (cbrt.f64 x)) (/.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (pow.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (cbrt.f64 x)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) x) (pow.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) x) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) x) (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x)))","(*.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) x)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) #s(literal 1 binary64))","(*.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x))","(pow.f64 (/.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) x)) (neg.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) x)) (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)))))))","(/.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) x) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))","(/.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64))))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64))))) (neg.f64 (*.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) (*.f64 x (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) (*.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (*.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) x))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (neg.f64 x))","(/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) #s(literal 1 binary64))","(/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x)","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (/.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64)))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64))))) x) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (-.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)))))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 125/531441 binary64) (*.f64 x (pow.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (neg.f64 x) (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)))","(-.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (*.f64 x (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))) (/.f64 (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)) (*.f64 x (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal 25/6561 binary64)) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) x) (/.f64 (/.f64 (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) x))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) (cbrt.f64 #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/6 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (/.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -2/3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/6 binary64)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 x #s(literal -1/6 binary64))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/6 binary64))))","(*.f64 (pow.f64 x #s(literal -1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -2/3 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (exp.f64 #s(literal -2 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -4 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(pow.f64 (neg.f64 x) #s(literal -2/3 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 2/3 binary64))","(pow.f64 x #s(literal -2/3 binary64))","(/.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))) (cbrt.f64 x))","(/.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(neg.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(cbrt.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cbrt.f64 x))) (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64)) (*.f64 (log.f64 (neg.f64 x)) #s(literal 1/3 binary64))))","(exp.f64 (-.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64)) (log.f64 (cbrt.f64 x))))","(exp.f64 (neg.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64) (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2/3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -2 binary64)))","(*.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) x)","(*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (*.f64 #s(literal 1/3 binary64) x)))","(*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 x) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) x))","(*.f64 x (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":360.344970703125,"type":"rewrite"},{"compiler":[[20142,2883]],"memory":[[1886800,70146656]],"time":118.8720703125,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","fresh",59.4571796992713,"binary64"],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","fresh",59.011470609403816,"binary64"],["(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","done",61.361112183359104,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",60.21864191721207,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","done",62.87489653168161,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","next",60.5611895638032,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","done",62.87489653168161,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (*.f64 x x)))","fresh",30.679084615040633,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",30.698322163882818,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","next",46.21778820440303,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)))","fresh",1.2701796108057701,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x))))","fresh",1.3239096401110957,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (/.f64 #s(literal -1 binary64) x)) x))","fresh",14.316054077450968,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","next",1.0689534537049858,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))) (*.f64 x x)))","fresh",46.671159654822056,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))","fresh",1.261633377075619,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","done",1.3121908421353439,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","fresh",6.606697214905499,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","next",1.3398885668891085,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64)))))","fresh",5.79888714295699,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","fresh",30.506729121666154,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","fresh",32.81766919081717,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))))","fresh",1.3499866607704722,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","fresh",1.300826114865137,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","fresh",6.605275487041082,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)))","done",1.1850073941931374,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64)))","fresh",1.2791338223404207,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","fresh",5.803328084545418,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (exp.f64 (*.f64 (log.f64 x) #s(literal -2/3 binary64))) #s(literal 1/3 binary64)))","fresh",6.447911031083341,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","done",29.453114287654095,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","fresh",30.428000625675992,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64)))","next",29.46159055719098,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) x) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","fresh",29.969399132857053,"binary64"]],"compiler":[[12,8],[21,13],[8,7],[7,6],[10,9],[10,9],[9,8],[25,18],[30,21],[22,17],[15,11],[18,14],[28,21],[35,24],[39,29],[16,14],[14,12],[13,11],[16,14],[16,14],[14,11],[15,12],[19,14],[14,12],[13,11],[18,15],[19,13],[16,14],[15,13],[16,13],[16,13],[22,16],[47,33],[12,8],[21,13],[10,9],[25,18],[30,21],[22,17],[15,11],[18,14],[28,21],[35,24],[39,29],[16,14],[13,11],[16,14],[16,14],[14,11],[15,12],[19,14],[14,12],[13,11],[19,13],[16,14],[15,13],[16,13],[22,16],[47,33]],"count":[[759,33]],"kept":[{"done":[3,3],"fresh":[24,11],"new":[727,15],"picked":[5,4]}],"memory":[[-9399360,41251328]],"min-error":[[0.0078125,"binary64"]],"time":76.75,"type":"prune"},{"egraph":[[0,8011,258,0.055628502],[13,7217,264,0.017453433],[12,3744,264,0.027770754],[11,1736,264,0.023836326],[10,1177,264,0.013207944],[9,867,264,0.006373785],[8,762,264,0.00626249],[7,617,264,0.004449483],[6,502,264,0.004188991],[5,360,264,0.002471589],[4,258,264,0.001720789],[3,198,264,0.001211928],[2,151,280,0.000988409],[1,108,280,0.000759359],[0,74,297,0.000631829],[0,48,301,0.000426369]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","(/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","#s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","#s(literal 1/3 binary64)","(cbrt.f64 x)","x","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(cbrt.f64 (neg.f64 x))","(neg.f64 x)","x","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64))","(cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","#s(literal -1 binary64)","(sqrt.f64 x)","x","(/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) x)","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","#s(literal 1/3 binary64)","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","#s(literal 1 binary64)","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(cbrt.f64 x)","x","#s(literal -2 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","#s(literal -1/9 binary64)","(cbrt.f64 x)","(*.f64 x x)"]],"locations":[["(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","cost-diff",0],["(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","cost-diff",0],["(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","cost-diff",0],["(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","cost-diff",0],["(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","cost-diff",2],["(cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x))))","cost-diff",0],["(*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64)))","cost-diff",0],["(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))","cost-diff",6],["(neg.f64 x)","cost-diff",0],["(cbrt.f64 (neg.f64 x))","cost-diff",0],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","cost-diff",0],["(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","cost-diff",0],["#s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","cost-diff",0],["(/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","cost-diff",0]],"memory":[[1544944,24421888]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) x))","(/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","(/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) x)","#s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","#s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))","#s(literal 1/3 binary64)","(cbrt.f64 x)","x","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(cbrt.f64 (neg.f64 x))","(neg.f64 x)","x","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x))))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","#s(literal -1 binary64)","(sqrt.f64 x)","x","(/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x))","(pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 3 binary64))","(/.f64 #s(literal -1 binary64) x)","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","#s(literal 1/3 binary64)","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","#s(literal 1 binary64)","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(cbrt.f64 x)","x","#s(literal -2 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","(*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))","#s(literal -1/9 binary64)","(cbrt.f64 x)","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":236.06396484375,"type":"simplify"},{"compiler":[[224,42]],"locations":[["(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","accuracy",0.30859375],["(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","accuracy",0.40072250976844204],["(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","accuracy",30.1595468153402],["(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","accuracy",30.25517322623943],["(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","accuracy",0.27734375],["(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","accuracy",0.35775375976844204],["(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","accuracy",0.5137100586106522],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","accuracy",0.7050084347438683],["(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","accuracy",0.2890625],["(*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64))","accuracy",0.41796875],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64)))","accuracy",0.7050084347438683],["(cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x))))","accuracy",28.636509875788597],["(neg.f64 x)","accuracy",0.0],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","accuracy",0.015625],["(cbrt.f64 (neg.f64 x))","accuracy",0.07421875],["#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","accuracy",58.96306154268718],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","accuracy",0.14698300511979268],["(/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","accuracy",0.265625],["(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","accuracy",0.33984375],["#s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","accuracy",0.700291507638238]],"memory":[[7313696,64361840]],"mixsample":[[23.715087890625,"ival-div",0],[18.33984375,"adjust",800],[0.1298828125,"ival-assert",0],[5.8955078125,"ival-sub",0],[0.005126953125,"ival-sub",400],[2.690185546875,"ival-cbrt",400],[16.23095703125,"const",0],[2.1708984375,"ival-sqrt",0],[0.659912109375,"ival-cbrt",2000],[2.775146484375,"ival-cbrt",800],[2.845703125,"adjust",2000],[20.37158203125,"ival-pow",0],[10.6435546875,"ival-add",0],[30.916748046875,"ival-mult",0],[12.66357421875,"ival-cbrt",0],[0.148193359375,"ival-add",2000],[1.193359375,"ival-add",400],[0.354736328125,"ival-true",0],[0.962646484375,"ival-add",800],[0.746826171875,"exact",0],[1.681640625,"ival-neg",0]],"outcomes":[[156.2275390625,1,"valid",209],[43.87255859375,2,"valid",43],[2.98095703125,0,"valid",4]],"time":255.01806640625,"type":"localize"},{"count":[[22,74]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","(/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","#s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(cbrt.f64 (neg.f64 x))","(neg.f64 x)","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64))","(cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x))))","(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))"]],"memory":[[-218848,23986240]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 2))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 1/3 (cbrt x))","(- 1 (* (cbrt x) (cbrt -1)))","(- (+ 1 (* 1/3 x)) (* (cbrt x) (cbrt -1)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (* (cbrt x) (cbrt -1)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (* (cbrt x) (cbrt -1)))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(* (cbrt x) (cbrt -1))","(* -1 x)","(/ 1 (pow x 2))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(cbrt (pow x 2))","(* -1/9 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(* -1/9 (cbrt x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(cbrt (pow x 4))","(* -1 (sqrt (/ 1 x)))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* x (- (cbrt (/ 1 (pow x 2))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* x (- (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* x (- (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* x (- (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(cbrt x)","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))","(+ (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2))))) x)) (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* -1/3 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* 5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (- (* (cbrt (/ 1 (pow x 2))) (cbrt -1)) (cbrt (/ 1 (pow x 2))))))","(* -1 (* x (- (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (cbrt (/ 1 (pow x 2))))))","(* -1 (* x (- (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (cbrt (/ 1 (pow x 2))))))","(* -1 (* x (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (cbrt (/ 1 (pow x 2))))))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (cbrt x))","(/ -1 (* (pow x 2) (pow (sqrt -1) 2)))","(* 1/3 (* (cbrt (/ 1 (* (pow x 2) (pow (sqrt -1) 2)))) (cbrt -1)))","(* (cbrt (/ 1 (* (pow x 2) (pow (sqrt -1) 2)))) (cbrt -1))","(* -1 (* (cbrt (pow x 2)) (pow (cbrt -1) 3)))","(* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2)))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/9 (* (cbrt x) (cbrt -1)))"]],"series":[[17.092041015625,"((- (cbrt (+ x 1)) (cbrt x)) (/ (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) x) (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (* 1/3 (cbrt x)) (- (cbrt (+ x 1)) (cbrt (neg x))) (cbrt (+ x 1)) (cbrt (neg x)) (neg x) (* (/ -1 (sqrt x)) (/ (/ -1 x) (sqrt x))) (- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (* (/ -1 (sqrt x)) (/ (/ -1 x) (sqrt x)))) 1/3) (cbrt (* (/ -1 (sqrt x)) (/ (/ -1 x) (sqrt x)))) (/ 1/3 (/ 1 (pow (cbrt x) -2))) (- (cbrt (+ x 1)) (cbrt x)) (/ 1 (pow (cbrt x) -2)) (pow (cbrt x) -2) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (cbrt (pow x 4)) (/ -1 (sqrt x)) (* -1/9 (cbrt x)))","x","-inf"],[10.3349609375,"((- (cbrt (+ x 1)) (cbrt x)) (/ (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) x) (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (* 1/3 (cbrt x)) (- (cbrt (+ x 1)) (cbrt (neg x))) (cbrt (+ x 1)) (cbrt (neg x)) (neg x) (* (/ -1 (sqrt x)) (/ (/ -1 x) (sqrt x))) (- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (* (/ -1 (sqrt x)) (/ (/ -1 x) (sqrt x)))) 1/3) (cbrt (* (/ -1 (sqrt x)) (/ (/ -1 x) (sqrt x)))) (/ 1/3 (/ 1 (pow (cbrt x) -2))) (- (cbrt (+ x 1)) (cbrt x)) (/ 1 (pow (cbrt x) -2)) (pow (cbrt x) -2) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (cbrt (pow x 4)) (/ -1 (sqrt x)) (* -1/9 (cbrt x)))","x","inf"],[14.89697265625,"((- (cbrt (+ x 1)) (cbrt x)) (/ (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) x) (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (* 1/3 (cbrt x)) (- (cbrt (+ x 1)) (cbrt (neg x))) (cbrt (+ x 1)) (cbrt (neg x)) (neg x) (* (/ -1 (sqrt x)) (/ (/ -1 x) (sqrt x))) (- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (* (/ -1 (sqrt x)) (/ (/ -1 x) (sqrt x)))) 1/3) (cbrt (* (/ -1 (sqrt x)) (/ (/ -1 x) (sqrt x)))) (/ 1/3 (/ 1 (pow (cbrt x) -2))) (- (cbrt (+ x 1)) (cbrt x)) (/ 1 (pow (cbrt x) -2)) (pow (cbrt x) -2) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (* -1/9 (cbrt x))) (cbrt (pow x 4)) (/ -1 (sqrt x)) (* -1/9 (cbrt x)))","x","0"]],"time":44.3759765625,"type":"series"},{"count":[[74,74]],"egraph":[[0,8224,1207,0.094001982],[3,4599,1280,0.037543705],[2,1717,1290,0.01894274],[1,607,1332,0.006176018],[0,229,1409,0.002344644]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 2))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 1/3 (cbrt x))","(- 1 (* (cbrt x) (cbrt -1)))","(- (+ 1 (* 1/3 x)) (* (cbrt x) (cbrt -1)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (* (cbrt x) (cbrt -1)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (* (cbrt x) (cbrt -1)))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(* (cbrt x) (cbrt -1))","(* -1 x)","(/ 1 (pow x 2))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(cbrt (pow x 2))","(* -1/9 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(* -1/9 (cbrt x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(cbrt (pow x 4))","(* -1 (sqrt (/ 1 x)))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* x (- (cbrt (/ 1 (pow x 2))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* x (- (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* x (- (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* x (- (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(cbrt x)","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))","(+ (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2))))) x)) (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(* -1/3 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* 5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(* -1 (* x (- (* (cbrt (/ 1 (pow x 2))) (cbrt -1)) (cbrt (/ 1 (pow x 2))))))","(* -1 (* x (- (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (cbrt (/ 1 (pow x 2))))))","(* -1 (* x (- (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (cbrt (/ 1 (pow x 2))))))","(* -1 (* x (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (cbrt (/ 1 (pow x 2))))))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (cbrt x))","(/ -1 (* (pow x 2) (pow (sqrt -1) 2)))","(* 1/3 (* (cbrt (/ 1 (* (pow x 2) (pow (sqrt -1) 2)))) (cbrt -1)))","(* (cbrt (/ 1 (* (pow x 2) (pow (sqrt -1) 2)))) (cbrt -1))","(* -1 (* (cbrt (pow x 2)) (pow (cbrt -1) 3)))","(* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2)))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/9 (* (cbrt x) (cbrt -1)))"]],"memory":[[-3168240,42323200]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 5/81 (cbrt (/ 1 (pow x 5))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (*.f64 x x))","(* 1/3 (cbrt x))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(- 1 (* (cbrt x) (cbrt -1)))","(neg.f64 (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x) #s(literal -1 binary64)))","(- (+ 1 (* 1/3 x)) (* (cbrt x) (cbrt -1)))","(-.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64)) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (* (cbrt x) (cbrt -1)))","(fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x) (fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (* (cbrt x) (cbrt -1)))","(fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* 1/3 x))","(fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(* (cbrt x) (cbrt -1))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x))","(* -1 x)","(neg.f64 x)","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(cbrt (/ 1 (pow x 2)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(cbrt (pow x 2))","(cbrt.f64 (*.f64 x x))","(* -1/9 (cbrt (/ 1 (pow x 5))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(* -1/9 (cbrt x))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt (pow x 4))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(* -1 (sqrt (/ 1 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -10/243 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64))))","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))) x)","(* x (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64)))) x)","(* x (- (cbrt (/ 1 (pow x 2))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (neg.f64 x) (cbrt.f64 #s(literal -1 binary64)) x))","(* x (- (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64))) x)","(* x (- (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64)))) x)","(* x (- (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64))))) x)","(cbrt x)","(cbrt.f64 x)","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))))) x)","(* 1/3 (cbrt (pow x 4)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))) x) x)","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (*.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal 5/81 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(+ (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))","(*.f64 (fma.f64 #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/9 binary64))) (cbrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2))))) x)) (* -1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))","(fma.f64 (*.f64 #s(literal -1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))) x))","(* -1/3 (* (cbrt x) (cbrt -1)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) x) (fma.f64 #s(literal -1/3 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/9 binary64))))","(* -1 (* x (+ (* -1 (/ (+ (* 5/81 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* 1/3 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))))))","(fma.f64 (*.f64 (*.f64 #s(literal -1/3 binary64) x) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) (cbrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(* -1 (* x (- (* (cbrt (/ 1 (pow x 2))) (cbrt -1)) (cbrt (/ 1 (pow x 2))))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 (neg.f64 x) (cbrt.f64 #s(literal -1 binary64)) x))","(* -1 (* x (- (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))))) x)","(* -1 (* x (- (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) (cbrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (*.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal 5/81 binary64))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 #s(literal -1 binary64)))) (neg.f64 x))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (cbrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal -1/3 binary64) (/.f64 (fma.f64 (/.f64 #s(literal -5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (*.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 x))","(* -1 (cbrt x))","(neg.f64 (cbrt.f64 x))","(/ -1 (* (pow x 2) (pow (sqrt -1) 2)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(* 1/3 (* (cbrt (/ 1 (* (pow x 2) (pow (sqrt -1) 2)))) (cbrt -1)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x))))","(* (cbrt (/ 1 (* (pow x 2) (pow (sqrt -1) 2)))) (cbrt -1))","(*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x))) (cbrt.f64 #s(literal -1 binary64)))","(* -1 (* (cbrt (pow x 2)) (pow (cbrt -1) 3)))","(cbrt.f64 (*.f64 x x))","(* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2)))","(/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(* 1/9 (* (cbrt x) (cbrt -1)))","(*.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":318.934814453125,"type":"simplify"},{"count":[[22,638]],"egraph":[[0,8870,187,0.074383038],[2,1752,207,0.041060649],[1,255,210,0.010804698],[0,74,281,0.002089919],[0,48,263,0.00041032]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","(/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","#s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(cbrt.f64 (neg.f64 x))","(neg.f64 x)","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64))","(cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x))))","(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))"]],"memory":[[4204992,51573008]],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) x))","(*.f64 (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (*.f64 (neg.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x)))","(*.f64 (neg.f64 (neg.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) x))","(*.f64 (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) x) #s(literal 1 binary64))","(*.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) x))","(pow.f64 (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (*.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) #s(literal 1 binary64))) x)","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))))) x)","(/.f64 (*.f64 (neg.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))) #s(literal -1 binary64)) x)","(/.f64 (*.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))))) x)","(/.f64 (neg.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))))))","(/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) x)","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (neg.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))))","(neg.f64 (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))))) #s(literal -1 binary64)))","#s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(*.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))))","(*.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))))","(*.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))))))","(*.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (pow.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) (fma.f64 (/.f64 x (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) (/.f64 x (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) (*.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) (/.f64 x (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))))))","(/.f64 (+.f64 x (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x))) (neg.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (*.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) (*.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))) x)) (*.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))))","(/.f64 (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)) (neg.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))))","(/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x))))","(/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x))) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (*.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x))))) (-.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(fma.f64 #s(literal -1 binary64) (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))) (/.f64 x (fma.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (*.f64 (cbrt.f64 x) (+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))))))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(+.f64 (neg.f64 (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))","(+.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (cbrt.f64 x)))","#s(approx (cbrt (+ x 1)) #s(literal 1 binary64))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (cbrt.f64 x))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (cbrt.f64 x))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 x))","(*.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (cbrt.f64 x) (cbrt.f64 #s(literal -1 binary64)))","(*.f64 (cbrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cbrt.f64 x))","(pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/3 binary64))","(/.f64 (cbrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64)))) (cbrt.f64 (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(/.f64 (cbrt.f64 x) (cbrt.f64 #s(literal -1 binary64)))","(/.f64 (cbrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(cbrt.f64 x)","(exp.f64 (neg.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (log.f64 (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 3 binary64)) x)","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 3 binary64)))","(*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(*.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))","(*.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (neg.f64 (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (cbrt.f64 x))","(*.f64 (sqrt.f64 x) (sqrt.f64 x))","(*.f64 #s(literal -1 binary64) x)","(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal -1 binary64))","(*.f64 x #s(literal 1 binary64))","(pow.f64 (neg.f64 (cbrt.f64 x)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64))","(pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 2 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 3 binary64))","(pow.f64 x #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 0 binary64) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x))))","(/.f64 (*.f64 x x) x)","(/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x))) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(/.f64 x #s(literal -1 binary64))","(/.f64 x #s(literal 1 binary64))","(neg.f64 x)","(cbrt.f64 (pow.f64 x #s(literal 3 binary64)))","(sqrt.f64 (*.f64 x x))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(-.f64 (/.f64 #s(literal 0 binary64) x) x)","(-.f64 #s(literal 0 binary64) x)","(fabs.f64 x)","(exp.f64 (+.f64 (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x))) (log.f64 (cbrt.f64 x))))","(exp.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64) (log.f64 (cbrt.f64 x))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64) (log.f64 (cbrt.f64 x))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 1/2 binary64) (*.f64 (log.f64 x) #s(literal 1/2 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 1/3 binary64) (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 1/3 binary64) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (cbrt.f64 x))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(exp.f64 (log.f64 x))","(+.f64 #s(literal 0 binary64) x)","x","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (sqrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (cbrt.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 6 binary64))","(pow.f64 (*.f64 x x) #s(literal -1 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -4 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -6 binary64))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (pow.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(/.f64 (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (pow.f64 x #s(literal -3/2 binary64)) (sqrt.f64 x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) x)","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))","(neg.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (exp.f64 (*.f64 #s(literal -2 binary64) (log.f64 x))) #s(literal 1/3 binary64))","(pow.f64 (exp.f64 #s(literal -2 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -4/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(pow.f64 x #s(literal -2/3 binary64))","(/.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 1 binary64))) (sqrt.f64 x))","(/.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64))) (sqrt.f64 x))","(/.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 x))","(/.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))","(/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (sqrt.f64 x))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(cbrt.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))))","(exp.f64 (neg.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))","(*.f64 (*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/3 binary64)))","(*.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(*.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1/3 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))","(/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)))","(neg.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) #s(literal -1 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal 2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64)))","(*.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(literal -1 binary64) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal 2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (cbrt.f64 x) (cbrt.f64 x))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal -1/2 binary64))","(pow.f64 (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64))","(pow.f64 (neg.f64 (cbrt.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 4/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 2 binary64))","(pow.f64 x #s(literal 2/3 binary64))","(/.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(/.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(cbrt.f64 (*.f64 x x))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 1/3 binary64) (log.f64 (cbrt.f64 x))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)) #s(literal 1/6 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2/3 binary64)))","(exp.f64 (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x))))","(exp.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -2/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -2/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))","(pow.f64 (exp.f64 (*.f64 #s(literal -2 binary64) (log.f64 x))) #s(literal 1/3 binary64))","(pow.f64 (exp.f64 #s(literal -2 binary64)) (log.f64 (cbrt.f64 x)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/3 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -4/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal -2 binary64))","(pow.f64 x #s(literal -2/3 binary64))","(/.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 1 binary64))) (sqrt.f64 x))","(/.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64))) (sqrt.f64 x))","(/.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 x))","(/.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) (neg.f64 (cbrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64))","(/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (sqrt.f64 x))","(/.f64 (cbrt.f64 #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (cbrt.f64 x))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 1/6 binary64)))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (cbrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(cbrt.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))))","(exp.f64 (neg.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2/3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)) #s(literal 1/3 binary64)))","(exp.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) (*.f64 x x)) (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 x x)) (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) x) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)))) x) (/.f64 (pow.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) x) (/.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (+.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)) x))","(*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x))","(*.f64 (/.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 (+.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 x x)))","(*.f64 (/.f64 (cbrt.f64 x) #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (cbrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 x x))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) (*.f64 x x))))","(*.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))))","(*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))))","(*.f64 (neg.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) (/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 x)) (/.f64 x (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))","(pow.f64 (*.f64 (/.f64 x (cbrt.f64 x)) (/.f64 x (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 (neg.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))) x)","(/.f64 (neg.f64 (neg.f64 (neg.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) (*.f64 x x))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))))","(/.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x))) x)","(/.f64 (neg.f64 (neg.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (*.f64 x x))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","(/.f64 (*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) (*.f64 x x)))","(/.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) x)","(/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(/.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))))","(/.f64 (neg.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 x)) (/.f64 x (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","(/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) (*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 x x)) (*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) (*.f64 x x)) (*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))) (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 x (cbrt.f64 x)) (/.f64 x (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (cbrt.f64 x)) (/.f64 x (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))))","(neg.f64 (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))","(-.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))) (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))))","(-.f64 (/.f64 (*.f64 (cbrt.f64 x) (/.f64 #s(literal 1/81 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 x x)) (/.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 x x)))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)) (/.f64 (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (cbrt.f64 x)) (/.f64 x (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (cbrt.f64 x)) (/.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))","(*.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(*.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))))","(*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)))) (pow.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 x) (+.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))","(*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))","(pow.f64 (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (cbrt.f64 x) (/.f64 #s(literal 1/81 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (cbrt.f64 x) (/.f64 #s(literal 1/81 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 (cbrt.f64 x) (/.f64 #s(literal 1/81 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (fma.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 #s(literal 1/81 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (fma.f64 (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (*.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))))) (pow.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (*.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)))) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))","(/.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (fma.f64 #s(literal -1/729 binary64) x (*.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))","(fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))","(fma.f64 (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))","(fma.f64 (cbrt.f64 x) (*.f64 #s(literal 1/3 binary64) x) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))","(fma.f64 (cbrt.f64 x) #s(literal -1/9 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) x) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)))","(fma.f64 x (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))","(-.f64 (*.f64 (cbrt.f64 x) (/.f64 #s(literal 1/81 binary64) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))) (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 (cbrt.f64 x) x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))))","(+.f64 (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)))","(+.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 4/3 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 4/3 binary64)) (pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 4/3 binary64)) (*.f64 (cbrt.f64 x) x))","(*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","(*.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 #s(literal 1 binary64) #s(literal 4/3 binary64)))","(*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))","(*.f64 (cbrt.f64 x) x)","(*.f64 x (cbrt.f64 x))","(pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/6 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -4 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal 2/3 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/3 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal -2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 8/3 binary64))","(pow.f64 (cbrt.f64 x) #s(literal 4 binary64))","(pow.f64 x #s(literal 4/3 binary64))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(exp.f64 (+.f64 (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x))) (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))))","(exp.f64 (+.f64 (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x))) (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64))))","(exp.f64 (+.f64 (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x))) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))))","(exp.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64) (neg.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2/3 binary64) (log.f64 x)) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64) (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 1/3 binary64) (log.f64 x)))","(exp.f64 (+.f64 (log.f64 x) (log.f64 (cbrt.f64 x))))","(exp.f64 (*.f64 (log.f64 x) #s(literal 4/3 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 4 binary64)) #s(literal 1/3 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))","(neg.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":278.5341796875,"type":"rewrite"},{"compiler":[[16313,2371]],"memory":[[2281104,59971952]],"time":80.64990234375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","fresh",59.4571796992713,"binary64"],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","fresh",59.011470609403816,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",60.21864191721207,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","done",62.87489653168161,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","done",60.5611895638032,"binary64"],["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","done",62.87489653168161,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (*.f64 x x)))","fresh",30.679084615040633,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",30.698322163882818,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))) (*.f64 x x)))","fresh",30.788851122362157,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)))","fresh",1.2701796108057701,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x))))","fresh",1.3239096401110957,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 x x)))","fresh",30.766734801667734,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) x))","fresh",0.6356557624413138,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (+.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (*.f64 x x)))","fresh",30.762828479465977,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","done",1.0689534537049858,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 1 binary64)))))","fresh",30.815601182479217,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))))))","fresh",1.2163795691825268,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (cbrt.f64 x)) (/.f64 x (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","fresh",0.7845334104743537,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","done",1.3121908421353439,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","fresh",6.606697214905499,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","done",1.3398885668891085,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","fresh",30.506729121666154,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","fresh",32.81766919081717,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))))","fresh",1.3499866607704722,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","fresh",1.300826114865137,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","fresh",6.605275487041082,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))))","fresh",1.1193860645151037,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64))) (sqrt.f64 x)) #s(literal 1/3 binary64)))","fresh",1.1997959399358524,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))","fresh",0.694613221052218,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","fresh",1.1832134691913794,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","done",29.453114287654095,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","fresh",30.428000625675992,"binary64"]],"compiler":[[1555,369],[12,8],[21,13],[7,6],[10,9],[10,9],[9,8],[25,18],[30,21],[22,15],[15,11],[18,14],[19,14],[19,14],[20,15],[35,24],[23,17],[37,26],[21,16],[14,12],[13,11],[16,14],[14,11],[15,12],[19,14],[14,12],[13,11],[37,26],[20,15],[19,14],[40,28],[16,13],[16,13]],"count":[[658,32]],"kept":[{"done":[7,5],"fresh":[21,13],"new":[625,11],"picked":[5,3]}],"memory":[[-5690208,44935328]],"min-error":[[0.0,"binary64"]],"time":47.760986328125,"type":"prune"},{"accuracy":[0.6356557624413138],"baseline":[0.6356557624413138],"branch":[["x",0.6356557624413139,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",0.6356557624413138,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[75,1]],"inputs":[["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (+.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) #s(literal 1 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (cbrt.f64 x)) (/.f64 x (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64))) (sqrt.f64 x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (exp.f64 (*.f64 (log.f64 x) #s(literal -2/3 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (exp.f64 (*.f64 (*.f64 #s(literal -2 binary64) (log.f64 x)) #s(literal 1/3 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (sqrt.f64 x) #s(literal 2/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (neg.f64 (cbrt.f64 x))))","(-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 (cbrt.f64 x) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (pow.f64 x #s(literal 1/6 binary64)) #s(literal 2 binary64)))","(-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal -2 binary64))) #s(literal 1/3 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (+.f64 #s(literal 1 binary64) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) #s(literal 2 binary64)))))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/6 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) #s(literal 1/3 binary64)) (cbrt.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) x) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))))) (/.f64 #s(literal -1 binary64) x)) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (pow.f64 x #s(literal 4/3 binary64)) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x))","(-.f64 (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log1p.f64 x)) (cbrt.f64 x))","(-.f64 (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1/3 binary64)) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (exp.f64 #s(literal 1/3 binary64)) (log.f64 x)))","(-.f64 (cbrt.f64 (fma.f64 (pow.f64 x #s(literal 5/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)) #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (cbrt.f64 (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (cbrt.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (pow.f64 (cbrt.f64 x) #s(literal 4 binary64)) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) x) (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 2/3 binary64)))))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (cbrt.f64 (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 x) (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)))) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cbrt.f64 x))))","(-.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) #s(literal 2 binary64))) x) (*.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 x) x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x)))"]],"memory":[[6060384,20480896]],"oracle":[63.9167116260636],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) x))"]],"repr":["binary64"],"time":36.470947265625,"times":[[16.60205078125,"x"],[15.89892578125,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[0.6946132210522181],"baseline":[0.694613221052218],"branch":[["x",0.6946132210522181,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",0.6946132210522181,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[17,1]],"inputs":[["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (+.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))"]],"memory":[[-1620080,6452448]],"oracle":[63.14290775161967],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))"]],"repr":["binary64"],"time":9.4931640625,"times":[[4.408935546875,"x"],[3.696044921875,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[1.068953453704986],"baseline":[1.0689534537049858],"branch":[["x",1.068953453704986,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",1.068953453704986,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[16,1]],"inputs":[["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 (cbrt.f64 x) #s(literal 1/3 binary64))))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (+.f64 #s(literal -1/9 binary64) (*.f64 #s(literal 1/3 binary64) x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64)))"]],"memory":[[-1830672,6241184]],"oracle":[63.14290775161967],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))"]],"repr":["binary64"],"time":9.23193359375,"times":[[4.61083984375,"x"],[3.301025390625,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[4.295106310491676],"baseline":[6.605275487041082],"branch":[["x",4.295106310491676,2,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",6.605275487041086,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[9,2]],"inputs":[["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))"]],"memory":[[4630336,4630336]],"oracle":[62.87489653168161],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))"]],"repr":["binary64"],"time":5.9189453125,"times":[[2.805908203125,"x"],[2.260009765625,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[6.6052754870410855],"baseline":[6.605275487041082],"branch":[["x",6.6052754870410855,1,"binary64"]],"compiler":[[1,1]],"count":[[8,1]],"inputs":[["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64))))"]],"memory":[[-8841440,2812592]],"oracle":[62.87489653168161],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))"]],"repr":["binary64"],"time":3.64208984375,"times":[[3.031982421875,"x"]],"type":"regimes"},{"accuracy":[60.56118956380322],"baseline":[60.5611895638032],"branch":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",60.561189563803225,1,"binary64"],["x",60.56118956380322,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[3,1]],"inputs":[["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))"]],"memory":[[3181840,3181840]],"oracle":[62.87489653168161],"outputs":[["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))"]],"repr":["binary64"],"time":3.410888671875,"times":[[1.363037109375,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"],[1.4990234375,"x"]],"type":"regimes"},{"accuracy":[62.8748965316816],"baseline":[62.87489653168161],"branch":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",62.8748965316816,1,"binary64"],["x",62.87489653168163,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[2,1]],"inputs":[["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64)))"]],"link":["."],"memory":[[2914352,2914352]],"name":["2cbrt (problem 3.3.4)"],"oracle":[62.87489653168161],"outputs":[["(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))"]],"repr":["binary64"],"time":2.9091796875,"times":[[1.14013671875,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"],[1.277099609375,"x"]],"type":"regimes"},{"bstep":[[14.361083984375,3.3053843741921246e+153,1.5786088067184206e+155]],"compiler":[[13,12],[14,12],[13,12],[14,12],[13,12],[14,12],[13,12],[14,12],[13,12],[14,12],[13,12],[14,12],[13,12],[14,12],[9,9],[1,1]],"memory":[[-3347072,4872448]],"method":["binary-search"],"mixsample":[[1.779541015625,"adjust",800],[0.612548828125,"ival-add",0],[1.33251953125,"ival-cbrt",0],[0.035400390625,"ival-assert",0],[0.986572265625,"ival-sub",0],[0.5400390625,"ival-add",400],[0.077392578125,"ival-true",0],[1.651611328125,"ival-cbrt",400],[0.06640625,"exact",0]],"outcomes":[[10.061279296875,1,"valid",112]],"stop":[["narrow-enough",1]],"time":16.743896484375,"type":"bsearch"},{"egraph":[[9,7716,133,0.017073775],[8,3389,133,0.045194292],[7,474,133,0.011201066],[6,197,133,0.002501278],[5,140,133,0.001305196],[4,123,133,0.001127713],[3,112,133,0.001024095],[2,99,133,0.00097658],[1,73,133,0.000893246],[0,51,136,0.000773348]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x)))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))"]],"memory":[[1568960,9726944]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (cbrt.f64 x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/9 binary64)) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (/ (+ (* 5/81 (pow (cbrt x) -2)) (+ (* -1/9 (cbrt x)) (* (* (cbrt x) x) 1/3))) x) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x)))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 (neg.f64 x)))","(-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x))"]],"stop":[["node limit",1]],"time":100.279052734375,"type":"simplify"},{"compiler":[[136,54]],"memory":[[1653984,1653984]],"stop":[["fuel",1]],"time":2.251953125,"type":"soundness"},{"compiler":[[136,54],[136,54],[25,11],[25,11],[7,6],[7,6]],"memory":[[-1566176,34902352]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":56.43310546875,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.02099609375,"type":"end"}]