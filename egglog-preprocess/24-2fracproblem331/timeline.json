[{"memory":[[11104,11104]],"time":0.02392578125,"type":"start"},{"compiler":[[11,8]],"memory":[[669504,669504]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":2.6708984375,"type":"analyze"},{"bogosity":[{"infinite":0.0003631946652434593,"invalid":0.0,"precondition":0.00048828125,"valid":0.9991485240847565}],"memory":[[14658576,248421040]],"mixsample":[[100.105712890625,"adjust",800],[172.438720703125,"ival-div",0],[73.20068359375,"ival-add",0],[80.939697265625,"ival-div",400],[4.21484375,"ival-assert",0],[80.13818359375,"ival-sub",0],[30.302490234375,"ival-add",400],[7.837158203125,"ival-true",0],[0.027099609375,"ival-sub",400],[6.75439453125,"exact",0]],"outcomes":[[532.93408203125,1,"valid",3933],[260.56787109375,0,"valid",4323]],"time":1136.12109375,"type":"sample"},{"compiler":[[9,6],[24,8],[24,8]],"confusion":[[63,0,0,193]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","cancellation",63,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",63,0,false,0,false],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,63],[0,193]],"maybe-confusion":[[63,0,0,0,0,193]],"memory":[[1296784,43813200]],"mixsample":[[4.619384765625,"adjust",800],[8.335205078125,"ival-div",0],[3.10400390625,"ival-add",0],[3.762939453125,"ival-div",400],[0.201171875,"ival-assert",0],[3.71044921875,"ival-sub",0],[1.154296875,"ival-add",400],[0.506591796875,"ival-true",0],[0.32958984375,"exact",0]],"outcomes":[[27.25390625,1,"valid",236],[14.861572265625,0,"valid",276]],"time":95.880126953125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,6]],"egraph":[[0,275,9,0.001177371],[10,275,9,0.001492248],[9,266,9,0.001698792],[8,228,9,0.001879422],[7,150,9,0.002329497],[6,105,9,0.001653613],[5,64,9,0.00066468],[4,44,9,0.000293948],[3,32,9,0.000250166],[2,23,9,0.000174881],[1,15,9,0.000143319],[0,10,9,0.00015737],[0,6,9,0.000185485]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-1237424,15043824]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":171.849853515625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.072021484375,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","next",13.913890071878667,"binary64"]],"compiler":[[9,6]],"memory":[[308528,308528]],"time":0.5,"type":"prune"},{"egraph":[[0,275,22,0.001152687],[10,275,22,0.001393051],[9,266,22,0.002113393],[8,228,22,0.001886205],[7,150,22,0.001268931],[6,105,22,0.000913831],[5,64,22,0.000514273],[4,44,22,0.000719312],[3,32,22,0.000248798],[2,23,22,0.000228666],[1,15,22,0.000155498],[0,10,22,0.000154336],[0,6,22,8.5703e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 1 binary64) x)"]],"locations":[["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","cost-diff",0]],"memory":[[1089584,1089584]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(/.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":18.115966796875,"type":"simplify"},{"compiler":[[24,8]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.0078125],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","accuracy",13.909983821878667]],"memory":[[-7693040,9022912]],"mixsample":[[2.0654296875,"adjust",800],[3.9384765625,"ival-div",0],[4.829345703125,"ival-add",0],[1.53662109375,"ival-div",400],[0.097900390625,"ival-assert",0],[1.619140625,"ival-sub",0],[0.57666015625,"ival-add",400],[0.159912109375,"ival-true",0],[0.16064453125,"exact",0]],"outcomes":[[15.23046875,1,"valid",118],[7.755615234375,0,"valid",138]],"time":30.5849609375,"type":"localize"},{"count":[[4,24]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[896160,896160]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))"]],"series":[[0.707763671875,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","-inf"],[0.39306640625,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","inf"],[0.636962890625,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","0"]],"time":2.14697265625,"type":"series"},{"count":[[24,23]],"egraph":[[0,8018,186,0.057097496],[7,7554,188,0.016835302],[6,6748,188,0.026236553],[5,5373,188,0.032074139],[4,3307,189,0.032275249],[3,1026,194,0.016399529],[2,353,198,0.003185558],[1,150,210,0.001113014],[0,53,229,0.000478879]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))"]],"memory":[[987344,27794912]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ -1 (pow x 2))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal -1 binary64)) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal -1 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":292.876220703125,"type":"simplify"},{"count":[[4,325]],"egraph":[[0,9444,18,0.037711497],[3,6035,20,0.039710016],[2,551,20,0.019995287],[1,59,20,0.00196456],[0,10,20,0.00065541],[0,6,20,9.674e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[-1395536,32426656]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)))) (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (-.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64))))","(*.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (-.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (fma.f64 x x x))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(*.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))","(*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(pow.f64 (/.f64 x (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) x) (-.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (pow.f64 x #s(literal -4 binary64))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -9 binary64)) (pow.f64 x #s(literal -9 binary64))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -3 binary64))))","(/.f64 (*.f64 (fma.f64 x x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (fma.f64 x x (fma.f64 (-.f64 #s(literal -1 binary64) x) x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(/.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))))) (+.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))) (*.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))) (+.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 (/.f64 x (fma.f64 x x x)) (/.f64 x (fma.f64 x x x))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)))) (+.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (/.f64 x (fma.f64 x x x)) (/.f64 x (fma.f64 x x x)) (fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)) (*.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (pow.f64 x #s(literal -3 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 x (fma.f64 x x x)) (*.f64 (fma.f64 x x x) (-.f64 #s(literal -1 binary64) x))) (*.f64 (fma.f64 x x x) (fma.f64 x x x)))","(/.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 (fma.f64 x x (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (pow.f64 x #s(literal -4 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -9 binary64)) (pow.f64 x #s(literal -9 binary64))) (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (+.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 x x (fma.f64 (-.f64 #s(literal -1 binary64) x) x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 x (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (-.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (/.f64 x (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (+.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)))) (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (-.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (fma.f64 x x x) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 x x) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3/2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3/2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal -1 binary64) x)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 x x) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 x x x)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 0 binary64)) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(-.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)))","(-.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 0 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(+.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(+.f64 (/.f64 x (fma.f64 x x x)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 #s(literal -1 binary64) x))","(*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 x x) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(fma.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(-.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(exp.f64 (neg.f64 (log1p.f64 x)))","(+.f64 (*.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(+.f64 (*.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) x) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 x x)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)) (-.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 (-.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (-.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x)))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64))) (fma.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 x (fma.f64 x x x)) (-.f64 #s(literal -1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (-.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (*.f64 x x) (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(expm1.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(-.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))))","(-.f64 x #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) x)","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (-.f64 #s(literal 0 binary64) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x)))) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 x)))","(+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":195.637939453125,"type":"rewrite"},{"compiler":[[7043,949]],"memory":[[6999456,30043968]],"time":64.099853515625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (fma.f64 x x x))","fresh",0.0625,"binary64"],["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","next",0.09765625,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","next",31.5509851471312,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","fresh",31.49314580070548,"binary64"],["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","next",0.05859375,"binary64"],["(*.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","fresh",15.99391532428511,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x))","fresh",30.867948384152317,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","next",31.23246643377193,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","fresh",37.541861274118205,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","next",30.679367019297885,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","fresh",31.7882050210984,"binary64"]],"compiler":[[10,6],[12,9],[13,9],[11,8],[12,8],[14,11],[23,15],[15,10],[17,12],[13,9],[19,13],[10,6],[12,9],[13,9],[11,8],[12,8],[14,11],[23,15],[15,10],[17,12],[13,9],[19,13]],"count":[[343,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[342,11],"picked":[1,0]}],"memory":[[-253328,16742544]],"min-error":[[0.01171875,"binary64"]],"time":14.18603515625,"type":"prune"},{"egraph":[[0,784,118,0.004420014],[8,784,118,0.006268929],[7,780,118,0.007694257],[6,745,118,0.007198959],[5,679,118,0.008572548],[4,444,118,0.005369025],[3,226,118,0.001995008],[2,124,118,0.001014045],[1,78,118,0.000630773],[0,39,122,0.000456769],[0,24,151,0.000244148]],"inputs":[["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","(fma.f64 x x x)","x","#s(literal -1 binary64)","(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","#s(literal 1 binary64)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","x","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)"]],"locations":[["(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","cost-diff",1],["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","cost-diff",1],["(-.f64 x x)","cost-diff",2],["(-.f64 (-.f64 x x) #s(literal 1 binary64))","cost-diff",2],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["(/.f64 (/.f64 #s(literal -1 binary64) x) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","cost-diff",0],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","cost-diff",0],["(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","cost-diff",0],["(-.f64 x x)","cost-diff",2],["(-.f64 (-.f64 x x) #s(literal 1 binary64))","cost-diff",2],["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","cost-diff",2]],"memory":[[-5768224,2464832]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","(fma.f64 x x x)","x","#s(literal -1 binary64)","(-.f64 (-.f64 x x) #s(literal 1 binary64))","#s(literal -1 binary64)","(-.f64 x x)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","#s(literal -1 binary64)","(-.f64 x x)","#s(literal 0 binary64)","x","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":58.343994140625,"type":"simplify"},{"compiler":[[138,22]],"locations":[["(-.f64 #s(literal -1 binary64) x)","accuracy",0.0],["(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","accuracy",0.0],["(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","accuracy",0.0078125],["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","accuracy",0.09375],["(/.f64 #s(literal -1 binary64) x)","accuracy",0.0],["(/.f64 (/.f64 #s(literal -1 binary64) x) x)","accuracy",0.15625],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","accuracy",31.14647206324283],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","accuracy",13.909983821878667],["#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","accuracy",31.86321103129966],["(/.f64 #s(literal -1 binary64) x)","accuracy",0.0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","accuracy",30.679367019297885],["(-.f64 (-.f64 x x) #s(literal 1 binary64))","accuracy",0.0],["(-.f64 x x)","accuracy",0.0],["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","accuracy",0.0],["(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","accuracy",0.05859375]],"memory":[[1334192,26854240]],"mixsample":[[8.84375,"adjust",800],[13.4560546875,"ival-div",0],[4.19189453125,"ival-add",0],[7.48779296875,"ival-mult",0],[2.204345703125,"ival-div",400],[0.147216796875,"ival-assert",0],[8.30322265625,"ival-sub",0],[0.62890625,"ival-add",400],[0.29345703125,"ival-true",0],[0.406982421875,"exact",0],[8.869140625,"ival-pow",0],[1.76171875,"ival-neg",0]],"outcomes":[[52.666015625,1,"valid",118],[33.54833984375,0,"valid",138]],"time":111.756103515625,"type":"localize"},{"count":[[16,46]],"inputs":[["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)"]],"memory":[[2418304,2418304]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","-1","0","(/ 1 x)","(/ (+ 1 (* -1 x)) x)","(/ (+ 1 (* x (- x 1))) x)","(/ (+ 1 (* x (- (* x (+ 1 (* -1 x))) 1))) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ -1 (pow x 2))","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","(- (* -1 x) 1)","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ 1 (pow x 2))","(/ (- 1 (/ 1 x)) (pow x 2))","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) (pow x 2))","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(* -1 x)","(* x (- (/ 1 x) 1))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(* -1 (* x (+ 1 (/ 1 x))))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) (pow x 2))","(/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 x))))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))"]],"series":[[2.066162109375,"((* (pow (+ (* x x) x) -1) (- (- x x) 1)) (- (- x x) 1) (- x x) (pow (+ (* x x) x) -1) (- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (- 1 x) (/ 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (/ -1 x) x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (/ (- (- x x) 1) (- -1 x)) (- -1 x))","x","-inf"],[1.137939453125,"((* (pow (+ (* x x) x) -1) (- (- x x) 1)) (- (- x x) 1) (- x x) (pow (+ (* x x) x) -1) (- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (- 1 x) (/ 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (/ -1 x) x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (/ (- (- x x) 1) (- -1 x)) (- -1 x))","x","inf"],[2.04296875,"((* (pow (+ (* x x) x) -1) (- (- x x) 1)) (- (- x x) 1) (- x x) (pow (+ (* x x) x) -1) (- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (- 1 x) (/ 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (/ -1 x) x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (/ (- (- x x) 1) (- -1 x)) (- -1 x))","x","0"]],"time":6.12890625,"type":"series"},{"count":[[46,46]],"egraph":[[0,8073,351,0.060515604],[6,7443,355,0.012146507],[5,6430,355,0.02286728],[4,4482,357,0.033707381],[3,1378,385,0.022228138],[2,500,393,0.005345828],[1,198,409,0.001675656],[0,75,457,0.000733561]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","-1","0","(/ 1 x)","(/ (+ 1 (* -1 x)) x)","(/ (+ 1 (* x (- x 1))) x)","(/ (+ 1 (* x (- (* x (+ 1 (* -1 x))) 1))) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ -1 (pow x 2))","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","(- (* -1 x) 1)","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ 1 (pow x 2))","(/ (- 1 (/ 1 x)) (pow x 2))","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) (pow x 2))","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(* -1 x)","(* x (- (/ 1 x) 1))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(* -1 (* x (+ 1 (/ 1 x))))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) (pow x 2))","(/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 x))))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))"]],"memory":[[-4841216,28811744]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal -1 binary64))","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","-1","#s(literal -1 binary64)","0","#s(literal 0 binary64)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* -1 x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(/ (+ 1 (* x (- x 1))) x)","(-.f64 x (/.f64 (-.f64 x #s(literal 1 binary64)) x))","(/ (+ 1 (* x (- (* x (+ 1 (* -1 x))) 1))) x)","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/ -1 (pow x 2))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* -1 x))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (- x 1)))) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(/ 1 (pow x 2))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/ (- 1 (/ 1 x)) (pow x 2))","(/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) (pow x 2))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)) (-.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal -1 binary64)))","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(* -1 x)","(neg.f64 x)","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(/ (- (/ 1 x) 1) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* -1 (* x (+ 1 (/ 1 x))))","(-.f64 #s(literal -1 binary64) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) (pow x 2))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)) (-.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal -1 binary64)))","(/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)","(* -1 (/ (- 1 (/ 1 x)) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":237.655029296875,"type":"simplify"},{"count":[[16,298]],"egraph":[[0,1375,89,0.007818563],[1,205,89,0.004404874],[0,39,101,0.001535555],[0,24,124,0.000354075]],"inputs":[["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)"]],"memory":[[2894192,11074832]],"outputs":[["(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(pow.f64 (*.f64 x (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) x)","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) x) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 (neg.f64 x)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal -1 binary64) x)))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x x)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) x) x))","(/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) x))","(/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(-.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","#s(literal -1 binary64)","#s(literal 0 binary64)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(pow.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x x)) #s(literal -1/2 binary64))","(pow.f64 (exp.f64 (+.f64 (log1p.f64 x) (log.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(/.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (fma.f64 x x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 x x x)))","(/.f64 #s(literal -1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) x) x))","(/.f64 #s(literal -1 binary64) (*.f64 x (-.f64 #s(literal -1 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(exp.f64 (*.f64 (+.f64 (log1p.f64 x) (log.f64 x)) #s(literal -1 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (neg.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) x)","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (+.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) (*.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(+.f64 (/.f64 #s(literal -1 binary64) x) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (neg.f64 x))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 x #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(pow.f64 (*.f64 x (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) x)","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) x) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 (neg.f64 x)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal -1 binary64) x)))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x x)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) x) x))","(/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) x))","(/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(-.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal -1 binary64) x)))","(neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))","(pow.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x)) (*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal -1 binary64) x))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 #s(literal -1 binary64) (neg.f64 x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 #s(literal -1 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(neg.f64 (+.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (+.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(+.f64 (neg.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 x))"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":130.427001953125,"type":"rewrite"},{"compiler":[[4666,801]],"memory":[[974672,25697776]],"time":31.7861328125,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","next",0.09765625,"binary64"],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","next",32.062330968497925,"binary64"],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","next",31.49314580070548,"binary64"],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","next",0.0625,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","done",31.23246643377193,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","next",31.19887665912526,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","done",30.679367019297885,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","fresh",31.14647206324283,"binary64"]],"compiler":[[7,6],[20,14],[16,12],[6,4],[15,10],[15,10],[13,9],[14,10],[7,6],[20,14],[16,12],[6,4],[15,10],[14,10]],"count":[[292,8]],"kept":[{"done":[0,0],"fresh":[6,0],"new":[281,6],"picked":[5,2]}],"memory":[[-2632208,13279088]],"min-error":[[0.0,"binary64"]],"time":9.414794921875,"type":"prune"},{"egraph":[[0,8197,124,0.036901983],[12,7689,124,0.018786497],[11,6904,124,0.035184021],[10,5743,124,0.04461668],[9,4921,124,0.026452277],[8,4086,124,0.018129648],[7,3452,124,0.017835618],[6,2266,124,0.023528031],[5,1005,124,0.014371056],[4,468,124,0.006196508],[3,215,124,0.00194078],[2,132,124,0.001085327],[1,78,124,0.000517761],[0,41,124,0.000437574],[0,28,145,0.000245133]],"inputs":[["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","#s(literal -1 binary64)","(fma.f64 x x x)","x","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","#s(literal -1 binary64)","(*.f64 x x)","x","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x"]],"locations":[["(/.f64 (-.f64 #s(literal 1 binary64) x) x)","cost-diff",0],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","cost-diff",0],["#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x))","cost-diff",0],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","cost-diff",0],["(-.f64 #s(literal -1 binary64) x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","cost-diff",0],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","cost-diff",1],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal -1 binary64) (*.f64 x x))","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","cost-diff",0],["(-.f64 x #s(literal 1 binary64))","cost-diff",0],["#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64)))","cost-diff",0],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","cost-diff",0],["(fma.f64 x x x)","cost-diff",0],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","cost-diff",0]],"memory":[[2858240,19272144]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","#s(literal -1 binary64)","(fma.f64 x x x)","x","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","#s(literal -1 binary64)","(*.f64 x x)","x","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":313.566162109375,"type":"simplify"},{"compiler":[[119,25]],"locations":[["(-.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","accuracy",0.07421875],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","accuracy",0.09375],["#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x))","accuracy",31.846298989502337],["(-.f64 #s(literal -1 binary64) x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","accuracy",0.0078125],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","accuracy",0.09375],["(*.f64 x x)","accuracy",0.0],["(/.f64 #s(literal -1 binary64) (*.f64 x x))","accuracy",0.14453125],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","accuracy",31.14647206324283],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","accuracy",0.09375],["#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64)))","accuracy",31.86321103129966],["(fma.f64 x x x)","accuracy",0.0],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","accuracy",0.0625]],"memory":[[-155648,26476992]],"mixsample":[[20.68505859375,"ival-div",0],[7.57177734375,"adjust",800],[3.5693359375,"ival-add",0],[3.8232421875,"ival-mult",0],[1.90966796875,"ival-div",400],[0.118896484375,"ival-assert",0],[9.4501953125,"ival-sub",0],[0.513916015625,"ival-add",400],[0.239501953125,"ival-true",0],[0.306884765625,"exact",0],[1.346923828125,"ival-neg",0]],"outcomes":[[44.30126953125,1,"valid",118],[26.6103515625,0,"valid",138]],"time":114.142822265625,"type":"localize"},{"count":[[16,38]],"inputs":[["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(fma.f64 x x x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(literal 1 binary64) x)"]],"memory":[[2553904,2553904]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","x","(* x (+ 1 x))","-1","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","(/ -1 (pow x 2))","(pow x 2)","(- (* -1 x) 1)","(/ 1 (pow x 2))","(/ (+ 1 (* -1 x)) (pow x 2))","(/ 1 x)","(/ (+ 1 (* -1 x)) x)","1","(+ 1 (* -1 x))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(* (pow x 2) (+ 1 (/ 1 x)))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(* x (- 1 (/ 1 x)))","(* -1 x)","(* -1 (* x (+ 1 (/ 1 x))))","(- (/ 1 x) 1)","(* x (- (/ 1 x) 1))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* x (- 1 (/ 1 x))))"]],"series":[[1.8720703125,"((/ -1 (+ (* x x) x)) (+ (* x x) x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (- x 1) (- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 (* x x)) (* x x) (/ (/ 1 (- -1 x)) x) (/ 1 (- -1 x)) (- -1 x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (/ (/ (- 1 x) x) x) (/ (- 1 x) x) (- 1 x))","x","-inf"],[1.279052734375,"((/ -1 (+ (* x x) x)) (+ (* x x) x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (- x 1) (- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 (* x x)) (* x x) (/ (/ 1 (- -1 x)) x) (/ 1 (- -1 x)) (- -1 x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (/ (/ (- 1 x) x) x) (/ (- 1 x) x) (- 1 x))","x","inf"],[1.06787109375,"((/ -1 (+ (* x x) x)) (+ (* x x) x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (- x 1) (- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 (* x x)) (* x x) (/ (/ 1 (- -1 x)) x) (/ 1 (- -1 x)) (- -1 x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (/ (/ (- 1 x) x) x) (/ (- 1 x) x) (- 1 x))","x","0"]],"time":4.9990234375,"type":"series"},{"count":[[38,37]],"egraph":[[0,8201,229,0.085192802],[4,5703,233,0.027544541],[3,1553,239,0.024610524],[2,449,259,0.007035164],[1,181,265,0.001590306],[0,64,291,0.000553801]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","x","(* x (+ 1 x))","-1","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","(/ -1 (pow x 2))","(pow x 2)","(- (* -1 x) 1)","(/ 1 (pow x 2))","(/ (+ 1 (* -1 x)) (pow x 2))","(/ 1 x)","(/ (+ 1 (* -1 x)) x)","1","(+ 1 (* -1 x))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(* (pow x 2) (+ 1 (/ 1 x)))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(* x (- 1 (/ 1 x)))","(* -1 x)","(* -1 (* x (+ 1 (/ 1 x))))","(- (/ 1 x) 1)","(* x (- (/ 1 x) 1))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* x (- 1 (/ 1 x))))"]],"memory":[[-1320704,32410928]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","x","(* x (+ 1 x))","(fma.f64 x x x)","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* -1 x))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (- x 1)))) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/ -1 (pow x 2))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(pow x 2)","(*.f64 x x)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(/ 1 (pow x 2))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/ (+ 1 (* -1 x)) (pow x 2))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* -1 x)) x)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (-.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ 1 (/ 1 x)))","(fma.f64 x x x)","(/ (- (/ 1 x) 1) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(* -1 x)","(neg.f64 x)","(* -1 (* x (+ 1 (/ 1 x))))","(-.f64 #s(literal -1 binary64) x)","(- (/ 1 x) 1)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(/.f64 (-.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- 1 (/ 1 x)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":293.591064453125,"type":"simplify"},{"count":[[16,1807]],"egraph":[[0,9286,99,0.066217964],[2,1537,108,0.042577804],[1,218,108,0.006380798],[0,41,113,0.002213279],[0,28,134,0.000236309]],"inputs":[["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(fma.f64 x x x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(literal 1 binary64) x)"]],"memory":[[-2706448,71635152]],"outputs":[["(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (fma.f64 x x x))","(*.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))) (fma.f64 x x x))","(*.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(*.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (fma.f64 x #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x x) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (neg.f64 (pow.f64 x #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) x) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 #s(literal 0 binary64) x) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64)))) (fma.f64 x x x))","(/.f64 (neg.f64 (fma.f64 x #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))) (fma.f64 x x x))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64)))) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 x)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 (neg.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 (neg.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) x))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 (neg.f64 x))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x))) (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 x #s(literal -3 binary64)))) (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 x (fma.f64 x x x)) (*.f64 (fma.f64 x x x) (-.f64 x #s(literal -1 binary64)))) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64))) (*.f64 x (/.f64 #s(literal -1 binary64) x))) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 x (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) x) (*.f64 x (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) (neg.f64 x)) (*.f64 x (fma.f64 x x x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 (neg.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 (neg.f64 x))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) x))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x))) (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 x) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)))) (*.f64 (neg.f64 x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 x) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (neg.f64 x) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 (neg.f64 x) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 (neg.f64 x)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 x)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (neg.f64 (neg.f64 x)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 x)) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 (neg.f64 (neg.f64 x)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (-.f64 x #s(literal -1 binary64))))","(/.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)))) (*.f64 x (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 x (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 x (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) x) (fma.f64 x x x))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 x x x))","(/.f64 (fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 x)))","(/.f64 (fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 (neg.f64 x)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) x (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 x)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) x (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 x) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 (neg.f64 x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x)) (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (neg.f64 (neg.f64 x)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 x)) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 (neg.f64 (neg.f64 x)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (-.f64 x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 x (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 x (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 x) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (neg.f64 x) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 (neg.f64 x) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) x (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) x))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 (neg.f64 x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 x) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)) (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64))) (fma.f64 x x x))","(/.f64 (fma.f64 x #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))) (fma.f64 x x x))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (-.f64 x #s(literal -1 binary64)))","(/.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (neg.f64 x)))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 x))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x)","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (fma.f64 #s(literal 1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (fma.f64 x #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal 1 binary64) (fma.f64 x x x))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 x (pow.f64 x #s(literal -2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (fma.f64 x x x)) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (fma.f64 x x x)) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 x))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x)))","(-.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (neg.f64 (log1p.f64 x))))","(exp.f64 (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (neg.f64 (log.f64 x))))","(exp.f64 (*.f64 (log.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))","(+.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(+.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 x (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 x (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(*.f64 (/.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 x (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 x (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 x (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 x (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 x (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 x (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x x) x) (/.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 x x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 x) (-.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))))","(*.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 x))","(*.f64 (-.f64 x #s(literal -1 binary64)) x)","(*.f64 #s(literal 1 binary64) (fma.f64 x x x))","(*.f64 (fma.f64 x x x) (/.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (fma.f64 x x x) #s(literal 1 binary64))","(*.f64 (fma.f64 x x x) #s(literal -1 binary64))","(*.f64 x (-.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 x x x))","(pow.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 x x x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 x x x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))) (fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (/.f64 x (-.f64 #s(literal 1 binary64) x)) (*.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))) (/.f64 x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (*.f64 x (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 x (*.f64 x x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))) (*.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 x (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (*.f64 x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (neg.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (neg.f64 (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (neg.f64 (neg.f64 x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 #s(literal -1 binary64) (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 x) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))))","(/.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 x (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (-.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 x x)) (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 (fma.f64 x x x) #s(literal 1 binary64))","(/.f64 (fma.f64 x x x) #s(literal -1 binary64))","(/.f64 x (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(neg.f64 (fma.f64 x x x))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) x) (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(fma.f64 (/.f64 (*.f64 x x) x) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(fma.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (neg.f64 x) (neg.f64 x) x)","(fma.f64 (neg.f64 x) x (neg.f64 x))","(fma.f64 (neg.f64 x) #s(literal -1 binary64) (*.f64 x x))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) x)","(fma.f64 (*.f64 x x) #s(literal -1 binary64) (neg.f64 x))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x) (neg.f64 x))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 x x))","(fma.f64 x (neg.f64 x) (neg.f64 x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x x))","(fma.f64 x x x)","(fma.f64 x #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(fma.f64 #s(literal -1 binary64) (*.f64 x x) (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (neg.f64 x) x))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 x (-.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 x x) (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 x (*.f64 x x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(-.f64 (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64))) (fma.f64 x x x))","(-.f64 #s(literal 0 binary64) (fma.f64 x x x))","(+.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(+.f64 (*.f64 (neg.f64 x) x) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 x x) x)","(+.f64 #s(literal 0 binary64) (fma.f64 x x x))","(+.f64 x (*.f64 x x))","(*.f64 (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64))","(*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))))))","(pow.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (neg.f64 x)))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) x))","(neg.f64 (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)))","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x)))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))))))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x))))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (fma.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (fma.f64 x x (*.f64 #s(literal -1 binary64) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 x))) (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (-.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)))) (*.f64 (-.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (*.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (-.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (-.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 x x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (-.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)))","(/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 x x))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x))) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x)))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal 1 binary64) x))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (-.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (neg.f64 x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (*.f64 x (-.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (neg.f64 x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (*.f64 x x) (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(-.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x))","(-.f64 #s(literal 1 binary64) x)","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) x))","(-.f64 x #s(literal 1 binary64))","(-.f64 #s(literal -1 binary64) (neg.f64 x))","(+.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(+.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x)))","(+.f64 #s(literal -1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (fma.f64 x x x))","(*.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))) (fma.f64 x x x))","(*.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(*.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (fma.f64 x #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x x) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (neg.f64 (pow.f64 x #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) x) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 #s(literal 0 binary64) x) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64)))) (fma.f64 x x x))","(/.f64 (neg.f64 (fma.f64 x #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))) (fma.f64 x x x))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64)))) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 x)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 (neg.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 (neg.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) x))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 (neg.f64 x))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x))) (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 x #s(literal -3 binary64)))) (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 x (fma.f64 x x x)) (*.f64 (fma.f64 x x x) (-.f64 x #s(literal -1 binary64)))) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64))) (*.f64 x (/.f64 #s(literal -1 binary64) x))) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 x (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) x) (*.f64 x (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) (neg.f64 x)) (*.f64 x (fma.f64 x x x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 (neg.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 (neg.f64 x))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) x))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x))) (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 x) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)))) (*.f64 (neg.f64 x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 x) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (neg.f64 x) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 (neg.f64 x) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 (neg.f64 x)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)))) (*.f64 (neg.f64 (neg.f64 x)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (neg.f64 (neg.f64 x)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 x)) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 (neg.f64 (neg.f64 x)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (-.f64 x #s(literal -1 binary64))))","(/.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)))) (*.f64 x (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 x (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 x (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) x) (fma.f64 x x x))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 x x x))","(/.f64 (fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 x)))","(/.f64 (fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 (neg.f64 x)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) x (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 x)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) x (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 x) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 (neg.f64 x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x)) (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (neg.f64 (neg.f64 x)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 x)) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 (neg.f64 (neg.f64 x)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (-.f64 x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 x (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 x (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 x) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (neg.f64 x) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (*.f64 (neg.f64 x) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) x (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) x))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (neg.f64 x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 (neg.f64 x)) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (neg.f64 x) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)) (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64))) (fma.f64 x x x))","(/.f64 (fma.f64 x #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))) (fma.f64 x x x))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (-.f64 x #s(literal -1 binary64)))","(/.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (neg.f64 x)))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 x))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x)","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (fma.f64 #s(literal 1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (fma.f64 x #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) (neg.f64 x) (-.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal 1 binary64) (fma.f64 x x x))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 x (pow.f64 x #s(literal -2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (fma.f64 x x x)) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (fma.f64 x x x)) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 x))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x)))","(-.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (neg.f64 (log1p.f64 x))))","(exp.f64 (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (neg.f64 (log.f64 x))))","(exp.f64 (*.f64 (log.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 x x x)) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 x x x))))","(+.f64 (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(+.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal -1 binary64)))","(*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal -1 binary64))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(pow.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (fma.f64 x x x))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) x))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))","(/.f64 x (fma.f64 x x x))","(/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))","(neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(-.f64 (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(exp.f64 (neg.f64 (log1p.f64 x)))","(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 x #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 x))))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (fma.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (fma.f64 x x (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 x))) (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (*.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 x)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 x)))) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (-.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1 binary64)) (fma.f64 x x x) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) x) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (pow.f64 x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (*.f64 x x) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) x (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 x x x) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 x (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 x x) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal 1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) x (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (neg.f64 x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 #s(literal 1 binary64) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))))","(-.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))))","(-.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(-.f64 #s(literal 1 binary64) (neg.f64 x))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)))","(-.f64 x #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) x)","(exp.f64 (log1p.f64 x))","(+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(+.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(+.f64 (neg.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(+.f64 #s(literal 1 binary64) x)","(+.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 x))","(*.f64 (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) x) #s(literal 1 binary64))","(*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))))))","(pow.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal 1 binary64)) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))) (neg.f64 x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) (neg.f64 (neg.f64 x)))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) x)","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))) x))","(neg.f64 (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) (neg.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)))) #s(literal -1 binary64)))","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(*.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 x)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (*.f64 x x)))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 x)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) x) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) x) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (*.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) x))","(*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x) #s(literal 1 binary64))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(*.f64 #s(literal -1 binary64) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(pow.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (neg.f64 x) x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 x)) x) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (neg.f64 x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) x) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) x) (*.f64 x (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) x) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (neg.f64 x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x))) (*.f64 x x)) (*.f64 (*.f64 x x) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x))) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))","(/.f64 (expm1.f64 (neg.f64 (log.f64 x))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (expm1.f64 (neg.f64 (log.f64 x))) (neg.f64 (neg.f64 x)))","(/.f64 (expm1.f64 (neg.f64 (log.f64 x))) (neg.f64 x))","(/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(/.f64 #s(literal -1 binary64) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))))","(neg.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64)))) (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x x) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 (neg.f64 x) x)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(-.f64 (/.f64 x (*.f64 (neg.f64 x) x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x x)) (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64))))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) x)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (neg.f64 x))))","(*.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x))","(*.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 (log.f64 x))))","(pow.f64 (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (expm1.f64 (neg.f64 (log.f64 x))) (expm1.f64 (neg.f64 (log.f64 x))) (*.f64 #s(literal 0 binary64) (expm1.f64 (neg.f64 (log.f64 x)))))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (-.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x)) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (fma.f64 x x x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 x (*.f64 x x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 x (*.f64 x x)) (*.f64 x x))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 x x x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 x (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))) (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 x (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (expm1.f64 (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 x (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(expm1.f64 (neg.f64 (log.f64 x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) x))","(-.f64 (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (neg.f64 (neg.f64 x))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (neg.f64 (neg.f64 x))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 x (neg.f64 (neg.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) x) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) x))","(-.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (neg.f64 x)))","(-.f64 (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (neg.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 x (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 x))) (expm1.f64 (neg.f64 (log.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (expm1.f64 (neg.f64 (log.f64 x))))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (neg.f64 x)))","(-.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 x x x)))","(-.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) x))","(-.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (neg.f64 x)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (expm1.f64 (neg.f64 (log.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 #s(literal 0 binary64) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x)))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))))))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x))))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (fma.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (fma.f64 x x (*.f64 #s(literal -1 binary64) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 x))) (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (-.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (*.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)))) (*.f64 (-.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (*.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))))) (*.f64 (-.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (-.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (*.f64 x x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64))) (-.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)))","(/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 x x))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x))) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x)))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal 1 binary64) x))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (-.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (neg.f64 x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (*.f64 x (-.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 0 binary64)))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (fma.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (fma.f64 x (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64)) (-.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (neg.f64 x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (*.f64 x x) (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(-.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x))","(-.f64 #s(literal 1 binary64) x)","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) x))","(-.f64 x #s(literal 1 binary64))","(-.f64 #s(literal -1 binary64) (neg.f64 x))","(+.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(+.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 x #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) x)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x)))","(+.f64 #s(literal -1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":280.219970703125,"type":"rewrite"},{"compiler":[[29279,4133]],"memory":[[10543984,122065472]],"time":196.1611328125,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","done",0.09765625,"binary64"],["(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","next",36.00721160903953,"binary64"],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","done",32.062330968497925,"binary64"],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))) x)","next",55.96210805372963,"binary64"],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","done",31.49314580070548,"binary64"],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","next",62.41172239575867,"binary64"],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","done",0.0625,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","done",31.23246643377193,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","done",31.19887665912526,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","done",30.679367019297885,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","next",31.14647206324283,"binary64"]],"compiler":[[7,6],[15,7],[20,14],[33,17],[16,12],[16,12],[6,4],[15,10],[15,10],[13,9],[14,10]],"count":[[1349,11]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[1341,3],"picked":[5,5]}],"memory":[[521280,51828944]],"min-error":[[0.0,"binary64"]],"time":33.7158203125,"type":"prune"},{"egraph":[[0,8035,129,0.044143838],[6,7990,129,0.012139442],[5,5788,129,0.025354728],[4,3584,129,0.02732655],[3,1846,129,0.017553323],[2,322,131,0.006917434],[1,126,159,0.001608942],[0,51,173,0.000988187],[0,34,218,0.000476305]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x))","(*.f64 (neg.f64 x) x)","(neg.f64 x)","x","(*.f64 (*.f64 (neg.f64 x) x) x)","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(*.f64 x x)","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","(-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x)","(*.f64 #s(literal 0 binary64) (fma.f64 x x x))","#s(literal 0 binary64)","(fma.f64 x x x)","x","(*.f64 x (fma.f64 x x x))"]],"locations":[["(fma.f64 x x x)","cost-diff",0],["(-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x)","cost-diff",1],["(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","cost-diff",3],["(*.f64 #s(literal 0 binary64) (fma.f64 x x x))","cost-diff",5],["(*.f64 (*.f64 (neg.f64 x) x) x)","cost-diff",2],["(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x))","cost-diff",2],["(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","cost-diff",4],["(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","cost-diff",5],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))","cost-diff",0],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","cost-diff",0],["(pow.f64 x #s(literal -2 binary64))","cost-diff",0],["(neg.f64 (pow.f64 x #s(literal -2 binary64)))","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","cost-diff",0]],"memory":[[-15295264,20849696]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))) x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x))","(*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x))","(*.f64 (neg.f64 x) x)","(neg.f64 x)","x","(*.f64 (*.f64 (neg.f64 x) x) x)","(pow.f64 (neg.f64 x) #s(literal 3 binary64))","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(neg.f64 (pow.f64 x #s(literal 4 binary64)))","(*.f64 x x)","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x)","(neg.f64 x)","(*.f64 #s(literal 0 binary64) (fma.f64 x x x))","#s(literal 0 binary64)","#s(literal 0 binary64)","(fma.f64 x x x)","x","(*.f64 x (fma.f64 x x x))","(*.f64 (fma.f64 x x x) x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":219.197021484375,"type":"simplify"},{"compiler":[[171,32]],"locations":[["(-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x)","accuracy",0.0],["(*.f64 x (fma.f64 x x x))","accuracy",0.03125],["(*.f64 #s(literal 0 binary64) (fma.f64 x x x))","accuracy",15.996004308102922],["(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","accuracy",19.757211609039526],["(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","accuracy",0.12890625],["(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x))","accuracy",7.796875000000001],["#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","accuracy",31.846298989502337],["(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","accuracy",42.272640294077135],["(-.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","accuracy",0.09375],["#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))","accuracy",62.29435435767161],["(pow.f64 x #s(literal -2 binary64))","accuracy",0.0],["(neg.f64 (pow.f64 x #s(literal -2 binary64)))","accuracy",0.0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","accuracy",31.14647206324283]],"memory":[[75248,32791536]],"mixsample":[[11.82861328125,"ival-div",0],[8.150634765625,"adjust",800],[3.228515625,"ival-add",0],[11.029052734375,"ival-mult",0],[1.656982421875,"ival-div",400],[0.102783203125,"ival-assert",0],[8.918701171875,"ival-sub",0],[0.744384765625,"ival-add",400],[0.206787109375,"ival-true",0],[0.535400390625,"exact",0],[5.818359375,"ival-pow",0],[3.271728515625,"ival-neg",0]],"outcomes":[[45.91845703125,1,"valid",118],[29.442626953125,0,"valid",138]],"time":102.01416015625,"type":"localize"},{"count":[[16,41]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(pow.f64 x #s(literal -2 binary64))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x))","(*.f64 (*.f64 (neg.f64 x) x) x)","(*.f64 #s(literal 0 binary64) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","(-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x)","(fma.f64 x x x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(*.f64 x (fma.f64 x x x))"]],"memory":[[4437632,4437632]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(/ -1 (pow x 2))","(/ 1 (pow x 2))","-1","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","1","(+ 1 (* -1 x))","(/ (+ 1 (* -1 x)) (pow x 2))","(* -1 (pow x 4))","(* -1 (pow x 2))","(* (pow x 2) (- x 1))","(* -1 (pow x 3))","0","(* -1 x)","x","(* x (+ 1 x))","(pow x 2)","(* (pow x 2) (+ 1 x))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(* x (- (/ 1 x) 1))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 x)))","(* (pow x 2) (+ 1 (/ 1 x)))","(* (pow x 3) (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (* x (- 1 (/ 1 x))))","(* -1 (* (pow x 3) (- (/ 1 x) 1)))"]],"series":[[2.26806640625,"((- (/ 1 (+ x 1)) (/ 1 x)) (neg (pow x -2)) (pow x -2) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (- 1 x) (/ (- (* (neg x) x) (* (* (neg x) x) x)) (* (* (neg x) x) (* x x))) (* (* (neg x) x) (* x x)) (- (* (neg x) x) (* (* (neg x) x) x)) (* (* (neg x) x) x) (* 0 (+ (* x x) x)) (/ (- (* 0 (+ (* x x) x)) x) (* x (+ (* x x) x))) (- (* 0 (+ (* x x) x)) x) (+ (* x x) x) (neg (/ (- (- x x) 1) (- -1 x))) (* x (+ (* x x) x)))","x","-inf"],[2.677001953125,"((- (/ 1 (+ x 1)) (/ 1 x)) (neg (pow x -2)) (pow x -2) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (- 1 x) (/ (- (* (neg x) x) (* (* (neg x) x) x)) (* (* (neg x) x) (* x x))) (* (* (neg x) x) (* x x)) (- (* (neg x) x) (* (* (neg x) x) x)) (* (* (neg x) x) x) (* 0 (+ (* x x) x)) (/ (- (* 0 (+ (* x x) x)) x) (* x (+ (* x x) x))) (- (* 0 (+ (* x x) x)) x) (+ (* x x) x) (neg (/ (- (- x x) 1) (- -1 x))) (* x (+ (* x x) x)))","x","inf"],[2.44384765625,"((- (/ 1 (+ x 1)) (/ 1 x)) (neg (pow x -2)) (pow x -2) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (- 1 x) (/ (- (* (neg x) x) (* (* (neg x) x) x)) (* (* (neg x) x) (* x x))) (* (* (neg x) x) (* x x)) (- (* (neg x) x) (* (* (neg x) x) x)) (* (* (neg x) x) x) (* 0 (+ (* x x) x)) (/ (- (* 0 (+ (* x x) x)) x) (* x (+ (* x x) x))) (- (* 0 (+ (* x x) x)) x) (+ (* x x) x) (neg (/ (- (- x x) 1) (- -1 x))) (* x (+ (* x x) x)))","x","0"]],"time":8.476806640625,"type":"series"},{"count":[[41,40]],"egraph":[[0,8292,253,0.078687202],[5,7721,259,0.017103229],[4,4327,259,0.034679231],[3,1404,273,0.021875757],[2,490,285,0.006343974],[1,197,289,0.001921219],[0,71,313,0.000635942]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(/ -1 (pow x 2))","(/ 1 (pow x 2))","-1","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","1","(+ 1 (* -1 x))","(/ (+ 1 (* -1 x)) (pow x 2))","(* -1 (pow x 4))","(* -1 (pow x 2))","(* (pow x 2) (- x 1))","(* -1 (pow x 3))","0","(* -1 x)","x","(* x (+ 1 x))","(pow x 2)","(* (pow x 2) (+ 1 x))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(* x (- (/ 1 x) 1))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 x)))","(* (pow x 2) (+ 1 (/ 1 x)))","(* (pow x 3) (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (* x (- 1 (/ 1 x))))","(* -1 (* (pow x 3) (- (/ 1 x) 1)))"]],"memory":[[574016,33310320]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal -1 binary64))","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(/ -1 (pow x 2))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/ 1 (pow x 2))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* -1 x))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (- x 1)))) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* -1 x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(* -1 (pow x 4))","(neg.f64 (pow.f64 x #s(literal 4 binary64)))","(* -1 (pow x 2))","(*.f64 (neg.f64 x) x)","(* (pow x 2) (- x 1))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (pow x 3))","(pow.f64 (neg.f64 x) #s(literal 3 binary64))","0","#s(literal 0 binary64)","(* -1 x)","(neg.f64 x)","x","(* x (+ 1 x))","(fma.f64 x x x)","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 x))","(*.f64 (fma.f64 x x x) x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(/ (- (/ 1 x) 1) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(* (pow x 3) (- 1 (/ 1 x)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (/ 1 x)))","(fma.f64 x x x)","(* (pow x 3) (+ 1 (/ 1 x)))","(*.f64 (fma.f64 x x x) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(* -1 (/ (- 1 (/ 1 x)) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)","(* -1 (* (pow x 3) (- (/ 1 x) 1)))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":287.109130859375,"type":"simplify"},{"count":[[16,265]],"egraph":[[0,2009,106,0.010034149],[1,280,106,0.005723245],[0,49,131,0.001851848],[0,33,169,0.000278204]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(pow.f64 x #s(literal -2 binary64))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x))","(*.f64 (*.f64 (neg.f64 x) x) x)","(*.f64 #s(literal 0 binary64) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","(-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x)","(fma.f64 x x x)","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(*.f64 x (fma.f64 x x x))"]],"memory":[[-2576384,13430352]],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))))))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64)))","(+.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (exp.f64 (log.f64 x)) #s(literal -2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) x)","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) (*.f64 (neg.f64 x) x)) x)","(*.f64 (/.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(*.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x))","(pow.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) x)","(/.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)))) x)","(/.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (neg.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))) x))","(neg.f64 (/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) (neg.f64 x)))","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (neg.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(*.f64 (/.f64 x (neg.f64 (pow.f64 x #s(literal 3 binary64)))) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x))","(*.f64 (/.f64 x (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 x x)))","(*.f64 (/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (*.f64 x x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (neg.f64 x) x) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x))","(*.f64 (/.f64 x (*.f64 x x)) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x)))","(*.f64 (*.f64 x (-.f64 x (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 x (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(*.f64 x (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (pow.f64 x #s(literal 4 binary64))))","(pow.f64 (/.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (*.f64 x x)) x) x)","(/.f64 (/.f64 (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x) (neg.f64 (pow.f64 x #s(literal 3 binary64)))) x)","(/.f64 (/.f64 (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x) (neg.f64 x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 x x x) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) x (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (/.f64 (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x) (*.f64 x x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x (pow.f64 x #s(literal 3 binary64)))) (/.f64 x (pow.f64 x #s(literal 3 binary64)))) (+.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x (*.f64 x x))))","(/.f64 (-.f64 (pow.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x (pow.f64 x #s(literal 3 binary64))) (+.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x (*.f64 x x))))))","(/.f64 (neg.f64 (/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (*.f64 x x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 x x x) (neg.f64 x)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) x (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))) (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (*.f64 x x)) (*.f64 x x))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 6 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 (fma.f64 x x x) (neg.f64 x))))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) x (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(neg.f64 (/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(neg.f64 (/.f64 (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x) (pow.f64 x #s(literal 4 binary64))))","(fma.f64 (/.f64 (neg.f64 x) (*.f64 x x)) (/.f64 x (*.f64 (neg.f64 x) x)) (neg.f64 (/.f64 x (*.f64 x x))))","(fma.f64 (/.f64 (neg.f64 x) (neg.f64 (pow.f64 x #s(literal 3 binary64)))) (/.f64 x x) (neg.f64 (/.f64 x (*.f64 x x))))","(fma.f64 (/.f64 (neg.f64 x) (neg.f64 x)) (/.f64 x (pow.f64 x #s(literal 3 binary64))) (neg.f64 (/.f64 x (*.f64 x x))))","(fma.f64 (/.f64 x (neg.f64 (pow.f64 x #s(literal 3 binary64)))) (/.f64 (neg.f64 x) x) (neg.f64 (/.f64 x (*.f64 x x))))","(fma.f64 (/.f64 x (*.f64 (neg.f64 x) x)) (/.f64 (neg.f64 x) (*.f64 x x)) (neg.f64 (/.f64 x (*.f64 x x))))","(fma.f64 (/.f64 (neg.f64 x) x) (/.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (/.f64 x (*.f64 x x))))","(fma.f64 (/.f64 x (*.f64 x x)) (/.f64 x (*.f64 x x)) (neg.f64 (/.f64 x (*.f64 x x))))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (/.f64 x (*.f64 x x))))","(fma.f64 (neg.f64 x) (/.f64 x (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (/.f64 x (*.f64 x x))))","(fma.f64 x (/.f64 (neg.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (/.f64 x (*.f64 x x))))","(-.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x (*.f64 x x)))","(+.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (neg.f64 (/.f64 x (*.f64 x x))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) x)","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(*.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64)))","(*.f64 x (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal 3 binary64))) x)","(/.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))","(neg.f64 (pow.f64 x #s(literal 4 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x x) (neg.f64 x))))","(*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) x)","(*.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) x (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (neg.f64 x) (-.f64 x (*.f64 x x)))","(*.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (+.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 x x x) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) x (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 6 binary64))) (*.f64 (fma.f64 x x x) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) x (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x x) (neg.f64 x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) x (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 4 binary64))) (-.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)))))","(neg.f64 (*.f64 x (-.f64 x (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 x x) x (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 (neg.f64 x) x) (neg.f64 x) (*.f64 (neg.f64 x) x))","(fma.f64 (neg.f64 x) (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(fma.f64 (neg.f64 x) x (pow.f64 x #s(literal 3 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 x x) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))","(fma.f64 x (*.f64 x x) (*.f64 (neg.f64 x) x))","(fma.f64 x (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 x x x) (neg.f64 x))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (fma.f64 x x x) (neg.f64 x))))","(-.f64 (/.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) x (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 4 binary64)))) (/.f64 (pow.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) x (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(-.f64 (*.f64 (neg.f64 x) x) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (*.f64 x x) (neg.f64 x))","(*.f64 (*.f64 (neg.f64 x) x) x)","(*.f64 (neg.f64 x) (*.f64 x x))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(*.f64 x (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 x x)) (*.f64 x x))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) x)","(neg.f64 (pow.f64 x #s(literal 3 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64)))","(+.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","#s(literal 0 binary64)","(*.f64 (/.f64 (/.f64 (neg.f64 x) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (neg.f64 x) x) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (neg.f64 x) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (fma.f64 x x x)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x x) x) #s(literal -1 binary64)) (neg.f64 x))","(*.f64 (neg.f64 x) (pow.f64 (*.f64 (fma.f64 x x x) x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 x (*.f64 (fma.f64 x x x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x x)) (/.f64 x x))","(*.f64 x (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x x) (neg.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 x) x) (fma.f64 x x x)))","(pow.f64 (*.f64 (fma.f64 x x x) (/.f64 (neg.f64 x) x)) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 (neg.f64 x) x) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (/.f64 (neg.f64 x) (fma.f64 x x x)) x)","(/.f64 (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (*.f64 (fma.f64 x x x) x) #s(literal -1 binary64))) x)","(/.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (*.f64 (fma.f64 x x x) x) #s(literal -1 binary64))) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (*.f64 (fma.f64 x x x) x))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (/.f64 x (*.f64 (fma.f64 x x x) x)) (/.f64 x (*.f64 (fma.f64 x x x) x)))) (+.f64 #s(literal 0 binary64) (/.f64 x (*.f64 (fma.f64 x x x) x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 x (*.f64 (fma.f64 x x x) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 x (*.f64 (fma.f64 x x x) x)) (/.f64 x (*.f64 (fma.f64 x x x) x)) (*.f64 #s(literal 0 binary64) (/.f64 x (*.f64 (fma.f64 x x x) x))))))","(/.f64 (neg.f64 (/.f64 (neg.f64 x) x)) (neg.f64 (fma.f64 x x x)))","(/.f64 (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)) (*.f64 x (*.f64 (fma.f64 x x x) x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 x x) (*.f64 (fma.f64 x x x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 x x x) x)) (*.f64 (*.f64 (fma.f64 x x x) x) x)) (*.f64 (*.f64 (fma.f64 x x x) x) (*.f64 (fma.f64 x x x) x)))","(/.f64 (/.f64 (neg.f64 x) x) (fma.f64 x x x))","(/.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x x) x) (*.f64 x x)))","(/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (fma.f64 x x x) x) x))","(/.f64 (neg.f64 x) (neg.f64 (*.f64 (fma.f64 x x x) (neg.f64 x))))","(/.f64 (neg.f64 x) (*.f64 (fma.f64 x x x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (fma.f64 x x x) (/.f64 (neg.f64 x) x))))","(/.f64 x (*.f64 (fma.f64 x x x) (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (/.f64 (neg.f64 x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x x) (/.f64 (neg.f64 x) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x x) (/.f64 (neg.f64 x) x)))","(neg.f64 (/.f64 x (*.f64 (fma.f64 x x x) x)))","(-.f64 #s(literal 0 binary64) (/.f64 x (*.f64 (fma.f64 x x x) x)))","(+.f64 #s(literal 0 binary64) (/.f64 (/.f64 (neg.f64 x) x) (fma.f64 x x x)))","(*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) x)","(*.f64 x #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 0 binary64) (neg.f64 x)))))","(/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 x x) (neg.f64 x))","(/.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 x) x) x)","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (neg.f64 x) x)))","(neg.f64 x)","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal 0 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) x) x)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) x)","(-.f64 #s(literal 0 binary64) x)","(+.f64 (neg.f64 x) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 x (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (*.f64 x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 1 binary64)) x)","(fma.f64 (neg.f64 x) (neg.f64 x) x)","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x) x)","(fma.f64 #s(literal -1 binary64) (neg.f64 x) (*.f64 x x))","(fma.f64 x x x)","(fma.f64 x #s(literal 1 binary64) (*.f64 x x))","(fma.f64 #s(literal 1 binary64) x (*.f64 x x))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(+.f64 (*.f64 x x) x)","(+.f64 x (*.f64 x x))","#s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (*.f64 x (-.f64 x (*.f64 x x))) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))","(*.f64 (fma.f64 x x x) x)","(*.f64 x (fma.f64 x x x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) x) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x x)))","(/.f64 (+.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) x))))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 x x))","(fma.f64 (pow.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 (*.f64 x x) x (*.f64 x x))","(fma.f64 (*.f64 (neg.f64 x) x) (neg.f64 x) (*.f64 x x))","(fma.f64 (neg.f64 x) (*.f64 (neg.f64 x) x) (*.f64 x x))","(fma.f64 (neg.f64 x) (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 x (*.f64 x x) (*.f64 x x))","(fma.f64 x x (pow.f64 x #s(literal 3 binary64)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(+.f64 (*.f64 x x) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":133.908935546875,"type":"rewrite"},{"compiler":[[7465,1095]],"memory":[[2301216,27209968]],"time":36.656005859375,"type":"eval"},{"alts":[["(/.f64 (/.f64 (*.f64 (neg.f64 x) x) x) (*.f64 x (fma.f64 x x x)))","fresh",36.37357119599314,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (neg.f64 x) x))) (*.f64 x (fma.f64 x x x)))","fresh",36.39310244599314,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","done",0.09765625,"binary64"],["(/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (fma.f64 x x x) x) x))","fresh",44.2715667041811,"binary64"],["(/.f64 (neg.f64 x) (*.f64 (fma.f64 x x x) x))","fresh",19.757211609039526,"binary64"],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","done",32.062330968497925,"binary64"],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","done",31.49314580070548,"binary64"],["(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) #s(approx (- 1 x) #s(literal 1 binary64))) x)","fresh",61.75736105713438,"binary64"],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","done",0.0625,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","done",31.23246643377193,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","done",31.19887665912526,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","done",30.679367019297885,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","done",31.14647206324283,"binary64"]],"compiler":[[378,99],[13,7],[15,9],[7,6],[13,7],[9,5],[20,14],[16,12],[18,13],[6,4],[15,10],[15,10],[13,9],[14,10]],"count":[[330,13]],"kept":[{"done":[7,7],"fresh":[0,0],"new":[319,5],"picked":[4,1]}],"memory":[[2022128,17684784]],"min-error":[[0.0,"binary64"]],"time":12.77001953125,"type":"prune"},{"accuracy":[0.05859375],"baseline":[0.05859375],"branch":[["x",0.05859375,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",0.05859375,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[26,1]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) #s(approx (- 1 x) #s(literal 1 binary64))) x)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (neg.f64 x) (*.f64 (fma.f64 x x x) x))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (fma.f64 x x x) x) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","(/.f64 (/.f64 (*.f64 (neg.f64 x) x) x) (*.f64 x (fma.f64 x x x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (neg.f64 x) x))) (*.f64 x (fma.f64 x x x)))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(*.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))"]],"memory":[[-3776000,8413840]],"oracle":[63.81357200683872],"outputs":[["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))"]],"repr":["binary64"],"time":14.928955078125,"times":[[5.86376953125,"x"],[7.592041015625,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[0.0625],"baseline":[0.0625],"branch":[["x",0.0625,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",0.0625,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[24,1]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) #s(approx (- 1 x) #s(literal 1 binary64))) x)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (neg.f64 x) (*.f64 (fma.f64 x x x) x))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (fma.f64 x x x) x) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x)","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 x x x)) x) (*.f64 x (fma.f64 x x x)))","(/.f64 (/.f64 (*.f64 (neg.f64 x) x) x) (*.f64 x (fma.f64 x x x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (neg.f64 x) x))) (*.f64 x (fma.f64 x x x)))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))"]],"memory":[[-24848,8079120]],"oracle":[63.727506149031264],"outputs":[["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))"]],"repr":["binary64"],"time":12.294189453125,"times":[[5.447021484375,"x"],[5.455810546875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[0.9385600500120453],"baseline":[30.679367019297885],"branch":[["x",0.9385600500120453,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",0.9385600500120453,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[7,3]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) #s(approx (- 1 x) #s(literal 1 binary64))) x)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-3853408,4362736]],"oracle":[63.181231527494546],"outputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":5.432861328125,"times":[[2.39208984375,"x"],[2.27294921875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[0.9794090761102492],"baseline":[30.679367019297885],"branch":[["x",0.9794090761102493,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",0.9794090761102492,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[6,3]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) #s(approx (- 1 x) #s(literal 1 binary64))) x)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))"]],"memory":[[4132336,4132336]],"oracle":[62.930593578851216],"outputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":4.777099609375,"times":[[2.02294921875,"x"],[2.090087890625,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[30.679367019297892],"baseline":[30.679367019297885],"branch":[["x",30.679367019297892,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",30.679367019297892,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[5,1]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) #s(approx (- 1 x) #s(literal 1 binary64))) x)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 #s(literal 1 binary64) x)) x)","(/.f64 #s(approx (neg (/ (- (- x x) 1) (- -1 x))) (-.f64 x #s(literal 1 binary64))) x)"]],"link":["."],"memory":[[-4307872,3978544]],"name":["2frac (problem 3.3.1)"],"oracle":[62.90534852669661],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))"]],"repr":["binary64"],"time":4.52880859375,"times":[[2.009033203125,"x"],[1.916015625,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"bstep":[[0.030029296875,0.0,10313352339.599472],[0.175048828125,-0.9354457447021929,-1.7759070916376182e-10]],"compiler":[[3,4],[9,6]],"memory":[[257328,257328]],"method":["left-value","left-value"],"time":0.76513671875,"type":"bsearch"},{"bstep":[[0.02880859375,0.0,10313352339.599472],[0.1669921875,-0.9354457447021929,-1.7759070916376182e-10]],"compiler":[[3,4],[9,6]],"memory":[[259008,259008]],"method":["left-value","left-value"],"time":0.618896484375,"type":"bsearch"},{"egraph":[[16,811,140,0.002075775],[15,809,140,0.002086582],[14,806,140,0.002050079],[13,804,140,0.002053115],[12,803,140,0.002129914],[11,802,140,0.002141696],[10,801,140,0.002326484],[9,752,140,0.003139763],[8,496,140,0.003960256],[7,361,140,0.002432068],[6,194,140,0.002072726],[5,138,140,0.001110468],[4,114,140,0.001020156],[3,86,140,0.000890235],[2,68,141,0.00091792],[1,53,142,0.000768716],[0,34,143,0.000713702]],"inputs":[["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))"]],"memory":[[5894592,5894592]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))"]],"stop":[["saturated",1]],"time":42.63916015625,"type":"simplify"},{"compiler":[[150,33]],"memory":[[-8016624,1182528]],"stop":[["fuel",1]],"time":4.097900390625,"type":"soundness"},{"compiler":[[150,33],[150,33],[7,6],[7,6],[9,6],[9,6]],"memory":[[8746512,24388704]],"remove-preprocessing":[[],[],[],[],[],[]],"time":37.088134765625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.018798828125,"type":"end"}]