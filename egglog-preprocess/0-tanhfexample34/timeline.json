[{"memory":[[10016,10016]],"time":0.027099609375,"type":"start"},{"compiler":[[9,8]],"memory":[[6911728,31666560]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5002439022064209,"valid":0.4992678165435791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5007319450378418,"valid":0.4987797737121582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5017080307006836,"valid":0.4978036880493164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5036602020263672,"valid":0.4958515167236328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5075645446777344,"valid":0.4919471740722656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5153732299804688,"valid":0.48413848876953125}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5309906005859375,"valid":0.4685211181640625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.562225341796875,"valid":0.437286376953125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.62469482421875,"valid":0.37481689453125}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.7496337890625,"valid":0.2498779296875}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":109.60205078125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.00048828125,"valid":0.99951171875}],"memory":[[-15707856,321421872]],"mixsample":[[76.497802734375,"adjust",800],[117.270751953125,"ival-div",0],[0.8251953125,"ival-cos",6000],[467.51220703125,"ival-cos",1600],[0.041259765625,"ival-div",400],[0.06884765625,"adjust",4000],[0.01416015625,"ival-sub",2000],[3.692626953125,"ival-assert",0],[103.09033203125,"ival-sub",0],[272.90478515625,"ival-cos",0],[0.030029296875,"ival-sub",400],[58.955810546875,"ival-cos",400],[1.35107421875,"ival-sin",4000],[44.12646484375,"adjust",2000],[0.02001953125,"ival-sub",800],[0.161865234375,"ival-sin",400],[235.538330078125,"ival-sin",0],[138.396240234375,"ival-cos",3600],[0.026611328125,"ival-div",800],[1.676025390625,"ival-sin",2000],[6.6728515625,"ival-true",0],[8.617431640625,"adjust",2800],[0.04296875,"ival-div",2000],[0.06787109375,"ival-div",4000],[0.02294921875,"ival-sub",4000],[0.63916015625,"ival-sin",800],[6.215576171875,"exact",0]],"outcomes":[[155.554931640625,1,"valid",1263],[772.958251953125,2,"valid",2266],[5.314208984375,4,"valid",3],[276.43212890625,3,"valid",539],[592.790283203125,0,"valid",4185]],"time":2137.60888671875,"type":"sample"},{"compiler":[[7,6],[19,8],[19,8]],"confusion":[[136,1,2,117]],"explanations":[["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","u/n",58,0,[["(-.f64 #s(literal 1 binary64) (cos.f64 x))","underflow",58]],[[]]],["-.f64","(-.f64 #s(literal 1 binary64) (cos.f64 x))","cancellation",80,2,[],[[1]]]],"fperrors":[["(-.f64 #s(literal 1 binary64) (cos.f64 x))",78,3,[5.0480313458087025e+191],1,[-8.844321460086822e+195]],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",60,0,false,2,[5.918851459510595e-157]],["#s(literal 1 binary64)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["(sin.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,138],[0,118]],"maybe-confusion":[[136,1,0,2,1,116]],"memory":[[2186272,44066016]],"mixsample":[[7.131591796875,"ival-div",0],[5.1181640625,"adjust",800],[0.091064453125,"ival-sin",400],[0.022216796875,"ival-div",400],[28.5625,"ival-cos",1600],[16.2421875,"ival-sin",0],[0.22900390625,"ival-assert",0],[8.228271484375,"ival-cos",3600],[6.15869140625,"ival-sub",0],[0.54931640625,"adjust",2800],[0.517333984375,"ival-true",0],[15.997802734375,"ival-cos",0],[0.01904296875,"ival-sub",400],[3.807373046875,"ival-cos",400],[0.43994140625,"exact",0],[2.755126953125,"adjust",2000]],"outcomes":[[11.057373046875,1,"valid",74],[51.903564453125,2,"valid",146],[15.543212890625,3,"valid",32],[38.736328125,0,"valid",260]],"time":167.64599609375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,626,4,0.001820829],[17,626,4,0.003077725],[16,625,4,0.00330558],[15,618,4,0.003776933],[14,611,4,0.004856574],[13,607,4,0.00305462],[12,601,4,0.003901129],[11,593,4,0.003115509],[10,590,4,0.003447073],[9,534,4,0.005697153],[8,317,4,0.004074451],[7,188,4,0.00224605],[6,114,4,0.001041072],[5,81,4,0.00062861],[4,58,4,0.000603221],[3,37,4,0.000420743],[2,26,4,0.000283035],[1,20,4,0.000210452],[0,10,4,0.000227265],[0,6,7,0.000127746]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"memory":[[126240,16048144]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(negabs x)"]],"time":205.879150390625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[43440,43440]],"time":0.1669921875,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","next",30.460076481654603,"binary64"]],"compiler":[[7,6]],"memory":[[379232,379232]],"time":0.85791015625,"type":"prune"},{"egraph":[[0,626,14,0.002034295],[17,626,14,0.003652744],[16,625,14,0.003184209],[15,618,14,0.003024748],[14,611,14,0.003190919],[13,607,14,0.003039044],[12,601,14,0.003151709],[11,593,14,0.002852246],[10,590,14,0.002971828],[9,534,14,0.004415758],[8,317,14,0.003509642],[7,188,14,0.001938583],[6,114,14,0.000876043],[5,81,14,0.000574816],[4,58,14,0.000408196],[3,37,14,0.000281013],[2,26,14,0.000199581],[1,20,14,0.000173025],[0,10,14,0.000287165],[0,6,17,0.000106455]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(sin.f64 x)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","cost-diff",3]],"memory":[[1529344,1529344]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(sin.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":50.782958984375,"type":"simplify"},{"compiler":[[19,8]],"locations":[["(sin.f64 x)","accuracy",0.10546875],["(cos.f64 x)","accuracy",0.12337875976844201],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","accuracy",13.794776172106662],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",16.369323830491183]],"memory":[[2073088,11378720]],"mixsample":[[5.565673828125,"ival-div",0],[2.488525390625,"adjust",800],[0.031982421875,"ival-sin",400],[0.008056640625,"ival-div",400],[15.55126953125,"ival-cos",1600],[7.731201171875,"ival-sin",0],[0.12841796875,"ival-assert",0],[4.180908203125,"ival-cos",3600],[3.23046875,"ival-sub",0],[0.429443359375,"adjust",2800],[0.21484375,"ival-true",0],[8.818603515625,"ival-cos",0],[0.005126953125,"ival-sub",400],[1.926513671875,"ival-cos",400],[0.200927734375,"exact",0],[1.52587890625,"adjust",2000]],"outcomes":[[5.10302734375,1,"valid",37],[29.659912109375,2,"valid",73],[8.2099609375,3,"valid",16],[24.446044921875,0,"valid",130]],"time":76.114990234375,"type":"localize"},{"count":[[4,20]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(sin.f64 x)"]],"memory":[[882208,882208]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (- 1 (cos x)) (sin x))","(- 1 (cos x))","(cos x)","(sin x)"]],"series":[[0.852783203125,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","-inf"],[0.6630859375,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","inf"],[0.969970703125,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","0"]],"time":2.80712890625,"type":"series"},{"count":[[20,19]],"egraph":[[0,8041,172,0.100853269],[8,6812,196,0.028435562],[7,5339,196,0.02829121],[6,4608,196,0.018099251],[5,4256,196,0.013145774],[4,3002,196,0.014434746],[3,1661,196,0.012068366],[2,555,196,0.007762072],[1,224,202,0.001975114],[0,79,202,0.000878623]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (- 1 (cos x)) (sin x))","(- 1 (cos x))","(cos x)","(sin x)"]],"memory":[[1724624,40973360]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(sin x)","(sin.f64 x)"]],"stop":[["iter limit",1],["node limit",1]],"time":334.119873046875,"type":"simplify"},{"count":[[4,645]],"egraph":[[0,9106,11,0.066066485],[3,2387,11,0.035644331],[2,247,12,0.009752815],[1,39,12,0.001120058],[0,10,12,0.000618516],[0,6,15,0.000104132]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(sin.f64 x)"]],"memory":[[-117008,58627440]],"outputs":[["(*.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal -1 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(*.f64 (pow.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (cos.f64 (/.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(pow.f64 (exp.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (*.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (*.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)) (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)) (*.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (/.f64 #s(literal 0 binary64) (sin.f64 x)) (fma.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (fma.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (*.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (fma.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (*.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (-.f64 (*.f64 (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (-.f64 (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))) (*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x))) (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (-.f64 (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)))) (*.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (sin.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (cos.f64 (/.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (neg.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x))) (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))))","(/.f64 (neg.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (tan.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))) (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (tan.f64 x) (sin.f64 x))) (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (sin.f64 x)) (sin.f64 x))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (/.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (tan.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (/.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (+.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (tan.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (tan.f64 x) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (/.f64 x #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (sin.f64 x) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))))","(neg.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))) (/.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))) (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (tan.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (sin.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (/.f64 (sin.f64 x) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 1 binary64)) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) #s(literal 1 binary64)) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(-.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))))","(-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))))","(/.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (sin.f64 x) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))) (/.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))) (/.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x))))))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (cos.f64 x)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (sin.f64 x) (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (sin.f64 x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64))) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sin.f64 x))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (sin.f64 x)))","(sin.f64 x)","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (sin.f64 x))) #s(literal -1 binary64)))","(exp.f64 (log.f64 (sin.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":294.0751953125,"type":"rewrite"},{"compiler":[[14961,1738]],"memory":[[588608,62428816]],"time":92.165771484375,"type":"eval"},{"alts":[["(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","fresh",31.370977044161336,"binary64"],["(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","next",58.71019205026928,"binary64"],["(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",0.6527229033421769,"binary64"],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","next",14.19103265892723,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (sin.f64 x))","fresh",30.47313649721275,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (sin.f64 x))))","fresh",32.39652293496286,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","fresh",31.531840060716114,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",30.460076481654603,"binary64"],["(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (sin.f64 x))","fresh",14.227650711459875,"binary64"],["(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","fresh",0.5303391016773691,"binary64"],["(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",30.6484415744417,"binary64"],["(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","next",0.5614555650390213,"binary64"],["(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","fresh",31.628818592907372,"binary64"],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","next",0.25818256837909415,"binary64"],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","fresh",0.2676163086106521,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",30.96291679809593,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",30.93431168826833,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","fresh",30.881156035766853,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","next",30.853027435069126,"binary64"]],"compiler":[[11,8],[3,4],[11,8],[13,10],[11,9],[19,14],[14,11],[7,6],[15,11],[8,7],[9,7],[10,8],[13,8],[11,10],[4,4],[26,16],[21,14],[16,12],[11,9],[11,8],[3,4],[11,8],[13,10],[11,9],[19,14],[14,11],[15,11],[8,7],[9,7],[10,8],[13,8],[11,10],[4,4],[26,16],[21,14],[16,12],[11,9]],"count":[[665,19]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[664,18],"picked":[1,1]}],"memory":[[-16065664,32207440]],"min-error":[[0.0,"binary64"]],"time":38.4560546875,"type":"prune"},{"egraph":[[0,8369,101,0.025228482],[10,6711,101,0.033824957],[9,6207,101,0.02193616],[8,5034,101,0.021033064],[7,3756,101,0.015906578],[6,2980,101,0.016182952],[5,1901,101,0.012407881],[4,908,101,0.012984358],[3,280,107,0.003955968],[2,126,110,0.001217279],[1,69,116,0.000526726],[0,44,116,0.000427744],[0,28,124,0.000275827]],"inputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","(cos.f64 (/.f64 x #s(literal -2 binary64)))","(/.f64 x #s(literal -2 binary64))","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","#s(literal 1 binary64)","#s(literal -1/2 binary64)","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(neg.f64 (sin.f64 x))","(sin.f64 x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","(neg.f64 (sin.f64 x))"]],"locations":[["(sin.f64 x)","cost-diff",0],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","cost-diff",0],["(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","cost-diff",1],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","cost-diff",8],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","cost-diff",0],["(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","cost-diff",0],["(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","cost-diff",6],["(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","cost-diff",2],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","cost-diff",2]],"memory":[[9191536,16405456]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (/.f64 x #s(literal 2 binary64))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","x","(pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","(pow.f64 (cos.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(cos.f64 (/.f64 x #s(literal -2 binary64)))","(cos.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal -2 binary64))","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","x","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","#s(literal 1 binary64)","#s(literal 1 binary64)","#s(literal -1/2 binary64)","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(neg.f64 (sin.f64 x))","(sin.f64 x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","(neg.f64 (sin.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":248.35302734375,"type":"simplify"},{"compiler":[[122,27]],"locations":[["(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","accuracy",0.15234375],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","accuracy",0.26953125],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","accuracy",0.3984210710365036],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","accuracy",13.808505160354336],["(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","accuracy",0.109375],["(cos.f64 x)","accuracy",0.12337875976844201],["(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","accuracy",0.1953125],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","accuracy",0.3984210710365036],["(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","accuracy",0.0],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","accuracy",30.853027435069126],["(pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","accuracy",0.109375],["(cos.f64 (/.f64 x #s(literal -2 binary64)))","accuracy",0.12109375],["(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.131191259768442],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","accuracy",0.140625]],"memory":[[-1136864,40620400]],"mixsample":[[8.02197265625,"ival-div",0],[6.840576171875,"adjust",800],[14.6767578125,"ival-cos",1600],[0.120849609375,"ival-assert",0],[5.406494140625,"ival-sub",0],[32.94970703125,"ival-cos",0],[1.607177734375,"ival-cos",400],[5.0185546875,"adjust",2000],[25.640625,"ival-pow",0],[11.52978515625,"ival-mult",0],[15.974609375,"ival-sin",0],[4.1435546875,"ival-cos",3600],[0.303955078125,"ival-true",0],[0.804443359375,"adjust",2800],[0.876220703125,"exact",0],[1.929931640625,"ival-neg",0],[4.0146484375,"ival-pow2",0]],"outcomes":[[18.242431640625,1,"valid",36],[62.45458984375,2,"valid",74],[16.94287109375,3,"valid",15],[71.986572265625,0,"valid",131]],"time":196.088134765625,"type":"localize"},{"count":[[15,49]],"inputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","(cos.f64 (/.f64 x #s(literal -2 binary64)))"]],"memory":[[-3764096,3777120]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","1","(+ 1 (* 1/8 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/8 (* 5/384 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 5/384 (* 61/46080 (pow x 2)))))))","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* 2 x)","(* x (+ 2 (* -5/6 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* 17/120 (pow x 2)) 5/6))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 17/120 (* -13/1008 (pow x 2)))) 5/6))))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(/ (sin (* 1/2 x)) (cos (* -1/2 x)))","(sin (* 1/2 x))","(/ 1 (cos (* -1/2 x)))","(/ (- 1 (cos x)) (sin x))","(/ (sin x) (+ 1 (cos x)))","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(cos x)","(* (sin x) (+ 1 (cos x)))","(pow (sin x) 2)","(sin x)","(cos (* -1/2 x))"]],"series":[[5.044921875,"((* (sin (* 1/2 x)) (pow (cos (/ x -2)) -1)) (sin (* 1/2 x)) (* 1/2 x) (pow (cos (/ x -2)) -1) (/ (- 1 (cos x)) (sin x)) (pow 1 -1/2) (* (pow (- -1 (cos x)) -1) (neg (sin x))) (pow (- -1 (cos x)) -1) (- -1 (cos x)) (cos x) (/ (pow (sin x) 2) (* (- -1 (cos x)) (neg (sin x)))) (* (- -1 (cos x)) (neg (sin x))) (pow (sin x) 2) (sin x) (cos (/ x -2)))","x","-inf"],[5.465087890625,"((* (sin (* 1/2 x)) (pow (cos (/ x -2)) -1)) (sin (* 1/2 x)) (* 1/2 x) (pow (cos (/ x -2)) -1) (/ (- 1 (cos x)) (sin x)) (pow 1 -1/2) (* (pow (- -1 (cos x)) -1) (neg (sin x))) (pow (- -1 (cos x)) -1) (- -1 (cos x)) (cos x) (/ (pow (sin x) 2) (* (- -1 (cos x)) (neg (sin x)))) (* (- -1 (cos x)) (neg (sin x))) (pow (sin x) 2) (sin x) (cos (/ x -2)))","x","inf"],[2.723876953125,"((* (sin (* 1/2 x)) (pow (cos (/ x -2)) -1)) (sin (* 1/2 x)) (* 1/2 x) (pow (cos (/ x -2)) -1) (/ (- 1 (cos x)) (sin x)) (pow 1 -1/2) (* (pow (- -1 (cos x)) -1) (neg (sin x))) (pow (- -1 (cos x)) -1) (- -1 (cos x)) (cos x) (/ (pow (sin x) 2) (* (- -1 (cos x)) (neg (sin x)))) (* (- -1 (cos x)) (neg (sin x))) (pow (sin x) 2) (sin x) (cos (/ x -2)))","x","0"]],"time":14.144775390625,"type":"series"},{"count":[[49,48]],"egraph":[[0,8167,423,0.074785237],[7,7358,483,0.019812825],[6,5887,483,0.022751495],[5,5216,483,0.013582016],[4,3885,483,0.014995123],[3,2189,483,0.013779166],[2,1197,483,0.008368295],[1,499,496,0.004362072],[0,186,496,0.001862917]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","1","(+ 1 (* 1/8 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/8 (* 5/384 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 5/384 (* 61/46080 (pow x 2)))))))","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* 2 x)","(* x (+ 2 (* -5/6 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* 17/120 (pow x 2)) 5/6))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 17/120 (* -13/1008 (pow x 2)))) 5/6))))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(/ (sin (* 1/2 x)) (cos (* -1/2 x)))","(sin (* 1/2 x))","(/ 1 (cos (* -1/2 x)))","(/ (- 1 (cos x)) (sin x))","(/ (sin x) (+ 1 (cos x)))","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(cos x)","(* (sin x) (+ 1 (cos x)))","(pow (sin x) 2)","(sin x)","(cos (* -1/2 x))"]],"memory":[[4415952,34646352]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* -1/48 (pow x 2))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 x x) #s(literal 1/3840 binary64)) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 (* 1/8 (pow x 2)))","(fma.f64 #s(literal 1/8 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/8 (* 5/384 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 5/384 binary64) (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 5/384 (* 61/46080 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 61/46080 binary64) (*.f64 x x) #s(literal 5/384 binary64)) (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* -1/8 (pow x 2)) 1/2)","(fma.f64 #s(literal -1/8 binary64) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -17/5760 binary64) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","-2","#s(literal -2 binary64)","(- (* 1/2 (pow x 2)) 2)","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(fma.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x #s(literal -2 binary64))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/720 binary64) x) x #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(* x (+ 2 (* -5/6 (pow x 2))))","(*.f64 (fma.f64 #s(literal -5/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)","(* x (+ 2 (* (pow x 2) (- (* 17/120 (pow x 2)) 5/6))))","(*.f64 (fma.f64 (fma.f64 #s(literal 17/120 binary64) (*.f64 x x) #s(literal -5/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 17/120 (* -13/1008 (pow x 2)))) 5/6))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -13/1008 binary64) (*.f64 x x) #s(literal 17/120 binary64)) (*.f64 x x) #s(literal -5/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 2/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(+ 1 (* -1/8 (pow x 2)))","(fma.f64 #s(literal -1/8 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(fma.f64 (fma.f64 #s(literal 1/384 binary64) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/46080 binary64) (*.f64 x x) #s(literal 1/384 binary64)) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(/ (sin (* 1/2 x)) (cos (* -1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal -1/2 binary64) x)))","(sin (* 1/2 x))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ 1 (cos (* -1/2 x)))","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ (sin x) (+ 1 (cos x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ -1 (+ 1 (cos x)))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(* -1 (+ 1 (cos x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(* (sin x) (+ 1 (cos x)))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(pow (sin x) 2)","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin x)","(sin.f64 x)","(cos (* -1/2 x))","(cos.f64 (*.f64 #s(literal -1/2 binary64) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":257.13916015625,"type":"simplify"},{"count":[[15,1500]],"egraph":[[0,8332,63,0.047679745],[3,6581,63,0.034135945],[2,651,63,0.021545278],[1,133,79,0.002967145],[0,44,85,0.001502633],[0,28,91,0.000301638]],"inputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","(cos.f64 (/.f64 x #s(literal -2 binary64)))"]],"memory":[[2739184,63229568]],"outputs":[["(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (+.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (sin.f64 x)) (sin.f64 x))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal 2 binary64))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 #s(literal 2 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 #s(literal 2 binary64) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(neg.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(exp.f64 (*.f64 (-.f64 (log1p.f64 (cos.f64 x)) (log.f64 (sin.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(neg.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)))","(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(*.f64 (neg.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","(pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal -1 binary64))","(/.f64 (neg.f64 x) #s(literal -2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -2 binary64) x))","(/.f64 x #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal -1/2 binary64) x))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/2 binary64) x))","(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(exp.f64 (fma.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1/2 binary64) (*.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 x #s(literal 1/2 binary64)))","#s(literal 1 binary64)","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (+.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (sin.f64 x)) (sin.f64 x))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal 2 binary64))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 #s(literal 2 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 #s(literal 2 binary64) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(neg.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(exp.f64 (*.f64 (-.f64 (log1p.f64 (cos.f64 x)) (log.f64 (sin.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 x))","(/.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(neg.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(fma.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(exp.f64 (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1/2 binary64) (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(+.f64 (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))) (+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))) (+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (exp.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (exp.f64 (log1p.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (sin.f64 x) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (sin.f64 x) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(exp.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(neg.f64 (neg.f64 (cos.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(+.f64 (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (+.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x)))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(*.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (sin.f64 (neg.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (sin.f64 x)) (sin.f64 x))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal 2 binary64))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x))))))","(/.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 #s(literal -1 binary64) (sin.f64 x))) (*.f64 #s(literal 2 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 #s(literal 2 binary64) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(neg.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(neg.f64 (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (neg.f64 (sin.f64 x))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(exp.f64 (*.f64 (-.f64 (log1p.f64 (cos.f64 x)) (log.f64 (sin.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(*.f64 (/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (neg.f64 (sin.f64 x)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64))","(*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (sin.f64 x) (/.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(*.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(*.f64 #s(literal -1 binary64) (/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (sin.f64 x))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x)))) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 x) (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (-.f64 (*.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x))) (*.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (sin.f64 x))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (sin.f64 x))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x))) (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x))) (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 1 binary64)))","(neg.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64) (sin.f64 x))","(fma.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x)) #s(literal -1 binary64) (sin.f64 x))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (*.f64 (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64) (sin.f64 x))","(fma.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (cos.f64 x)) (sin.f64 x))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (sqrt.f64 (sin.f64 x)) (sqrt.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x)) (sin.f64 x))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)) (sin.f64 x))","(fma.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (sin.f64 x) (cos.f64 x) (sin.f64 x))","(fma.f64 (sin.f64 x) #s(literal 1 binary64) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 x) (sin.f64 x))","(fma.f64 #s(literal 1 binary64) (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) (neg.f64 (sin.f64 x))) (sin.f64 x))","(fma.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))) (sin.f64 x))","(fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(+.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(+.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 0 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(+.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (sin.f64 x))","(+.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 (*.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))","(*.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1/2 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) (sin.f64 x))","(*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (sin.f64 x)))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 0 binary64)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (-.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64))))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))))","(/.f64 (+.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal -2 binary64))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) #s(literal 2 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(fma.f64 (*.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) #s(literal 0 binary64))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1/2 binary64) #s(literal 0 binary64))","(fma.f64 (neg.f64 (cos.f64 x)) (cos.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x)) #s(literal 0 binary64))","(fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))","(fma.f64 (cos.f64 x) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64)))","(-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(-.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) #s(literal 0 binary64)))","(-.f64 #s(literal 1/2 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(+.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","(+.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (sin.f64 x)) (sqrt.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sin.f64 x))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(neg.f64 (sin.f64 (neg.f64 x)))","(neg.f64 (neg.f64 (sin.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (sin.f64 x)) (sqrt.f64 (sin.f64 x)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 (sin.f64 x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (sin.f64 x) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) #s(literal 0 binary64))","(sin.f64 x)","(-.f64 (*.f64 #s(literal 0 binary64) (cos.f64 x)) (*.f64 #s(literal 1 binary64) (sin.f64 (neg.f64 x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(exp.f64 (log.f64 (sin.f64 x)))","(+.f64 #s(literal 0 binary64) (sin.f64 x))","(+.f64 (sin.f64 x) #s(literal 0 binary64))","(*.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 #s(literal 0 binary64) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(fma.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 #s(literal 0 binary64) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","(cos.f64 (*.f64 #s(literal -1/2 binary64) x))","(exp.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 #s(literal 0 binary64) (sin.f64 (*.f64 #s(literal -1/2 binary64) x))))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 #s(literal 0 binary64) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":284.666015625,"type":"rewrite"},{"compiler":[[23013,2851]],"memory":[[2930704,101624800]],"time":142.23193359375,"type":"eval"},{"alts":[["(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","fresh",32.323170514506806,"binary64"],["(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","fresh",30.544403378797472,"binary64"],["(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","next",0.6527229033421769,"binary64"],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","fresh",14.19103265892723,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (sin.f64 x))","fresh",30.47313649721275,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",30.460076481654603,"binary64"],["(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","fresh",0.5303391016773691,"binary64"],["(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","fresh",0.3643150879159781,"binary64"],["(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",30.6484415744417,"binary64"],["(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","fresh",0.3597450683790941,"binary64"],["(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (exp.f64 (log.f64 (sin.f64 x)))))","fresh",17.058842739668865,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","next",0.5614555650390213,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","fresh",30.525824990861047,"binary64"],["(*.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64)) (neg.f64 (sin.f64 x)))","fresh",32.39271405543218,"binary64"],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","fresh",16.138710058610656,"binary64"],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","next",0.25818256837909415,"binary64"],["(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","next",0.2676163086106521,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",30.96291679809593,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",30.93431168826833,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","fresh",30.881156035766853,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","done",30.853027435069126,"binary64"],["#s(literal 1 binary64)","next",58.71019205026928,"binary64"]],"compiler":[[15,12],[16,11],[11,8],[12,9],[11,9],[7,6],[7,6],[8,8],[9,7],[10,9],[12,10],[10,9],[9,8],[17,13],[13,11],[11,9],[4,4],[26,16],[21,14],[16,12],[11,9],[1,2],[15,12],[16,11],[11,8],[12,9],[11,9],[7,6],[8,8],[9,7],[10,9],[12,10],[10,9],[9,8],[17,13],[13,11],[11,9],[4,4],[26,16],[21,14],[16,12],[1,2]],"count":[[1126,22]],"kept":[{"done":[1,1],"fresh":[13,6],"new":[1107,14],"picked":[5,1]}],"memory":[[-7534704,50438464]],"min-error":[[0.0,"binary64"]],"time":38.555908203125,"type":"prune"},{"egraph":[[0,887,90,0.002348658],[13,887,90,0.005503965],[12,885,90,0.004597835],[11,875,90,0.004625583],[10,868,90,0.004971989],[9,864,90,0.004663184],[8,858,90,0.004707253],[7,818,90,0.006384224],[6,622,90,0.007014822],[5,383,90,0.003684231],[4,235,96,0.001907865],[3,167,98,0.001340869],[2,87,98,0.000881703],[1,56,98,0.000471981],[0,36,104,0.000392425],[0,20,105,0.000269019]],"inputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","#s(literal 1 binary64)","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1 binary64)","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","x","#s(literal 1/2 binary64)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(neg.f64 (sin.f64 x))","(sin.f64 x)","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(sin.f64 x)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","cost-diff",0],["(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","cost-diff",7],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","cost-diff",6],["(*.f64 x #s(literal 1/2 binary64))","cost-diff",0],["(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","cost-diff",2]],"memory":[[2344432,2344432]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","x","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","#s(literal 1 binary64)","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1 binary64)","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","x","#s(literal 1/2 binary64)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(neg.f64 (sin.f64 x))","(sin.f64 x)","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(sin.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":64.84912109375,"type":"simplify"},{"compiler":[[107,22]],"locations":[["(cos.f64 x)","accuracy",0.12337875976844201],["(/.f64 #s(literal -1 binary64) (sin.f64 x))","accuracy",0.1328125],["(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","accuracy",0.26953125],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","accuracy",0.3984210710365036],["(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","accuracy",0.109375],["(cos.f64 x)","accuracy",0.12337875976844201],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","accuracy",0.1953125],["(-.f64 #s(literal -1 binary64) (cos.f64 x))","accuracy",0.3984210710365036],["(*.f64 x #s(literal 1/2 binary64))","accuracy",0.0],["(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","accuracy",0.2676163086106521],["(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","accuracy",0.109375],["(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","accuracy",0.12109375],["(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.131191259768442],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","accuracy",0.140625]],"memory":[[1638880,26080256]],"mixsample":[[7.38623046875,"ival-div",0],[6.8330078125,"ival-mult",0],[14.989501953125,"ival-sin",0],[0.097412109375,"ival-assert",0],[1.4306640625,"ival-sub",0],[0.21484375,"ival-true",0],[10.475341796875,"ival-tan",0],[13.3134765625,"ival-cos",0],[0.465576171875,"exact",0],[6.929443359375,"ival-pow",0],[1.187255859375,"ival-neg",0]],"outcomes":[[78.557861328125,0,"valid",256]],"time":96.27001953125,"type":"localize"},{"count":[[14,38]],"inputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (sin.f64 x))"]],"memory":[[2706944,2706944]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","1","(+ 1 (* 1/8 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/8 (* 5/384 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 5/384 (* 61/46080 (pow x 2)))))))","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(/ -1 x)","(/ (- (* -1/6 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (- (* -7/360 (pow x 2)) 1/6)) 1) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -31/15120 (pow x 2)) 7/360)) 1/6)) 1) x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(sin (* 1/2 x))","(/ 1 (cos (* 1/2 x)))","(/ (sin x) (+ 1 (cos x)))","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(cos x)","(cos (* 1/2 x))","(/ -1 (sin x))"]],"series":[[2.13916015625,"((* (sin (* 1/2 x)) (/ 1 (cos (* x 1/2)))) (sin (* 1/2 x)) (* 1/2 x) (/ 1 (cos (* x 1/2))) (tan (* x 1/2)) (* x 1/2) (* (/ 1 (- -1 (cos x))) (neg (sin x))) (/ 1 (- -1 (cos x))) (- -1 (cos x)) (cos x) (/ (pow (- -1 (cos x)) -1) (/ -1 (sin x))) (pow (- -1 (cos x)) -1) (cos (* x 1/2)) (/ -1 (sin x)))","x","-inf"],[2.113037109375,"((* (sin (* 1/2 x)) (/ 1 (cos (* x 1/2)))) (sin (* 1/2 x)) (* 1/2 x) (/ 1 (cos (* x 1/2))) (tan (* x 1/2)) (* x 1/2) (* (/ 1 (- -1 (cos x))) (neg (sin x))) (/ 1 (- -1 (cos x))) (- -1 (cos x)) (cos x) (/ (pow (- -1 (cos x)) -1) (/ -1 (sin x))) (pow (- -1 (cos x)) -1) (cos (* x 1/2)) (/ -1 (sin x)))","x","inf"],[1.14990234375,"((* (sin (* 1/2 x)) (/ 1 (cos (* x 1/2)))) (sin (* 1/2 x)) (* 1/2 x) (/ 1 (cos (* x 1/2))) (tan (* x 1/2)) (* x 1/2) (* (/ 1 (- -1 (cos x))) (neg (sin x))) (/ 1 (- -1 (cos x))) (- -1 (cos x)) (cos x) (/ (pow (- -1 (cos x)) -1) (/ -1 (sin x))) (pow (- -1 (cos x)) -1) (cos (* x 1/2)) (/ -1 (sin x)))","x","0"]],"time":6.31005859375,"type":"series"},{"count":[[38,38]],"egraph":[[0,8047,328,0.083928851],[5,5190,376,0.021236598],[4,3149,376,0.016369143],[3,1955,380,0.009734574],[2,871,382,0.006409091],[1,359,383,0.002812189],[0,145,383,0.001379999]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","1","(+ 1 (* 1/8 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/8 (* 5/384 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 5/384 (* 61/46080 (pow x 2)))))))","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(/ -1 x)","(/ (- (* -1/6 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (- (* -7/360 (pow x 2)) 1/6)) 1) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -31/15120 (pow x 2)) 7/360)) 1/6)) 1) x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(sin (* 1/2 x))","(/ 1 (cos (* 1/2 x)))","(/ (sin x) (+ 1 (cos x)))","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(cos x)","(cos (* 1/2 x))","(/ -1 (sin x))"]],"memory":[[-714592,39307664]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* -1/48 (pow x 2))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 x x) #s(literal 1/3840 binary64)) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 (* 1/8 (pow x 2)))","(fma.f64 #s(literal 1/8 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/8 (* 5/384 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 5/384 binary64) (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 5/384 (* 61/46080 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 61/46080 binary64) (*.f64 x x) #s(literal 5/384 binary64)) (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* -1/8 (pow x 2)) 1/2)","(fma.f64 #s(literal -1/8 binary64) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -17/5760 binary64) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","-2","#s(literal -2 binary64)","(- (* 1/2 (pow x 2)) 2)","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(fma.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -2 binary64))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* -1/8 (pow x 2)))","(fma.f64 #s(literal -1/8 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(fma.f64 (fma.f64 #s(literal 1/384 binary64) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/46080 binary64) (*.f64 x x) #s(literal 1/384 binary64)) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* -1/6 (pow x 2)) 1) x)","(fma.f64 #s(literal -1/6 binary64) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (- (* -7/360 (pow x 2)) 1/6)) 1) x)","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -7/360 binary64) (fma.f64 #s(literal -1/6 binary64) x (/.f64 #s(literal -1 binary64) x)))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -31/15120 (pow x 2)) 7/360)) 1/6)) 1) x)","(fma.f64 (fma.f64 (*.f64 #s(literal -31/15120 binary64) x) x #s(literal -7/360 binary64)) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal -1/6 binary64) x (/.f64 #s(literal -1 binary64) x)))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(sin (* 1/2 x))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ 1 (cos (* 1/2 x)))","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (sin x) (+ 1 (cos x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ -1 (+ 1 (cos x)))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(* -1 (+ 1 (cos x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(cos (* 1/2 x))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ -1 (sin x))","(/.f64 #s(literal -1 binary64) (sin.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":235.60791015625,"type":"simplify"},{"count":[[14,1221]],"egraph":[[0,12492,56,0.07120893],[3,3994,58,0.040598682],[2,468,64,0.015588444],[1,104,66,0.00277156],[0,36,70,0.001354702],[0,20,78,0.000259669]],"inputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (sin.f64 x))"]],"memory":[[-3089152,67272192]],"outputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal -1 binary64))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 #s(literal -1 binary64) (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(*.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(neg.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(sin.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(exp.f64 (fma.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1/2 binary64) (*.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(*.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal -1 binary64))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 #s(literal -1 binary64) (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(*.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(neg.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(*.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(pow.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 2 binary64))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(/.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(/.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 #s(literal -1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(neg.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(fma.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(fma.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(-.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(exp.f64 (-.f64 (neg.f64 (log1p.f64 (cos.f64 x))) (neg.f64 (log.f64 (sin.f64 x)))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)))","(exp.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(+.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(+.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(+.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 0 binary64)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(+.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log1p.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))))","(*.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (/.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal -1 binary64))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 1 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(pow.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log1p.f64 (cos.f64 x)))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 1 binary64))","(pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(/.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log1p.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64))) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (sin.f64 x))","(/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 #s(literal -1 binary64))))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal -1 binary64))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(neg.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal -1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(fma.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(-.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) (log1p.f64 (cos.f64 x))))","(exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))))","(*.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (sin.f64 x))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log1p.f64 (cos.f64 x))))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) #s(literal -4 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (+.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (exp.f64 (log.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (exp.f64 (log.f64 #s(literal -1 binary64))))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(neg.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1/2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log1p.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log1p.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (/.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (sin.f64 x) (pow.f64 (/.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (/.f64 x #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (/.f64 x #s(literal 2 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal -1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 1 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 (cos.f64 x))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log1p.f64 (cos.f64 x))) #s(literal -2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 (cos.f64 x))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 (cos.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 (cos.f64 x)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(+.f64 (cos.f64 x) #s(literal -1 binary64))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 #s(literal -1 binary64) (cos.f64 x))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (cos.f64 x)))","(*.f64 (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(*.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(pow.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 2 binary64))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(/.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(/.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(/.f64 #s(literal -1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(neg.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(fma.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(fma.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(-.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(exp.f64 (-.f64 (neg.f64 (log1p.f64 (cos.f64 x))) (neg.f64 (log.f64 (sin.f64 x)))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)))","(exp.f64 (log.f64 (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(+.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(+.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(+.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 0 binary64)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(+.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x)))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log1p.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))))","(*.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3/4 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (/.f64 (sin.f64 x) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal -1 binary64))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 1 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(pow.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log1p.f64 (cos.f64 x)))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 1 binary64))","(pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(/.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log1p.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64))) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (sin.f64 x))","(/.f64 (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 #s(literal -1 binary64))))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal -1 binary64))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(neg.f64 (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal -1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(fma.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(-.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) (log1p.f64 (cos.f64 x))))","(exp.f64 (neg.f64 (log1p.f64 (cos.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x))))","(+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 (cos.f64 x)))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 (exp.f64 (log.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))) (exp.f64 (log.f64 #s(literal -1 binary64))))","(/.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(cos.f64 (*.f64 x #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (sin.f64 x))","(*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (sin.f64 x) #s(literal -1 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))","(/.f64 (sin.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(neg.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (sin.f64 x))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 (sin.f64 x))))","(+.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":308.70703125,"type":"rewrite"},{"compiler":[[26104,2899]],"memory":[[8015088,115344608]],"time":209.030029296875,"type":"eval"},{"alts":[["(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","fresh",32.323170514506806,"binary64"],["(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","fresh",30.544403378797472,"binary64"],["(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","done",0.6527229033421769,"binary64"],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","next",14.19103265892723,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (sin.f64 x))","fresh",30.47313649721275,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",30.460076481654603,"binary64"],["(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","next",0.5303391016773691,"binary64"],["(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","fresh",0.3643150879159781,"binary64"],["(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","fresh",30.6484415744417,"binary64"],["(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","next",0.3597450683790941,"binary64"],["(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (exp.f64 (log.f64 (sin.f64 x)))))","fresh",17.058842739668865,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (neg.f64 (sin.f64 x)))","next",0.6083538703231371,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","done",0.5614555650390213,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","fresh",30.525824990861047,"binary64"],["(*.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64)) (neg.f64 (sin.f64 x)))","fresh",32.39271405543218,"binary64"],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","fresh",16.138710058610656,"binary64"],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","done",0.25818256837909415,"binary64"],["(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","done",0.2676163086106521,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",30.96291679809593,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",30.93431168826833,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","next",30.881156035766853,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","done",30.853027435069126,"binary64"],["#s(literal 1 binary64)","done",58.71019205026928,"binary64"]],"compiler":[[15,12],[16,11],[11,8],[12,9],[11,9],[7,6],[7,6],[8,8],[9,7],[10,9],[12,10],[14,11],[10,9],[9,8],[17,13],[13,11],[11,9],[4,4],[26,16],[21,14],[16,12],[11,9],[1,2],[15,12],[16,11],[12,9],[11,9],[7,6],[8,8],[9,7],[10,9],[12,10],[14,11],[9,8],[17,13],[13,11],[26,16],[21,14],[16,12]],"count":[[1165,23]],"kept":[{"done":[2,2],"fresh":[15,13],"new":[1143,3],"picked":[5,5]}],"memory":[[-665360,50922864]],"min-error":[[0.0,"binary64"]],"time":37.75,"type":"prune"},{"egraph":[[0,8137,129,0.035554883],[7,6944,129,0.018365734],[6,3682,129,0.026964743],[5,1393,129,0.01288293],[4,480,129,0.007441746],[3,246,129,0.002255161],[2,157,129,0.001335624],[1,88,138,0.000789865],[0,55,151,0.000558218],[0,33,174,0.000378617]],"inputs":[["(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","#s(literal 1 binary64)","(tan.f64 (*.f64 #s(literal -1/2 binary64) x))","(*.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","#s(literal -1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal 1/2 binary64)","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(sin.f64 x)","x","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","#s(literal -1 binary64)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","#s(literal -1 binary64)","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(pow.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","x","(neg.f64 (sin.f64 x))","(sin.f64 x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","#s(literal -1 binary64)"]],"locations":[["(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","cost-diff",0],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","cost-diff",8],["(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","cost-diff",4],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (neg.f64 (sin.f64 x)))","cost-diff",6],["(cos.f64 x)","cost-diff",0],["(-.f64 (cos.f64 x) #s(literal -1 binary64))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","cost-diff",3],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","cost-diff",0],["(tan.f64 (*.f64 #s(literal -1/2 binary64) x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","cost-diff",0],["(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","cost-diff",1],["(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","cost-diff",4]],"memory":[[4781632,19310752]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","(tan.f64 (*.f64 x #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64))))","#s(literal 1 binary64)","(tan.f64 (*.f64 #s(literal -1/2 binary64) x))","(tan.f64 (*.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) x)","(*.f64 x #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","x","#s(literal -1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal 1/24 binary64)","#s(literal 1/2 binary64)","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(sin.f64 x)","x","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","#s(literal -1 binary64)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (neg.f64 (sin.f64 x)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","#s(literal -1 binary64)","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(cos.f64 x)","(pow.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","x","(neg.f64 (sin.f64 x))","(sin.f64 x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":165.36181640625,"type":"simplify"},{"compiler":[[169,33]],"locations":[["(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","accuracy",0.15234375],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","accuracy",0.26953125],["(-.f64 (cos.f64 x) #s(literal -1 binary64))","accuracy",0.3984210710365036],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","accuracy",13.808505160354336],["(cos.f64 x)","accuracy",0.12337875976844201],["(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","accuracy",0.15234375],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (neg.f64 (sin.f64 x)))","accuracy",0.1953125],["(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","accuracy",0.3984210710365036],["(sin.f64 x)","accuracy",0.10546875],["(cos.f64 x)","accuracy",0.12337875976844201],["(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","accuracy",0.201503759768442],["(-.f64 (cos.f64 x) #s(literal -1 binary64))","accuracy",0.3984210710365036],["(*.f64 x x)","accuracy",0.0],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","accuracy",0.0546875],["(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","accuracy",0.08984375],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","accuracy",30.87887102599841],["(*.f64 #s(literal -1/2 binary64) x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","accuracy",0.15234375],["(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","accuracy",0.26171875],["(tan.f64 (*.f64 #s(literal -1/2 binary64) x))","accuracy",0.2676163086106521]],"memory":[[-7638544,49856176]],"mixsample":[[20.649169921875,"ival-div",0],[7.93896484375,"adjust",800],[14.53369140625,"ival-cos",1600],[0.1279296875,"ival-assert",0],[8.551513671875,"ival-sub",0],[9.748779296875,"ival-tan",0],[5.706787109375,"ival-cos",4000],[7.3203125,"ival-cos",0],[4.817138671875,"const",0],[1.621337890625,"ival-cos",400],[5.309814453125,"adjust",2000],[49.40380859375,"ival-pow",0],[1.999267578125,"ival-add",0],[0.08984375,"ival-cos",800],[16.526123046875,"ival-mult",0],[7.652099609375,"ival-sin",0],[0.77978515625,"adjust",2800],[0.25146484375,"ival-true",0],[0.717529296875,"exact",0],[1.859130859375,"ival-neg",0],[22.97998046875,"ival-pow2",0]],"outcomes":[[24.333984375,1,"valid",36],[92.073486328125,2,"valid",76],[28.427001953125,3,"valid",13],[80.060302734375,0,"valid",131]],"time":258.1611328125,"type":"localize"},{"count":[[20,58]],"inputs":[["(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(tan.f64 (*.f64 #s(literal -1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(sin.f64 x)","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))))","(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 #s(literal -1/2 binary64) x)"]],"memory":[[-2440480,5104256]],"outputs":[["(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ -2 x)","(/ (- (* 1/6 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (+ 1/6 (* 1/360 (pow x 2)))) 2) x)","(/ (- (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/360 (* 1/15120 (pow x 2)))))) 2) x)","1/2","(+ 1/2 (* 1/24 (pow x 2)))","(pow x 2)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(* 2 x)","(* x (+ 2 (* -5/6 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* 17/120 (pow x 2)) 5/6))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 17/120 (* -13/1008 (pow x 2)))) 5/6))))","(/ (sin (* -1/2 x)) (cos (* -1/2 x)))","(* -1 (/ (sin (* -1/2 x)) (cos (* -1/2 x))))","(/ (cos (* -1/2 x)) (sin (* -1/2 x)))","(/ (- 1 (cos x)) (sin x))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(/ (sin x) (+ 1 (cos x)))","(sin x)","(+ 1 (cos x))","(cos x)","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(pow (sin x) 2)","(* (sin x) (+ 1 (cos x)))"]],"series":[[8.076904296875,"((pow (/ 1 (tan (* -1/2 x))) -1) (* (pow (/ 1 (tan (* -1/2 x))) -1) -1) (/ 1 (tan (* -1/2 x))) (tan (* -1/2 x)) (/ (- 1 (cos x)) (sin x)) (* (+ (* (* x x) 1/24) 1/2) x) (+ (* (* x x) 1/24) 1/2) (* x x) (/ (sin x) (- (cos x) -1)) (sin x) (- (cos x) -1) (cos x) (* (/ 1 (- -1 (/ 1 (pow (cos x) -1)))) (neg (sin x))) (/ 1 (pow (cos x) -1)) (/ 1 (- -1 (/ 1 (pow (cos x) -1)))) (- -1 (/ 1 (pow (cos x) -1))) (/ (pow (sin x) 2) (* (- (cos x) -1) (sin x))) (pow (sin x) 2) (* (- (cos x) -1) (sin x)) (* -1/2 x))","x","-inf"],[3.9169921875,"((pow (/ 1 (tan (* -1/2 x))) -1) (* (pow (/ 1 (tan (* -1/2 x))) -1) -1) (/ 1 (tan (* -1/2 x))) (tan (* -1/2 x)) (/ (- 1 (cos x)) (sin x)) (* (+ (* (* x x) 1/24) 1/2) x) (+ (* (* x x) 1/24) 1/2) (* x x) (/ (sin x) (- (cos x) -1)) (sin x) (- (cos x) -1) (cos x) (* (/ 1 (- -1 (/ 1 (pow (cos x) -1)))) (neg (sin x))) (/ 1 (pow (cos x) -1)) (/ 1 (- -1 (/ 1 (pow (cos x) -1)))) (- -1 (/ 1 (pow (cos x) -1))) (/ (pow (sin x) 2) (* (- (cos x) -1) (sin x))) (pow (sin x) 2) (* (- (cos x) -1) (sin x)) (* -1/2 x))","x","inf"],[2.31103515625,"((pow (/ 1 (tan (* -1/2 x))) -1) (* (pow (/ 1 (tan (* -1/2 x))) -1) -1) (/ 1 (tan (* -1/2 x))) (tan (* -1/2 x)) (/ (- 1 (cos x)) (sin x)) (* (+ (* (* x x) 1/24) 1/2) x) (+ (* (* x x) 1/24) 1/2) (* x x) (/ (sin x) (- (cos x) -1)) (sin x) (- (cos x) -1) (cos x) (* (/ 1 (- -1 (/ 1 (pow (cos x) -1)))) (neg (sin x))) (/ 1 (pow (cos x) -1)) (/ 1 (- -1 (/ 1 (pow (cos x) -1)))) (- -1 (/ 1 (pow (cos x) -1))) (/ (pow (sin x) 2) (* (- (cos x) -1) (sin x))) (pow (sin x) 2) (* (- (cos x) -1) (sin x)) (* -1/2 x))","x","0"]],"time":15.364990234375,"type":"series"},{"count":[[58,57]],"egraph":[[0,8206,470,0.088412704],[5,6973,533,0.021712561],[4,4297,533,0.020317379],[3,2329,533,0.01642327],[2,1207,539,0.008878281],[1,500,546,0.004150969],[0,189,552,0.001980478]],"inputs":[["(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ -2 x)","(/ (- (* 1/6 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (+ 1/6 (* 1/360 (pow x 2)))) 2) x)","(/ (- (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/360 (* 1/15120 (pow x 2)))))) 2) x)","1/2","(+ 1/2 (* 1/24 (pow x 2)))","(pow x 2)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","-1/2","(- (* -1/8 (pow x 2)) 1/2)","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(* 2 x)","(* x (+ 2 (* -5/6 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* 17/120 (pow x 2)) 5/6))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 17/120 (* -13/1008 (pow x 2)))) 5/6))))","(/ (sin (* -1/2 x)) (cos (* -1/2 x)))","(* -1 (/ (sin (* -1/2 x)) (cos (* -1/2 x))))","(/ (cos (* -1/2 x)) (sin (* -1/2 x)))","(/ (- 1 (cos x)) (sin x))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(/ (sin x) (+ 1 (cos x)))","(sin x)","(+ 1 (cos x))","(cos x)","(/ -1 (+ 1 (cos x)))","(* -1 (+ 1 (cos x)))","(pow (sin x) 2)","(* (sin x) (+ 1 (cos x)))"]],"memory":[[9585392,39046416]],"method":["egg-herbie"],"outputs":[["(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -17/40320 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* 1/6 (pow x 2)) 2) x)","(fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (+ 1/6 (* 1/360 (pow x 2)))) 2) x)","(fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/6 binary64)) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/360 (* 1/15120 (pow x 2)))))) 2) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/15120 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x (/.f64 #s(literal -2 binary64) x))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/24 (pow x 2)))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(pow x 2)","(*.f64 x x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","2","#s(literal 2 binary64)","(+ 2 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 2 binary64))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* -1/8 (pow x 2)) 1/2)","(fma.f64 #s(literal -1/8 binary64) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* -1/48 (pow x 2)) 1/8)) 1/2)","(fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (- (* (pow x 2) (- (* -17/5760 (pow x 2)) 1/48)) 1/8)) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -17/5760 binary64) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","-2","#s(literal -2 binary64)","(- (* 1/2 (pow x 2)) 2)","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) (*.f64 x x) #s(literal -2 binary64))","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x #s(literal -2 binary64))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 2/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(* x (+ 2 (* -5/6 (pow x 2))))","(*.f64 (fma.f64 #s(literal -5/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)","(* x (+ 2 (* (pow x 2) (- (* 17/120 (pow x 2)) 5/6))))","(*.f64 (fma.f64 (fma.f64 #s(literal 17/120 binary64) (*.f64 x x) #s(literal -5/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 17/120 (* -13/1008 (pow x 2)))) 5/6))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -13/1008 binary64) (*.f64 x x) #s(literal 17/120 binary64)) (*.f64 x x) #s(literal -5/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (sin (* -1/2 x)) (cos (* -1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (cos.f64 (*.f64 #s(literal -1/2 binary64) x)))","(* -1 (/ (sin (* -1/2 x)) (cos (* -1/2 x))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x))) (cos.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/ (cos (* -1/2 x)) (sin (* -1/2 x)))","(/.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* 1/24 (pow x 2))","(*.f64 #s(literal 1/24 binary64) (*.f64 x x))","(* (pow x 2) (+ 1/24 (* 1/2 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(/ (sin x) (+ 1 (cos x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(sin x)","(sin.f64 x)","(+ 1 (cos x))","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos x)","(cos.f64 x)","(/ -1 (+ 1 (cos x)))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(* -1 (+ 1 (cos x)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(pow (sin x) 2)","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(* (sin x) (+ 1 (cos x)))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":256.635986328125,"type":"simplify"},{"count":[[20,1311]],"egraph":[[0,8782,95,0.060618364],[2,1177,95,0.031775079],[1,194,104,0.005586854],[0,55,113,0.001888815],[0,33,140,0.000375285]],"inputs":[["(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x)))","(tan.f64 (*.f64 #s(literal -1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(sin.f64 x)","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))))","(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 #s(literal -1/2 binary64) x)"]],"memory":[[-4326592,61741680]],"outputs":[["(*.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))))))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(*.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64))))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))))","(pow.f64 (*.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 2 binary64))","(pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) (cos.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(tan.f64 (*.f64 x #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(exp.f64 (fma.f64 (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) #s(literal -1/2 binary64) (*.f64 (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64)))) (pow.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) (*.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64))","(*.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))))))","(*.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) (+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) (tan.f64 (*.f64 x #s(literal -1/2 binary64))) (*.f64 #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))))) (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64)))) (cos.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64)))) (sin.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))","(-.f64 #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64))))","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))))","(+.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (cos.f64 (*.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) (pow.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(pow.f64 (*.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -2 binary64))","(pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (exp.f64 (log.f64 #s(literal -1 binary64))) (exp.f64 (log.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64)))) (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) (sin.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(exp.f64 (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))))","(*.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))))))","(*.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(*.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64))))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))))","(pow.f64 (*.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 2 binary64))","(pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))) (cos.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(tan.f64 (*.f64 x #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(exp.f64 (fma.f64 (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) #s(literal -1/2 binary64) (*.f64 (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64))))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x))) (-.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x))) (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (-.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))))) (-.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) #s(literal 3 binary64)) (pow.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (-.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) #s(literal 3 binary64))) (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) x) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))) (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))))","(fma.f64 (neg.f64 x) #s(literal -1/2 binary64) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))))","(fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x))","(fma.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/2 binary64)))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))))","(fma.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x))","(+.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (*.f64 x #s(literal 1/2 binary64)))","(+.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x (*.f64 #s(literal 1/24 binary64) (*.f64 x x))))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/48 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/191102976 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2304 binary64)))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/191102976 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -1/64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2641807540224 binary64) (pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/191102976 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/110592 binary64)))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/48 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x))) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/48 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(fma.f64 x (*.f64 #s(literal 1/24 binary64) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 x x)))","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(*.f64 x x)","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal 1 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))) (+.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal 2 binary64) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)))) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (sin.f64 x) (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (pow.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))","(+.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))))","(*.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (sin.f64 x)) (sqrt.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sin.f64 x))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (sin.f64 x)))","(sin.f64 x)","(-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(exp.f64 (-.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 2 binary64)) (log.f64 (sin.f64 x))))","(exp.f64 (log.f64 (sin.f64 x)))","(+.f64 #s(literal 0 binary64) (sin.f64 x))","(*.f64 (/.f64 (sin.f64 x) (*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal 1 binary64))) (/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (sin.f64 x) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))) (+.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(+.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (cos.f64 x))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(exp.f64 (log.f64 (cos.f64 x)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal 1 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))) (+.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal 2 binary64) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)))) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (sin.f64 x) (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (pow.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))","(+.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (cos.f64 x))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(exp.f64 (log.f64 (cos.f64 x)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))) (+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))) (+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))))))","(/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal -1 binary64)))","(-.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(-.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(exp.f64 (neg.f64 (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(+.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(+.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(+.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 (cos.f64 x))) (sqrt.f64 (cos.f64 x))))","(+.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(+.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal 1 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sqrt.f64 (sin.f64 x))) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (sqrt.f64 (sin.f64 x))))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 (sin.f64 x))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (neg.f64 (sin.f64 x))))","(*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (/.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)))","(*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))) (+.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(/.f64 (neg.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (sin.f64 x) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal 2 binary64) (sin.f64 x)))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)))) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (fma.f64 (sin.f64 x) (sin.f64 x) #s(literal 0 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (sin.f64 x) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (tan.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)))","(/.f64 (-.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (sin.f64 x)))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (sin.f64 x) (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x)))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(fma.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))) (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (tan.f64 x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (pow.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))) (/.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (sin.f64 x)))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))","(+.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (cos.f64 x)))","(+.f64 (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(+.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal 1/2 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(*.f64 (sin.f64 x) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (sin.f64 x)))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64))))) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (-.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))) (*.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x)))))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))) #s(literal -2 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (+.f64 x x)))))","(neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (cos.f64 #s(literal 0 binary64)) #s(literal 2 binary64)) (/.f64 (cos.f64 (+.f64 x x)) #s(literal 2 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x))))","(-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(exp.f64 (+.f64 (log.f64 (sin.f64 x)) (log.f64 (sin.f64 x))))","(exp.f64 (*.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))","(+.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 (+.f64 x x)))))","(+.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) (neg.f64 (cos.f64 x))))","(+.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -2 binary64))))","(+.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64))","(*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (sin.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (sin.f64 x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (sin.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (sin.f64 x))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (sin.f64 x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)))","(neg.f64 (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(fma.f64 (*.f64 (sqrt.f64 (sin.f64 x)) (sqrt.f64 (cos.f64 x))) (*.f64 (sqrt.f64 (sin.f64 x)) (sqrt.f64 (cos.f64 x))) (sin.f64 x))","(fma.f64 (*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (sin.f64 x))) (sin.f64 x))","(fma.f64 (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (sqrt.f64 (sin.f64 x)) (sqrt.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 x) (sin.f64 x))","(fma.f64 (sin.f64 x) (cos.f64 x) (sin.f64 x))","(fma.f64 (sin.f64 x) #s(literal 1 binary64) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (sin.f64 x))","(+.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (sin.f64 x))","(+.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 x #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":232.943115234375,"type":"rewrite"},{"compiler":[[21068,3025]],"memory":[[8534272,98336416]],"time":187.71484375,"type":"eval"},{"alts":[["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)) (sin.f64 x)))","fresh",14.221764027946211,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","fresh",0.6288866849466306,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",30.460076481654603,"binary64"],["(/.f64 (sin.f64 x) (-.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","fresh",0.5679546886844938,"binary64"],["(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","done",0.5303391016773691,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))))","fresh",0.6120766505195794,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","fresh",0.3643150879159781,"binary64"],["(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","done",0.3597450683790941,"binary64"],["(*.f64 (pow.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 2 binary64)) #s(literal -1 binary64))","fresh",50.36593632814754,"binary64"],["(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))) #s(literal -1 binary64))","fresh",50.37861254884221,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","done",0.5614555650390213,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","fresh",30.525824990861047,"binary64"],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","fresh",16.138710058610656,"binary64"],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","done",0.25818256837909415,"binary64"],["(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","done",0.2676163086106521,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x)))","fresh",30.87887102599841,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",30.96291679809593,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",30.93431168826833,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","done",30.881156035766853,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","done",30.853027435069126,"binary64"],["#s(literal 1 binary64)","done",58.71019205026928,"binary64"]],"compiler":[[507,145],[16,11],[11,9],[7,6],[11,8],[7,6],[12,10],[8,8],[10,9],[9,9],[11,10],[10,9],[9,8],[13,11],[11,9],[4,4],[18,13],[26,16],[21,14],[16,12],[11,9],[1,2]],"count":[[1072,21]],"kept":[{"done":[7,6],"fresh":[11,4],"new":[1049,8],"picked":[5,3]}],"memory":[[-2072752,49870288]],"min-error":[[0.0,"binary64"]],"time":33.9150390625,"type":"prune"},{"accuracy":[0.25818256837909415],"baseline":[0.25818256837909415],"branch":[["x",0.2581825683790941,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",0.25818256837909415,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[44,1]],"inputs":[["#s(literal 1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 2 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))))","(/.f64 (sin.f64 x) (-.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (/.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (sin.f64 x))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (neg.f64 (sin.f64 x)))","(*.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))) #s(literal -1 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(fma.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (cos.f64 x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 x))) #s(literal -1 binary64)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 (/.f64 #s(literal 1/2 binary64) (sin.f64 x)) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (sin.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (exp.f64 (log.f64 (sin.f64 x)))))","(*.f64 (-.f64 (sin.f64 x) (*.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (sin.f64 x))"]],"memory":[[-10134048,12489680]],"oracle":[64.0],"outputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))"]],"repr":["binary64"],"time":26.782958984375,"times":[[11.041015625,"x"],[13.04296875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.2676163086106521],"baseline":[0.2676163086106521],"branch":[["x",0.2676163086106521,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",0.2676163086106521,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[20,1]],"inputs":[["#s(literal 1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(/.f64 (neg.f64 (sin.f64 x)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(*.f64 (pow.f64 (sqrt.f64 (tan.f64 (*.f64 x #s(literal -1/2 binary64)))) #s(literal 2 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))"]],"memory":[[-1181712,7105680]],"oracle":[63.907717816411505],"outputs":[["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))"]],"repr":["binary64"],"time":12.380126953125,"times":[[5.2060546875,"x"],[5.69091796875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[28.16417587396988],"baseline":[30.853027435069126],"branch":[["x",28.16417587396988,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",28.293102653043547,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[7,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64))"]],"memory":[[4299824,4299824]],"oracle":[61.508932974395364],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(literal 1 binary64)"]],"repr":["binary64"],"time":5.682861328125,"times":[[2.467041015625,"x"],[2.411865234375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[28.166281832064453],"baseline":[30.853027435069126],"branch":[["x",28.166281832064453,2,"binary64"]],"compiler":[[1,1]],"count":[[5,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))"]],"memory":[[2230720,2230720]],"oracle":[61.478221906473166],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(literal 1 binary64)"]],"repr":["binary64"],"time":2.52001953125,"times":[[2.009033203125,"x"]],"type":"regimes"},{"accuracy":[28.176202477568793],"baseline":[30.853027435069126],"branch":[["x",28.176202477568793,2,"binary64"]],"compiler":[[1,1]],"count":[[4,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x)))"]],"memory":[[-6173584,2112800]],"oracle":[61.41286059869891],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x)))","#s(literal 1 binary64)"]],"repr":["binary64"],"time":2.501953125,"times":[[2.065185546875,"x"]],"type":"regimes"},{"accuracy":[28.178487487337236],"baseline":[30.853027435069126],"branch":[["x",28.178487487337236,2,"binary64"]],"compiler":[[1,1]],"count":[[3,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))"]],"memory":[[1969216,1969216]],"oracle":[61.41286059869891],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(literal 1 binary64)"]],"repr":["binary64"],"time":2.1240234375,"times":[[1.697998046875,"x"]],"type":"regimes"},{"accuracy":[28.459519163222012],"baseline":[30.853027435069126],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",28.53078832631142,2,"binary64"],["x",28.459519163222012,2,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[2,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))"]],"memory":[[3142432,3142432]],"oracle":[61.10370032211642],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(literal 1 binary64)"]],"repr":["binary64"],"time":3.14697265625,"times":[[1.375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"],[1.3369140625,"x"]],"type":"regimes"},{"accuracy":[58.710192050269264],"baseline":[58.71019205026928],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",58.71019205026929,1,"binary64"],["x",58.710192050269264,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[1,1]],"inputs":[["#s(literal 1 binary64)"]],"link":["."],"memory":[[-6524016,2967120]],"name":["tanhf (example 3.4)"],"oracle":[58.71019205026928],"outputs":[["#s(literal 1 binary64)"]],"repr":["binary64"],"time":2.89501953125,"times":[[1.1279296875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"],[1.070068359375,"x"]],"type":"regimes"},{"bstep":[[12.218017578125,2.6062348621442064,7.241478630028455]],"compiler":[[1,3],[26,17],[1,3],[26,17],[1,3],[26,17],[1,3],[26,17],[1,3],[26,17],[9,9],[1,1]],"memory":[[3214912,3214912]],"method":["binary-search"],"mixsample":[[0.443359375,"ival-sub",0],[0.489990234375,"ival-div",0],[0.06103515625,"ival-true",0],[3.119384765625,"ival-cos",0],[0.052978515625,"exact",0],[2.819091796875,"ival-sin",0],[0.03125,"ival-assert",0]],"outcomes":[[8.919921875,0,"valid",80]],"stop":[["narrow-enough",1]],"time":13.656005859375,"type":"bsearch"},{"bstep":[[0.677001953125,2.6062348621442064,7.241478630028455]],"compiler":[[1,3],[21,15],[1,3],[21,15],[1,3],[21,15],[1,3],[21,15],[1,3],[21,15],[9,9],[1,1]],"memory":[[427120,427120]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.046142578125,"type":"bsearch"},{"bstep":[[0.65087890625,2.6062348621442064,7.241478630028455]],"compiler":[[1,3],[18,14],[1,3],[18,14],[1,3],[18,14],[1,3],[18,14],[1,3],[18,14],[9,9],[1,1]],"memory":[[406896,406896]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":0.95703125,"type":"bsearch"},{"bstep":[[0.535888671875,2.6062348621442064,7.241478630028455]],"compiler":[[1,3],[16,13],[1,3],[16,13],[1,3],[16,13],[1,3],[16,13],[1,3],[16,13],[9,9],[1,1]],"memory":[[398384,398384]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":0.85986328125,"type":"bsearch"},{"bstep":[[0.4658203125,2.6062348621442064,7.241478630028455]],"compiler":[[1,3],[11,10],[1,3],[11,10],[1,3],[11,10],[1,3],[11,10],[1,3],[11,10],[9,9],[1,1]],"memory":[[365792,365792]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":0.738037109375,"type":"bsearch"},{"egraph":[[9,7022,118,0.022930727],[8,5455,118,0.052012362],[7,500,118,0.020981271],[6,201,118,0.002754671],[5,126,118,0.001497184],[4,97,118,0.001177533],[3,70,118,0.001157493],[2,58,118,0.000936536],[1,53,118,0.000907316],[0,41,118,0.000820535]],"inputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","#s(literal 1 binary64)"]],"memory":[[1793232,10002288]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64))","(if (<=.f64 x #s(literal 6980579422424269/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","#s(literal 1 binary64)"]],"stop":[["node limit",1]],"time":125.02294921875,"type":"simplify"},{"compiler":[[133,43]],"memory":[[-6201984,2052576]],"stop":[["fuel",1]],"time":9.27197265625,"type":"soundness"},{"compiler":[[133,43],[133,43],[4,4],[4,4],[7,6],[7,6],[11,9],[11,9],[11,9],[11,9]],"memory":[[4391936,35842368]],"remove-preprocessing":[["(negabs x)"],[],[],[],[],[],[],[],["(negabs x)"]],"time":66.736083984375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01904296875,"type":"end"}]