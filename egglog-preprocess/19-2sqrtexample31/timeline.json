[{"memory":[[15120,15120]],"time":0.030029296875,"type":"start"},{"compiler":[[15,11]],"memory":[[573504,573504]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":1.95703125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[12339728,376038928]],"mixsample":[[182.19970703125,"adjust",800],[60.0966796875,"ival-add",0],[101.158935546875,"ival-sqrt",800],[4.05224609375,"ival-assert",0],[16.1884765625,"ival-add",400],[98.37109375,"ival-sub",0],[15.684326171875,"ival-and",0],[0.077880859375,"ival-sub",400],[162.339111328125,"const",0],[144.939453125,"ival-sqrt",0],[29.6513671875,"ival->",0],[9.81640625,"exact",0],[39.749267578125,"ival-add",800],[44.629638671875,"ival-sqrt",400],[24.14892578125,"ival-<",0]],"outcomes":[[1192.162353515625,1,"valid",8017],[19.646484375,0,"valid",239]],"time":1588.791015625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[255,0,0,1]],"explanations":[["-.f64","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","cancellation",255,1,[],[[]]]],"fperrors":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",255,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(sqrt.f64 x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[255,0,0,0,1,0]],"memory":[[3385344,45277824]],"mixsample":[[8.4541015625,"adjust",800],[2.810302734375,"ival-add",0],[4.895263671875,"ival-sqrt",800],[0.2021484375,"ival-assert",0],[5.07958984375,"ival-sub",0],[0.724853515625,"ival-add",400],[0.423583984375,"ival-true",0],[7.376220703125,"ival-sqrt",0],[1.56396484375,"ival-add",800],[0.32373046875,"exact",0],[2.231201171875,"ival-sqrt",400]],"outcomes":[[51.036376953125,1,"valid",504],[0.41845703125,0,"valid",8]],"time":97.0419921875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,7,0.001063446],[10,182,7,0.000917621],[9,174,7,0.00092743],[8,158,7,0.000902171],[7,109,7,0.000779771],[6,80,7,0.000820652],[5,48,7,0.00056992],[4,33,7,0.000314473],[3,25,7,0.000174944],[2,19,7,0.000129785],[1,15,7,0.000116906],[0,10,7,0.000155908],[0,6,7,0.000103891]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[-1054272,15078896]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":149.323974609375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.0771484375,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","next",60.42296674669221,"binary64"]],"compiler":[[7,6]],"memory":[[311712,311712]],"time":0.453857421875,"type":"prune"},{"egraph":[[0,182,18,0.000656304],[10,182,18,0.000731633],[9,174,18,0.000838593],[8,158,18,0.000903848],[7,109,18,0.00083886],[6,80,18,0.000781427],[5,48,18,0.000443525],[4,33,18,0.000229325],[3,25,18,0.000174541],[2,19,18,0.000127913],[1,15,18,0.00012116],[0,10,18,0.000152484],[0,6,18,0.000114289]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(sqrt.f64 x)"]],"locations":[["(sqrt.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","cost-diff",0]],"memory":[[831568,831568]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","x","#s(literal 1 binary64)","(sqrt.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":13.30712890625,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","accuracy",0.0],["(sqrt.f64 x)","accuracy",0.0],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","accuracy",60.42296674669221]],"memory":[[2031680,11252736]],"mixsample":[[4.714599609375,"adjust",800],[1.60107421875,"ival-add",0],[2.384033203125,"ival-sqrt",800],[0.103759765625,"ival-assert",0],[2.53173828125,"ival-sub",0],[0.434814453125,"ival-add",400],[0.197021484375,"ival-true",0],[4.99462890625,"ival-sqrt",0],[3.486328125,"ival-add",800],[0.1669921875,"exact",0],[1.183349609375,"ival-sqrt",400]],"outcomes":[[30.86669921875,1,"valid",252],[0.168212890625,0,"valid",4]],"time":40.071044921875,"type":"localize"},{"count":[[4,27]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)"]],"memory":[[-6201664,1921984]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"series":[[2.4130859375,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","-inf"],[2.801025390625,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","inf"],[0.668212890625,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","0"]],"time":6.470947265625,"type":"series"},{"count":[[27,26]],"egraph":[[0,8163,351,0.097530452],[4,4919,387,0.030244017],[3,2292,387,0.022660794],[2,807,395,0.008153158],[1,299,399,0.003144312],[0,113,451,0.001570555]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"memory":[[-13734176,42823776]],"method":["egg-herbie"],"outputs":[["(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(sqrt x)","(sqrt.f64 x)","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (/.f64 #s(literal 5/128 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":276.2529296875,"type":"simplify"},{"count":[[4,357]],"egraph":[[0,8686,16,0.067031178],[3,3385,16,0.043117218],[2,290,16,0.010865571],[1,43,16,0.001243256],[0,10,16,0.00063503],[0,6,16,0.000116739]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)"]],"memory":[[520944,50852592]],"outputs":[["(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 2 binary64)))) (-.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (-.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))","(*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (pow.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (pow.f64 (neg.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (/.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64))))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(pow.f64 (/.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 9/2 binary64)) (pow.f64 x #s(literal 9/2 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(/.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 9/2 binary64)) (pow.f64 x #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) x)) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 9/2 binary64)) (pow.f64 x #s(literal 9/2 binary64))) (*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 x (-.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(neg.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(neg.f64 (/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (neg.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (sqrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))) (sqrt.f64 (+.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (sqrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64))) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 2 binary64)))) (-.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (-.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (sqrt.f64 x) #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(-.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) (sqrt.f64 x))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(+.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(*.f64 (sqrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) x))","(*.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) x))","(*.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))) (sqrt.f64 (+.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(*.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (sqrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (sqrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64))) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64))))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(pow.f64 (exp.f64 #s(literal 1/2 binary64)) (log1p.f64 x))","(pow.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 4 binary64)) #s(literal 1/8 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))) (sqrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))) (sqrt.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (sqrt.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (sqrt.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (sqrt.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (sqrt.f64 (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (sqrt.f64 (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (sqrt.f64 (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (exp.f64 (log.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (exp.f64 (log.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))))))","(/.f64 (exp.f64 (*.f64 #s(literal 1/2 binary64) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (exp.f64 (log.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(fabs.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(exp.f64 (-.f64 (log1p.f64 x) (*.f64 (log1p.f64 x) #s(literal 1/2 binary64))))","(exp.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -2 binary64))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))","(*.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)))","(*.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))))","(*.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (neg.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (+.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(pow.f64 (exp.f64 #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) (log1p.f64 x)))","(pow.f64 (exp.f64 #s(literal 1 binary64)) (log1p.f64 x))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 4 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (pow.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (exp.f64 (log1p.f64 (*.f64 (neg.f64 x) x))) (exp.f64 (log1p.f64 (neg.f64 x))))","(/.f64 (exp.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (exp.f64 (log1p.f64 (neg.f64 x))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (exp.f64 (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 3/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fabs.f64 (+.f64 #s(literal 1 binary64) x))","(hypot.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(hypot.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (hypot.f64 (sqrt.f64 x) x))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal 3/4 binary64))) (sqrt.f64 (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(*.f64 (sqrt.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal 1/4 binary64))) (sqrt.f64 (pow.f64 x #s(literal 3/4 binary64))))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (exp.f64 #s(literal 1/2 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/8 binary64))","(pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":243.595947265625,"type":"rewrite"},{"compiler":[[7540,1409]],"memory":[[2166416,33143216]],"time":61.045166015625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","fresh",59.16201343631025,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",60.42296674669221,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","next",61.13346923950409,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","next",61.575042785422745,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","next",62.99780157772901,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","next",0.48581657149593843,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","next",0.8118718723344133,"binary64"]],"compiler":[[13,8],[7,6],[12,10],[10,7],[9,8],[20,16],[14,12],[13,8],[12,10],[10,7],[9,8],[20,16],[14,12]],"count":[[383,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[382,6],"picked":[1,1]}],"memory":[[291104,16876144]],"min-error":[[0.04296875,"binary64"]],"time":14.27587890625,"type":"prune"},{"egraph":[[0,2509,158,0.007686659],[21,2509,158,0.01836688],[20,2502,158,0.011505049],[19,2487,158,0.011538898],[18,2460,158,0.01235847],[17,2373,158,0.014400003],[16,1847,158,0.014673509],[15,1271,158,0.011120143],[14,1104,158,0.011337159],[13,820,158,0.00611544],[12,675,158,0.004511595],[11,625,158,0.003380581],[10,603,158,0.003627677],[9,557,158,0.003492154],[8,500,158,0.003476683],[7,348,158,0.003159901],[6,255,158,0.002884451],[5,154,158,0.001457902],[4,103,158,0.000713436],[3,76,158,0.00049081],[2,58,158,0.000384903],[1,51,158,0.000369486],[0,37,158,0.000386112],[0,24,158,0.000259943]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","(sqrt.f64 x)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/2 binary64)"]],"locations":[["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","cost-diff",0],["(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","cost-diff",0]],"memory":[[4811136,4811136]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","(sqrt.f64 x)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":167.533935546875,"type":"simplify"},{"compiler":[[123,19]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","accuracy",0.0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.12890625],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","accuracy",0.6868718245609282],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","accuracy",0.7223594614971294],["(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","accuracy",60.42296674669221],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","accuracy",59.533502739991654],["(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","accuracy",60.42296674669221],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","accuracy",59.548534437593396],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","accuracy",60.42296674669221],["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","accuracy",0.0078125],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.12890625],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","accuracy",0.23191047885356902],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","accuracy",0.25]],"memory":[[-10790032,29365952]],"mixsample":[[5.8837890625,"ival-div",0],[9.146240234375,"adjust",800],[5.339111328125,"ival-add",0],[94.025634765625,"ival-mult",0],[2.75048828125,"ival-sqrt",800],[0.111083984375,"ival-assert",0],[2.67822265625,"ival-sub",0],[0.49462890625,"ival-add",400],[0.249755859375,"ival-true",0],[0.010986328125,"ival-sub",400],[5.900634765625,"ival-sqrt",0],[1.19287109375,"ival-add",800],[0.478271484375,"exact",0],[1.311767578125,"ival-sqrt",400]],"outcomes":[[170.12939453125,1,"valid",252],[0.5751953125,0,"valid",4]],"time":190.7080078125,"type":"localize"},{"count":[[15,41]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[3352688,3352688]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(sqrt (/ 1 x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ 1 x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(* 1/2 (sqrt x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))"]],"series":[[2.700927734375,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (sqrt (/ 1 x)) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (- (sqrt (+ x 1)) (sqrt x)) (* (sqrt (/ 1 x)) 1/2) (/ 1 x))","x","-inf"],[1.6669921875,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (sqrt (/ 1 x)) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (- (sqrt (+ x 1)) (sqrt x)) (* (sqrt (/ 1 x)) 1/2) (/ 1 x))","x","inf"],[2.02490234375,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (sqrt (/ 1 x)) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (- (sqrt (+ x 1)) (sqrt x)) (* (sqrt (/ 1 x)) 1/2) (/ 1 x))","x","0"]],"time":7.248046875,"type":"series"},{"count":[[41,41]],"egraph":[[0,8032,483,0.093419369],[4,5816,526,0.025192683],[3,2659,526,0.022309335],[2,1024,534,0.009561448],[1,353,539,0.003307472],[0,132,615,0.001109193]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(sqrt (/ 1 x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ 1 x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(* 1/2 (sqrt x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))"]],"memory":[[-2281616,45108400]],"method":["egg-herbie"],"outputs":[["(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(* -1/8 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(sqrt x)","(sqrt.f64 x)","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64)))","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 #s(literal -1/16 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 #s(literal 5/128 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (fma.f64 #s(literal -1/16 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64)))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64))) x)","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 #s(literal -1/16 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":260.510986328125,"type":"simplify"},{"count":[[15,396]],"egraph":[[0,8309,117,0.072729163],[2,1055,120,0.025034163],[1,146,120,0.004048787],[0,37,128,0.001184954],[0,24,128,0.000246008]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[6208640,53390944]],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(*.f64 (pow.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) x) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (sqrt.f64 x)) (/.f64 (pow.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) x) (/.f64 (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) x) (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) x) (/.f64 (pow.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) x) (pow.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) (neg.f64 x))))","(*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)))","(*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) x)))","(*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 x (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) (/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))","(*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(pow.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) x)) (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) x)) (neg.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) (neg.f64 x))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) x))","(/.f64 (*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (neg.f64 x)))","(/.f64 (*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x)))","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) #s(literal -1 binary64)) (*.f64 (neg.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))) (neg.f64 x)))","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))) x))","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) (neg.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (*.f64 (neg.f64 x) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (*.f64 (neg.f64 x) (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))))) (*.f64 (neg.f64 x) (neg.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (*.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (*.f64 x (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))))) (*.f64 x (neg.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 x (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) x) (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (*.f64 (neg.f64 x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 x (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (neg.f64 x) (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) (neg.f64 x)))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (neg.f64 x)))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (neg.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 x (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) x))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x)) (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) x))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(fma.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(-.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(-.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x) (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)))))","(*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))) (+.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (*.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/64 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 x x))) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/64 binary64) x) #s(literal 3 binary64)) (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (/.f64 #s(literal 1/64 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal 1/4 binary64) x (/.f64 #s(literal 1/64 binary64) x)))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/64 binary64) x) #s(literal 3 binary64)) (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/134217728 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 1/512 binary64) (pow.f64 x #s(literal 9/2 binary64)))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (/.f64 #s(literal 1/64 binary64) x) #s(literal 3 binary64)) (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/4 binary64) x))) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal 1/64 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(fma.f64 (/.f64 #s(literal 1/64 binary64) x) (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(-.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(+.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (neg.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(+.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 (sqrt.f64 x))))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))))))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))) (*.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))) (+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))) (*.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))))) (+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))))","(/.f64 (-.f64 x (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (fma.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 x (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 4 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 4 binary64)) (*.f64 x (+.f64 x (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))))) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 9 binary64)) (pow.f64 x #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 6 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 3 binary64)))) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) x)) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x)) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))","(fma.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (neg.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))","(+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))))","(+.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)))","(+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))) (*.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))) (+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 x (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (fma.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) x (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 x (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 4 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 4 binary64)) (*.f64 x (+.f64 x (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 9 binary64)) (pow.f64 x #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 3 binary64)))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) x)) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x)) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","(+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))))","(+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(+.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal 1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/512 binary64) (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))))))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))) (*.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))) (+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))) (*.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))))) (+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))))","(/.f64 (-.f64 x (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64))) (-.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (fma.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) x (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64))) (+.f64 x (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 4 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) x) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 4 binary64)) (*.f64 x (+.f64 x (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64))))) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 9 binary64)) (pow.f64 x #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 6 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) #s(literal 3 binary64)))) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) x)) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x)) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)))","(fma.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))","(fma.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","(+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (neg.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))","(+.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))))","(+.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)))","(+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (neg.f64 x))))","(/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (neg.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (sqrt.f64 x) (sqrt.f64 (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(sqrt.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))","(exp.f64 (fma.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64))))","(exp.f64 (neg.f64 (log.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":249.178955078125,"type":"rewrite"},{"compiler":[[16554,1851]],"memory":[[-791888,52466112]],"time":119.109130859375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","next",59.16201343631025,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",60.42296674669221,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","next",61.13319684828111,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","done",62.99780157772901,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","next",0.48581657149593843,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","next",0.9290593246052822,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","next",0.9681218723344133,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","done",0.8118718723344133,"binary64"]],"compiler":[[13,8],[7,6],[17,13],[9,8],[18,13],[26,19],[12,10],[14,12],[13,8],[17,13],[18,13],[26,19],[12,10]],"count":[[560,8]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[553,4],"picked":[5,2]}],"memory":[[239952,24269536]],"min-error":[[0.0,"binary64"]],"time":19.30908203125,"type":"prune"},{"egraph":[[0,8076,202,0.097618044],[12,7592,208,0.014372223],[11,4291,208,0.02943477],[10,1936,208,0.022818927],[9,975,208,0.012526137],[8,582,208,0.00620996],[7,432,208,0.003326047],[6,300,208,0.002317227],[5,206,208,0.001478442],[4,145,208,0.000896027],[3,112,208,0.000594686],[2,93,208,0.000481653],[1,74,208,0.000493282],[0,51,212,0.000436771],[0,35,216,0.000302751]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","x","#s(literal 1/2 binary64)","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","#s(literal -1/8 binary64)","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(-.f64 (+.f64 #s(literal 1 binary64) x) x)","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(sqrt.f64 x)","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))"]],"locations":[["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(+.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(-.f64 (+.f64 #s(literal 1 binary64) x) x)","cost-diff",4],["(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","cost-diff",0],["#s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","cost-diff",0],["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","cost-diff",0]],"memory":[[335200,43438704]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","x","#s(literal 1/2 binary64)","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","#s(literal -1/8 binary64)","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))","(-.f64 (+.f64 #s(literal 1 binary64) x) x)","#s(literal 1 binary64)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))","#s(literal 1 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":357.281982421875,"type":"simplify"},{"compiler":[[151,28]],"locations":[["(sqrt.f64 x)","accuracy",0.0],["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","accuracy",0.0078125],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","accuracy",0.28125],["(-.f64 (+.f64 #s(literal 1 binary64) x) x)","accuracy",59.57677049108313],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","accuracy",0.23191047885356902],["(/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","accuracy",0.25],["#s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","accuracy",0.6882451448377349],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","accuracy",0.2890625],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","accuracy",0.6868718245609282],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.7939907005158308],["#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","accuracy",59.533502739991654],["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","accuracy",60.42296674669221],["(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","accuracy",0.0078125],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","accuracy",0.23191047885356902],["(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","accuracy",0.25],["(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","accuracy",0.2890625]],"memory":[[-886368,42578864]],"mixsample":[[0.361572265625,"ival-add",1200],[18.875,"ival-div",0],[13.361328125,"adjust",800],[10.265869140625,"ival-add",0],[0.008056640625,"ival-add",1600],[9.03515625,"ival-mult",0],[2.485595703125,"ival-sqrt",800],[0.100830078125,"ival-assert",0],[4.95751953125,"ival-sub",0],[0.505615234375,"ival-add",400],[0.217041015625,"ival-true",0],[0.01025390625,"ival-sub",400],[8.36669921875,"ival-sqrt",0],[1.388427734375,"ival-add",800],[0.38427734375,"exact",0],[1.110595703125,"ival-sqrt",400]],"outcomes":[[96.93115234375,1,"valid",252],[0.97802734375,0,"valid",4]],"time":123.7099609375,"type":"localize"},{"count":[[19,62]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(-.f64 (+.f64 #s(literal 1 binary64) x) x)","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))"]],"memory":[[-2580048,4991296]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(sqrt x)","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(* 1/2 x)","(* 1/2 (sqrt (/ 1 x)))","(* 1/2 (sqrt x))","(/ 1 (+ 1 (sqrt x)))","(+ (* -1/2 (/ x (pow (+ 1 (sqrt x)) 2))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* -1 (* x (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))))))) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ 1 x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* x (+ 1/2 (/ 1 x)))","(/ (- (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))) (* 1/8 (sqrt (/ 1 x)))) x)","(/ (- (+ (* -1 (/ (+ (* 1/128 (sqrt (pow x 7))) (* 1/32 (sqrt (pow x 7)))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (sqrt (/ 1 (pow x 3)))) (* 1/8 (sqrt (/ 1 x))))) x)","x","(* x (+ 1 (/ 1 x)))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (sqrt (/ 1 (pow x 3)))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (/ (- (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2))))) x))","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/128 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6)))) (* 1/32 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6))))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))) x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))"]],"series":[[5.8359375,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) x) (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (* 1/2 x) (- (sqrt (+ x 1)) (sqrt x)) (/ 1/2 (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (* 1/2 (sqrt x)) (- (+ 1 x) x) (/ (- (+ 1 x) x) (+ (sqrt x) (sqrt (+ 1 x)))) (+ 1 x) (+ (sqrt x) (sqrt (+ 1 x))) (/ -1/8 (sqrt x)))","x","-inf"],[3.404052734375,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) x) (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (* 1/2 x) (- (sqrt (+ x 1)) (sqrt x)) (/ 1/2 (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (* 1/2 (sqrt x)) (- (+ 1 x) x) (/ (- (+ 1 x) x) (+ (sqrt x) (sqrt (+ 1 x)))) (+ 1 x) (+ (sqrt x) (sqrt (+ 1 x))) (/ -1/8 (sqrt x)))","x","inf"],[3.696044921875,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) x) (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (* 1/2 x) (- (sqrt (+ x 1)) (sqrt x)) (/ 1/2 (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (* 1/2 (sqrt x)) (- (+ 1 x) x) (/ (- (+ 1 x) x) (+ (sqrt x) (sqrt (+ 1 x)))) (+ 1 x) (+ (sqrt x) (sqrt (+ 1 x))) (/ -1/8 (sqrt x)))","x","0"]],"time":14.251953125,"type":"series"},{"count":[[62,61]],"egraph":[[0,8293,953,0.121168328],[3,6746,1028,0.030726458],[2,2144,1029,0.024779722],[1,680,1040,0.010353478],[0,233,1167,0.003339497]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(sqrt x)","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(* 1/2 x)","(* 1/2 (sqrt (/ 1 x)))","(* 1/2 (sqrt x))","(/ 1 (+ 1 (sqrt x)))","(+ (* -1/2 (/ x (pow (+ 1 (sqrt x)) 2))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* -1 (* x (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))))))) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ 1 x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* x (+ 1/2 (/ 1 x)))","(/ (- (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))) (* 1/8 (sqrt (/ 1 x)))) x)","(/ (- (+ (* -1 (/ (+ (* 1/128 (sqrt (pow x 7))) (* 1/32 (sqrt (pow x 7)))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (sqrt (/ 1 (pow x 3)))) (* 1/8 (sqrt (/ 1 x))))) x)","x","(* x (+ 1 (/ 1 x)))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (sqrt (/ 1 (pow x 3)))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (/ (- (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2))))) x))","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/128 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6)))) (* 1/32 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6))))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))) x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))"]],"memory":[[3954752,50893664]],"method":["egg-herbie"],"outputs":[["(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(* -1/8 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(sqrt x)","(sqrt.f64 x)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(/ 1 (+ 1 (sqrt x)))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ (* -1/2 (/ x (pow (+ 1 (sqrt x)) 2))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (/.f64 x (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(+ (* x (- (* x (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(+ (* x (- (* x (+ (* -1 (* x (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))))))) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (+.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))) x (/.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (sqrt x))","(+.f64 (sqrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(fma.f64 #s(literal 1/2 binary64) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(/ (- (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))) (* 1/8 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (- (+ (* -1 (/ (+ (* 1/128 (sqrt (pow x 7))) (* 1/32 (sqrt (pow x 7)))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (sqrt (/ 1 (pow x 3)))) (* 1/8 (sqrt (/ 1 x))))) x)","(/.f64 (fma.f64 #s(literal -5/128 binary64) (/.f64 (sqrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))) x)","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -5/128 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) (neg.f64 x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))) #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(* -1 (/ (- (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/128 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6)))) (* 1/32 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6))))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal 5/128 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 (sqrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (neg.f64 x) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (neg.f64 x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))))"]],"stop":[["iter limit",1],["node limit",1]],"time":316.799072265625,"type":"simplify"},{"count":[[19,499]],"egraph":[[0,8462,171,0.077329733],[2,1668,174,0.029557205],[1,228,174,0.006173285],[0,51,184,0.001670175],[0,35,193,0.000325418]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(-.f64 (+.f64 #s(literal 1 binary64) x) x)","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))"]],"memory":[[5801808,60106624]],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) x) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) x) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(pow.f64 (/.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) x)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) x))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) x))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) x))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))) (/.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(-.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x) (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) x) (/.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/4 binary64) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 #s(literal 1/64 binary64) x))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -1/512 binary64) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))))","(fma.f64 #s(literal 1/8 binary64) (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(+.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(+.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) x (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64))) (+.f64 x (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) x)) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x)) (neg.f64 (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x)) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x) (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x)))) (/.f64 x (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x)))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(+.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))))","(+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x)))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 x #s(literal 1/2 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(pow.f64 (/.f64 (*.f64 (sqrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (sqrt.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (sqrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (sqrt.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 x) #s(literal 2 binary64)))","(neg.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(*.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))","(*.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(pow.f64 (/.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))))","(/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(neg.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (neg.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","#s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1 binary64)","(*.f64 (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (pow.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(pow.f64 (/.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) #s(literal -1 binary64))","(pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 x (-.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x))) (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))) (*.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 x))) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) x)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) x)) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (*.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (+.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (*.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))) (/.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))) (/.f64 x (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))) (/.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))))","(-.f64 (/.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x) (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) x) x))) (/.f64 (*.f64 x x) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) x) x))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(exp.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64)))","(+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(+.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(fabs.f64 (+.f64 #s(literal 1 binary64) x))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(*.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (-.f64 (*.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) #s(literal 1 binary64))","(/.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 x (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))) (/.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(-.f64 (/.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 1 binary64)) (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 1 binary64)))","(-.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 #s(literal 1/8 binary64) (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64))","(*.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(pow.f64 (/.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 1/8 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1/8 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64))))","(/.f64 #s(literal -1/8 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 x) #s(literal -8 binary64)))","(neg.f64 (/.f64 #s(literal 1/8 binary64) (sqrt.f64 x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":240.343994140625,"type":"rewrite"},{"compiler":[[19651,2387]],"memory":[[-4012192,65079088]],"time":164.035888671875,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","next",0.28515625,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",60.42296674669221,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","done",61.13319684828111,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","done",62.99780157772901,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","done",0.48581657149593843,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","done",0.9290593246052822,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","done",0.9681218723344133,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","done",0.8118718723344133,"binary64"]],"compiler":[[9,7],[7,6],[17,13],[9,8],[18,13],[26,19],[12,10],[14,12]],"count":[[720,8]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[712,1],"picked":[5,4]}],"memory":[[2580624,29576304]],"min-error":[[0.0,"binary64"]],"time":16.673095703125,"type":"prune"},{"egraph":[[0,16,27,0.0001043],[1,16,27,0.000110004],[0,12,27,0.00015848],[0,7,27,0.000205305]],"inputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","#s(literal 1 binary64)","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","x","(sqrt.f64 x)"]],"locations":[["(+.f64 #s(literal 1 binary64) x)","cost-diff",0],["(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","cost-diff",0],["(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","cost-diff",0]],"memory":[[-7721728,551200]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(literal 1 binary64)","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","x","(sqrt.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":6.1259765625,"type":"simplify"},{"compiler":[[29,9]],"locations":[["(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","accuracy",0.0],["(sqrt.f64 x)","accuracy",0.0],["(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","accuracy",0.0078125],["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","accuracy",0.28125]],"memory":[[430912,8582912]],"mixsample":[[2.30712890625,"ival-div",0],[0.194091796875,"ival-true",0],[3.184814453125,"ival-add",0],[4.38525390625,"ival-sqrt",0],[0.180419921875,"exact",0],[0.1103515625,"ival-assert",0]],"outcomes":[[17.6865234375,0,"valid",256]],"time":27.6640625,"type":"localize"},{"count":[[5,39]],"inputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","(sqrt.f64 x)"]],"memory":[[1119744,1119744]],"outputs":[["(/ 1 (+ 1 (sqrt x)))","(+ (* -1/2 (/ x (pow (+ 1 (sqrt x)) 2))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* -1 (* x (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))))))) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (- (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))) (* 1/8 (sqrt (/ 1 x)))) x)","(/ (- (+ (* -1 (/ (+ (* 1/128 (sqrt (pow x 7))) (* 1/32 (sqrt (pow x 7)))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (sqrt (/ 1 (pow x 3)))) (* 1/8 (sqrt (/ 1 x))))) x)","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (- (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2))))) x))","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/128 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6)))) (* 1/32 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6))))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))) x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"series":[[1.29296875,"((/ 1 (+ (sqrt (+ 1 x)) (sqrt x))) (+ (sqrt (+ 1 x)) (sqrt x)) (sqrt (+ 1 x)) (+ 1 x) (sqrt x))","x","-inf"],[0.928955078125,"((/ 1 (+ (sqrt (+ 1 x)) (sqrt x))) (+ (sqrt (+ 1 x)) (sqrt x)) (sqrt (+ 1 x)) (+ 1 x) (sqrt x))","x","inf"],[0.6689453125,"((/ 1 (+ (sqrt (+ 1 x)) (sqrt x))) (+ (sqrt (+ 1 x)) (sqrt x)) (sqrt (+ 1 x)) (+ 1 x) (sqrt x))","x","0"]],"time":4.0048828125,"type":"series"},{"count":[[39,38]],"egraph":[[0,8438,643,0.092277617],[3,5591,696,0.037453876],[2,1711,707,0.02335248],[1,541,717,0.008703797],[0,186,803,0.002060998]],"inputs":[["(/ 1 (+ 1 (sqrt x)))","(+ (* -1/2 (/ x (pow (+ 1 (sqrt x)) 2))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* -1 (* x (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))))))) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (- (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))) (* 1/8 (sqrt (/ 1 x)))) x)","(/ (- (+ (* -1 (/ (+ (* 1/128 (sqrt (pow x 7))) (* 1/32 (sqrt (pow x 7)))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (sqrt (/ 1 (pow x 3)))) (* 1/8 (sqrt (/ 1 x))))) x)","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (- (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2))))) x))","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/128 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6)))) (* 1/32 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6))))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))) x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"memory":[[813312,46189680]],"method":["egg-herbie"],"outputs":[["(/ 1 (+ 1 (sqrt x)))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ (* -1/2 (/ x (pow (+ 1 (sqrt x)) 2))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (/.f64 x (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(+ (* x (- (* x (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (fma.f64 (/.f64 x (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/8 binary64) x) #s(literal 1/2 binary64)))) x (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(+ (* x (- (* x (+ (* -1 (* x (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))))))) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (fma.f64 (*.f64 (neg.f64 x) x) (+.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) (fma.f64 (/.f64 x (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1/4 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/8 binary64) x) #s(literal 1/2 binary64))))) x (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(+ 1 (sqrt x))","(+.f64 (sqrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(fma.f64 #s(literal 1/2 binary64) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(sqrt x)","(sqrt.f64 x)","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (- (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))) (* 1/8 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (- (+ (* -1 (/ (+ (* 1/128 (sqrt (pow x 7))) (* 1/32 (sqrt (pow x 7)))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (sqrt (/ 1 (pow x 3)))) (* 1/8 (sqrt (/ 1 x))))) x)","(/.f64 (fma.f64 #s(literal -5/128 binary64) (/.f64 (sqrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* -1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (- (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/128 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6)))) (* 1/32 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6))))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))) x))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 5/128 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal -1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))) x)","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal -1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":267.655029296875,"type":"simplify"},{"count":[[5,314]],"egraph":[[0,8756,25,0.068837194],[3,3634,25,0.041938524],[2,338,25,0.013165213],[1,52,25,0.001756506],[0,12,25,0.000716951],[0,7,25,0.000101993]],"inputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","(sqrt.f64 x)"]],"memory":[[360288,46711920]],"outputs":[["(*.f64 (pow.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (+.f64 (pow.f64 x #s(literal 9/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 9/2 binary64)))) (-.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(pow.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) #s(literal 2 binary64)))) (-.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)))) (fma.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (-.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (-.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (fma.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (-.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) #s(literal 2 binary64))) (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (-.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (+.f64 (pow.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (fma.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (-.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))) (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(fma.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(fma.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(fma.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64))))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64))))","(fma.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (/.f64 (hypot.f64 (sqrt.f64 x) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 (sqrt.f64 x) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(exp.f64 (fma.f64 (log.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1/2 binary64) (*.f64 (log.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64))))","(+.f64 (*.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64))) (*.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x))) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x))))","(*.f64 (exp.f64 (log1p.f64 (-.f64 x x))) (exp.f64 (neg.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(*.f64 (exp.f64 (log.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (exp.f64 (neg.f64 (log1p.f64 (+.f64 x (-.f64 x (hypot.f64 (sqrt.f64 x) x)))))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) #s(literal 2 binary64)))) (-.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x))))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)))) (fma.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (-.f64 (-.f64 x (hypot.f64 (sqrt.f64 x) x)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))","(*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (pow.f64 (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64))))","(*.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (*.f64 (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))","(/.f64 (exp.f64 (log.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))))) (exp.f64 (log.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (exp.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (-.f64 x x)))) (exp.f64 (log.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 (exp.f64 (log.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))))) (exp.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (+.f64 x (-.f64 x (hypot.f64 (sqrt.f64 x) x)))))))","(/.f64 (exp.f64 (log.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))) (exp.f64 (log.f64 #s(literal -1 binary64))))","(/.f64 (exp.f64 (log1p.f64 (-.f64 x x))) (exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (exp.f64 (log.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (exp.f64 (log1p.f64 (+.f64 x (-.f64 x (hypot.f64 (sqrt.f64 x) x))))))","(/.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 9/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64))))","(/.f64 (*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) #s(literal 1 binary64)) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 2 binary64))) (+.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64)))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) x)) (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 9/2 binary64))) (*.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (neg.f64 (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(fma.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 x))","(fma.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 (sqrt.f64 x) #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 1 binary64)) (/.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal 1 binary64)))","(-.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(exp.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(+.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (/.f64 x (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(pow.f64 (exp.f64 #s(literal 1/2 binary64)) (log1p.f64 x))","(pow.f64 (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (sqrt.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 4 binary64)) #s(literal 1/8 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/2 binary64))","(/.f64 (exp.f64 (log.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))) (exp.f64 (log.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (exp.f64 (*.f64 #s(literal 1/2 binary64) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (exp.f64 (log.f64 (sqrt.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(fabs.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(exp.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(*.f64 (exp.f64 (log1p.f64 (*.f64 (neg.f64 x) x))) (exp.f64 (neg.f64 (log1p.f64 (neg.f64 x)))))","(*.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (neg.f64 (log1p.f64 (-.f64 (*.f64 x x) x)))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 x x) x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x)))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (-.f64 (*.f64 x x) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (*.f64 x x) x) (-.f64 (-.f64 (*.f64 x x) x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/4 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(pow.f64 (exp.f64 #s(literal 1 binary64)) (log1p.f64 x))","(pow.f64 (exp.f64 #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) (log1p.f64 x)))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 4 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))) (exp.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (exp.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (exp.f64 (log.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))))","(/.f64 (exp.f64 (log1p.f64 (*.f64 (neg.f64 x) x))) (exp.f64 (log1p.f64 (neg.f64 x))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (-.f64 (*.f64 x x) x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (*.f64 (sqrt.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 3/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(fabs.f64 (+.f64 x #s(literal 1 binary64)))","(hypot.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(hypot.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (exp.f64 #s(literal 1/2 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/8 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":228.968017578125,"type":"rewrite"},{"compiler":[[7324,1364]],"memory":[[3675152,30089552]],"time":38.4150390625,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","done",0.28515625,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",60.42296674669221,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","done",61.13319684828111,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","done",62.99780157772901,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","done",0.48581657149593843,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","done",0.9290593246052822,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","done",0.9681218723344133,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","done",0.8118718723344133,"binary64"]],"compiler":[[167,57],[9,7],[7,6],[17,13],[9,8],[18,13],[26,19],[12,10],[14,12]],"count":[[358,8]],"kept":[{"done":[7,7],"fresh":[0,0],"new":[350,0],"picked":[1,1]}],"memory":[[-2313456,15838464]],"min-error":[[0.0,"binary64"]],"time":9.747802734375,"type":"prune"},{"accuracy":[0.28515625],"baseline":[0.28515625],"branch":[["x",0.28515625,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",0.28515625,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[12,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))"]],"memory":[[-2896192,5141744]],"oracle":[62.99780157772901],"outputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))"]],"repr":["binary64"],"time":7.593017578125,"times":[[3.89404296875,"x"],[2.73583984375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[0.8118718723344132],"baseline":[0.8118718723344133],"branch":[["x",0.8118718723344132,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",0.8118718723344132,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[8,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[4225840,4225840]],"oracle":[62.99780157772901],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))"]],"repr":["binary64"],"time":5.588134765625,"times":[[2.800048828125,"x"],[2.0810546875,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[0.968121872334413],"baseline":[0.9681218723344133],"branch":[["x",0.9681218723344132,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",0.968121872334413,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[5,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))"]],"memory":[[-4721280,3606176]],"oracle":[62.99780157772901],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))"]],"repr":["binary64"],"time":4.595947265625,"times":[[2.149169921875,"x"],[1.787109375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[61.133196848281116],"baseline":[61.13319684828111],"branch":[["x",61.13319684828112,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",61.133196848281116,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[3,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[3184064,3184064]],"oracle":[62.99780157772901],"outputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))"]],"repr":["binary64"],"time":3.325927734375,"times":[[1.5078125,"x"],[1.27294921875,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[62.997801577728985],"baseline":[62.99780157772901],"branch":[["x",62.997801577729,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",62.997801577728985,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[1,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]],"link":["."],"memory":[[2700064,2700064]],"name":["2sqrt (example 3.1)"],"oracle":[62.99780157772901],"outputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]],"repr":["binary64"],"time":2.416015625,"times":[[1.029052734375,"x"],[0.949951171875,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"egraph":[[9,7322,61,0.015208221],[8,3288,61,0.043186311],[7,392,61,0.00995142],[6,136,61,0.001916748],[5,79,61,0.000945281],[4,62,61,0.000637522],[3,51,61,0.000709812],[2,44,61,0.000527701],[1,39,61,0.000513457],[0,26,61,0.000513128]],"inputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]],"memory":[[-10563328,9088864]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]],"stop":[["node limit",1]],"time":91.93603515625,"type":"simplify"},{"compiler":[[61,29]],"memory":[[997712,997712]],"stop":[["done",1]],"time":73.047119140625,"type":"soundness"},{"compiler":[[61,29],[61,29],[5,5],[5,5],[7,6],[7,6]],"memory":[[1457696,24609056]],"remove-preprocessing":[[],[],[],[],[],[]],"time":36.376953125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02099609375,"type":"end"}]