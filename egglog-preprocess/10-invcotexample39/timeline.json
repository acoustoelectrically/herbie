[{"memory":[[15584,15584]],"time":0.0341796875,"type":"start"},{"compiler":[[16,12]],"memory":[[1522400,1522400]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0007278900146484375,"valid":0.49617835998535154}],[11,{"invalid":0.0,"precondition":0.50309375,"unknown":0.001455780029296875,"valid":0.49545046997070313}],[10,{"invalid":0.0,"precondition":0.5030937499999999,"unknown":0.00291156005859375,"valid":0.4939946899414063}],[9,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0058231201171875,"valid":0.4910831298828125}],[8,{"invalid":0.0,"precondition":0.50309375,"unknown":0.011646240234375,"valid":0.485260009765625}],[7,{"invalid":0.0,"precondition":0.50309375,"unknown":0.02329248046875,"valid":0.47361376953125}],[6,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0465849609375,"valid":0.4503212890625}],[5,{"invalid":0.0,"precondition":0.50309375,"unknown":0.093169921875,"valid":0.403736328125}],[4,{"invalid":0.0,"precondition":0.50309375,"unknown":0.18633984375,"valid":0.31056640625}],[3,{"invalid":0.0,"precondition":0.50309375,"unknown":0.3726796875,"valid":0.1242265625}],[2,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}]],"time":7.057861328125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50309375,"valid":0.49690625}],"memory":[[25326320,481019008]],"mixsample":[[623.240478515625,"ival-tan",2000],[153.9072265625,"ival-div",0],[184.226806640625,"adjust",800],[31.373046875,"ival-div",400],[3.751953125,"ival-div",1600],[5.107666015625,"ival-assert",0],[123.621826171875,"ival-sub",0],[5776.74267578125,"ival-tan",2400],[88.4365234375,"ival-tan",0],[20.297119140625,"ival-and",0],[0.004150390625,"ival-sub",400],[287.279541015625,"const",0],[41.881591796875,"ival-tan",400],[68.0029296875,"adjust",2000],[1.618408203125,"ival-tan",1600],[733.1943359375,"ival-tan",800],[70.85498046875,"ival-div",1200],[0.051513671875,"ival-sub",800],[73.00341796875,"ival-div",800],[21.03955078125,"ival-div",2000],[7.39501953125,"exact",0],[53.17333984375,"ival-<",0],[94.33642578125,"ival-div",2400],[58.07421875,"ival-tan",1200]],"outcomes":[[1489.885986328125,1,"valid",4364],[7412.29736328125,2,"valid",3816],[8.894287109375,0,"valid",76]],"time":9395.656005859375,"type":"sample"},{"compiler":[[8,6],[21,8],[21,8]],"confusion":[[256,0,0,0]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cancellation",256,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",256,0,false,0,false],["(/.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(tan.f64 x)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (tan.f64 x))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-9653584,52538816]],"mixsample":[[63.689453125,"ival-tan",2000],[9.047607421875,"ival-div",0],[10.518798828125,"adjust",800],[1.248046875,"ival-div",400],[0.066162109375,"ival-div",1600],[0.27294921875,"ival-assert",0],[288.1904296875,"ival-tan",2400],[7.370849609375,"ival-sub",0],[5.496337890625,"ival-tan",0],[0.00830078125,"ival-sub",400],[2.351806640625,"ival-tan",400],[3.436279296875,"adjust",2000],[0.02294921875,"ival-tan",1600],[55.036376953125,"ival-tan",800],[4.278076171875,"ival-div",1200],[0.009033203125,"ival-sub",800],[4.569091796875,"ival-div",800],[0.7119140625,"ival-true",0],[1.833984375,"ival-div",2000],[0.483154296875,"exact",0],[3.697021484375,"ival-tan",1200],[5.09228515625,"ival-div",2400]],"outcomes":[[93.16943359375,1,"valid",272],[405.4375,2,"valid",238],[0.129150390625,0,"valid",2]],"time":569.93896484375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"egraph":[[0,257,8,0.001026635],[10,257,8,0.001492961],[9,235,8,0.00172187],[8,200,8,0.00143592],[7,137,8,0.00167934],[6,102,8,0.001162351],[5,63,8,0.000613552],[4,43,8,0.000299096],[3,31,8,0.000248908],[2,22,8,0.000174166],[1,14,8,0.000148965],[0,10,8,0.000178444],[0,6,8,0.000116463]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"memory":[[7282320,15590928]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(negabs x)"]],"time":158.43115234375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06982421875,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","next",60.07004632143718,"binary64"]],"compiler":[[8,6]],"memory":[[311728,311728]],"time":0.498046875,"type":"prune"},{"egraph":[[0,257,19,0.001048276],[10,257,19,0.001343695],[9,235,19,0.001614572],[8,200,19,0.001319447],[7,137,19,0.001075648],[6,102,19,0.000904975],[5,63,19,0.000506905],[4,43,19,0.000299175],[3,31,19,0.000257774],[2,22,19,0.000176364],[1,14,19,0.000144769],[0,10,19,0.000161018],[0,6,19,9.255e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"locations":[["(tan.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cost-diff",0]],"memory":[[-6915024,1076160]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":18.4541015625,"type":"simplify"},{"compiler":[[21,8]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(tan.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","accuracy",0.00390625],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","accuracy",60.05282826600497]],"memory":[[5407728,13351104]],"mixsample":[[29.27587890625,"ival-tan",2000],[3.723388671875,"ival-div",0],[4.554443359375,"adjust",800],[0.55224609375,"ival-div",400],[0.032958984375,"ival-div",1600],[0.12841796875,"ival-assert",0],[137.541748046875,"ival-tan",2400],[3.043701171875,"ival-sub",0],[2.2802734375,"ival-tan",0],[0.005126953125,"ival-sub",400],[0.996337890625,"ival-tan",400],[1.650634765625,"adjust",2000],[0.011962890625,"ival-tan",1600],[24.69140625,"ival-tan",800],[1.866943359375,"ival-div",1200],[0.00390625,"ival-sub",800],[1.896240234375,"ival-div",800],[0.222412109375,"ival-true",0],[0.601806640625,"ival-div",2000],[0.208984375,"exact",0],[1.88134765625,"ival-tan",1200],[2.254150390625,"ival-div",2400]],"outcomes":[[41.970703125,1,"valid",136],[192.72314453125,2,"valid",119],[0.057861328125,0,"valid",1]],"time":244.5029296875,"type":"localize"},{"count":[[4,16]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[1396880,1396880]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"series":[[1.35302734375,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","-inf"],[1.2529296875,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","inf"],[1.14990234375,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","0"]],"time":4.0849609375,"type":"series"},{"count":[[16,15]],"egraph":[[0,8214,143,0.09225519],[9,7281,161,0.019147912],[8,5095,161,0.022633756],[7,3955,161,0.01407802],[6,3691,161,0.010627069],[5,3100,161,0.011376744],[4,2099,161,0.010298894],[3,1335,161,0.006813801],[2,458,161,0.004065917],[1,179,167,0.001361639],[0,67,167,0.000582291]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"memory":[[-3148960,38506496]],"method":["egg-herbie"],"outputs":[["(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal -1/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2/15 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(/ (cos x) (sin x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":329.504150390625,"type":"simplify"},{"count":[[4,277]],"egraph":[[0,9224,17,0.04591317],[3,5712,17,0.040806291],[2,454,17,0.02128599],[1,49,17,0.002807741],[0,10,17,0.000720359],[0,6,17,9.117e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[-355632,32715008]],"outputs":[["(*.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 x (sin.f64 x))) (cos.f64 x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (/.f64 (-.f64 (tan.f64 x) x) x)) (tan.f64 x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)))) (fma.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) (-.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (tan.f64 x) x)) (*.f64 x (tan.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (sin.f64 x)) (cos.f64 x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))))","(*.f64 (*.f64 (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (tan.f64 x) x)) (-.f64 (tan.f64 x) x))","(*.f64 (*.f64 (-.f64 (tan.f64 x) x) #s(literal 1 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 (tan.f64 x) x) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))","(*.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x) (-.f64 (tan.f64 x) x))","(*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(pow.f64 (/.f64 (tan.f64 x) (/.f64 (-.f64 (tan.f64 x) x) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (tan.f64 x) x) (tan.f64 x)) x)","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))))","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (tan.f64 x) x)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(/.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (tan.f64 x) #s(literal -4 binary64))) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x)))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -9 binary64)) (pow.f64 (tan.f64 x) #s(literal -9 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (pow.f64 x #s(literal -6 binary64))))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x)) (-.f64 (tan.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x)) (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (tan.f64 x) x) #s(literal -1 binary64)) (*.f64 x (tan.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 x) x) x)) (tan.f64 x))","(/.f64 (*.f64 (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) x)","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 2 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (tan.f64 x) x) x)) (tan.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (tan.f64 x) #s(literal -4 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -9 binary64)) (pow.f64 (tan.f64 x) #s(literal -9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (pow.f64 x #s(literal -6 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (-.f64 (tan.f64 x) x) (*.f64 x (tan.f64 x))))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (tan.f64 x) x) x))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 (tan.f64 x) x) (tan.f64 x)))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 (tan.f64 x) x) (*.f64 x (tan.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (*.f64 x (tan.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (tan.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (*.f64 x (tan.f64 x))))","(/.f64 (*.f64 (-.f64 (tan.f64 x) x) #s(literal 1 binary64)) (*.f64 x (tan.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (tan.f64 x) (*.f64 x (tan.f64 x))) (*.f64 (*.f64 x (tan.f64 x)) x)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (tan.f64 x))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (tan.f64 x) #s(literal -4 binary64))) (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (tan.f64 x) x) (*.f64 x (tan.f64 x)))","(/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 x x)) (*.f64 (*.f64 x (tan.f64 x)) (-.f64 (tan.f64 x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x (tan.f64 x)) (fma.f64 x (-.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -9 binary64)) (pow.f64 (tan.f64 x) #s(literal -9 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (+.f64 (+.f64 (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -6 binary64))) (pow.f64 x #s(literal -6 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (tan.f64 x) (/.f64 (-.f64 (tan.f64 x) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))))","(neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (/.f64 (tan.f64 x) (*.f64 x (sin.f64 x))) (cos.f64 x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -4 binary64)) (pow.f64 (*.f64 x (tan.f64 x)) #s(literal -2 binary64))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)))) (fma.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) (-.f64 (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (tan.f64 x) x)) (*.f64 x (tan.f64 x)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (/.f64 x (*.f64 x (sin.f64 x))) (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (tan.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (/.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 x (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (sin.f64 x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x (tan.f64 x))) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (/.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (tan.f64 x) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 0 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))))","(-.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (tan.f64 x) (/.f64 x (-.f64 (tan.f64 x) x)))) #s(literal -1 binary64)))","(+.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 0 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(+.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 x (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) x))))))","(+.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (tan.f64 x) (*.f64 x (sin.f64 x))) (cos.f64 x))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 x) x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (tan.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (tan.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (tan.f64 x) x) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x (tan.f64 x))))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (/.f64 (tan.f64 x) x))","(*.f64 (tan.f64 x) (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 x (tan.f64 x)) (tan.f64 x)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (*.f64 x (tan.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (/.f64 (tan.f64 x) x) (tan.f64 x))","(/.f64 #s(literal -1 binary64) x)","(/.f64 (sin.f64 x) (*.f64 (*.f64 x (tan.f64 x)) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (*.f64 (*.f64 x (tan.f64 x)) (cos.f64 x)))","(/.f64 (tan.f64 x) (*.f64 (*.f64 x (tan.f64 x)) #s(literal -1 binary64)))","(/.f64 (tan.f64 x) (*.f64 x (tan.f64 x)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (tan.f64 x)) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (+.f64 (log.f64 (tan.f64 x)) (neg.f64 (log.f64 (*.f64 x (tan.f64 x))))))","(exp.f64 (+.f64 (log.f64 (tan.f64 x)) (*.f64 (log.f64 (*.f64 x (tan.f64 x))) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1/2 binary64) (*.f64 (log.f64 x) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 x)))","(*.f64 (/.f64 x (*.f64 x (sin.f64 x))) (cos.f64 x))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (cos.f64 x))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (cos.f64 x))","(*.f64 (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (cos.f64 x))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (neg.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)))","(*.f64 x (/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) x))","(*.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (tan.f64 x)))","(*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (tan.f64 x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 x (tan.f64 x)) x) #s(literal -1 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (tan.f64 x) #s(literal -1 binary64))","(/.f64 (/.f64 x (tan.f64 x)) x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(/.f64 x (*.f64 (*.f64 x (tan.f64 x)) #s(literal -1 binary64)))","(/.f64 x (*.f64 x (tan.f64 x)))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x (tan.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (tan.f64 x)) x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(neg.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 (tan.f64 x)) #s(literal -1/2 binary64) (*.f64 (log.f64 (tan.f64 x)) #s(literal -1/2 binary64))))","(exp.f64 (+.f64 (log.f64 x) (neg.f64 (log.f64 (*.f64 x (tan.f64 x))))))","(exp.f64 (+.f64 (log.f64 x) (*.f64 (log.f64 (*.f64 x (tan.f64 x))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (tan.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 x))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 (tan.f64 x))))","(+.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (tan.f64 x))","(*.f64 (sin.f64 x) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (neg.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (sin.f64 x) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))","(*.f64 (tan.f64 x) #s(literal -1 binary64))","(*.f64 (tan.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(pow.f64 (*.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) (tan.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 (tan.f64 x) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (tan.f64 x) #s(literal 1 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 (pow.f64 (tan.f64 x) #s(literal 1/2 binary64)) (pow.f64 (tan.f64 x) #s(literal -1/2 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (tan.f64 x))","(/.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) (*.f64 #s(literal 0 binary64) (tan.f64 x)))))","(/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(/.f64 (sin.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (neg.f64 (cos.f64 x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (tan.f64 x) #s(literal -1 binary64))","(/.f64 (tan.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal -1 binary64)))","(neg.f64 (tan.f64 x))","(tan.f64 x)","(-.f64 #s(literal 0 binary64) (tan.f64 x))","(exp.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 x))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (tan.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (tan.f64 x)))","(+.f64 #s(literal 0 binary64) (tan.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":217.73388671875,"type":"rewrite"},{"compiler":[[5199,765]],"memory":[[2929600,25237328]],"time":32.376953125,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","next",0.296875,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","next",0.30859375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","next",0.5326698387501203,"binary64"]],"compiler":[[22,14],[17,12],[12,9]],"count":[[293,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[292,3],"picked":[1,0]}],"memory":[[-897712,11286688]],"min-error":[[0.296875,"binary64"]],"time":8.670166015625,"type":"prune"},{"egraph":[[0,2724,113,0.012071015],[14,2724,113,0.017791409],[13,2723,113,0.019429089],[12,2721,113,0.017997043],[11,2721,113,0.011134795],[10,2610,113,0.013131606],[9,2026,113,0.014264165],[8,603,113,0.008283329],[7,347,113,0.002478478],[6,312,113,0.001548867],[5,270,113,0.001157063],[4,241,113,0.001020703],[3,147,113,0.001091347],[2,83,113,0.000907657],[1,48,113,0.000660591],[0,29,113,0.00054807],[0,19,113,0.000303206]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","#s(literal 2/945 binary64)","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)"]],"locations":[["(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","cost-diff",0],["(*.f64 #s(literal 1/3 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","cost-diff",0]],"memory":[[-907936,7128704]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","#s(literal 2/945 binary64)","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":153.630859375,"type":"simplify"},{"compiler":[[95,21]],"locations":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","accuracy",0.0],["(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","accuracy",0.00390625],["(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","accuracy",0.0078125],["(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","accuracy",0.296875],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","accuracy",0.00390625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","accuracy",0.010966230164287516],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","accuracy",0.296875],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","accuracy",0.24751358875012025],["(*.f64 #s(literal 1/3 binary64) x)","accuracy",0.28515625]],"memory":[[2490256,35153520]],"mixsample":[[31.416015625,"ival-tan",2000],[11.50830078125,"adjust",800],[4.133544921875,"ival-div",0],[0.690673828125,"ival-div",400],[0.05224609375,"ival-div",1600],[0.135009765625,"ival-assert",0],[138.8671875,"ival-tan",2400],[3.270263671875,"ival-sub",0],[2.53173828125,"ival-tan",0],[0.005126953125,"ival-sub",400],[17.348876953125,"const",0],[1.21337890625,"ival-tan",400],[4.38720703125,"adjust",2000],[0.018798828125,"ival-tan",1600],[24.892578125,"ival-tan",800],[2.40234375,"ival-div",1200],[6.419921875,"ival-add",0],[0.004150390625,"ival-sub",800],[18.562744140625,"ival-mult",0],[2.099609375,"ival-div",800],[0.263916015625,"ival-true",0],[0.6689453125,"ival-div",2000],[0.24169921875,"exact",0],[1.872314453125,"ival-tan",1200],[2.49658203125,"ival-div",2400]],"outcomes":[[73.89013671875,1,"valid",136],[228.40283203125,2,"valid",119],[0.1650390625,0,"valid",1]],"time":333.873046875,"type":"localize"},{"count":[[10,25]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(*.f64 x x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))"]],"memory":[[-4373376,3152528]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","1/3","(+ 1/3 (* 1/45 (pow x 2)))","(pow x 2)","(+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))","1/45","(+ 1/45 (* 2/945 (pow x 2)))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 2/945 (pow x 5))","(* (pow x 5) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 5) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 4))","(* (pow x 4) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 2))","(* (pow x 2) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 2))) 2/945)))"]],"series":[[3.676025390625,"((- (/ 1 x) (/ 1 (tan x))) (* 1/3 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* x x) 1/45) 1/3) x) (+ (* (* x x) 1/45) 1/3) (* x x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) (+ (* 2/945 (* x x)) 1/45))","x","-inf"],[1.984130859375,"((- (/ 1 x) (/ 1 (tan x))) (* 1/3 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* x x) 1/45) 1/3) x) (+ (* (* x x) 1/45) 1/3) (* x x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) (+ (* 2/945 (* x x)) 1/45))","x","inf"],[2.10595703125,"((- (/ 1 x) (/ 1 (tan x))) (* 1/3 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* x x) 1/45) 1/3) x) (+ (* (* x x) 1/45) 1/3) (* x x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) (+ (* 2/945 (* x x)) 1/45))","x","0"]],"time":8.39794921875,"type":"series"},{"count":[[25,25]],"egraph":[[0,8113,187,0.069702809],[5,5679,208,0.028428424],[4,2330,208,0.025727933],[3,1158,208,0.009217796],[2,478,208,0.003800479],[1,185,208,0.001712915],[0,60,208,0.000626486]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","1/3","(+ 1/3 (* 1/45 (pow x 2)))","(pow x 2)","(+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))","1/45","(+ 1/45 (* 2/945 (pow x 2)))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 2/945 (pow x 5))","(* (pow x 5) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 5) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 4))","(* (pow x 4) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 2))","(* (pow x 2) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 2))) 2/945)))"]],"memory":[[10139216,32380752]],"method":["egg-herbie"],"outputs":[["(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* 1/45 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(pow x 2)","(*.f64 x x)","(+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","1/45","#s(literal 1/45 binary64)","(+ 1/45 (* 2/945 (pow x 2)))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(* 1/45 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* 1/45 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/45 binary64))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(* 2/945 (pow x 5))","(*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2/945 binary64))","(* (pow x 5) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(* (pow x 5) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* 2/945 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64))","(* (pow x 4) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)","(* (pow x 4) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(* 2/945 (pow x 2))","(*.f64 #s(literal 2/945 binary64) (*.f64 x x))","(* (pow x 2) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 2))) 2/945)))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":219.51611328125,"type":"simplify"},{"count":[[10,309]],"egraph":[[0,8775,101,0.089443809],[2,933,101,0.028512222],[1,123,101,0.005383314],[0,29,101,0.001171999],[0,19,101,0.000281135]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(*.f64 x x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))"]],"memory":[[-13033456,50987296]],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1/3 binary64) x)","(*.f64 x #s(literal 1/3 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1/3 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1/3 binary64) (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64))","(/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal -1 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) x)","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (*.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))) x) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x))))","(/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) x) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) x) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 x (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)))) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x))))","(/.f64 (*.f64 x (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (*.f64 x (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x))) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 #s(literal 1/3 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 x (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/81 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal 1/9 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 1/8303765625 binary64) #s(literal -1/729 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/81 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/18225 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 1/8303765625 binary64) #s(literal -1/729 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal -1/27 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal 1/756680642578125 binary64) #s(literal 1/19683 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 1/8303765625 binary64) (-.f64 #s(literal 1/729 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2460375 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))) (*.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))) (+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (fma.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)))) (neg.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))) (neg.f64 (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x))) (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x))))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal 1/3 binary64))","(fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1 binary64) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(fma.f64 x (*.f64 #s(literal 1/45 binary64) x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal -1/9 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(+.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(neg.f64 (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) x)","(*.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (*.f64 (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64)) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) x) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)))","(/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) x) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) x) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 x (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)))","(/.f64 (*.f64 x (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (*.f64 x (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x))) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 #s(literal 1/3 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (-.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x)) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(/.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) (*.f64 x (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) x (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(fma.f64 #s(literal 1/3 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(fma.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 4 binary64)) #s(literal 1/81 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 6 binary64)) #s(literal 1/729 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 6 binary64)) #s(literal 1/729 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 9 binary64)) #s(literal 1/19683 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 6 binary64)) #s(literal 1/729 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal 1 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))) (*.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))) (+.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (neg.f64 (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)) (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64)) x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2/945 binary64)) x (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 2/945 binary64) x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 #s(literal 2/945 binary64) x) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x #s(literal 1/3 binary64))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)) (*.f64 x x)) #s(literal 1/3 binary64))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/135 binary64) (*.f64 x x)))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(fma.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64)) (*.f64 x x)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(fma.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) (*.f64 x x) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 1 binary64) #s(literal 1/3 binary64))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2/945 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 x (*.f64 #s(literal 1/45 binary64) x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(+.f64 (+.f64 #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64))) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)))","(+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(+.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(+.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x) #s(literal 1/3 binary64))","(+.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64)))","(+.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x))","(*.f64 (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(*.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))))","(*.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -2/42525 binary64))))))","(*.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/4100625 binary64)) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64))) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 64/712181767349390625 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -1/8303765625 binary64)) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 4 binary64)) #s(literal 1/4100625 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 4/1808375625 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 64/712181767349390625 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal -1/8303765625 binary64)) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64))) (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/91125 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 512/601016336033894136931640625 binary64) (pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal 1/756680642578125 binary64)) (pow.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))) #s(literal -1 binary64))) (fma.f64 #s(literal 64/712181767349390625 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 1/8303765625 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 8/76901173453125 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))","(/.f64 (*.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)))) (*.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (fma.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)))) (neg.f64 (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal 1/2025 binary64))) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))))","(/.f64 (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (neg.f64 (+.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -2/42525 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x))))))","(/.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)))","(/.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (+.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -2/42525 binary64)))))","(/.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/2025 binary64) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -2/42525 binary64)))) (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64))) (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x))))))","(neg.f64 (/.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64)) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(neg.f64 (/.f64 (fma.f64 #s(literal 8/843908625 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64)) (neg.f64 (fma.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/2025 binary64) (*.f64 #s(literal 2/42525 binary64) (*.f64 x x)))))))","(fma.f64 (*.f64 #s(literal 2/945 binary64) x) x #s(literal 1/45 binary64))","(fma.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(fma.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1 binary64) #s(literal 1/45 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","(fma.f64 (*.f64 x x) #s(literal 2/945 binary64) #s(literal 1/45 binary64))","(fma.f64 x (*.f64 #s(literal 2/945 binary64) x) #s(literal 1/45 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/45 binary64))","(-.f64 (/.f64 #s(literal 1/2025 binary64) (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 4/893025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64))) (neg.f64 (/.f64 #s(literal -1/2025 binary64) (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))))","(+.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/45 binary64))","(+.f64 #s(literal 1/45 binary64) (*.f64 #s(literal 2/945 binary64) (*.f64 x x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":249.98681640625,"type":"rewrite"},{"compiler":[[11259,1400]],"memory":[[3189408,35225136]],"time":110.51708984375,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","next",0.30002873016428755,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","next",0.018778730164287515,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.296875,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","done",0.30859375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","next",0.30859375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","done",0.5326698387501203,"binary64"]],"compiler":[[19,13],[19,14],[22,14],[17,12],[27,21],[12,9]],"count":[[359,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[356,3],"picked":[3,3]}],"memory":[[-1609744,15040560]],"min-error":[[0.0,"binary64"]],"time":9.782958984375,"type":"prune"},{"egraph":[[0,4332,174,0.014436558],[16,4332,178,0.027804106],[15,4328,178,0.031840721],[14,4328,178,0.020777981],[13,4325,178,0.024105862],[12,4324,178,0.013211314],[11,4321,178,0.013406723],[10,4311,178,0.013616592],[9,4126,178,0.016080325],[8,3691,178,0.019040136],[7,2785,178,0.017222757],[6,2391,178,0.015375512],[5,1964,178,0.010455753],[4,1120,178,0.008666078],[3,439,178,0.004434166],[2,169,178,0.001683512],[1,85,178,0.000789102],[0,47,192,0.000522563],[0,29,192,0.000307412]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","(*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/2025 binary64)","#s(literal -1/9 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","#s(literal 1 binary64)","(fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(literal -1/45 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","x","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","#s(literal 1 binary64)","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(literal 1/45 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 x x)","x","(*.f64 #s(literal 1/45 binary64) x)","#s(literal 1/45 binary64)","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)"]],"locations":[["(*.f64 #s(literal 1/45 binary64) x)","cost-diff",0],["(*.f64 x x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","cost-diff",0],["(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","cost-diff",2],["(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","cost-diff",0],["(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","cost-diff",2],["(*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","cost-diff",0],["(neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))","cost-diff",1],["(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","cost-diff",2]],"memory":[[8142912,8142912]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))","(fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/2025 binary64)","#s(literal -1/9 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","#s(literal 1 binary64)","(fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))","#s(literal -1/45 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","x","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","#s(literal 1 binary64)","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(literal 1/45 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(*.f64 x x)","x","(*.f64 #s(literal 1/45 binary64) x)","#s(literal 1/45 binary64)","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":286.76513671875,"type":"simplify"},{"compiler":[[165,32]],"locations":[["(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","accuracy",0.00390625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","accuracy",0.010966230164287516],["(*.f64 #s(literal 1/45 binary64) x)","accuracy",0.2578125],["(*.f64 #s(literal 1/3 binary64) x)","accuracy",0.28515625],["(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","accuracy",0.00390625],["(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","accuracy",0.00390625],["(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","accuracy",0.0078125],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","accuracy",0.010966230164287516],["(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","accuracy",0.00390625],["(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","accuracy",0.00390625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","accuracy",0.010966230164287516],["(*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","accuracy",0.296875]],"memory":[[312144,50325024]],"mixsample":[[30.537353515625,"ival-tan",2000],[14.092529296875,"ival-div",0],[15.40380859375,"adjust",800],[0.6357421875,"ival-div",400],[0.038818359375,"ival-div",1600],[0.1298828125,"ival-assert",0],[144.617431640625,"ival-tan",2400],[3.5146484375,"ival-sub",0],[2.6259765625,"ival-tan",0],[0.00390625,"ival-sub",400],[22.316162109375,"const",0],[1.135986328125,"ival-tan",400],[5.89599609375,"adjust",2000],[4.266357421875,"ival-pow",0],[0.013916015625,"ival-tan",1600],[25.035888671875,"ival-tan",800],[9.01953125,"ival-add",0],[2.462158203125,"ival-div",1200],[0.005126953125,"ival-sub",800],[19.24267578125,"ival-mult",0],[2.37939453125,"ival-div",800],[0.29638671875,"ival-true",0],[0.75927734375,"ival-div",2000],[0.36083984375,"exact",0],[2.4384765625,"ival-neg",0],[2.640869140625,"ival-div",2400],[1.946533203125,"ival-tan",1200]],"outcomes":[[96.197509765625,1,"valid",136],[253.838623046875,2,"valid",119],[0.2490234375,0,"valid",1]],"time":405.82080078125,"type":"localize"},{"count":[[14,33]],"inputs":[["(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","(*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","(*.f64 x x)","(*.f64 #s(literal 1/45 binary64) x)","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 #s(literal 1/3 binary64) x)"]],"memory":[[-1706768,5748816]],"outputs":[["1/3","(+ 1/3 (* 1/45 (pow x 2)))","1/9","(+ 1/9 (* -1/2025 (pow x 4)))","(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","3","(+ 3 (* -1/5 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(pow x 2)","(* 1/45 x)","(+ 3 (* 1/5 (pow x 2)))","(+ 3 (* (pow x 2) (+ 1/5 (* 1/75 (pow x 2)))))","(+ 3 (* (pow x 2) (+ 1/5 (* (pow x 2) (+ 1/75 (* 1/1125 (pow x 2)))))))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1/2025 (pow x 4))","(* (pow x 4) (- (* 1/9 (/ 1 (pow x 4))) 1/2025))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(/ 45 (pow x 2))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(/ -45 (pow x 2))","(* -1 (/ (+ 45 (* 675 (/ 1 (pow x 2)))) (pow x 2)))","(/ (- (* -1 (/ (+ 675 (* 10125 (/ 1 (pow x 2)))) (pow x 2))) 45) (pow x 2))","(/ (- (* -1 (/ (+ 10125 (* 151875 (/ 1 (pow x 2)))) (pow x 4))) (+ 45 (* 675 (/ 1 (pow x 2))))) (pow x 2))"]],"series":[[3.59716796875,"((* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) (neg (+ (* (pow x 4) 1/2025) -1/9)) (- (/ 1 x) (/ 1 (tan x))) (* (* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) x) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (- (/ 1 x) (/ 1 (tan x))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* 1/45 (* x x)) 1/3) (+ (* (* x x) (* 1/45 x)) (* 1/3 x)) (- (/ 1 x) (/ 1 (tan x))) (* x x) (* 1/45 x) (/ 1 (+ (* -1/45 (* x x)) 1/3)) (* 1/3 x))","x","-inf"],[5.565185546875,"((* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) (neg (+ (* (pow x 4) 1/2025) -1/9)) (- (/ 1 x) (/ 1 (tan x))) (* (* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) x) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (- (/ 1 x) (/ 1 (tan x))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* 1/45 (* x x)) 1/3) (+ (* (* x x) (* 1/45 x)) (* 1/3 x)) (- (/ 1 x) (/ 1 (tan x))) (* x x) (* 1/45 x) (/ 1 (+ (* -1/45 (* x x)) 1/3)) (* 1/3 x))","x","inf"],[5.614990234375,"((* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) (neg (+ (* (pow x 4) 1/2025) -1/9)) (- (/ 1 x) (/ 1 (tan x))) (* (* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) x) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (- (/ 1 x) (/ 1 (tan x))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* 1/45 (* x x)) 1/3) (+ (* (* x x) (* 1/45 x)) (* 1/3 x)) (- (/ 1 x) (/ 1 (tan x))) (* x x) (* 1/45 x) (/ 1 (+ (* -1/45 (* x x)) 1/3)) (* 1/3 x))","x","0"]],"time":17.880126953125,"type":"series"},{"count":[[33,33]],"egraph":[[0,8382,291,0.075610759],[5,7334,314,0.023264],[4,3806,314,0.027490611],[3,1812,314,0.018294032],[2,771,314,0.007189928],[1,300,316,0.003190794],[0,115,317,0.001037934]],"inputs":[["1/3","(+ 1/3 (* 1/45 (pow x 2)))","1/9","(+ 1/9 (* -1/2025 (pow x 4)))","(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","3","(+ 3 (* -1/5 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(pow x 2)","(* 1/45 x)","(+ 3 (* 1/5 (pow x 2)))","(+ 3 (* (pow x 2) (+ 1/5 (* 1/75 (pow x 2)))))","(+ 3 (* (pow x 2) (+ 1/5 (* (pow x 2) (+ 1/75 (* 1/1125 (pow x 2)))))))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1/2025 (pow x 4))","(* (pow x 4) (- (* 1/9 (/ 1 (pow x 4))) 1/2025))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(/ 45 (pow x 2))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(/ -45 (pow x 2))","(* -1 (/ (+ 45 (* 675 (/ 1 (pow x 2)))) (pow x 2)))","(/ (- (* -1 (/ (+ 675 (* 10125 (/ 1 (pow x 2)))) (pow x 2))) 45) (pow x 2))","(/ (- (* -1 (/ (+ 10125 (* 151875 (/ 1 (pow x 2)))) (pow x 4))) (+ 45 (* 675 (/ 1 (pow x 2))))) (pow x 2))"]],"memory":[[-4192720,34495200]],"method":["egg-herbie"],"outputs":[["1/3","#s(literal 1/3 binary64)","(+ 1/3 (* 1/45 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","1/9","#s(literal 1/9 binary64)","(+ 1/9 (* -1/2025 (pow x 4)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64) #s(literal 1/9 binary64))","(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","3","#s(literal 3 binary64)","(+ 3 (* -1/5 (pow x 2)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(fma.f64 (fma.f64 #s(literal 1/75 binary64) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/1125 binary64) (*.f64 x x) #s(literal 1/75 binary64)) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","(pow x 2)","(*.f64 x x)","(* 1/45 x)","(*.f64 #s(literal 1/45 binary64) x)","(+ 3 (* 1/5 (pow x 2)))","(fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (+ 1/5 (* 1/75 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/75 binary64) (*.f64 x x) #s(literal 1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (+ 1/5 (* (pow x 2) (+ 1/75 (* 1/1125 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/1125 binary64) (*.f64 x x) #s(literal 1/75 binary64)) (*.f64 x x) #s(literal 1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","(* 1/45 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/45 binary64))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(* -1/2025 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))","(* (pow x 4) (- (* 1/9 (/ 1 (pow x 4))) 1/2025))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64) #s(literal 1/9 binary64))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(* 1/45 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(/ 45 (pow x 2))","(/.f64 #s(literal 45 binary64) (*.f64 x x))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 45 binary64) (/.f64 #s(literal 675 binary64) (*.f64 x x))) x) x)","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 45 binary64)) (/.f64 #s(literal 675 binary64) (*.f64 x x))) (*.f64 x x))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(/.f64 (/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 45 binary64)) (/.f64 #s(literal 675 binary64) (*.f64 x x))) (/.f64 #s(literal 151875 binary64) (pow.f64 x #s(literal 6 binary64)))) x) x)","(/ -45 (pow x 2))","(/.f64 #s(literal -45 binary64) (*.f64 x x))","(* -1 (/ (+ 45 (* 675 (/ 1 (pow x 2)))) (pow x 2)))","(/.f64 (/.f64 (-.f64 #s(literal -45 binary64) (/.f64 #s(literal 675 binary64) (*.f64 x x))) x) x)","(/ (- (* -1 (/ (+ 675 (* 10125 (/ 1 (pow x 2)))) (pow x 2))) 45) (pow x 2))","(/.f64 (-.f64 (/.f64 #s(literal -45 binary64) x) (/.f64 (+.f64 (/.f64 #s(literal 10125 binary64) (*.f64 x x)) #s(literal 675 binary64)) (pow.f64 x #s(literal 3 binary64)))) x)","(/ (- (* -1 (/ (+ 10125 (* 151875 (/ 1 (pow x 2)))) (pow x 4))) (+ 45 (* 675 (/ 1 (pow x 2))))) (pow x 2))","(/.f64 (-.f64 (-.f64 #s(literal -45 binary64) (/.f64 #s(literal 675 binary64) (*.f64 x x))) (/.f64 (+.f64 (/.f64 #s(literal 151875 binary64) (*.f64 x x)) #s(literal 10125 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x))"]],"stop":[["iter limit",1],["node limit",1]],"time":254.998046875,"type":"simplify"},{"count":[[14,461]],"egraph":[[0,8532,121,0.07707844],[2,1439,122,0.029233347],[1,193,125,0.006276692],[0,47,151,0.001838088],[0,29,157,0.000298013]],"inputs":[["(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","(*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","(*.f64 x x)","(*.f64 #s(literal 1/45 binary64) x)","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 #s(literal 1/3 binary64) x)"]],"memory":[[-2403632,54777552]],"outputs":[["(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))) #s(literal 1 binary64))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))) (*.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))) (-.f64 (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1/9 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1/9 binary64)))) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1/9 binary64))))","(/.f64 (-.f64 #s(literal 1/27 binary64) (*.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (-.f64 (*.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1/9 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1/9 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1/9 binary64))) (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1/9 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) #s(literal -1 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) #s(literal -1 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))","(/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))) (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))","(neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))","(fma.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1/9 binary64)))","(-.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal -1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))","(-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64)))","(+.f64 (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(+.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1/9 binary64)))","(+.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))))","(+.f64 #s(literal 1/3 binary64) (neg.f64 (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))","(*.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(*.f64 (fma.f64 #s(literal -1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/729 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/9 binary64))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(*.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))","(*.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))))","(*.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) #s(literal 1/81 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/9 binary64)))","(/.f64 (-.f64 #s(literal 1/81 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64))) #s(literal -1/729 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))","(/.f64 (-.f64 #s(literal 1/729 binary64) (*.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)))) (+.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/18225 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64)) #s(literal 1/729 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/9 binary64)))))","(/.f64 (+.f64 #s(literal 1/729 binary64) (pow.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1/81 binary64) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal 1/729 binary64) (*.f64 #s(literal -1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)))) (+.f64 #s(literal 1/81 binary64) (-.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (*.f64 #s(literal 1/9 binary64) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64)))) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/729 binary64))) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/9 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(/.f64 (-.f64 #s(literal 1/81 binary64) (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)))) (+.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 #s(literal 1/81 binary64) (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)))) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64)))","(/.f64 (fma.f64 #s(literal -1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/729 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/9 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (neg.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))))","(/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))))","(/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/9 binary64)))) (fma.f64 #s(literal -1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal 1/729 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) (neg.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64))))) (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))))","(neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/2025 binary64) #s(literal 1/9 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/9 binary64))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64) #s(literal 1/9 binary64))","(fma.f64 #s(literal 1/2025 binary64) (neg.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/9 binary64))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64) #s(literal 1/9 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))) (/.f64 #s(literal 1/81 binary64) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))","(-.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64))","(-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))","(-.f64 #s(literal 0 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/9 binary64))","(+.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/9 binary64))","(+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(+.f64 #s(literal 1/9 binary64) (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))))","(+.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) x))","(*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))) x)","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) x))","(*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 x (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) x)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) x) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 x (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))))","(neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))))","(neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) x))","(neg.f64 (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(-.f64 #s(literal 0 binary64) (*.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) x))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(*.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) x) (/.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))))","(*.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x))) (pow.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))) #s(literal -1 binary64)))","(*.f64 (neg.f64 x) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(*.f64 x (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))) (*.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))) (+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x))))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (*.f64 #s(literal 1/9 binary64) (*.f64 x x)))) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x)))) (neg.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) (*.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))","(/.f64 x (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(neg.f64 (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/45 binary64) x)) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 x x)) x) (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) x) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) x) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x) (/.f64 (*.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 x x) x) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) x) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 x x) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (pow.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1/3 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))) (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(-.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/3 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(-.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/135 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (log.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(*.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(/.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(/.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(/.f64 (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))","(neg.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(fma.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal 1/3 binary64))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(fma.f64 x (*.f64 #s(literal 1/45 binary64) x) #s(literal 1/3 binary64))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (/.f64 #s(literal -1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (-.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (/.f64 (/.f64 #s(literal 1/81 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(-.f64 (/.f64 #s(literal 1/9 binary64) (neg.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(+.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(+.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x))","(*.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) x) (/.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1/2 binary64))))","(*.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))))","(*.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x))) (pow.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(*.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))) #s(literal -1 binary64)))","(*.f64 (neg.f64 x) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(*.f64 x (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))) (*.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))) (+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x))))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (*.f64 #s(literal 1/9 binary64) (*.f64 x x)))) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64))) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x)))) (neg.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64) (*.f64 (*.f64 #s(literal 1/3 binary64) x) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))))))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(/.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)) (*.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (*.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/9 binary64) (*.f64 x x) (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x)))) (fma.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal 1/91125 binary64) (pow.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64)))","(/.f64 x (pow.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(neg.f64 (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x) (/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/45 binary64) x)) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 x x)) x) (/.f64 (*.f64 #s(literal 1/45 binary64) x) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) x) (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) x) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x) (/.f64 (*.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) x) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/45 binary64) x) x) (/.f64 (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (*.f64 x x) x) (/.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) x) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (/.f64 x x) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (pow.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) x (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 #s(literal 1/3 binary64) x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x (*.f64 (*.f64 #s(literal 1/45 binary64) x) x) (*.f64 #s(literal 1/3 binary64) x))","(fma.f64 x #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (-.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) x) x)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/2025 binary64)) (*.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))) (neg.f64 (*.f64 (/.f64 (*.f64 x x) x) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))))))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 #s(literal 1/45 binary64) x)","(*.f64 x #s(literal 1/45 binary64))","(/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) #s(literal -1/81 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -1/729 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 #s(literal 1/81 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/18225 binary64)))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))) (neg.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64))))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64))) (fma.f64 #s(literal -1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(-.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal -1/45 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/3 binary64) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(-.f64 (/.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal -1/135 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/3 binary64) x)","(*.f64 x #s(literal 1/3 binary64))","(/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":240.5830078125,"type":"rewrite"},{"compiler":[[13722,1914]],"memory":[[4819104,43057584]],"time":52.89990234375,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","done",0.30002873016428755,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","next",0.010097509768442016,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","next",0.24751358875012025,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.296875,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","done",0.30859375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","next",0.3046875,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","done",0.5326698387501203,"binary64"]],"compiler":[[19,13],[27,19],[22,16],[22,14],[17,12],[30,24],[12,9]],"count":[[433,7]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[427,3],"picked":[3,1]}],"memory":[[724864,17332080]],"min-error":[[0.0,"binary64"]],"time":8.9541015625,"type":"prune"},{"egraph":[[0,2390,203,0.006962951],[17,2390,213,0.013123069],[16,2389,213,0.012140365],[15,2383,213,0.013097863],[14,2359,213,0.015507281],[13,2308,213,0.011392514],[12,2186,213,0.009944069],[11,1735,213,0.008598971],[10,1545,213,0.007794317],[9,1166,213,0.00828788],[8,567,213,0.005535896],[7,367,213,0.002863842],[6,329,213,0.002033977],[5,268,213,0.001847274],[4,229,213,0.001364656],[3,176,213,0.001291901],[2,127,213,0.000895393],[1,77,213,0.000701449],[0,47,223,0.000495552],[0,37,223,0.000289557]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","(*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","(*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","#s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))","#s(literal 1/9 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","#s(literal 1 binary64)","(fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(literal -1/45 binary64)","(*.f64 x x)","x","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","x","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","x","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","#s(literal -1/5 binary64)","(*.f64 x x)","#s(literal 3 binary64)"]],"locations":[["(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","cost-diff",0],["#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","cost-diff",0],["(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","cost-diff",0],["#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","cost-diff",0],["(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","cost-diff",0],["#s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))","cost-diff",0],["(*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","cost-diff",0],["(*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","cost-diff",2]],"memory":[[-12512368,4887904]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))))","(*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))","(*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","(/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","#s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))","#s(literal 1/9 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","#s(literal 1 binary64)","(fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))","#s(literal -1/45 binary64)","(*.f64 x x)","x","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","x","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","x","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","#s(literal -1/5 binary64)","(*.f64 x x)","#s(literal 3 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":221.18994140625,"type":"simplify"},{"compiler":[[151,33]],"locations":[["(*.f64 x x)","accuracy",0.0],["(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","accuracy",0.00390625],["#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","accuracy",0.009070031620653759],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","accuracy",0.010966230164287516],["(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","accuracy",0.00390625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","accuracy",0.010966230164287516],["#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","accuracy",0.24967681132842415],["(*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","accuracy",0.00390625],["#s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))","accuracy",0.009070031620653759],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","accuracy",0.010966230164287516],["(*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","accuracy",0.296875]],"memory":[[6922432,46601488]],"mixsample":[[30.107421875,"ival-tan",2000],[14.115966796875,"ival-div",0],[14.6640625,"adjust",800],[0.644287109375,"ival-div",400],[0.0380859375,"ival-div",1600],[0.14111328125,"ival-assert",0],[141.16943359375,"ival-tan",2400],[3.37060546875,"ival-sub",0],[2.5927734375,"ival-tan",0],[0.0068359375,"ival-sub",400],[30.773193359375,"const",0],[1.189697265625,"ival-tan",400],[6.58251953125,"adjust",2000],[4.292724609375,"ival-pow",0],[0.013916015625,"ival-tan",1600],[25.400390625,"ival-tan",800],[8.80224609375,"ival-add",0],[2.273681640625,"ival-div",1200],[0.0048828125,"ival-sub",800],[16.2470703125,"ival-mult",0],[2.237060546875,"ival-div",800],[0.27294921875,"ival-true",0],[0.777587890625,"ival-div",2000],[0.613037109375,"exact",0],[2.457763671875,"ival-neg",0],[2.37353515625,"ival-div",2400],[2.01318359375,"ival-tan",1200]],"outcomes":[[96.754150390625,1,"valid",136],[250.41650390625,2,"valid",119],[0.253173828125,0,"valid",1]],"time":374.47900390625,"type":"localize"},{"count":[[12,27]],"inputs":[["(*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","(*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","#s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(*.f64 x x)"]],"memory":[[-3804448,3926256]],"outputs":[["1/3","(+ 1/3 (* 1/45 (pow x 2)))","(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","1/9","(+ 1/9 (* -1/2025 (pow x 4)))","3","(+ 3 (* -1/5 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(pow x 2)","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1/2025 (pow x 4))","(* (pow x 4) (- (* 1/9 (/ 1 (pow x 4))) 1/2025))","(/ 45 (pow x 2))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(* -1/5 (pow x 2))","(* (pow x 2) (- (* 3 (/ 1 (pow x 2))) 1/5))"]],"series":[[3.527099609375,"((* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) (- (/ 1 x) (/ 1 (tan x))) (* (* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) x) (neg (+ (* (pow x 4) 1/2025) -1/9)) (- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* -1/5 (* x x)) 3) (* x x))","x","-inf"],[2.072998046875,"((* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) (- (/ 1 x) (/ 1 (tan x))) (* (* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) x) (neg (+ (* (pow x 4) 1/2025) -1/9)) (- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* -1/5 (* x x)) 3) (* x x))","x","inf"],[1.524169921875,"((* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) (- (/ 1 x) (/ 1 (tan x))) (* (* (neg (+ (* (pow x 4) 1/2025) -1/9)) (/ 1 (+ (* -1/45 (* x x)) 1/3))) x) (neg (+ (* (pow x 4) 1/2025) -1/9)) (- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (- (/ 1 x) (/ 1 (tan x))) (/ x (/ 1 (+ (* 1/45 (* x x)) 1/3))) (/ 1 (+ (* 1/45 (* x x)) 1/3)) (+ (* -1/5 (* x x)) 3) (* x x))","x","0"]],"time":7.85986328125,"type":"series"},{"count":[[27,27]],"egraph":[[0,8093,210,0.05515233],[5,6078,228,0.022006048],[4,2719,228,0.020616631],[3,1284,228,0.010676755],[2,538,228,0.004545767],[1,221,228,0.001662015],[0,88,228,0.000834898]],"inputs":[["1/3","(+ 1/3 (* 1/45 (pow x 2)))","(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","1/9","(+ 1/9 (* -1/2025 (pow x 4)))","3","(+ 3 (* -1/5 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(pow x 2)","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* -1/2025 (pow x 4))","(* (pow x 4) (- (* 1/9 (/ 1 (pow x 4))) 1/2025))","(/ 45 (pow x 2))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(* -1/5 (pow x 2))","(* (pow x 2) (- (* 3 (/ 1 (pow x 2))) 1/5))"]],"memory":[[6647904,29418560]],"method":["egg-herbie"],"outputs":[["1/3","#s(literal 1/3 binary64)","(+ 1/3 (* 1/45 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","1/9","#s(literal 1/9 binary64)","(+ 1/9 (* -1/2025 (pow x 4)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64) #s(literal 1/9 binary64))","3","#s(literal 3 binary64)","(+ 3 (* -1/5 (pow x 2)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (- (* 1/75 (pow x 2)) 1/5)))","(fma.f64 (fma.f64 #s(literal 1/75 binary64) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 1/75 (* -1/1125 (pow x 2)))) 1/5)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/1125 binary64) (*.f64 x x) #s(literal 1/75 binary64)) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal 3 binary64))","(pow x 2)","(*.f64 x x)","(* 1/45 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/45 binary64))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(* 1/45 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* -1/2025 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64))","(* (pow x 4) (- (* 1/9 (/ 1 (pow x 4))) 1/2025))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2025 binary64) #s(literal 1/9 binary64))","(/ 45 (pow x 2))","(/.f64 #s(literal 45 binary64) (*.f64 x x))","(/ (- 45 (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 45 binary64) (/.f64 #s(literal 675 binary64) (*.f64 x x))) x) x)","(/ (- (+ 45 (/ 10125 (pow x 4))) (* 675 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (-.f64 (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal 675 binary64) (*.f64 x x)) #s(literal 45 binary64))) (*.f64 x x))","(/ (- (+ 45 (/ 10125 (pow x 4))) (+ (* 675 (/ 1 (pow x 2))) (* 151875 (/ 1 (pow x 6))))) (pow x 2))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal 675 binary64) (*.f64 x x)) #s(literal 45 binary64))) (/.f64 #s(literal 151875 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x))","(* -1/5 (pow x 2))","(*.f64 #s(literal -1/5 binary64) (*.f64 x x))","(* (pow x 2) (- (* 3 (/ 1 (pow x 2))) 1/5))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":188.22412109375,"type":"simplify"},{"count":[[12,215]],"egraph":[[0,8386,176,0.071794647],[2,1346,186,0.029402777],[1,193,186,0.00587847],[0,47,190,0.001736837],[0,37,196,0.000266835]],"inputs":[["(*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","(*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x)","#s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(*.f64 x x)"]],"memory":[[93952,45507008]],"outputs":[["(*.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) #s(literal -1 binary64)) (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)))","(*.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))))","(*.f64 (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1 binary64))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/27 binary64))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(/.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (-.f64 (*.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64))) (pow.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (-.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))","(/.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/8303765625 binary64) (pow.f64 x #s(literal 12 binary64)) (pow.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (fma.f64 #s(literal 1/4100625 binary64) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64))))))))","(/.f64 (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (neg.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))))","(/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (*.f64 x x) #s(literal -1/135 binary64)))) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))","(*.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) x)","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) x))","(*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 x (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (neg.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (neg.f64 (*.f64 x #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (neg.f64 x)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) x) (*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64)) x) (*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (neg.f64 x)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (*.f64 (neg.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) x) (*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (neg.f64 x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))) (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 (neg.f64 x) (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 (neg.f64 x) (neg.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))) (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 (neg.f64 x) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 x (*.f64 #s(literal -1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 x (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 x (neg.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) x) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (*.f64 x #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","(/.f64 (*.f64 x #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))))","(/.f64 (/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (*.f64 x #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))))","(/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(/.f64 x (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))))","(/.f64 x (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))))","(*.f64 #s(literal 1 binary64) #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)))","(*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) #s(literal 1 binary64))","#s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(*.f64 (neg.f64 (neg.f64 x)) (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)) x)","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x))))","(*.f64 #s(literal 1 binary64) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(*.f64 x (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 x))) (neg.f64 (neg.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))))","(/.f64 (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))) #s(literal 1 binary64)))","(/.f64 (neg.f64 x) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x))","(/.f64 x (*.f64 (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))))","(/.f64 x (*.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 x (*.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(/.f64 x (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))","(neg.f64 (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","(neg.f64 (/.f64 x (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))) (/.f64 x (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64)) x)) #s(literal -1 binary64)))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(*.f64 (neg.f64 (neg.f64 x)) (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal -1 binary64)) x)","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) x))))","(*.f64 #s(literal 1 binary64) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(*.f64 x (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) x) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 x))) (neg.f64 (neg.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))))","(/.f64 (pow.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(/.f64 (neg.f64 x) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) x))","(/.f64 x (*.f64 (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))))","(/.f64 x (*.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 x (*.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 x (*.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","(neg.f64 (/.f64 (neg.f64 x) #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(neg.f64 (/.f64 x (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))) (/.f64 x (neg.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) x)) #s(literal -1 binary64)))","#s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","(*.f64 (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 3 binary64) (*.f64 #s(literal -1/5 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64)) (pow.f64 (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 9 binary64) (-.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(*.f64 (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 27 binary64)) (pow.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 9 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) (fma.f64 (/.f64 #s(literal 9 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) (/.f64 #s(literal 9 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) (/.f64 #s(literal 9 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 3 binary64) (*.f64 #s(literal -1/5 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64)) #s(literal 81 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/15625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -729 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64)) (+.f64 #s(literal 81 binary64) (*.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 9 binary64)))) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/15625 binary64) (pow.f64 x #s(literal 12 binary64)) #s(literal -729 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -27 binary64)) (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/1953125 binary64) (pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal 19683 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/15625 binary64) (pow.f64 x #s(literal 12 binary64)) (-.f64 #s(literal 729 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -27/125 binary64)))) (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) (*.f64 (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)) #s(literal 9 binary64))) (*.f64 (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))))","(/.f64 (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 #s(literal -1/5 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64))) (neg.f64 (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 27 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (-.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 27 binary64))) (neg.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64))))))","(/.f64 (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -9 binary64)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)))","(/.f64 (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 27 binary64)) (+.f64 #s(literal 9 binary64) (-.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))))","(/.f64 (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 27 binary64)) (fma.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 9 binary64) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 3 binary64) (*.f64 #s(literal -1/5 binary64) (*.f64 x x))) (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 9 binary64) (-.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -3/5 binary64)))) (fma.f64 #s(literal -1/125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))))","(fma.f64 (*.f64 #s(literal -1/5 binary64) x) x #s(literal 3 binary64))","(fma.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 9 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)))))","(fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/5 binary64) #s(literal 3 binary64))","(fma.f64 x (*.f64 #s(literal -1/5 binary64) x) #s(literal 3 binary64))","(-.f64 (/.f64 #s(literal 9 binary64) (-.f64 #s(literal 3 binary64) (*.f64 #s(literal -1/5 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 3 binary64) (*.f64 #s(literal -1/5 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) (/.f64 #s(literal 9 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/25 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64))) (neg.f64 (/.f64 #s(literal 9 binary64) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)))))","(+.f64 (*.f64 #s(literal -1/5 binary64) (*.f64 x x)) #s(literal 3 binary64))","(+.f64 #s(literal 3 binary64) (*.f64 #s(literal -1/5 binary64) (*.f64 x x)))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 x (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":224.449951171875,"type":"rewrite"},{"compiler":[[8203,1074]],"memory":[[-1593840,24285840]],"time":83.346923828125,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","done",0.30002873016428755,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","done",0.010097509768442016,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","done",0.24751358875012025,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.296875,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","done",0.30859375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","done",0.3046875,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","done",0.5326698387501203,"binary64"]],"compiler":[[203,70],[19,13],[27,19],[22,16],[22,14],[17,12],[30,24],[12,9]],"count":[[260,7]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[253,0],"picked":[3,3]}],"memory":[[-3577472,12147856]],"min-error":[[0.0,"binary64"]],"time":8.150146484375,"type":"prune"},{"accuracy":[0.010097509768442016],"baseline":[0.010097509768442016],"branch":[["x",0.010097509768442016,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.010097509768442016,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[10,1]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 #s(approx (neg (+ (* (pow x 4) 1/2025) -1/9)) #s(literal 1/9 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)))) x))"]],"memory":[[4372128,4372128]],"oracle":[60.091137525004676],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))"]],"repr":["binary64"],"time":5.638916015625,"times":[[2.686767578125,"x"],[2.255126953125,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[0.24751358875012025],"baseline":[0.24751358875012025],"branch":[["x",0.24751358875012025,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.24751358875012025,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[4,1]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 (*.f64 x x) (*.f64 #s(literal 1/45 binary64) x) (*.f64 #s(literal 1/3 binary64) x)))"]],"memory":[[-7089552,3213280]],"oracle":[0.5326698387501203],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))"]],"repr":["binary64"],"time":3.901123046875,"times":[[1.592041015625,"x"],[1.81103515625,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[0.5326698387501202],"baseline":[0.5326698387501203],"branch":[["x",0.5326698387501202,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.5326698387501202,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[1,1]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]],"link":["."],"memory":[[2614384,2614384]],"name":["invcot (example 3.9)"],"oracle":[0.5326698387501203],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]],"repr":["binary64"],"time":3.120849609375,"times":[[1.40087890625,"x"],[1.176025390625,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"egraph":[[9,7869,61,0.045768374],[8,3456,61,0.045434187],[7,1219,61,0.019302102],[6,259,61,0.0051882],[5,135,61,0.001814252],[4,75,61,0.000816715],[3,53,61,0.00056131],[2,43,61,0.000412602],[1,32,61,0.000387258],[0,24,61,0.000420395]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]],"memory":[[-2773216,13147344]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]],"stop":[["node limit",1]],"time":157.718994140625,"type":"simplify"},{"compiler":[[61,25]],"memory":[[723520,723520]],"stop":[["done",1]],"time":1.299072265625,"type":"soundness"},{"compiler":[[61,25],[61,25],[24,17],[24,17],[8,6],[8,6],[27,19],[27,19]],"memory":[[4308576,21181344]],"remove-preprocessing":[["(negabs x)"],[],[],[]],"time":37.590087890625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.017822265625,"type":"end"}]