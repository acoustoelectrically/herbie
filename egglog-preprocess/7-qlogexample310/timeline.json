[{"memory":[[14144,14144]],"time":0.03076171875,"type":"start"},{"compiler":[[14,9]],"memory":[[1149136,1149136]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0007317066192626953,"valid":0.4987800121307373}],[11,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0014634132385253906,"valid":0.4980483055114746}],[10,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0029268264770507813,"valid":0.4965848922729492}],[9,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0058536529541015625,"valid":0.49365806579589844}],[8,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.011707305908203125,"valid":0.4878044128417969}],[7,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.02341461181640625,"valid":0.47609710693359375}],[6,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0468292236328125,"valid":0.4526824951171875}],[5,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.093658447265625,"valid":0.405853271484375}],[4,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.18731689453125,"valid":0.31219482421875}],[3,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.3746337890625,"valid":0.1248779296875}],[2,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":4.95703125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[15527248,344970976]],"mixsample":[[205.018798828125,"ival-div",0],[182.6796875,"adjust",800],[73.202880859375,"ival-fabs",0],[19.484375,"ival-sub",1600],[5.16259765625,"ival-assert",0],[70.590087890625,"ival-sub",0],[1513.964599609375,"ival-log",0],[95.780517578125,"ival-log1p",0],[67.90234375,"ival-sub",400],[32.069091796875,"ival-<=",0],[8.10009765625,"exact",0],[61.1025390625,"adjust",2000]],"outcomes":[[1167.2373046875,1,"valid",4949],[1487.919677734375,2,"valid",2971],[38.786376953125,0,"valid",336]],"time":3139.35107421875,"type":"sample"},{"compiler":[[9,7],[27,9],[27,9]],"confusion":[[245,0,10,1]],"explanations":[["log.f64","(log.f64 (+.f64 #s(literal 1 binary64) x))","sensitivity",255,1,[],[[2]]],["log.f64","(log.f64 (-.f64 #s(literal 1 binary64) x))","sensitivity",255,1,[],[[1]]]],"fperrors":[["(log.f64 (+.f64 #s(literal 1 binary64) x))",255,0,false,0,false],["(log.f64 (-.f64 #s(literal 1 binary64) x))",255,0,false,0,false],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0,0,false,0,false],["(+.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["(-.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,255],[0,1]],"maybe-confusion":[[245,0,0,10,1,0]],"memory":[[-2321296,58152672]],"mixsample":[[11.1669921875,"ival-div",0],[12.95947265625,"adjust",800],[3.50048828125,"ival-add",0],[1.104736328125,"ival-sub",1600],[0.252685546875,"ival-assert",0],[3.5947265625,"ival-sub",0],[0.577880859375,"ival-true",0],[86.5087890625,"ival-log",0],[5.44482421875,"ival-log1p",0],[3.493408203125,"ival-sub",400],[0.428955078125,"exact",0],[4.2861328125,"adjust",2000]],"outcomes":[[71.6298828125,1,"valid",316],[89.14306640625,2,"valid",182],[1.73583984375,0,"valid",14]],"time":239.20703125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,7]],"egraph":[[0,69,6,0.00033362],[8,69,9,0.000420876],[7,65,9,0.000728471],[6,51,9,0.000604772],[5,41,9,0.000503209],[4,33,9,0.000362999],[3,26,9,0.000304716],[2,21,9,0.000265127],[1,17,9,0.000228942],[0,12,9,0.000282628],[0,7,9,0.000231954]],"inputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"memory":[[-1446448,14410576]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":167.798095703125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[43328,43328]],"time":0.1328125,"type":"eval"},{"alts":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","next",60.92527372249641,"binary64"]],"compiler":[[9,7]],"memory":[[271024,271024]],"time":0.4091796875,"type":"prune"},{"egraph":[[0,69,19,0.000341655],[8,69,25,0.000467943],[7,65,25,0.000425379],[6,51,25,0.000354765],[5,41,25,0.00032968],[4,33,25,0.000235996],[3,26,25,0.000209205],[2,21,25,0.000235931],[1,17,25,0.000153883],[0,12,25,0.000275872],[0,7,25,0.00010311]],"inputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)"]],"locations":[["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(log.f64 (-.f64 #s(literal 1 binary64) x))","cost-diff",1],["(log.f64 (+.f64 #s(literal 1 binary64) x))","cost-diff",2]],"memory":[[657360,657360]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(log1p.f64 (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log.f64 (+.f64 #s(literal 1 binary64) x))","(log1p.f64 x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":9.31689453125,"type":"simplify"},{"compiler":[[27,9]],"locations":[["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","accuracy",0.02734375],["(log.f64 (+.f64 #s(literal 1 binary64) x))","accuracy",58.8536935933095],["(log.f64 (-.f64 #s(literal 1 binary64) x))","accuracy",58.857179849289764]],"memory":[[-21352272,12807648]],"mixsample":[[5.39599609375,"ival-div",0],[6.467529296875,"adjust",800],[1.518310546875,"ival-add",0],[0.511962890625,"ival-sub",1600],[0.12744140625,"ival-assert",0],[2.003173828125,"ival-sub",0],[0.28466796875,"ival-true",0],[41.4521484375,"ival-log",0],[2.86572265625,"ival-log1p",0],[1.77001953125,"ival-sub",400],[0.211669921875,"exact",0],[2.040283203125,"adjust",2000]],"outcomes":[[37.1494140625,1,"valid",158],[45.353271484375,2,"valid",91],[0.697265625,0,"valid",7]],"time":95.738037109375,"type":"localize"},{"count":[[5,42]],"inputs":[["(log.f64 (+.f64 #s(literal 1 binary64) x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 #s(literal 1 binary64) x)"]],"memory":[[2056928,2056928]],"outputs":[["x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* x (- (/ 1 x) 1))","(* x (+ 1 (/ 1 x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* x (- 1 (/ 1 x))))"]],"series":[[2.65185546875,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","-inf"],[2.5478515625,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","inf"],[0.878173828125,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","0"]],"time":6.952880859375,"type":"series"},{"count":[[42,41]],"egraph":[[0,8379,854,0.10379361],[2,2012,881,0.027236044],[1,658,954,0.007045928],[0,217,1070,0.001980703]],"inputs":[["x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* x (- (/ 1 x) 1))","(* x (+ 1 (/ 1 x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* x (- 1 (/ 1 x))))"]],"memory":[[7014416,50716688]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(+.f64 (+.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) x) x) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (*.f64 x x)) (log.f64 x)) (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x)) (log.f64 x)))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) x) x) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1 binary64) (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)) (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x)) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))))))","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":252.215087890625,"type":"simplify"},{"count":[[5,842]],"egraph":[[0,10506,15,0.045460976],[3,2170,23,0.029371569],[2,245,23,0.006915762],[1,41,23,0.001193273],[0,12,23,0.000643029],[0,7,23,0.00011138]],"inputs":[["(log.f64 (+.f64 #s(literal 1 binary64) x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 #s(literal 1 binary64) x)"]],"memory":[[2147760,53246176]],"outputs":[["(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(*.f64 (log1p.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 x))","(pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (log1p.f64 x) #s(literal 1 binary64))","(log1p.f64 (neg.f64 (neg.f64 x)))","(log1p.f64 (neg.f64 x))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (log1p.f64 (fma.f64 x x x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))))","(/.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (log1p.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(neg.f64 (neg.f64 (log1p.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 (fma.f64 x x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log1p.f64 (*.f64 (neg.f64 x) x)))","(fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log1p.f64 (*.f64 (neg.f64 x) x)))","(fma.f64 (log1p.f64 x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log1p.f64 x) #s(literal 0 binary64))","(-.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (log1p.f64 (*.f64 x x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (log1p.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (neg.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)))) (log.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x)))) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (log.f64 (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(-.f64 (log.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))) (log1p.f64 x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(-.f64 (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 (neg.f64 x) #s(literal 1 binary64))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(-.f64 (log1p.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 9 binary64))) (log.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (log1p.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (neg.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (log1p.f64 x)))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))) (neg.f64 (log1p.f64 x)))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(+.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 x)))","(+.f64 (log1p.f64 (fma.f64 x x x)) (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log1p.f64 x) #s(literal 0 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(*.f64 (log1p.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 x))","(pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (log1p.f64 x) #s(literal 1 binary64))","(log1p.f64 (neg.f64 (neg.f64 x)))","(log1p.f64 (neg.f64 x))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (log1p.f64 (fma.f64 x x x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))))","(/.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (log1p.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(neg.f64 (neg.f64 (log1p.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 (fma.f64 x x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log1p.f64 (*.f64 (neg.f64 x) x)))","(fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log1p.f64 (*.f64 (neg.f64 x) x)))","(fma.f64 (log1p.f64 x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log1p.f64 x) #s(literal 0 binary64))","(-.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (log1p.f64 (*.f64 x x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (log1p.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (neg.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)))) (log.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x)))) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (log.f64 (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(-.f64 (log.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))) (log1p.f64 x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(-.f64 (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 (neg.f64 x) #s(literal 1 binary64))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(-.f64 (log1p.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 9 binary64))) (log.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (log1p.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (neg.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (log1p.f64 x)))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))) (neg.f64 (log1p.f64 x)))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(+.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 x)))","(+.f64 (log1p.f64 (fma.f64 x x x)) (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log1p.f64 x) #s(literal 0 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (log1p.f64 x))","(*.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) (neg.f64 (log1p.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (log1p.f64 x))","(*.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (log1p.f64 x) (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (log1p.f64 x) (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (log1p.f64 x) (/.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (log1p.f64 x) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(pow.f64 (exp.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (log1p.f64 x)) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 (log1p.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 x)) (*.f64 (log1p.f64 x) (log1p.f64 (fma.f64 x x x)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (log1p.f64 x) (log1p.f64 x))) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x))) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x))))","(/.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)) (neg.f64 (log1p.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))) (neg.f64 (log1p.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(/.f64 (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(/.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (log1p.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))))","(/.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)))","(/.f64 (log1p.f64 x) (log1p.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x))))","(neg.f64 (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 x)) (/.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 x) x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (neg.f64 x) #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)))","(fma.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)))","(+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 x) x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (neg.f64 x) #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)))","(fma.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)))","(+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":225.362060546875,"type":"rewrite"},{"compiler":[[13984,2124]],"memory":[[-3974336,38002992]],"time":112.407958984375,"type":"eval"},{"alts":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","fresh",60.23948928845931,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","done",60.92527372249641,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","fresh",60.33394350452029,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","next",61.1464451829177,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","next",0.14171638257385233,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","next",0.2544559578777781,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","next",0.5231306470036979,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","next",1.0881055691506178,"binary64"]],"compiler":[[7,6],[9,7],[22,16],[22,17],[20,14],[17,12],[13,10],[11,9],[7,6],[22,16],[22,17],[20,14],[17,12],[13,10],[11,9]],"count":[[487,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[486,7],"picked":[1,1]}],"memory":[[409088,20677120]],"min-error":[[0.0,"binary64"]],"time":11.52490234375,"type":"prune"},{"egraph":[[0,6170,173,0.041871869],[18,6170,191,0.065465535],[17,6160,191,0.073264059],[16,6160,191,0.0558376],[15,6160,191,0.041312665],[14,6132,191,0.041743532],[13,6056,191,0.050319085],[12,6056,191,0.034743434],[11,5852,191,0.046844792],[10,5852,191,0.017735739],[9,5829,191,0.018578764],[8,5615,191,0.020724328],[7,4749,191,0.020544358],[6,2685,191,0.027147713],[5,1459,191,0.012024647],[4,640,191,0.004980587],[3,285,191,0.002258549],[2,117,191,0.000956924],[1,74,191,0.000537308],[0,51,191,0.000509435],[0,30,191,0.000302985]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(literal -5/12 binary64)","x","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","#s(literal -1/2 binary64)","x","#s(literal -1 binary64)","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","(log.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)"]],"locations":[["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(log.f64 (+.f64 #s(literal 1 binary64) x))","cost-diff",2],["(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","cost-diff",0],["(-.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","cost-diff",0],["(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","cost-diff",0]],"memory":[[-3814640,18858624]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(literal -5/12 binary64)","x","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","#s(literal -1/2 binary64)","x","#s(literal -1 binary64)","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log1p.f64 x))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","(log.f64 (+.f64 #s(literal 1 binary64) x))","(log1p.f64 x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":661.76708984375,"type":"simplify"},{"compiler":[[160,32]],"locations":[["(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","accuracy",0.01953125],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","accuracy",0.02734375],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",0.1411309694046695],["(log.f64 (+.f64 #s(literal 1 binary64) x))","accuracy",58.8536935933095],["(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","accuracy",0.0],["(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","accuracy",0.0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","accuracy",0.2544559578777781],["(-.f64 #s(literal -1 binary64) x)","accuracy",0.0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","accuracy",0.5231306470036979],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","accuracy",1.0881055691506178],["(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","accuracy",0.0],["(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","accuracy",0.0],["(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","accuracy",0.0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","accuracy",0.14171638257385233]],"memory":[[-282720,42022240]],"mixsample":[[5.7685546875,"ival-div",0],[19.859130859375,"adjust",800],[44.334716796875,"ival-add",0],[21.094970703125,"ival-mult",0],[0.594482421875,"ival-sub",1600],[0.1220703125,"ival-assert",0],[3.122802734375,"ival-sub",0],[0.267578125,"ival-true",0],[41.340087890625,"ival-log",0],[2.245361328125,"ival-log1p",0],[11.42041015625,"const",0],[1.965087890625,"ival-sub",400],[0.59912109375,"exact",0],[6.948486328125,"adjust",2000]],"outcomes":[[114.85986328125,1,"valid",158],[78.79443359375,2,"valid",91],[1.649169921875,0,"valid",7]],"time":223.385986328125,"type":"localize"},{"count":[[15,66]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(log.f64 (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))"]],"memory":[[3598224,3598224]],"outputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(- (* -1/2 x) 1)","(- (* x (- (* -5/12 x) 1/2)) 1)","-1/2","(- (* -5/12 x) 1/2)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1/3","(- (* -1/4 x) 1/3)","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -5/12 (pow x 3))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(* -5/12 (pow x 2))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* -5/12 x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1 (* x (+ 1 (/ 1 x))))","(* -1/2 (pow x 2))","(* -1 (* (pow x 2) (+ 1/2 (/ 1 x))))","(* (pow x 2) (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2))","(* -1/2 x)","(* -1 (* x (+ 1/2 (/ 1 x))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1/4 x)","(* -1 (* x (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))"]],"series":[[3.843994140625,"((/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (+ (* (+ (* -5/12 x) -1/2) x) -1) (+ (* -5/12 x) -1/2) (/ (log (- 1 x)) (log (+ 1 x))) (/ (log (- 1 x)) (log (+ 1 x))) (- -1 x) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* -1/2 x) -1) x) -1) (+ (* -1/2 x) -1) (log (+ 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* -1/4 x) -1/3))","x","-inf"],[2.465087890625,"((/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (+ (* (+ (* -5/12 x) -1/2) x) -1) (+ (* -5/12 x) -1/2) (/ (log (- 1 x)) (log (+ 1 x))) (/ (log (- 1 x)) (log (+ 1 x))) (- -1 x) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* -1/2 x) -1) x) -1) (+ (* -1/2 x) -1) (log (+ 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* -1/4 x) -1/3))","x","inf"],[1.587158203125,"((/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (+ (* (+ (* -5/12 x) -1/2) x) -1) (+ (* -5/12 x) -1/2) (/ (log (- 1 x)) (log (+ 1 x))) (/ (log (- 1 x)) (log (+ 1 x))) (- -1 x) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* -1/2 x) -1) x) -1) (+ (* -1/2 x) -1) (log (+ 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* -1/4 x) -1/3))","x","0"]],"time":9.492919921875,"type":"series"},{"count":[[66,65]],"egraph":[[0,8253,1075,0.110132572],[2,2868,1114,0.031144121],[1,858,1189,0.009382036],[0,273,1314,0.002845593]],"inputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(- (* -1/2 x) 1)","(- (* x (- (* -5/12 x) 1/2)) 1)","-1/2","(- (* -5/12 x) 1/2)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1/3","(- (* -1/4 x) 1/3)","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -5/12 (pow x 3))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(* -5/12 (pow x 2))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* -5/12 x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1 (* x (+ 1 (/ 1 x))))","(* -1/2 (pow x 2))","(* -1 (* (pow x 2) (+ 1/2 (/ 1 x))))","(* (pow x 2) (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2))","(* -1/2 x)","(* -1 (* x (+ 1/2 (/ 1 x))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1/4 x)","(* -1 (* x (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))"]],"memory":[[7614592,54098208]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* -1/2 x) 1)","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(- (* x (- (* -5/12 x) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* -5/12 x) 1/2)","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","-1/3","#s(literal -1/3 binary64)","(- (* -1/4 x) 1/3)","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(-.f64 (+.f64 (-.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 x x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (*.f64 (log.f64 x) x) x))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 x x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1 binary64) (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)) (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))))))","(* -5/12 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -5/12 binary64))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (*.f64 x x))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(*.f64 (-.f64 #s(literal -5/12 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 5/12 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -5/12 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -5/12 binary64))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x)","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(*.f64 (*.f64 (-.f64 #s(literal -5/12 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) x)","(* -5/12 x)","(*.f64 #s(literal -5/12 binary64) x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(* -1 (* x (+ 1 (/ 1 x))))","(-.f64 #s(literal -1 binary64) x)","(* -1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/2 binary64))","(* -1 (* (pow x 2) (+ 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* (pow x 2) (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2))","(*.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) x)","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* -1 (* x (+ 1/2 (/ 1 x))))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1/4 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 #s(literal 1/3 binary64) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 #s(literal 1/3 binary64) x)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x) x)) (pow.f64 x #s(literal 4 binary64)))","(* -1/4 x)","(*.f64 #s(literal -1/4 binary64) x)","(* -1 (* x (+ 1/4 (* 1/3 (/ 1 x)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (+.f64 #s(literal 5/12 binary64) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x #s(literal 1/2 binary64)))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 5/12 binary64)) (pow.f64 x #s(literal 3 binary64)))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (pow.f64 x #s(literal 4 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":281.634033203125,"type":"simplify"},{"count":[[15,283]],"egraph":[[0,8166,137,0.074375226],[2,1449,155,0.027210443],[1,200,155,0.004837271],[0,51,155,0.001604633],[0,30,155,0.000396539]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(log.f64 (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))"]],"memory":[[51168,50896432]],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 9 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x)) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 9 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x)) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x))","(*.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (pow.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 25/144 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -5/12 binary64) x) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 15625/2985984 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal -5/12 binary64) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) #s(literal 1/4 binary64)))) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 15625/2985984 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64)) (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal -1953125/5159780352 binary64) (pow.f64 x #s(literal 9 binary64)) #s(literal -1/512 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 15625/2985984 binary64) (pow.f64 x #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 125/13824 binary64)))) (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 25/144 binary64) (*.f64 x x))) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (*.f64 x #s(literal 5/24 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64))))))","(/.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)))","(/.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (*.f64 x #s(literal 5/24 binary64)))))","(/.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 25/144 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (*.f64 x #s(literal 5/24 binary64)))) (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x))) (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))))","(+.f64 (*.f64 #s(literal -5/12 binary64) x) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (+.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (fma.f64 (/.f64 (*.f64 x x) (+.f64 #s(literal -1 binary64) x)) (/.f64 (*.f64 x x) (+.f64 #s(literal -1 binary64) x)) (*.f64 (pow.f64 (+.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 #s(literal -1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (+.f64 #s(literal -1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) x) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal -1 binary64) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (+.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal -1 binary64) (neg.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 x)))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 x)))) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)))","(fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (neg.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) (neg.f64 x))))","(-.f64 (pow.f64 (+.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 #s(literal -1 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal -1 binary64) x)","(+.f64 (neg.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 9 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x)) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal 1 binary64)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) #s(literal 1 binary64)))) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal -1/512 binary64) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/64 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/2 binary64)))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))","(log1p.f64 x)","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (neg.f64 x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x)) (fma.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (neg.f64 x)) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (-.f64 (*.f64 x x) x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log1p.f64 (-.f64 (*.f64 x x) x)) (log1p.f64 (-.f64 (*.f64 x x) x)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (-.f64 (*.f64 x x) x))))))","(neg.f64 (neg.f64 (log1p.f64 x)))","(-.f64 (log.f64 (-.f64 (*.f64 x x) #s(literal 1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x)))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (-.f64 (*.f64 x x) x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log1p.f64 x))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(log.f64 (+.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","(*.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log1p.f64 x)))","(pow.f64 (/.f64 (log1p.f64 x) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (log1p.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))) (neg.f64 (log1p.f64 x)))","(/.f64 (*.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64)) (log1p.f64 x))","(/.f64 (neg.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))) (log1p.f64 x))","(/.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 (log1p.f64 x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log1p.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (log1p.f64 x) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (*.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (log1p.f64 x) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(*.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 4 binary64)) #s(literal 1/81 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal 1/9 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1/729 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/81 binary64) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) #s(literal 1/9 binary64)))) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1/729 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/262144 binary64) (pow.f64 x #s(literal 9 binary64)) #s(literal -1/19683 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal 6 binary64)) (-.f64 #s(literal 1/729 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64)))) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x))) (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x)) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","(fma.f64 x #s(literal -1/4 binary64) #s(literal -1/3 binary64))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))","(+.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64))","(+.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":223.213134765625,"type":"rewrite"},{"compiler":[[11782,1737]],"memory":[[-456464,38344464]],"time":54.79296875,"type":"eval"},{"alts":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","next",60.23948928845931,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","done",60.92527372249641,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","next",0.1025978699374427,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.14171638257385233,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.2544559578777781,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","done",0.5231306470036979,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","done",1.0881055691506178,"binary64"]],"compiler":[[7,6],[9,7],[35,23],[20,14],[17,12],[13,10],[11,9]],"count":[[348,7]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[340,1],"picked":[5,4]}],"memory":[[-2277840,13889952]],"min-error":[[0.0,"binary64"]],"time":7.267822265625,"type":"prune"},{"egraph":[[0,8552,152,0.114460868],[16,7079,156,0.030386925],[15,7079,156,0.02407325],[14,7079,156,0.02156579],[13,6994,156,0.021611775],[12,6729,156,0.023459497],[11,6720,156,0.015943111],[10,6698,156,0.01222487],[9,6462,156,0.017883861],[8,5700,156,0.021192404],[7,4474,156,0.02266538],[6,3415,156,0.014911605],[5,2024,156,0.012415067],[4,795,156,0.008002201],[3,290,156,0.003163332],[2,108,156,0.001214312],[1,62,156,0.000458027],[0,44,156,0.000486877],[0,26,156,0.000302682]],"inputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal 1/3 binary64)","#s(literal 1 binary64)","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log1p.f64 x)"]],"locations":[["(log1p.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","cost-diff",0],["(log.f64 (-.f64 #s(literal 1 binary64) x))","cost-diff",1],["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","cost-diff",0]],"memory":[[-1492768,48531312]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal 1/3 binary64)","#s(literal 1 binary64)","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(log1p.f64 (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log1p.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":637.3701171875,"type":"simplify"},{"compiler":[[132,26]],"locations":[["(-.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(log1p.f64 x)","accuracy",0.0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","accuracy",0.02734375],["(log.f64 (-.f64 #s(literal 1 binary64) x))","accuracy",58.857179849289764],["(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","accuracy",0.01953125],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","accuracy",0.02734375],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.14090423337823646],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",0.1411309694046695]],"memory":[[-513728,39704080]],"mixsample":[[4.901611328125,"ival-div",0],[13.680908203125,"adjust",800],[13.798583984375,"ival-add",0],[22.83740234375,"ival-mult",0],[0.627685546875,"ival-sub",1600],[0.111083984375,"ival-assert",0],[2.07861328125,"ival-sub",0],[0.23095703125,"ival-true",0],[40.386474609375,"ival-log",0],[2.41552734375,"ival-log1p",0],[13.325439453125,"const",0],[2.02197265625,"ival-sub",400],[0.58642578125,"exact",0],[4.89306640625,"adjust",2000]],"outcomes":[[76.969482421875,1,"valid",158],[70.301025390625,2,"valid",91],[1.628173828125,0,"valid",7]],"time":174.7919921875,"type":"localize"},{"count":[[10,58]],"inputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","(-.f64 #s(literal 1 binary64) x)","(log1p.f64 x)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))"]],"memory":[[1798768,1798768]],"outputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -1/3 x) 1/2)) 1)","(- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1)","1","(+ 1 (* -1 x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","-1/3","(- (* -1/4 x) 1/3)","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1/4 (pow x 3))","(* -1 (* (pow x 3) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* x (- (/ 1 x) 1))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1/4 x)","(* -1 (* x (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(* -1 (* (pow x 3) (+ 1/4 (+ (/ 1/2 (pow x 2)) (* 1/3 (/ 1 x))))))","(* -1 (* (pow x 3) (+ 1/4 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/3) x)))))","(* -1 (* x (- 1 (/ 1 x))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))"]],"series":[[0.98193359375,"((/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (log (+ 1 x)) (log (+ 1 x)) (+ (* -1/4 x) -1/3))","x","-inf"],[0.955078125,"((/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (log (+ 1 x)) (log (+ 1 x)) (+ (* -1/4 x) -1/3))","x","inf"],[0.498046875,"((/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (log (+ 1 x)) (log (+ 1 x)) (+ (* -1/4 x) -1/3))","x","0"]],"time":3.575927734375,"type":"series"},{"count":[[58,57]],"egraph":[[0,8232,1021,0.103772175],[2,2573,1057,0.030557222],[1,786,1134,0.008193337],[0,257,1259,0.002225741]],"inputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -1/3 x) 1/2)) 1)","(- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1)","1","(+ 1 (* -1 x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","-1/3","(- (* -1/4 x) 1/3)","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1/4 (pow x 3))","(* -1 (* (pow x 3) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* x (- (/ 1 x) 1))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1/4 x)","(* -1 (* x (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(* -1 (* (pow x 3) (+ 1/4 (+ (/ 1/2 (pow x 2)) (* 1/3 (/ 1 x))))))","(* -1 (* (pow x 3) (+ 1/4 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/3) x)))))","(* -1 (* x (- 1 (/ 1 x))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))"]],"memory":[[7323728,50768624]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(- (* -1/2 x) 1)","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(- (* x (- (* -1/3 x) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","-1/3","#s(literal -1/3 binary64)","(- (* -1/4 x) 1/3)","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(+.f64 (+.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 x x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (*.f64 (log.f64 x) x) x)))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 x x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1 binary64) (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)) (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1/4 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 #s(literal 1/3 binary64) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* -1/4 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/4 binary64))","(* -1 (* (pow x 3) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (*.f64 x x))","(* (pow x 3) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(* -1/4 x)","(*.f64 #s(literal -1/4 binary64) x)","(* -1 (* x (+ 1/4 (* 1/3 (/ 1 x)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ 1/4 (+ (/ 1/2 (pow x 2)) (* 1/3 (/ 1 x))))))","(*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) #s(literal 1/4 binary64)) x #s(literal 1/3 binary64)))","(* -1 (* (pow x 3) (+ 1/4 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/3) x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":259.78515625,"type":"simplify"},{"count":[[10,286]],"egraph":[[0,8613,103,0.073037961],[2,1116,107,0.026067147],[1,163,107,0.00423786],[0,44,107,0.001442033],[0,26,107,0.000267101]],"inputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","(-.f64 #s(literal 1 binary64) x)","(log1p.f64 x)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))"]],"memory":[[-13841472,51565696]],"outputs":[["(*.f64 (pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","(*.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 #s(literal -1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (/.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))) (/.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(neg.f64 (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64)))) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))) (-.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) (*.f64 x #s(literal -1 binary64)))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) x)","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 9 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (+.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 3 binary64))) x) (pow.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (*.f64 x #s(literal -1/2 binary64)))) (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (+.f64 #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 3 binary64)))) (pow.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (*.f64 x #s(literal -1/2 binary64)))) (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))","(*.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 (neg.f64 x))))","(log1p.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(log1p.f64 (neg.f64 x))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (*.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 (fma.f64 x x x)))) (+.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 (*.f64 x (neg.f64 x)))) (*.f64 (log1p.f64 x) (log1p.f64 x))) (+.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 (fma.f64 x x x)) (*.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x (neg.f64 x))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 (*.f64 x (neg.f64 x))) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 x)))))","(neg.f64 (neg.f64 (log1p.f64 (neg.f64 x))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 x))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (-.f64 (*.f64 x x) x)))","(+.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (neg.f64 (log1p.f64 x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (log1p.f64 (neg.f64 x)))","(*.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (log1p.f64 (neg.f64 x)) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))","(*.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))","(pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (neg.f64 (log1p.f64 x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 x)) (/.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))) (+.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 x x) x) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 x x) x) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (-.f64 (*.f64 x x) x) #s(literal 2 binary64)) (-.f64 (*.f64 x x) x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (neg.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (*.f64 x x) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (*.f64 x x) x)))","(fma.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) #s(literal 1 binary64))","(-.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) x)","(+.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (*.f64 x x) x)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (*.f64 x x) x)))","(+.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(*.f64 (log1p.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 (neg.f64 x)))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 (*.f64 x (neg.f64 x)))) (*.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (neg.f64 x)))) (+.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 (log1p.f64 (-.f64 (*.f64 x x) x)) (log1p.f64 (-.f64 (*.f64 x x) x)))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (-.f64 (*.f64 x x) x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x (neg.f64 x))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (neg.f64 x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 (*.f64 x (neg.f64 x))) (fma.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (neg.f64 x)) (*.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 (neg.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (-.f64 (*.f64 x x) x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log1p.f64 (-.f64 (*.f64 x x) x)) (log1p.f64 (-.f64 (*.f64 x x) x)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (-.f64 (*.f64 x x) x))))))","(/.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (log1p.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 x (neg.f64 x))) #s(literal 1 binary64)) (/.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (log1p.f64 (-.f64 (*.f64 x x) x)) #s(literal 1 binary64)))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (log1p.f64 (neg.f64 x)))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (-.f64 (*.f64 x x) x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log1p.f64 (*.f64 x (neg.f64 x))) (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (-.f64 (*.f64 x x) x))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(log.f64 (+.f64 x #s(literal 1 binary64)))","(*.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 (-.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(*.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (*.f64 x #s(literal -1/12 binary64))))))","(*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))","(pow.f64 (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))) (*.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/262144 binary64) (pow.f64 x #s(literal 9 binary64)) #s(literal -1/19683 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal 6 binary64)) (-.f64 #s(literal 1/729 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64)))) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/81 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal 1/9 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/729 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1/81 binary64) (*.f64 (*.f64 x x) #s(literal 1/144 binary64)))) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/729 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal 1/9 binary64))) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (*.f64 x #s(literal -1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (*.f64 x #s(literal -1/12 binary64)))))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x)) (-.f64 #s(literal 1/9 binary64) (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (*.f64 x #s(literal -1/12 binary64)))) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/4 binary64)) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) x) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 #s(literal -1/4 binary64) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) x) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal -1/4 binary64) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) x) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) x) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 x (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 x (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 x (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) x) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) x) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","(fma.f64 x #s(literal -1/4 binary64) #s(literal -1/3 binary64))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 3 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))) (/.f64 #s(literal 1/27 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))))","(-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 1/3 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))))","(+.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64))","(+.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":305.3798828125,"type":"rewrite"},{"compiler":[[13048,1717]],"memory":[[5654288,38567136]],"time":55.908935546875,"type":"eval"},{"alts":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","next",0.02734375,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","done",0.1025978699374427,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.14171638257385233,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.2544559578777781,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","done",0.5231306470036979,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","done",1.0881055691506178,"binary64"]],"compiler":[[6,5],[35,23],[20,14],[17,12],[13,10],[11,9]],"count":[[344,6]],"kept":[{"done":[5,4],"fresh":[0,0],"new":[337,1],"picked":[2,1]}],"memory":[[-5126288,13570704]],"min-error":[[0.0,"binary64"]],"time":7.951171875,"type":"prune"},{"egraph":[[0,68,14,0.00031512],[7,68,14,0.000500213],[6,64,14,0.000363846],[5,50,14,0.000330394],[4,40,14,0.00028268],[3,32,14,0.000206287],[2,25,14,0.000183062],[1,20,14,0.000155447],[0,12,14,0.000205986],[0,5,14,9.9703e-5]],"inputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(log1p.f64 x)"]],"locations":[["(log1p.f64 x)","cost-diff",0],["(neg.f64 x)","cost-diff",0],["(log1p.f64 (neg.f64 x))","cost-diff",0],["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","cost-diff",0]],"memory":[[608080,608080]],"method":["egg-herbie"],"outputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(log1p.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":8.60400390625,"type":"simplify"},{"compiler":[[24,7]],"locations":[["(neg.f64 x)","accuracy",0.0],["(log1p.f64 (neg.f64 x))","accuracy",0.0],["(log1p.f64 x)","accuracy",0.0],["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","accuracy",0.02734375]],"memory":[[-1154560,6912736]],"mixsample":[[2.1806640625,"ival-div",0],[0.18359375,"ival-true",0],[4.3095703125,"ival-log1p",0],[0.081787109375,"ival-assert",0],[1.335205078125,"ival-neg",0]],"outcomes":[[14.11962890625,0,"valid",256]],"time":21.83203125,"type":"localize"},{"count":[[4,36]],"inputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(log1p.f64 x)"]],"memory":[[1047184,1047184]],"outputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))"]],"series":[[0.737060546875,"((/ (log (+ 1 (neg x))) (log (+ 1 x))) (log (+ 1 (neg x))) (neg x) (log (+ 1 x)))","x","-inf"],[0.705078125,"((/ (log (+ 1 (neg x))) (log (+ 1 x))) (log (+ 1 (neg x))) (neg x) (log (+ 1 x)))","x","inf"],[0.2919921875,"((/ (log (+ 1 (neg x))) (log (+ 1 x))) (log (+ 1 (neg x))) (neg x) (log (+ 1 x)))","x","0"]],"time":2.847900390625,"type":"series"},{"count":[[36,35]],"egraph":[[0,8274,838,0.12112097],[2,1965,865,0.028142819],[1,634,938,0.006899631],[0,208,1051,0.002203977]],"inputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))"]],"memory":[[4956656,50072080]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(+.f64 (+.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) x) x) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (log.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (*.f64 (log.f64 x) x) x)))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) x) x) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1 binary64) (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)) (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":280.406982421875,"type":"simplify"},{"count":[[4,298]],"egraph":[[0,8482,6,0.048094504],[3,2825,6,0.024275715],[2,323,10,0.008471205],[1,49,14,0.001250471],[0,12,14,0.000603844],[0,5,13,0.00012979]],"inputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(log1p.f64 x)"]],"memory":[[1474928,34165616]],"outputs":[["#s(literal 1 binary64)","(*.f64 (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 x))","(*.f64 (log1p.f64 x) #s(literal 1 binary64))","(pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (log1p.f64 x) #s(literal 1 binary64))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (-.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (*.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (neg.f64 (log1p.f64 (fma.f64 x x x))))) (-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x)))))","(/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64)) (pow.f64 (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))) (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (log.f64 (-.f64 #s(literal -1 binary64) x)) (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 #s(literal -1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (log.f64 (-.f64 #s(literal -1 binary64) x)) (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (-.f64 #s(literal -1 binary64) x))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))))))","(/.f64 (+.f64 (pow.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 (*.f64 x x)) (neg.f64 (log1p.f64 x))))))","(/.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (neg.f64 (log1p.f64 (fma.f64 x x x)))) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x)))))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(/.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))) (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))) (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))) (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(/.f64 (log1p.f64 x) #s(literal 1 binary64))","(neg.f64 (neg.f64 (log1p.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (log1p.f64 (*.f64 x x)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) #s(literal 0 binary64))) (log1p.f64 (*.f64 x x)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))) #s(literal 0 binary64))","(fma.f64 (log1p.f64 (*.f64 x x)) #s(literal 1 binary64) (neg.f64 (log1p.f64 x)))","(fma.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 1 binary64) (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log1p.f64 (fma.f64 x x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log1p.f64 (*.f64 x x)))","(fma.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64) (log1p.f64 (*.f64 x x)))","(fma.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x)) (log1p.f64 (*.f64 x x)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 x) #s(literal 0 binary64))","(fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log1p.f64 (*.f64 x x)))","(fma.f64 (log1p.f64 x) #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))) (/.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))) (/.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))))","(-.f64 (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (/.f64 (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) #s(literal 1 binary64)) (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64)))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal 1 binary64))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1 binary64) x))) (log1p.f64 (*.f64 x x)))","(-.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 #s(literal 1 binary64) x))) (log1p.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(-.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (log1p.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (log.f64 (*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (log1p.f64 (*.f64 (fma.f64 x x x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (log1p.f64 x))","(-.f64 (log.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64)))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))))))))","(-.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (log.f64 (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(-.f64 (log.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 x x)))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x)))) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(-.f64 (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)) (log1p.f64 (*.f64 x x)))","(-.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 4 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 4 binary64))) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 9 binary64))) (log.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 9 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (log1p.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))))","(+.f64 (log.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal 1 binary64)))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (log1p.f64 (*.f64 (fma.f64 x x x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))","(+.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(+.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))","(+.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) x))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(+.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) x))))","(+.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 x x)) (neg.f64 (log1p.f64 x)))","(+.f64 (log1p.f64 (fma.f64 x x x)) (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 (*.f64 x x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log1p.f64 x) #s(literal 0 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 (exp.f64 (log.f64 #s(literal -1 binary64))) x)","(*.f64 #s(literal -1 binary64) x)","(*.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 x x) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x (exp.f64 (log.f64 #s(literal -1 binary64))))","(*.f64 x #s(literal -1 binary64))","(*.f64 x #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 x #s(literal 1 binary64))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 0 binary64)) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(/.f64 (*.f64 x x) (-.f64 x #s(literal 0 binary64)))","(/.f64 (*.f64 x x) x)","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(/.f64 x #s(literal -1 binary64))","(/.f64 x #s(literal 1 binary64))","(neg.f64 x)","(fma.f64 (exp.f64 (log.f64 #s(literal -1 binary64))) x #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal 0 binary64))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))","(fma.f64 x (exp.f64 (log.f64 #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) x)","(exp.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(exp.f64 (log.f64 x))","(+.f64 #s(literal 0 binary64) x)","(+.f64 x #s(literal 0 binary64))","x","(*.f64 (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 x))","(*.f64 (log1p.f64 x) #s(literal 1 binary64))","(pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (log1p.f64 x) #s(literal 1 binary64))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (-.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (*.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (neg.f64 (log1p.f64 (fma.f64 x x x))))) (-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x)))))","(/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64)) (pow.f64 (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))) (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (log.f64 (-.f64 #s(literal -1 binary64) x)) (*.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 #s(literal -1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) (log.f64 (-.f64 #s(literal -1 binary64) x)) (*.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (-.f64 #s(literal -1 binary64) x))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))))))","(/.f64 (+.f64 (pow.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (-.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (log1p.f64 (*.f64 x x)) (neg.f64 (log1p.f64 x))))))","(/.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (neg.f64 (log1p.f64 (fma.f64 x x x)))) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x)))))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (neg.f64 (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(/.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))) (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))) (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))) (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(/.f64 (log1p.f64 x) #s(literal 1 binary64))","(neg.f64 (neg.f64 (log1p.f64 x)))","(fma.f64 (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (log1p.f64 (*.f64 x x)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) #s(literal 0 binary64))) (log1p.f64 (*.f64 x x)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))) #s(literal 0 binary64))","(fma.f64 (log1p.f64 (*.f64 x x)) #s(literal 1 binary64) (neg.f64 (log1p.f64 x)))","(fma.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 1 binary64) (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log1p.f64 (fma.f64 x x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log1p.f64 (*.f64 x x)))","(fma.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64) (log1p.f64 (*.f64 x x)))","(fma.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x)) (log1p.f64 (*.f64 x x)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 x) #s(literal 0 binary64))","(fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log1p.f64 (*.f64 x x)))","(fma.f64 (log1p.f64 x) #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))) (/.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))) (/.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 x x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))))))","(-.f64 (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (/.f64 (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) #s(literal 1 binary64)) (/.f64 (log.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64)))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal 1 binary64))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1 binary64) x))) (log1p.f64 (*.f64 x x)))","(-.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 #s(literal 1 binary64) x))) (log1p.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(-.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (log1p.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (log.f64 (*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (log1p.f64 (*.f64 (fma.f64 x x x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (log1p.f64 x))","(-.f64 (log.f64 (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64)))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))))))))","(-.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (log.f64 (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(-.f64 (log.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 x x)))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x)))) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(-.f64 (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)) (log1p.f64 (*.f64 x x)))","(-.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 4 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 4 binary64))) (+.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x)))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 9 binary64))) (log.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 9 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 x))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (log1p.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log1p.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))))","(+.f64 (log.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal 1 binary64)))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (log1p.f64 (*.f64 (fma.f64 x x x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))","(+.f64 (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(+.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)))))","(+.f64 (log.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) x))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(+.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) x))))","(+.f64 (log.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 x x)) (neg.f64 (log1p.f64 x)))","(+.f64 (log1p.f64 (fma.f64 x x x)) (-.f64 (log1p.f64 (*.f64 x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 (*.f64 x x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log1p.f64 x) #s(literal 0 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":163.339111328125,"type":"rewrite"},{"compiler":[[4380,856]],"memory":[[188272,19882000]],"time":42.5498046875,"type":"eval"},{"alts":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","done",0.02734375,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","done",0.1025978699374427,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.14171638257385233,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.2544559578777781,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","done",0.5231306470036979,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","done",1.0881055691506178,"binary64"]],"compiler":[[162,47],[6,5],[35,23],[20,14],[17,12],[13,10],[11,9]],"count":[[210,6]],"kept":[{"done":[5,5],"fresh":[0,0],"new":[204,0],"picked":[1,1]}],"memory":[[2360192,10099472]],"min-error":[[0.0,"binary64"]],"time":7.007080078125,"type":"prune"},{"accuracy":[0.02734375],"baseline":[0.02734375],"branch":[["x",0.02734375,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.02734375,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[10,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"memory":[[-3343616,4753984]],"oracle":[62.76048187584366],"outputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"repr":["binary64"],"time":6.56005859375,"times":[[2.64697265625,"x"],[2.966796875,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.1025978699374427],"baseline":[0.1025978699374427],"branch":[["x",0.1025978699374427,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.1025978699374427,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[7,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))"]],"memory":[[4015360,4015360]],"oracle":[61.66357700391429],"outputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))"]],"repr":["binary64"],"time":4.802978515625,"times":[[2.128173828125,"x"],[1.944091796875,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.14171638257385233],"baseline":[0.14171638257385233],"branch":[["x",0.14171638257385233,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.14171638257385233,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[4,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"memory":[[-7020672,3279072]],"oracle":[1.0881055691506178],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"repr":["binary64"],"time":3.955078125,"times":[[1.537841796875,"x"],[2.01416015625,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.254455957877778],"baseline":[0.2544559578777781],"branch":[["x",0.2544559578777781,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.254455957877778,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[3,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"memory":[[3222032,3222032]],"oracle":[1.0881055691506178],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"repr":["binary64"],"time":3.121826171875,"times":[[1.516845703125,"x"],[1.239990234375,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.5231306470036979],"baseline":[0.5231306470036979],"branch":[["x",0.5231306470036979,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.5231306470036979,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[2,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))"]],"memory":[[-5456032,2836976]],"oracle":[1.0881055691506178],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))"]],"repr":["binary64"],"time":2.736083984375,"times":[[1.35498046875,"x"],[1.013916015625,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[1.0881055691506178],"baseline":[1.0881055691506178],"branch":[["x",1.0881055691506178,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",1.0881055691506178,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[1,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"link":["."],"memory":[[2667856,2667856]],"name":["qlog (example 3.10)"],"oracle":[1.0881055691506178],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"repr":["binary64"],"time":2.1708984375,"times":[[0.9931640625,"x"],[0.888916015625,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"egraph":[[9,6812,102,0.024745248],[8,3660,102,0.057683151],[7,254,102,0.01101303],[6,130,102,0.001337364],[5,79,102,0.001038376],[4,67,102,0.000795921],[3,56,102,0.000744229],[2,50,102,0.000687178],[1,46,102,0.000646524],[0,38,102,0.000624812]],"inputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"memory":[[1292784,9516400]],"method":["egg-herbie"],"outputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"stop":[["node limit",1]],"time":121.31298828125,"type":"simplify"},{"compiler":[[102,39]],"memory":[[1121200,1121200]],"stop":[["done",1]],"time":3.424072265625,"type":"soundness"},{"compiler":[[102,39],[102,39],[6,5],[6,5],[9,7],[9,7]],"memory":[[-114400,28055072]],"remove-preprocessing":[[],[],[],[],[],[],[]],"time":121.43212890625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02099609375,"type":"end"}]