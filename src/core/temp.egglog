(datatype M
          (Num Rational :cost 4294967295)
          (Var String :cost 4294967295)
          (If M M M :cost 4294967295)
          (Neq M M :cost 4294967295)
          (Mul M M :cost 4294967295)
          (Add M M :cost 4294967295)
          (Sub M M :cost 4294967295)
          (Div M M :cost 4294967295)
          (Lt M M :cost 4294967295)
          (Lte M M :cost 4294967295)
          (Eq M M :cost 4294967295)
          (Gt M M :cost 4294967295)
          (Gte M M :cost 4294967295)
          (E :cost 4294967295)
          (False :cost 4294967295)
          (Infinity :cost 4294967295)
          (Nan :cost 4294967295)
          (Pi :cost 4294967295)
          (True :cost 4294967295)
          (Acos M :cost 4294967295)
          (Acosh M :cost 4294967295)
          (And M M :cost 4294967295)
          (Asin M :cost 4294967295)
          (Asinh M :cost 4294967295)
          (Atan M :cost 4294967295)
          (Atan2 M M :cost 4294967295)
          (Atanh M :cost 4294967295)
          (Cbrt M :cost 4294967295)
          (Ceil M :cost 4294967295)
          (Copysign M M :cost 4294967295)
          (Cos M :cost 4294967295)
          (Cosh M :cost 4294967295)
          (Erf M :cost 4294967295)
          (Exp M :cost 4294967295)
          (Exp2 M :cost 4294967295)
          (Fabs M :cost 4294967295)
          (Fdim M M :cost 4294967295)
          (Floor M :cost 4294967295)
          (Fmax M M :cost 4294967295)
          (Fmin M M :cost 4294967295)
          (Fmod M M :cost 4294967295)
          (Lgamma M :cost 4294967295)
          (Log M :cost 4294967295)
          (Log10 M :cost 4294967295)
          (Log2 M :cost 4294967295)
          (Logb M :cost 4294967295)
          (Neg M :cost 4294967295)
          (Not M :cost 4294967295)
          (Or M M :cost 4294967295)
          (Pow M M :cost 4294967295)
          (Remainder M M :cost 4294967295)
          (Rint M :cost 4294967295)
          (Round M :cost 4294967295)
          (Sin M :cost 4294967295)
          (Sinh M :cost 4294967295)
          (Sqrt M :cost 4294967295)
          (Tan M :cost 4294967295)
          (Tanh M :cost 4294967295)
          (Tgamma M :cost 4294967295)
          (Trunc M :cost 4294967295)
          (Pif64 :cost 4294967295)
          (Pif32 :cost 4294967295)
          (Ef64 :cost 4294967295)
          (Ef32 :cost 4294967295)
          (Infinityf64 :cost 4294967295)
          (Infinityf32 :cost 4294967295)
          (Nanf64 :cost 4294967295)
          (Nanf32 :cost 4294967295)
          (Negf64 M :cost 4294967295)
          (Negf32 M :cost 4294967295)
          (Addf64 M M :cost 4294967295)
          (Addf32 M M :cost 4294967295)
          (Subf64 M M :cost 4294967295)
          (Subf32 M M :cost 4294967295)
          (Mulf64 M M :cost 4294967295)
          (Mulf32 M M :cost 4294967295)
          (Divf64 M M :cost 4294967295)
          (Divf32 M M :cost 4294967295)
          (Eqf64 M M :cost 4294967295)
          (Eqf32 M M :cost 4294967295)
          (Neqf64 M M :cost 4294967295)
          (Neqf32 M M :cost 4294967295)
          (Gtf64 M M :cost 4294967295)
          (Gtf32 M M :cost 4294967295)
          (Ltf64 M M :cost 4294967295)
          (Ltf32 M M :cost 4294967295)
          (Gtef64 M M :cost 4294967295)
          (Gtef32 M M :cost 4294967295)
          (Ltef64 M M :cost 4294967295)
          (Ltef32 M M :cost 4294967295)
          (Acosf64 M :cost 4294967295)
          (Acoshf64 M :cost 4294967295)
          (Asinf64 M :cost 4294967295)
          (Asinhf64 M :cost 4294967295)
          (Atanf64 M :cost 4294967295)
          (Atan2f64 M M :cost 4294967295)
          (Atanhf64 M :cost 4294967295)
          (Cbrtf64 M :cost 4294967295)
          (Ceilf64 M :cost 4294967295)
          (Copysignf64 M M :cost 4294967295)
          (Cosf64 M :cost 4294967295)
          (Coshf64 M :cost 4294967295)
          (Erff64 M :cost 4294967295)
          (Expf64 M :cost 4294967295)
          (Exp2f64 M :cost 4294967295)
          (Fabsf64 M :cost 4294967295)
          (Fdimf64 M M :cost 4294967295)
          (Floorf64 M :cost 4294967295)
          (Fmaxf64 M M :cost 4294967295)
          (Fminf64 M M :cost 4294967295)
          (Fmodf64 M M :cost 4294967295)
          (Lgammaf64 M :cost 4294967295)
          (Logf64 M :cost 4294967295)
          (Log10f64 M :cost 4294967295)
          (Log2f64 M :cost 4294967295)
          (Logbf64 M :cost 4294967295)
          (Powf64 M M :cost 4294967295)
          (Remainderf64 M M :cost 4294967295)
          (Rintf64 M :cost 4294967295)
          (Roundf64 M :cost 4294967295)
          (Sinf64 M :cost 4294967295)
          (Sinhf64 M :cost 4294967295)
          (Sqrtf64 M :cost 4294967295)
          (Tanf64 M :cost 4294967295)
          (Tanhf64 M :cost 4294967295)
          (Tgammaf64 M :cost 4294967295)
          (Truncf64 M :cost 4294967295)
          (Acosf32 M :cost 4294967295)
          (Acoshf32 M :cost 4294967295)
          (Asinf32 M :cost 4294967295)
          (Asinhf32 M :cost 4294967295)
          (Atanf32 M :cost 4294967295)
          (Atan2f32 M M :cost 4294967295)
          (Atanhf32 M :cost 4294967295)
          (Cbrtf32 M :cost 4294967295)
          (Ceilf32 M :cost 4294967295)
          (Copysignf32 M M :cost 4294967295)
          (Cosf32 M :cost 4294967295)
          (Coshf32 M :cost 4294967295)
          (Erff32 M :cost 4294967295)
          (Expf32 M :cost 4294967295)
          (Exp2f32 M :cost 4294967295)
          (Fabsf32 M :cost 4294967295)
          (Fdimf32 M M :cost 4294967295)
          (Floorf32 M :cost 4294967295)
          (Fmaxf32 M M :cost 4294967295)
          (Fminf32 M M :cost 4294967295)
          (Fmodf32 M M :cost 4294967295)
          (Lgammaf32 M :cost 4294967295)
          (Logf32 M :cost 4294967295)
          (Log10f32 M :cost 4294967295)
          (Log2f32 M :cost 4294967295)
          (Logbf32 M :cost 4294967295)
          (Powf32 M M :cost 4294967295)
          (Remainderf32 M M :cost 4294967295)
          (Rintf32 M :cost 4294967295)
          (Roundf32 M :cost 4294967295)
          (Sinf32 M :cost 4294967295)
          (Sinhf32 M :cost 4294967295)
          (Sqrtf32 M :cost 4294967295)
          (Tanf32 M :cost 4294967295)
          (Tanhf32 M :cost 4294967295)
          (Tgammaf32 M :cost 4294967295)
          (Truncf32 M :cost 4294967295)
          (Erfcf64 M :cost 4294967295)
          (Expm1f64 M :cost 4294967295)
          (Log1pf64 M :cost 4294967295)
          (Hypotf64 M M :cost 4294967295)
          (Fmaf64 M M M :cost 4294967295)
          (Erfcf32 M :cost 4294967295)
          (Expm1f32 M :cost 4294967295)
          (Log1pf32 M :cost 4294967295)
          (Hypotf32 M M :cost 4294967295)
          (Fmaf32 M M M :cost 4294967295))
(datatype MTy
          (Numbinary32 Rational :cost 32)
          (Numbinary64 Rational :cost 64)
          (Varbinary32 String :cost 32)
          (Varbinary64 String :cost 64)
          (Varbool String :cost 1)
          (IfTy MTy MTy MTy :cost 1)
          (TrueTy :cost 1)
          (FalseTy :cost 1)
          (NotTy MTy :cost 1)
          (AndTy MTy MTy :cost 1)
          (OrTy MTy MTy :cost 1)
          (Pif64Ty :cost 64)
          (Pif32Ty :cost 32)
          (Ef64Ty :cost 64)
          (Ef32Ty :cost 32)
          (Infinityf64Ty :cost 64)
          (Infinityf32Ty :cost 32)
          (Nanf64Ty :cost 64)
          (Nanf32Ty :cost 32)
          (Negf64Ty MTy :cost 128)
          (Negf32Ty MTy :cost 64)
          (Addf64Ty MTy MTy :cost 128)
          (Addf32Ty MTy MTy :cost 64)
          (Subf64Ty MTy MTy :cost 128)
          (Subf32Ty MTy MTy :cost 64)
          (Mulf64Ty MTy MTy :cost 256)
          (Mulf32Ty MTy MTy :cost 128)
          (Divf64Ty MTy MTy :cost 640)
          (Divf32Ty MTy MTy :cost 320)
          (Eqf64Ty MTy MTy :cost 256)
          (Eqf32Ty MTy MTy :cost 128)
          (Neqf64Ty MTy MTy :cost 256)
          (Neqf32Ty MTy MTy :cost 128)
          (Gtf64Ty MTy MTy :cost 256)
          (Gtf32Ty MTy MTy :cost 128)
          (Ltf64Ty MTy MTy :cost 256)
          (Ltf32Ty MTy MTy :cost 128)
          (Gtef64Ty MTy MTy :cost 256)
          (Gtef32Ty MTy MTy :cost 128)
          (Ltef64Ty MTy MTy :cost 256)
          (Ltef32Ty MTy MTy :cost 128)
          (Acosf64Ty MTy :cost 6400)
          (Acoshf64Ty MTy :cost 6400)
          (Asinf64Ty MTy :cost 6400)
          (Asinhf64Ty MTy :cost 6400)
          (Atanf64Ty MTy :cost 6400)
          (Atan2f64Ty MTy MTy :cost 6400)
          (Atanhf64Ty MTy :cost 6400)
          (Cbrtf64Ty MTy :cost 6400)
          (Ceilf64Ty MTy :cost 6400)
          (Copysignf64Ty MTy MTy :cost 6400)
          (Cosf64Ty MTy :cost 6400)
          (Coshf64Ty MTy :cost 6400)
          (Erff64Ty MTy :cost 6400)
          (Expf64Ty MTy :cost 6400)
          (Exp2f64Ty MTy :cost 6400)
          (Fabsf64Ty MTy :cost 128)
          (Fdimf64Ty MTy MTy :cost 6400)
          (Floorf64Ty MTy :cost 6400)
          (Fmaxf64Ty MTy MTy :cost 6400)
          (Fminf64Ty MTy MTy :cost 6400)
          (Fmodf64Ty MTy MTy :cost 6400)
          (Lgammaf64Ty MTy :cost 6400)
          (Logf64Ty MTy :cost 6400)
          (Log10f64Ty MTy :cost 6400)
          (Log2f64Ty MTy :cost 6400)
          (Logbf64Ty MTy :cost 6400)
          (Powf64Ty MTy MTy :cost 6400)
          (Remainderf64Ty MTy MTy :cost 6400)
          (Rintf64Ty MTy :cost 6400)
          (Roundf64Ty MTy :cost 6400)
          (Sinf64Ty MTy :cost 6400)
          (Sinhf64Ty MTy :cost 6400)
          (Sqrtf64Ty MTy :cost 640)
          (Tanf64Ty MTy :cost 6400)
          (Tanhf64Ty MTy :cost 6400)
          (Tgammaf64Ty MTy :cost 6400)
          (Truncf64Ty MTy :cost 6400)
          (Acosf32Ty MTy :cost 3200)
          (Acoshf32Ty MTy :cost 3200)
          (Asinf32Ty MTy :cost 3200)
          (Asinhf32Ty MTy :cost 3200)
          (Atanf32Ty MTy :cost 3200)
          (Atan2f32Ty MTy MTy :cost 3200)
          (Atanhf32Ty MTy :cost 3200)
          (Cbrtf32Ty MTy :cost 3200)
          (Ceilf32Ty MTy :cost 3200)
          (Copysignf32Ty MTy MTy :cost 3200)
          (Cosf32Ty MTy :cost 3200)
          (Coshf32Ty MTy :cost 3200)
          (Erff32Ty MTy :cost 3200)
          (Expf32Ty MTy :cost 3200)
          (Exp2f32Ty MTy :cost 3200)
          (Fabsf32Ty MTy :cost 64)
          (Fdimf32Ty MTy MTy :cost 3200)
          (Floorf32Ty MTy :cost 3200)
          (Fmaxf32Ty MTy MTy :cost 3200)
          (Fminf32Ty MTy MTy :cost 3200)
          (Fmodf32Ty MTy MTy :cost 3200)
          (Lgammaf32Ty MTy :cost 3200)
          (Logf32Ty MTy :cost 3200)
          (Log10f32Ty MTy :cost 3200)
          (Log2f32Ty MTy :cost 3200)
          (Logbf32Ty MTy :cost 3200)
          (Powf32Ty MTy MTy :cost 3200)
          (Remainderf32Ty MTy MTy :cost 3200)
          (Rintf32Ty MTy :cost 3200)
          (Roundf32Ty MTy :cost 3200)
          (Sinf32Ty MTy :cost 3200)
          (Sinhf32Ty MTy :cost 3200)
          (Sqrtf32Ty MTy :cost 320)
          (Tanf32Ty MTy :cost 3200)
          (Tanhf32Ty MTy :cost 3200)
          (Tgammaf32Ty MTy :cost 3200)
          (Truncf32Ty MTy :cost 3200)
          (Erfcf64Ty MTy :cost 6400)
          (Expm1f64Ty MTy :cost 6400)
          (Log1pf64Ty MTy :cost 6400)
          (Hypotf64Ty MTy MTy :cost 6400)
          (Fmaf64Ty MTy MTy MTy :cost 256)
          (Erfcf32Ty MTy :cost 3200)
          (Expm1f32Ty MTy :cost 3200)
          (Log1pf32Ty MTy :cost 3200)
          (Hypotf32Ty MTy MTy :cost 3200)
          (Fmaf32Ty MTy MTy MTy :cost 128))
(function typed-id (M String) MTy)
(rule ((= e (True)))
      ((let t0 "bool") (let et0 (TrueTy)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (False)))
      ((let t0 "bool") (let et0 (FalseTy)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Not x)) (= tx (typed-id x "bool")))
      ((let t0 "bool") (let et0 (NotTy
                                 tx)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (And x y)) (= tx (typed-id x "bool")) (= ty (typed-id y "bool")))
      ((let t0 "bool") (let et0 (AndTy
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Or x y)) (= tx (typed-id x "bool")) (= ty (typed-id y "bool")))
      ((let t0 "bool") (let et0 (OrTy
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Pif64)))
      ((let t0 "binary64") (let et0 (Pif64Ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Pif32)))
      ((let t0 "binary32") (let et0 (Pif32Ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Ef64)))
      ((let t0 "binary64") (let et0 (Ef64Ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Ef32)))
      ((let t0 "binary32") (let et0 (Ef32Ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Infinityf64)))
      ((let t0 "binary64") (let et0 (Infinityf64Ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Infinityf32)))
      ((let t0 "binary32") (let et0 (Infinityf32Ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Nanf64)))
      ((let t0 "binary64") (let et0 (Nanf64Ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Nanf32)))
      ((let t0 "binary32") (let et0 (Nanf32Ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Negf64 x)) (= tx (typed-id x "binary64")))
      ((let t0 "binary64") (let et0 (Negf64Ty
                                     tx)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Negf32 x)) (= tx (typed-id x "binary32")))
      ((let t0 "binary32") (let et0 (Negf32Ty
                                     tx)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Addf64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "binary64") (let et0 (Addf64Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Addf32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "binary32") (let et0 (Addf32Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Subf64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "binary64") (let et0 (Subf64Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Subf32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "binary32") (let et0 (Subf32Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Mulf64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "binary64") (let et0 (Mulf64Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Mulf32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "binary32") (let et0 (Mulf32Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Divf64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "binary64") (let et0 (Divf64Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Divf32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "binary32") (let et0 (Divf32Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Eqf64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "bool") (let et0 (Eqf64Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Eqf32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "bool") (let et0 (Eqf32Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Neqf64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "bool") (let et0 (Neqf64Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Neqf32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "bool") (let et0 (Neqf32Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Gtf64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "bool") (let et0 (Gtf64Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Gtf32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "bool") (let et0 (Gtf32Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Ltf64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "bool") (let et0 (Ltf64Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Ltf32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "bool") (let et0 (Ltf32Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Gtef64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "bool") (let et0 (Gtef64Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Gtef32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "bool") (let et0 (Gtef32Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Ltef64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "bool") (let et0 (Ltef64Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Ltef32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "bool") (let et0 (Ltef32Ty
                                 tx
                                 ty)
                         )
                       (union (typed-id e t0) et0)))
(rule ((= e (Acosf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Acosf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Acoshf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Acoshf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Asinf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Asinf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Asinhf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Asinhf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Atanf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Atanf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Atan2f64 x0 x1)) (= tx0 (typed-id x0 "binary64")) (= tx1 (typed-id x1 "binary64")))
      ((let t0 "binary64") (let et0 (Atan2f64Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Atanhf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Atanhf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Cbrtf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Cbrtf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Ceilf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Ceilf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Copysignf64 x0 x1)) (= tx0 (typed-id x0 "binary64")) (= tx1 (typed-id x1 "binary64")))
      ((let t0 "binary64") (let et0 (Copysignf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Cosf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Cosf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Coshf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Coshf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Erff64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Erff64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Expf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Expf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Exp2f64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Exp2f64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fabsf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Fabsf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fdimf64 x0 x1)) (= tx0 (typed-id x0 "binary64")) (= tx1 (typed-id x1 "binary64")))
      ((let t0 "binary64") (let et0 (Fdimf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Floorf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Floorf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fmaxf64 x0 x1)) (= tx0 (typed-id x0 "binary64")) (= tx1 (typed-id x1 "binary64")))
      ((let t0 "binary64") (let et0 (Fmaxf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fminf64 x0 x1)) (= tx0 (typed-id x0 "binary64")) (= tx1 (typed-id x1 "binary64")))
      ((let t0 "binary64") (let et0 (Fminf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fmodf64 x0 x1)) (= tx0 (typed-id x0 "binary64")) (= tx1 (typed-id x1 "binary64")))
      ((let t0 "binary64") (let et0 (Fmodf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Lgammaf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Lgammaf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Logf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Logf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Log10f64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Log10f64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Log2f64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Log2f64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Logbf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Logbf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Powf64 x0 x1)) (= tx0 (typed-id x0 "binary64")) (= tx1 (typed-id x1 "binary64")))
      ((let t0 "binary64") (let et0 (Powf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Remainderf64 x0 x1)) (= tx0 (typed-id x0 "binary64")) (= tx1 (typed-id x1 "binary64")))
      ((let t0 "binary64") (let et0 (Remainderf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Rintf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Rintf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Roundf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Roundf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Sinf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Sinf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Sinhf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Sinhf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Sqrtf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Sqrtf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Tanf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Tanf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Tanhf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Tanhf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Tgammaf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Tgammaf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Truncf64 x0)) (= tx0 (typed-id x0 "binary64")))
      ((let t0 "binary64") (let et0 (Truncf64Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Acosf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Acosf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Acoshf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Acoshf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Asinf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Asinf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Asinhf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Asinhf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Atanf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Atanf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Atan2f32 x0 x1)) (= tx0 (typed-id x0 "binary32")) (= tx1 (typed-id x1 "binary32")))
      ((let t0 "binary32") (let et0 (Atan2f32Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Atanhf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Atanhf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Cbrtf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Cbrtf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Ceilf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Ceilf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Copysignf32 x0 x1)) (= tx0 (typed-id x0 "binary32")) (= tx1 (typed-id x1 "binary32")))
      ((let t0 "binary32") (let et0 (Copysignf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Cosf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Cosf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Coshf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Coshf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Erff32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Erff32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Expf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Expf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Exp2f32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Exp2f32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fabsf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Fabsf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fdimf32 x0 x1)) (= tx0 (typed-id x0 "binary32")) (= tx1 (typed-id x1 "binary32")))
      ((let t0 "binary32") (let et0 (Fdimf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Floorf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Floorf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fmaxf32 x0 x1)) (= tx0 (typed-id x0 "binary32")) (= tx1 (typed-id x1 "binary32")))
      ((let t0 "binary32") (let et0 (Fmaxf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fminf32 x0 x1)) (= tx0 (typed-id x0 "binary32")) (= tx1 (typed-id x1 "binary32")))
      ((let t0 "binary32") (let et0 (Fminf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fmodf32 x0 x1)) (= tx0 (typed-id x0 "binary32")) (= tx1 (typed-id x1 "binary32")))
      ((let t0 "binary32") (let et0 (Fmodf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Lgammaf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Lgammaf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Logf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Logf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Log10f32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Log10f32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Log2f32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Log2f32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Logbf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Logbf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Powf32 x0 x1)) (= tx0 (typed-id x0 "binary32")) (= tx1 (typed-id x1 "binary32")))
      ((let t0 "binary32") (let et0 (Powf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Remainderf32 x0 x1)) (= tx0 (typed-id x0 "binary32")) (= tx1 (typed-id x1 "binary32")))
      ((let t0 "binary32") (let et0 (Remainderf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Rintf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Rintf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Roundf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Roundf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Sinf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Sinf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Sinhf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Sinhf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Sqrtf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Sqrtf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Tanf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Tanf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Tanhf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Tanhf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Tgammaf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Tgammaf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Truncf32 x0)) (= tx0 (typed-id x0 "binary32")))
      ((let t0 "binary32") (let et0 (Truncf32Ty
                                     tx0)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Erfcf64 x)) (= tx (typed-id x "binary64")))
      ((let t0 "binary64") (let et0 (Erfcf64Ty
                                     tx)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Expm1f64 x)) (= tx (typed-id x "binary64")))
      ((let t0 "binary64") (let et0 (Expm1f64Ty
                                     tx)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Log1pf64 x)) (= tx (typed-id x "binary64")))
      ((let t0 "binary64") (let et0 (Log1pf64Ty
                                     tx)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Hypotf64 x y)) (= tx (typed-id x "binary64")) (= ty (typed-id y "binary64")))
      ((let t0 "binary64") (let et0 (Hypotf64Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fmaf64 x y z)) (= tx (typed-id x "binary64"))
                            (= ty (typed-id y "binary64"))
                            (= tz (typed-id z "binary64")))
      ((let t0 "binary64") (let et0 (Fmaf64Ty
                                     tx
                                     ty
                                     tz)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Erfcf32 x)) (= tx (typed-id x "binary32")))
      ((let t0 "binary32") (let et0 (Erfcf32Ty
                                     tx)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Expm1f32 x)) (= tx (typed-id x "binary32")))
      ((let t0 "binary32") (let et0 (Expm1f32Ty
                                     tx)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Log1pf32 x)) (= tx (typed-id x "binary32")))
      ((let t0 "binary32") (let et0 (Log1pf32Ty
                                     tx)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Hypotf32 x y)) (= tx (typed-id x "binary32")) (= ty (typed-id y "binary32")))
      ((let t0 "binary32") (let et0 (Hypotf32Ty
                                     tx
                                     ty)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Fmaf32 x y z)) (= tx (typed-id x "binary32"))
                            (= ty (typed-id y "binary32"))
                            (= tz (typed-id z "binary32")))
      ((let t0 "binary32") (let et0 (Fmaf32Ty
                                     tx
                                     ty
                                     tz)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (Num n)))
      ((let tx "binary32") (let etx (Numbinary32
                                     n)
                             )
                           (union (typed-id e tx) etx)))
(rule ((= e (Num n)))
      ((let tx "binary64") (let etx (Numbinary64
                                     n)
                             )
                           (union (typed-id e tx) etx)))
(rule ((= e (If ifc ift iff)) (= tifc (typed-id ifc "bool"))
                              (= tift (typed-id ift "binary32"))
                              (= tiff (typed-id iff "binary32")))
      ((let t0 "binary32") (let et0 (IfTy
                                     tifc
                                     tift
                                     tiff)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (If ifc ift iff)) (= tifc (typed-id ifc "bool"))
                              (= tift (typed-id ift "binary64"))
                              (= tiff (typed-id iff "binary64")))
      ((let t0 "binary64") (let et0 (IfTy
                                     tifc
                                     tift
                                     tiff)
                             )
                           (union (typed-id e t0) et0)))
(rule ((= e (If ifc ift iff)) (= tifc (typed-id ifc "bool"))
                              (= tift (typed-id ift "bool"))
                              (= tiff (typed-id iff "bool")))
      ((let t0 "bool") (let et0 (IfTy
                                 tifc
                                 tift
                                 tiff)
                         )
                       (union (typed-id e t0) et0)))

(rule ((= e (Var "x")))
      ((let ty "binary64") (let ety (Varbinary64
                                     "x")
                             )
                           (union (typed-id e ty) ety)))

(let e (Addf64
        [Var "x"]
        [Num (rational 1 1)])
  )
(run 10)
(extract (typed-id e "binary64"))
