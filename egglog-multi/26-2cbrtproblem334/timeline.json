[{"memory":[[15120,15120]],"time":0.049072265625,"type":"start"},{"compiler":[[15,11]],"memory":[[568192,568192]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":2.787109375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[17910512,387525840]],"mixsample":[[0.6650390625,"ival-cbrt",1600],[183.74560546875,"adjust",800],[4.357666015625,"ival-assert",0],[103.542236328125,"ival-sub",0],[15.64794921875,"ival-and",0],[0.054931640625,"ival-sub",400],[80.802001953125,"ival-cbrt",400],[156.06689453125,"const",0],[27.92431640625,"ival-cbrt",2000],[88.613037109375,"ival-cbrt",800],[30.9521484375,"adjust",2000],[57.469482421875,"ival-add",0],[0.119384765625,"ival-sub",800],[136.8388671875,"ival-cbrt",0],[5.712890625,"ival-add",2000],[27.101318359375,"ival-add",400],[29.85400390625,"ival->",0],[9.1484375,"exact",0],[25.84765625,"ival-add",800],[28.6982421875,"ival-<",0]],"outcomes":[[926.891845703125,1,"valid",6336],[353.02001953125,2,"valid",1654],[19.056640625,0,"valid",266]],"time":1684.871826171875,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[255,0,0,1]],"explanations":[["-.f64","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","cancellation",255,0,[],[[]]]],"fperrors":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",255,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(cbrt.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[255,0,0,0,0,1]],"memory":[[-4574672,46556656]],"mixsample":[[12.552001953125,"adjust",800],[4.208251953125,"ival-add",0],[0.353515625,"ival-add",2000],[11.636474609375,"ival-cbrt",0],[0.270263671875,"ival-assert",0],[7.703125,"ival-sub",0],[1.847412109375,"ival-add",400],[0.913330078125,"ival-true",0],[5.885498046875,"ival-cbrt",400],[2.069091796875,"ival-cbrt",2000],[1.81591796875,"ival-add",800],[6.927978515625,"ival-cbrt",800],[0.46923828125,"exact",0],[2.2294921875,"adjust",2000]],"outcomes":[[61.218994140625,1,"valid",384],[26.670654296875,2,"valid",106],[1.67822265625,0,"valid",22]],"time":165.297119140625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,7,0.000638579],[10,182,7,0.000892845],[9,174,7,0.001070242],[8,158,7,0.000930664],[7,109,7,0.000777923],[6,80,7,0.000763855],[5,48,7,0.000441058],[4,33,7,0.000240058],[3,25,7,0.000192146],[2,19,7,0.000139875],[1,15,7,0.000141657],[0,10,7,0.000171265],[0,6,7,9.4032e-5]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"memory":[[-7028224,14236016]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":165.555908203125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.072021484375,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","next",59.152946064706825,"binary64"]],"compiler":[[7,6]],"memory":[[311552,311552]],"time":0.47607421875,"type":"prune"},{"egraph":[[0,182,18,0.000932533],[10,182,18,0.000790328],[9,174,18,0.000995534],[8,158,18,0.000904496],[7,109,18,0.000761621],[6,80,18,0.000880752],[5,48,18,0.000436707],[4,33,18,0.000296676],[3,25,18,0.000245535],[2,19,18,0.000231717],[1,15,18,0.000118401],[0,10,18,0.000140712],[0,6,18,8.3601e-5]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(cbrt.f64 x)"]],"locations":[["(cbrt.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","cost-diff",0]],"memory":[[831696,831696]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 #s(literal 1 binary64) x)) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(cbrt.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","x","#s(literal 1 binary64)","(cbrt.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":13.593017578125,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","accuracy",0.07421875],["(cbrt.f64 x)","accuracy",0.07421875],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","accuracy",59.11702800265001]],"memory":[[3898144,11857680]],"mixsample":[[4.462890625,"adjust",800],[1.61474609375,"ival-add",0],[0.1376953125,"ival-add",2000],[3.737548828125,"ival-cbrt",0],[0.094970703125,"ival-assert",0],[2.7060546875,"ival-sub",0],[0.707763671875,"ival-add",400],[0.171630859375,"ival-true",0],[2.082763671875,"ival-cbrt",400],[0.752685546875,"ival-cbrt",2000],[0.610107421875,"ival-add",800],[2.3330078125,"ival-cbrt",800],[0.158203125,"exact",0],[0.753173828125,"adjust",2000]],"outcomes":[[23.3095703125,1,"valid",192],[9.20703125,2,"valid",53],[0.505615234375,0,"valid",11]],"time":41.821044921875,"type":"localize"},{"count":[[4,27]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(cbrt.f64 x)"]],"memory":[[-527424,7399552]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(+ 1 x)","(cbrt x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))"]],"series":[[7.197998046875,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","-inf"],[7.611083984375,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","inf"],[2.287109375,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","0"]],"time":17.73291015625,"type":"series"},{"count":[[27,26]],"egraph":[[0,8190,465,0.056936304],[4,6064,498,0.028928718],[3,2619,498,0.026156005],[2,902,501,0.009553378],[1,350,501,0.00276166],[0,146,539,0.001257817]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(+ 1 x)","(cbrt x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))"]],"memory":[[-1603104,28607280]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","1","#s(literal 1 binary64)","(+ 1 (* 1/3 x))","(fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(cbrt x)","(cbrt.f64 x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))) x)","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 11 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) #s(literal 5/81 binary64) (*.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (fma.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(*.f64 (neg.f64 x) (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal -1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (*.f64 (/.f64 #s(literal -5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))))"]],"stop":[["iter limit",1],["node limit",1]],"time":204.95703125,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(cbrt.f64 x)"]],"memory":[[288912,12590016]],"outputs":[["(neg.f64 (+.f64 (+.f64 x #s(literal -1 binary64)) x))","(+.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 x (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (+.f64 x x))","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(+.f64 (-.f64 x (+.f64 x x)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) x)","(+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 x x))","(+.f64 (+.f64 (+.f64 x x) x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (+.f64 x x)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 x x) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(neg.f64 (+.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x x))","(+.f64 (+.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 (+.f64 x x) x) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (+.f64 x x)))","(+.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 (+.f64 x x) x) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) x)","(-.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x x))","(-.f64 (+.f64 x x) (+.f64 x #s(literal -1 binary64)))","(neg.f64 (+.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x x))","(+.f64 (+.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 (+.f64 x x) x) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (+.f64 x x)))","(+.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 (+.f64 x x) x) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) x)","(-.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x x))","(-.f64 (+.f64 x x) (+.f64 x #s(literal -1 binary64)))","x","(neg.f64 (neg.f64 x))","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) x)","(*.f64 #s(literal -1 binary64) (neg.f64 x))","(*.f64 x (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) x)","(*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 2 binary64))))","(*.f64 (pow.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/3 binary64) #s(literal 2 binary64))) x)","(*.f64 x (pow.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/3 binary64) #s(literal 2 binary64))))","(*.f64 (pow.f64 x (/.f64 (/.f64 #s(literal 3 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 x (/.f64 (/.f64 #s(literal 3 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))))","(*.f64 (pow.f64 x (/.f64 (/.f64 #s(literal 1/3 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 x (/.f64 (/.f64 #s(literal 1/3 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))))"]],"time":248.781982421875,"type":"rewrite"},{"compiler":[[1084,254]],"memory":[[-600640,7132144]],"time":10.050048828125,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",59.152946064706825,"binary64"],["(+.f64 (+.f64 x x) #s(literal 1 binary64))","next",61.28402331663459,"binary64"],["(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","next",60.974704546291065,"binary64"],["(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","fresh",59.970963499915335,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","next",61.91768381171091,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","fresh",61.26008122792737,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x)))","fresh",59.314867552800536,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","next",48.64855530632279,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","fresh",48.89972646268102,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","fresh",48.548102094855544,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","next",32.23568464397141,"binary64"]],"compiler":[[7,6],[5,4],[6,5],[6,5],[21,16],[15,12],[64,47],[30,23],[22,17],[38,29],[16,13],[5,4],[6,5],[6,5],[21,16],[15,12],[64,47],[30,23],[22,17],[38,29],[16,13]],"count":[[71,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[70,10],"picked":[1,1]}],"memory":[[-695552,7602448]],"min-error":[[30.608154795376294,"binary64"]],"time":10.366943359375,"type":"prune"},{"egraph":[[0,8023,232,0.065532111],[13,7875,233,0.014427131],[12,6732,233,0.040175973],[11,5580,233,0.032250915],[10,5377,233,0.01792134],[9,5233,233,0.016330198],[8,4940,233,0.017648383],[7,4581,233,0.015695367],[6,3490,233,0.016484652],[5,1748,233,0.015409479],[4,677,233,0.00641602],[3,309,233,0.00208461],[2,148,233,0.001291518],[1,96,233,0.000724191],[0,60,233,0.000579905],[0,34,238,0.000366214]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/3 binary64)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 x x)","x","#s(literal 1 binary64)","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(neg.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64))","(fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64))","#s(literal 5/81 binary64)","x","#s(literal -1/9 binary64)","#s(literal 1/3 binary64)","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","#s(literal 1 binary64)","(cbrt.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal 5/81 binary64)","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","#s(literal -1/9 binary64)","(cbrt.f64 x)","(*.f64 x x)"]],"locations":[["(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","cost-diff",0],["(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","cost-diff",0],["(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","cost-diff",0],["(fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","cost-diff",0],["(neg.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","cost-diff",5],["(+.f64 x x)","cost-diff",0],["(+.f64 (+.f64 x x) #s(literal 1 binary64))","cost-diff",1],["(/.f64 (/.f64 #s(literal 1 binary64) x) x)","cost-diff",0],["(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","cost-diff",0],["(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","cost-diff",0]],"memory":[[5904976,28116016]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/3 binary64)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(fma.f64 #s(literal 2 binary64) x #s(literal 1 binary64))","(+.f64 x x)","(*.f64 #s(literal 2 binary64) x)","x","#s(literal 1 binary64)","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(neg.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64))","(fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64))","#s(literal 5/81 binary64)","x","#s(literal -1/9 binary64)","#s(literal 1/3 binary64)","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","#s(literal 1 binary64)","(cbrt.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 #s(literal 5/81 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 #s(literal 5/81 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 #s(literal 5/81 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(fma.f64 #s(literal 5/81 binary64) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 x) #s(literal -1/9 binary64)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal 5/81 binary64)","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","(*.f64 (cbrt.f64 x) #s(literal -1/9 binary64))","#s(literal -1/9 binary64)","(cbrt.f64 x)","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":343.590087890625,"type":"simplify"},{"compiler":[[205,36]],"locations":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","accuracy",0.4270826064684252],["(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","accuracy",30.604833638307927],["(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","accuracy",31.23499729566687],["(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","accuracy",32.76352072940114],["(cbrt.f64 x)","accuracy",0.07421875],["(fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64))","accuracy",0.13671875],["(fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64))","accuracy",0.39453125],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","accuracy",61.91768381171091],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","accuracy",58.12367852788599],["(+.f64 (+.f64 x x) #s(literal 1 binary64))","accuracy",0.0],["(+.f64 x x)","accuracy",0.0],["(/.f64 (/.f64 #s(literal 1 binary64) x) x)","accuracy",0.12109375],["(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","accuracy",0.3515625],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","accuracy",1.5532827198467805],["(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","accuracy",30.604833638307927]],"memory":[[113728,60051056]],"mixsample":[[0.7822265625,"ival-add",1200],[8.478271484375,"ival-div",0],[21.89453125,"adjust",800],[0.135498046875,"ival-assert",0],[5.764404296875,"ival-sub",0],[2.410888671875,"ival-cbrt",400],[20.081298828125,"const",0],[0.885498046875,"ival-cbrt",2000],[3.010986328125,"ival-cbrt",800],[4.50537109375,"adjust",2000],[12.046875,"ival-pow",0],[20.083251953125,"ival-add",0],[0.03857421875,"ival-add",1600],[25.15673828125,"ival-mult",0],[11.439208984375,"ival-cbrt",0],[0.158203125,"ival-add",400],[0.285400390625,"ival-true",0],[0.813232421875,"ival-add",800],[0.38671875,"exact",0],[1.326171875,"ival-neg",0]],"outcomes":[[132.47119140625,1,"valid",192],[53.197998046875,2,"valid",53],[3.722900390625,0,"valid",11]],"time":268.27783203125,"type":"localize"},{"count":[[18,59]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 x x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 x #s(literal 1 binary64))","(neg.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64))","(fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(cbrt.f64 x)"]],"memory":[[-325200,15459952]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(/ 1 (pow x 2))","1","(+ 1 (* 2 x))","(* 2 x)","(+ 1 x)","(* -1 x)","1/3","(+ 1/3 (* -1/9 x))","(+ 1/3 (* x (- (* 5/81 x) 1/9)))","-1/9","(- (* 5/81 x) 1/9)","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(cbrt (pow x 4))","(cbrt x)","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ 2 (/ 1 x)))","x","(* x (+ 1 (/ 1 x)))","(* 5/81 (pow x 3))","(* (pow x 3) (- 5/81 (* 1/9 (/ 1 x))))","(* (pow x 3) (- (+ 5/81 (/ 1/3 (pow x 2))) (+ (cbrt (/ 1 (pow x 8))) (* 1/9 (/ 1 x)))))","(* (pow x 3) (- (+ 5/81 (+ (/ 1/3 (pow x 2)) (/ 1 (pow x 3)))) (+ (cbrt (/ 1 (pow x 8))) (* 1/9 (/ 1 x)))))","(* 5/81 (pow x 2))","(* (pow x 2) (- 5/81 (* 1/9 (/ 1 x))))","(* (pow x 2) (- (+ 5/81 (/ 1/3 (pow x 2))) (* 1/9 (/ 1 x))))","(* 5/81 x)","(* x (- 5/81 (* 1/9 (/ 1 x))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (pow x 3) (- (* 1/9 (/ 1 x)) 5/81)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (+ (* (cbrt (/ 1 (pow x 5))) (cbrt -1)) (* 1/3 (/ 1 x))) 1/9) x)) 5/81)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (+ (* (cbrt (/ 1 (pow x 5))) (cbrt -1)) (+ (* 1/3 (/ 1 x)) (/ 1 (pow x 2)))) 1/9) x)) 5/81)))","(* (pow x 2) (+ 5/81 (* -1 (/ (- 1/9 (* 1/3 (/ 1 x))) x))))","(* -1 (* x (- (* 1/9 (/ 1 x)) 5/81)))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* -1 (* (cbrt x) (cbrt -1)))"]],"series":[[8.365966796875,"((- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (+ (+ x x) 1) (+ x x) (+ (+ x 1) (neg x)) (+ x 1) (neg x) (- (cbrt (+ x 1)) (cbrt x)) (+ (* (+ (* (+ (* 5/81 x) -1/9) x) 1/3) x) (- 1 (cbrt x))) (+ (* (+ (* 5/81 x) -1/9) x) 1/3) (+ (* 5/81 x) -1/9) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (cbrt (pow x 4)) (cbrt x))","x","-inf"],[9.93701171875,"((- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (+ (+ x x) 1) (+ x x) (+ (+ x 1) (neg x)) (+ x 1) (neg x) (- (cbrt (+ x 1)) (cbrt x)) (+ (* (+ (* (+ (* 5/81 x) -1/9) x) 1/3) x) (- 1 (cbrt x))) (+ (* (+ (* 5/81 x) -1/9) x) 1/3) (+ (* 5/81 x) -1/9) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (cbrt (pow x 4)) (cbrt x))","x","inf"],[8.864013671875,"((- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (+ (+ x x) 1) (+ x x) (+ (+ x 1) (neg x)) (+ x 1) (neg x) (- (cbrt (+ x 1)) (cbrt x)) (+ (* (+ (* (+ (* 5/81 x) -1/9) x) 1/3) x) (- 1 (cbrt x))) (+ (* (+ (* 5/81 x) -1/9) x) 1/3) (+ (* 5/81 x) -1/9) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (cbrt (pow x 4)) (cbrt x))","x","0"]],"time":28.47412109375,"type":"series"},{"count":[[59,58]],"egraph":[[0,8170,731,0.08195263],[3,4027,783,0.031328],[2,1316,795,0.015713902],[1,488,809,0.004150266],[0,192,834,0.001678949]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(/ 1 (pow x 2))","1","(+ 1 (* 2 x))","(* 2 x)","(+ 1 x)","(* -1 x)","1/3","(+ 1/3 (* -1/9 x))","(+ 1/3 (* x (- (* 5/81 x) 1/9)))","-1/9","(- (* 5/81 x) 1/9)","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(cbrt (pow x 4))","(cbrt x)","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ 2 (/ 1 x)))","x","(* x (+ 1 (/ 1 x)))","(* 5/81 (pow x 3))","(* (pow x 3) (- 5/81 (* 1/9 (/ 1 x))))","(* (pow x 3) (- (+ 5/81 (/ 1/3 (pow x 2))) (+ (cbrt (/ 1 (pow x 8))) (* 1/9 (/ 1 x)))))","(* (pow x 3) (- (+ 5/81 (+ (/ 1/3 (pow x 2)) (/ 1 (pow x 3)))) (+ (cbrt (/ 1 (pow x 8))) (* 1/9 (/ 1 x)))))","(* 5/81 (pow x 2))","(* (pow x 2) (- 5/81 (* 1/9 (/ 1 x))))","(* (pow x 2) (- (+ 5/81 (/ 1/3 (pow x 2))) (* 1/9 (/ 1 x))))","(* 5/81 x)","(* x (- 5/81 (* 1/9 (/ 1 x))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (pow x 3) (- (* 1/9 (/ 1 x)) 5/81)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (+ (* (cbrt (/ 1 (pow x 5))) (cbrt -1)) (* 1/3 (/ 1 x))) 1/9) x)) 5/81)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (+ (* (cbrt (/ 1 (pow x 5))) (cbrt -1)) (+ (* 1/3 (/ 1 x)) (/ 1 (pow x 2)))) 1/9) x)) 5/81)))","(* (pow x 2) (+ 5/81 (* -1 (/ (- 1/9 (* 1/3 (/ 1 x))) x))))","(* -1 (* x (- (* 1/9 (/ 1 x)) 5/81)))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* -1 (* (cbrt x) (cbrt -1)))"]],"memory":[[3241088,40221344]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(cbrt (/ 1 (pow x 2)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","1","#s(literal 1 binary64)","(+ 1 (* 2 x))","(fma.f64 #s(literal 2 binary64) x #s(literal 1 binary64))","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(* -1 x)","(neg.f64 x)","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -1/9 x))","(fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64))","(+ 1/3 (* x (- (* 5/81 x) 1/9)))","(fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64))","-1/9","#s(literal -1/9 binary64)","(- (* 5/81 x) 1/9)","(fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal -1/9 binary64) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) x)","(cbrt (pow x 4))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(cbrt x)","(cbrt.f64 x)","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(* x (+ 2 (/ 1 x)))","(fma.f64 #s(literal 2 binary64) x #s(literal 1 binary64))","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* 5/81 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 5/81 binary64))","(* (pow x 3) (- 5/81 (* 1/9 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) (*.f64 x x))","(* (pow x 3) (- (+ 5/81 (/ 1/3 (pow x 2))) (+ (cbrt (/ 1 (pow x 8))) (* 1/9 (/ 1 x)))))","(*.f64 (-.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/9 binary64)) x) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64))))) #s(literal -5/81 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (+ 5/81 (+ (/ 1/3 (pow x 2)) (/ 1 (pow x 3)))) (+ (cbrt (/ 1 (pow x 8))) (* 1/9 (/ 1 x)))))","(fma.f64 (-.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/9 binary64)) x) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64))))) #s(literal -5/81 binary64)) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(* 5/81 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 5/81 binary64))","(* (pow x 2) (- 5/81 (* 1/9 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x)","(* (pow x 2) (- (+ 5/81 (/ 1/3 (pow x 2))) (* 1/9 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 5/81 binary64) x (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/9 binary64))) x)","(* 5/81 x)","(*.f64 #s(literal 5/81 binary64) x)","(* x (- 5/81 (* 1/9 (/ 1 x))))","(fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))))","(* 1/3 (cbrt (pow x 4)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))) (*.f64 x x))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(* -1 (* (pow x 3) (- (* 1/9 (/ 1 x)) 5/81)))","(*.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) (*.f64 x x))","(* -1 (* (pow x 3) (- (* -1 (/ (- (+ (* (cbrt (/ 1 (pow x 5))) (cbrt -1)) (* 1/3 (/ 1 x))) 1/9) x)) 5/81)))","(*.f64 (-.f64 (/.f64 (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/9 binary64))) x) #s(literal -5/81 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (+ (* (cbrt (/ 1 (pow x 5))) (cbrt -1)) (+ (* 1/3 (/ 1 x)) (/ 1 (pow x 2)))) 1/9) x)) 5/81)))","(*.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (/.f64 #s(literal 1/3 binary64) x)) (-.f64 #s(literal 1/9 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x) #s(literal -5/81 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ 5/81 (* -1 (/ (- 1/9 (* 1/3 (/ 1 x))) x))))","(*.f64 (fma.f64 #s(literal 5/81 binary64) x (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/9 binary64))) x)","(* -1 (* x (- (* 1/9 (/ 1 x)) 5/81)))","(fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))) x))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)","(* -1 (* (cbrt x) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":225.745849609375,"type":"simplify"},{"count":[[18,228]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 x x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 x #s(literal 1 binary64))","(neg.f64 x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64))","(fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","(/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(cbrt.f64 x)"]],"memory":[[-2245984,17438080]],"outputs":[["#s(approx 1/3 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(approx 1/3 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(approx 1/3 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 5/81 binary64)","#s(literal -1/9 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 2/3 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -4/3 binary64)"]],"time":519.277099609375,"type":"rewrite"},{"compiler":[[2082,338]],"memory":[[-1032576,6843904]],"time":9.89208984375,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",59.152946064706825,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x)))","fresh",59.314867552800536,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",48.64855530632279,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","fresh",48.89972646268102,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","fresh",48.548102094855544,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","fresh",48.65866271166446,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","next",32.863591623706114,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","fresh",34.60078263679033,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))) (*.f64 x x)))","fresh",49.75132794868475,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","done",32.23568464397141,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","next",33.872527864691314,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","next",33.01768403680533,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","next",48.93630946991212,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 1/3 binary64))","fresh",59.942788208615895,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","fresh",59.91704740237216,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","next",61.34900794179004,"binary64"]],"compiler":[[7,6],[64,47],[30,22],[22,17],[38,28],[50,36],[64,42],[53,36],[39,29],[16,13],[22,16],[49,36],[52,38],[9,8],[9,8],[9,8],[64,47],[30,22],[22,17],[38,28],[50,36],[64,42],[53,36],[39,29],[22,16],[49,36],[52,38],[9,8],[9,8],[9,8]],"count":[[83,16]],"kept":[{"done":[1,1],"fresh":[5,1],"new":[72,13],"picked":[5,1]}],"memory":[[1275360,9614768]],"min-error":[[30.522728179847597,"binary64"]],"time":14.968017578125,"type":"prune"},{"egraph":[[0,8050,653,0.123899284],[13,5836,680,0.023342249],[12,2424,680,0.02615024],[11,1190,680,0.012660886],[10,804,680,0.007340117],[9,628,680,0.003992595],[8,570,680,0.003349355],[7,493,680,0.002515416],[6,448,680,0.002649778],[5,416,680,0.002100316],[4,354,680,0.001769004],[3,297,680,0.001858364],[2,217,680,0.002225845],[1,146,705,0.001060864],[0,96,705,0.000896732],[0,63,705,0.00064569]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x))","(*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)","(fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))))","(*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","x","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","(fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(cbrt.f64 #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1/9 binary64)","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","#s(literal 5/81 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64))","(cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","#s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 5 binary64))","x","#s(literal 5 binary64)","#s(literal -1/9 binary64)","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))","(cbrt.f64 x)","(fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))","#s(literal -1/9 binary64)","#s(literal 5/81 binary64)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)"]],"locations":[["(fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))))","cost-diff",0],["#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","cost-diff",0],["(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","cost-diff",1],["(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","cost-diff",0],["(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","cost-diff",0],["#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","cost-diff",0],["#s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","cost-diff",0],["(cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","cost-diff",0],["(*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","cost-diff",0],["#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x))","cost-diff",0],["(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","cost-diff",0],["(fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))))","cost-diff",7]],"memory":[[-16099776,53535472]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) x)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))) x)) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) x)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))) x)) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) x)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))) x))","(*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) x)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))) x)","(fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))))","(fma.f64 (fma.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) x)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))","(*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x)","x","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","#s(literal 1 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","(fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))","(fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","(cbrt.f64 #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1/9 binary64)","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","#s(literal 5/81 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 (/.f64 #s(literal 1 binary64) x) x))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 (/.f64 #s(literal 1 binary64) x) x))) #s(literal 1/3 binary64))","(cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","#s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","#s(approx (/ (/ 1 x) x) (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","#s(literal 1 binary64)","(*.f64 x x)","x","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 5 binary64))","x","#s(literal 5 binary64)","#s(literal -1/9 binary64)","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (/.f64 #s(literal -5/81 binary64) x)))) x) x)))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (/.f64 #s(literal -5/81 binary64) x)))) x) x))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 x) (-.f64 #s(literal -1/9 binary64) (/.f64 #s(literal -5/81 binary64) x)))) x) x)","(fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)) (cbrt.f64 x)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/3 binary64)","(*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))","(*.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)) (cbrt.f64 x))","(cbrt.f64 x)","(fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))","#s(literal -1/9 binary64)","#s(literal 5/81 binary64)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":448.406005859375,"type":"simplify"},{"compiler":[[439,54]],"locations":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","accuracy",0.4270826064684252],["(fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))))","accuracy",12.085937500000002],["(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","accuracy",31.23499729566687],["(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","accuracy",43.26200554768437],["#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))))","accuracy",0.6844313344393438],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",1.2595935482459955],["(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","accuracy",24.67777022380535],["(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","accuracy",30.604833638307927],["(*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64))","accuracy",0.3515625],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",1.2595935482459955],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","accuracy",1.5532827198467805],["(cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","accuracy",30.604833638307927],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","accuracy",61.34900794179004],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",1.2595935482459955],["(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","accuracy",24.67777022380535],["(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","accuracy",30.604833638307927],["(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x))","accuracy",32.76352072940114]],"memory":[[-3991648,86235568]],"mixsample":[[16.748291015625,"ival-div",0],[24.91845703125,"adjust",800],[0.140869140625,"ival-assert",0],[3.17236328125,"ival-sub",0],[2.6708984375,"ival-cbrt",400],[24.30029296875,"const",0],[0.98486328125,"ival-cbrt",2000],[3.162109375,"ival-cbrt",800],[4.97705078125,"adjust",2000],[22.94091796875,"ival-pow",0],[20.494140625,"ival-add",0],[46.75244140625,"ival-mult",0],[18.349609375,"ival-cbrt",0],[0.203857421875,"ival-add",2000],[1.19287109375,"ival-add",400],[0.35009765625,"ival-true",0],[1.266845703125,"exact",0],[1.030517578125,"ival-add",800]],"outcomes":[[185.7001953125,1,"valid",192],[68.0791015625,2,"valid",53],[5.2744140625,0,"valid",11]],"time":315.828857421875,"type":"localize"},{"count":[[20,50]],"inputs":[["(fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64))","(cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","#s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64))))","(fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))"]],"memory":[[1006272,17675040]],"outputs":[["(* 5/81 (cbrt (/ 1 (pow x 5))))","(/ (+ (* 5/81 (cbrt x)) (* 1/9 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 2))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(/ 1 (pow x 2))","(* -1/9 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(cbrt (/ 1 (pow x 5)))","(* 5/81 (cbrt x))","(+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x)))","(+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))))","(cbrt (pow x 4))","(* 1/3 (cbrt x))","(* x (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (cbrt (pow x 7)))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* -1 (* x (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* -1 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* -1 (* (pow x 3) (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))"]],"series":[[8.385986328125,"((+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (- (cbrt (+ x 1)) (cbrt x)) (- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (/ 1 (pow x 5))) -1/9) (* (cbrt (/ 1 (* x x))) 1/3)) (cbrt (/ 1 (pow x 5))) (/ (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (pow x 3)) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (cbrt (/ 1 (* x x))) (/ 1 (* x x)) (cbrt (pow x 4)))","x","-inf"],[6.781982421875,"((+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (- (cbrt (+ x 1)) (cbrt x)) (- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (/ 1 (pow x 5))) -1/9) (* (cbrt (/ 1 (* x x))) 1/3)) (cbrt (/ 1 (pow x 5))) (/ (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (pow x 3)) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (cbrt (/ 1 (* x x))) (/ 1 (* x x)) (cbrt (pow x 4)))","x","inf"],[5.864013671875,"((+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (- (cbrt (+ x 1)) (cbrt x)) (- (cbrt (+ x 1)) (cbrt x)) (* (cbrt (/ (/ 1 x) x)) 1/3) (cbrt (/ (/ 1 x) x)) (/ (/ 1 x) x) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (/ 1 (pow x 5))) -1/9) (* (cbrt (/ 1 (* x x))) 1/3)) (cbrt (/ 1 (pow x 5))) (/ (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (pow x 3)) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (cbrt (/ 1 (* x x))) (/ 1 (* x x)) (cbrt (pow x 4)))","x","0"]],"time":22.751953125,"type":"series"},{"count":[[50,50]],"egraph":[[0,8349,874,0.068854843],[4,6590,930,0.026889724],[3,3458,932,0.023864963],[2,1327,938,0.011843768],[1,459,941,0.00378496],[0,178,978,0.001442047]],"inputs":[["(* 5/81 (cbrt (/ 1 (pow x 5))))","(/ (+ (* 5/81 (cbrt x)) (* 1/9 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 2))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(cbrt (/ 1 (pow x 2)))","(/ 1 (pow x 2))","(* -1/9 (cbrt (/ 1 (pow x 5))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(cbrt (/ 1 (pow x 5)))","(* 5/81 (cbrt x))","(+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x)))","(+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))))","(cbrt (pow x 4))","(* 1/3 (cbrt x))","(* x (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (cbrt (pow x 7)))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* -1 (* x (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* -1 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* -1 (* (pow x 3) (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))"]],"memory":[[6461264,36270736]],"method":["egg-herbie"],"outputs":[["(* 5/81 (cbrt (/ 1 (pow x 5))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* 5/81 (cbrt x)) (* 1/9 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 2))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 (cbrt.f64 x) (fma.f64 (*.f64 #s(literal 1/9 binary64) x) (cbrt.f64 #s(literal -1 binary64)) #s(literal 5/81 binary64)))) (*.f64 x x))","(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/.f64 (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/.f64 (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(cbrt (/ 1 (pow x 2)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(* -1/9 (cbrt (/ 1 (pow x 5))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(cbrt (/ 1 (pow x 5)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(* 5/81 (cbrt x))","(*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))","(+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x)))","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x)))","(+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))))","(fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))))","(cbrt (pow x 4))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))","(* 1/3 (cbrt x))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(* x (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) x)","(* x (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64)))) x)","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -10/243 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))))","(* 1/3 (cbrt (pow x 4)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))) (*.f64 x x))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))) (*.f64 x x))","(* 1/3 (cbrt (pow x 7)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(fma.f64 (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) x) #s(literal 1/3 binary64) (*.f64 (fma.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/9 binary64))) (cbrt.f64 #s(literal -1 binary64))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))) x))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) x) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)","(* -1 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/9 binary64))) (/.f64 (cbrt.f64 #s(literal -1 binary64)) x) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 1/9 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (fma.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/9 binary64))) (/.f64 (cbrt.f64 #s(literal -1 binary64)) x) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":219.68798828125,"type":"simplify"},{"count":[[20,132]],"inputs":[["(fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64))","(cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","#s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64))))","(fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(cbrt.f64 (pow.f64 x #s(literal 4 binary64)))"]],"memory":[[-1324624,17710160]],"outputs":[["x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","(/.f64 x x)","(cbrt.f64 x)","#s(approx x (/.f64 #s(approx x x) x))","(/.f64 #s(approx x x) x)","#s(approx x x)","#s(approx x #s(literal 1 binary64))","#s(approx x (*.f64 (cbrt.f64 #s(approx x x)) #s(literal 1 binary64)))","(*.f64 (cbrt.f64 #s(approx x x)) #s(literal 1 binary64))","(cbrt.f64 #s(approx x x))","#s(approx x x)","#s(approx x #s(approx x x))","#s(approx x x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","(/.f64 x x)","(cbrt.f64 x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","(/.f64 x x)","(cbrt.f64 x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","(/.f64 x x)","(cbrt.f64 x)","#s(approx x #s(approx x x))","#s(approx x x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","(/.f64 x x)","(cbrt.f64 x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","(/.f64 x x)","(cbrt.f64 x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","(/.f64 x x)","(cbrt.f64 x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","(/.f64 x x)","(cbrt.f64 x)"]],"time":899.217041015625,"type":"rewrite"},{"compiler":[[3489,433]],"memory":[[-1148432,6769680]],"time":12.7099609375,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",59.152946064706825,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",48.64855530632279,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","fresh",48.89972646268102,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 #s(literal -10/243 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","fresh",48.548102094855544,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","fresh",48.660937825859676,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","next",34.60078263679033,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 x x)))","fresh",61.56975107050094,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))) (*.f64 x x)))","fresh",49.75132794868475,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","next",34.730001419051014,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","next",59.48048330875692,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","done",32.23568464397141,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","done",33.872527864691314,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","done",33.01768403680533,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","done",48.93630946991212,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","next",55.79865733940404,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 1/3 binary64))","fresh",59.942788208615895,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","next",59.91704740237216,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","done",61.34900794179004,"binary64"]],"compiler":[[7,6],[30,22],[22,17],[38,28],[50,36],[53,36],[38,27],[39,29],[71,46],[15,10],[16,13],[22,16],[49,36],[52,38],[61,38],[9,8],[9,8],[9,8],[30,22],[22,17],[38,28],[50,36],[53,36],[38,27],[39,29],[71,46],[15,10],[61,38],[9,8],[9,8]],"count":[[90,18]],"kept":[{"done":[2,2],"fresh":[9,6],"new":[74,6],"picked":[5,4]}],"memory":[[811728,9144288]],"min-error":[[30.499290679847597,"binary64"]],"time":12.882080078125,"type":"prune"},{"egraph":[[0,8005,650,0.039911703],[17,7868,684,0.020313211],[16,7450,684,0.027738272],[15,6998,684,0.026827591],[14,5265,684,0.033912687],[13,2838,684,0.031128856],[12,1601,684,0.014505871],[11,1124,684,0.015414312],[10,764,684,0.008417911],[9,566,684,0.004422002],[8,504,684,0.0034607],[7,428,684,0.004091383],[6,379,684,0.002710048],[5,347,684,0.002461737],[4,325,684,0.001953729],[3,285,684,0.001574382],[2,226,684,0.001403259],[1,158,719,0.001127663],[0,100,719,0.000867308],[0,76,719,0.000540698]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x)))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 5 binary64))","x","#s(literal 5 binary64)","#s(literal -1/9 binary64)","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(literal 5/81 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","(/.f64 #s(approx x x) (*.f64 x x))","#s(approx x x)","x","(*.f64 x x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","(*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","#s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","#s(literal 1/3 binary64)","(cbrt.f64 x)","x","(*.f64 x x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))","#s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))","(cbrt.f64 (pow.f64 x #s(literal 7 binary64)))","(pow.f64 x #s(literal 7 binary64))","x","#s(literal 7 binary64)","#s(literal 1/3 binary64)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)"]],"locations":[["#s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64)))","cost-diff",0],["(/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))","cost-diff",0],["#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","cost-diff",0],["(*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","cost-diff",0],["#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","cost-diff",0],["(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["#s(approx x x)","cost-diff",0],["(/.f64 #s(approx x x) (*.f64 x x))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","cost-diff",0],["(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","cost-diff",0],["#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x)))","cost-diff",0],["(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x))","cost-diff",0],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","cost-diff",0]],"memory":[[3042400,19492352]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x)))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (*.f64 x x)))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (*.f64 x x))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 5 binary64))","x","#s(literal 5 binary64)","#s(literal -1/9 binary64)","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(literal 5/81 binary64)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","(/.f64 #s(approx x x) (*.f64 x x))","#s(approx x x)","x","(*.f64 x x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","(*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","#s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","#s(literal 1/3 binary64)","(cbrt.f64 x)","x","(*.f64 x x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))","#s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))","(cbrt.f64 (pow.f64 x #s(literal 7 binary64)))","(pow.f64 x #s(literal 7 binary64))","x","#s(literal 7 binary64)","#s(literal 1/3 binary64)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":307.7939453125,"type":"simplify"},{"compiler":[[372,59]],"locations":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","accuracy",0.4270826064684252],["#s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64)))","accuracy",1.5441673876831823],["(cbrt.f64 (pow.f64 x #s(literal 7 binary64)))","accuracy",16.1064406842893],["(/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))","accuracy",43.26200554768437],["(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","accuracy",0.390625],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","accuracy",0.4270826064684252],["#s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","accuracy",1.5519657448950097],["(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x))","accuracy",32.76352072940114],["(*.f64 x x)","accuracy",0.0],["#s(approx x x)","accuracy",0.0],["(/.f64 #s(approx x x) (*.f64 x x))","accuracy",31.606543614119726],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","accuracy",58.905032478218104],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","accuracy",59.91704740237216],["(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","accuracy",17.306775220997896],["(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","accuracy",24.67777022380535],["(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","accuracy",30.604833638307927],["(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x))","accuracy",32.76352072940114]],"memory":[[-1021904,82601200]],"mixsample":[[72.396484375,"ival-div",0],[23.98193359375,"adjust",800],[0.121826171875,"ival-assert",0],[4.20654296875,"ival-sub",0],[2.4453125,"ival-cbrt",400],[24.344970703125,"const",0],[0.833740234375,"ival-cbrt",2000],[2.81201171875,"ival-cbrt",800],[4.667236328125,"adjust",2000],[24.098388671875,"ival-pow",0],[16.80859375,"ival-add",0],[49.846435546875,"ival-mult",0],[19.08935546875,"ival-cbrt",0],[0.18896484375,"ival-add",2000],[0.8876953125,"ival-add",400],[0.33740234375,"ival-true",0],[0.81494140625,"exact",0],[0.84375,"ival-add",800]],"outcomes":[[230.2548828125,1,"valid",192],[57.546630859375,2,"valid",53],[5.166015625,0,"valid",11]],"time":351.152099609375,"type":"localize"},{"count":[[22,59]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x)))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","(/.f64 #s(approx x x) (*.f64 x x))","#s(approx x x)","(*.f64 x x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","(*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))","#s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","#s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(cbrt.f64 (pow.f64 x #s(literal 7 binary64)))"]],"memory":[[-5258432,21511360]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(* -1/9 (cbrt x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(/ 1 x)","x","(pow x 2)","(/ (+ (* 5/81 (cbrt x)) (* 1/9 (* (cbrt (pow x 4)) (cbrt -1)))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (cbrt (pow x 4)))))) x)","(* 5/81 (cbrt x))","(+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x)))","(+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))))","(cbrt (/ 1 (pow x 2)))","(cbrt (/ 1 (pow x 5)))","(* 5/81 (cbrt (/ 1 (pow x 5))))","(/ (+ (* 5/81 (cbrt x)) (* 1/9 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 2))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 1/3 (cbrt x))","(cbrt (pow x 7))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (cbrt (pow x 7)))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* x (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* -1 (* (pow x 3) (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(* -1 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(* -1/3 (* (cbrt x) (cbrt -1)))","(* -1 (* (cbrt (pow x 7)) (cbrt -1)))"]],"series":[[14.280029296875,"((- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* (+ (* (cbrt (/ 1 (pow x 5))) -1/9) (* (cbrt (/ 1 (* x x))) 1/3)) (* x x)) (- (cbrt (+ x 1)) (cbrt x)) (- (cbrt (+ x 1)) (cbrt x)) (/ x (* x x)) x (* x x) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) x) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/ (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (pow x 3)) (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (cbrt (/ 1 (* x x))) (cbrt (/ 1 (pow x 5))) (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (* 1/3 (cbrt x)) (cbrt (pow x 7)))","x","-inf"],[12.43701171875,"((- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* (+ (* (cbrt (/ 1 (pow x 5))) -1/9) (* (cbrt (/ 1 (* x x))) 1/3)) (* x x)) (- (cbrt (+ x 1)) (cbrt x)) (- (cbrt (+ x 1)) (cbrt x)) (/ x (* x x)) x (* x x) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) x) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/ (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (pow x 3)) (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (cbrt (/ 1 (* x x))) (cbrt (/ 1 (pow x 5))) (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (* 1/3 (cbrt x)) (cbrt (pow x 7)))","x","inf"],[10.64599609375,"((- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* (+ (* (cbrt (/ 1 (pow x 5))) -1/9) (* (cbrt (/ 1 (* x x))) 1/3)) (* x x)) (- (cbrt (+ x 1)) (cbrt x)) (- (cbrt (+ x 1)) (cbrt x)) (/ x (* x x)) x (* x x) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) x) (- (cbrt (+ x 1)) (cbrt x)) (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/ (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (pow x 3)) (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (cbrt (/ 1 (* x x))) (cbrt (/ 1 (pow x 5))) (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (* 1/3 (cbrt x)) (cbrt (pow x 7)))","x","0"]],"time":39.596923828125,"type":"series"},{"count":[[59,58]],"egraph":[[0,8115,994,0.073703949],[4,6781,1058,0.027598292],[3,3684,1060,0.027918368],[2,1429,1068,0.018306169],[1,486,1072,0.006041736],[0,186,1113,0.00185002]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(* -1/9 (cbrt x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(/ 1 x)","x","(pow x 2)","(/ (+ (* 5/81 (cbrt x)) (* 1/9 (* (cbrt (pow x 4)) (cbrt -1)))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (cbrt (pow x 4)))))) x)","(* 5/81 (cbrt x))","(+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x)))","(+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))))","(cbrt (/ 1 (pow x 2)))","(cbrt (/ 1 (pow x 5)))","(* 5/81 (cbrt (/ 1 (pow x 5))))","(/ (+ (* 5/81 (cbrt x)) (* 1/9 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 2))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* 1/3 (cbrt x))","(cbrt (pow x 7))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* 1/3 (cbrt (pow x 4)))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (cbrt (pow x 7)))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* x (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* x (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(* -1 (* (pow x 3) (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(* -1 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(* -1 (* x (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(* -1/3 (* (cbrt x) (cbrt -1)))","(* -1 (* (cbrt (pow x 7)) (cbrt -1)))"]],"memory":[[4545632,36412224]],"method":["egg-herbie"],"outputs":[["(- 1 (cbrt x))","(-.f64 #s(literal 1 binary64) (cbrt.f64 x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(fma.f64 (fma.f64 #s(literal -1/9 binary64) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x)))","(* 5/81 (cbrt (/ 1 (pow x 8))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) (pow x 3))","(/.f64 (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64)))) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 5/81 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64))","(/ (+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x))) x)","(/.f64 (fma.f64 #s(literal -1/9 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))))) x)","(/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64)))) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) x)","(* -1/9 (cbrt x))","(*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))","(+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))","(fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","x","(pow x 2)","(*.f64 x x)","(/ (+ (* 5/81 (cbrt x)) (* 1/9 (* (cbrt (pow x 4)) (cbrt -1)))) x)","(/.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) x)","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (cbrt (pow x 4)))))) x)","(/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64)))) x (*.f64 (cbrt.f64 x) (fma.f64 (*.f64 #s(literal 1/9 binary64) x) (cbrt.f64 #s(literal -1 binary64)) #s(literal 5/81 binary64)))) x)","(* 5/81 (cbrt x))","(*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))","(+ (* -1/9 (cbrt (pow x 4))) (* 5/81 (cbrt x)))","(fma.f64 #s(literal -1/9 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x)))","(+ (* 5/81 (cbrt x)) (* x (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4))))))","(fma.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64)))) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64))))","(cbrt (/ 1 (pow x 2)))","(cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x))","(cbrt (/ 1 (pow x 5)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(* 5/81 (cbrt (/ 1 (pow x 5))))","(*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))","(/ (+ (* 5/81 (cbrt x)) (* 1/9 (* (cbrt (pow x 4)) (cbrt -1)))) (pow x 2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal 5/81 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* 5/81 (cbrt x)) (* x (+ (* 1/9 (* (cbrt x) (cbrt -1))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64)))) x (*.f64 (cbrt.f64 x) (fma.f64 (*.f64 #s(literal 1/9 binary64) x) (cbrt.f64 #s(literal -1 binary64)) #s(literal 5/81 binary64)))) (*.f64 x x))","(* 1/3 (cbrt x))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(cbrt (pow x 7))","(cbrt.f64 (pow.f64 x #s(literal 7 binary64)))","(* 1/3 (cbrt (/ 1 (pow x 2))))","(*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/.f64 (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -10/243 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))","(+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))))","(* 1/3 (cbrt (pow x 4)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))) (*.f64 x x))","(* (pow x 2) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))) (*.f64 x x))","(* (pow x 2) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (*.f64 x x))","(* (pow x 2) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64)))) (*.f64 x x))","(* 1/3 (cbrt (pow x 7)))","(*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* -1/9 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* x (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) x)","(* x (+ (* 5/81 (cbrt (/ 1 (pow x 8)))) (+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 5/81 binary64)))) x)","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 x) (*.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(+ (* 1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64))) x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* -5/81 (cbrt (/ 1 (pow x 5))))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 #s(literal 1/3 binary64) x) (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)","(* (pow x 2) (+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))) x)) (* 1/3 (cbrt (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x) #s(literal 1/3 binary64) (*.f64 (fma.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/9 binary64))) (cbrt.f64 #s(literal -1 binary64)))) x)","(+ (* -1 (/ (+ (* -1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1))) (* 5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))) x)) (* 1/3 (cbrt (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/9 binary64))) (/.f64 (cbrt.f64 #s(literal -1 binary64)) x) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(*.f64 (fma.f64 (fma.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/9 binary64))) (/.f64 (cbrt.f64 #s(literal -1 binary64)) x) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (cbrt (/ 1 (pow x 5))) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(* -1 (* x (+ (* -1/3 (cbrt (/ 1 (pow x 2)))) (* -1/9 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -5/81 (* (cbrt (/ 1 (pow x 5))) (cbrt -1))) (* 1/9 (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))) x)) (* -1/3 (cbrt (/ 1 (pow x 2)))))))","(fma.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x) #s(literal 1/3 binary64) (*.f64 (fma.f64 #s(literal -5/81 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/9 binary64))) (cbrt.f64 #s(literal -1 binary64))))","(* -1/3 (* (cbrt x) (cbrt -1)))","(*.f64 (*.f64 #s(literal -1/3 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 x))","(* -1 (* (cbrt (pow x 7)) (cbrt -1)))","(*.f64 (neg.f64 (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (pow.f64 x #s(literal 7 binary64))))"]],"stop":[["iter limit",1],["node limit",1]],"time":237.52197265625,"type":"simplify"},{"count":[[22,0]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x)))","(*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","(/.f64 #s(approx x x) (*.f64 x x))","#s(approx x x)","(*.f64 x x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","(/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x))","#s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x))","(*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))","#s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","#s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x)))","(*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))","(cbrt.f64 (pow.f64 x #s(literal 7 binary64)))"]],"memory":[[-3407424,12799616]],"outputs":[[]],"time":151.878173828125,"type":"rewrite"},{"compiler":[[3578,414]],"memory":[[5563264,5563264]],"time":9.080810546875,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",59.152946064706825,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","fresh",48.64855530632279,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","fresh",48.89972646268102,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 #s(literal -10/243 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","fresh",48.548102094855544,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","fresh",48.660937825859676,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 #s(literal 1/3 binary64) x) (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","fresh",32.84501784439941,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","done",34.60078263679033,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 x x)))","fresh",61.56975107050094,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))) (*.f64 x x)))","fresh",49.75132794868475,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","done",34.730001419051014,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","done",59.48048330875692,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","done",32.23568464397141,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","done",33.872527864691314,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))))","fresh",31.384708065312605,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","done",33.01768403680533,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","done",48.93630946991212,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","done",55.79865733940404,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (/.f64 #s(literal 1 binary64) x)))","fresh",58.905032478218104,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 1/3 binary64))","fresh",59.942788208615895,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","done",59.91704740237216,"binary64"],["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","done",61.34900794179004,"binary64"]],"compiler":[[1121,222],[7,6],[30,22],[22,17],[38,28],[50,36],[64,43],[53,36],[38,27],[39,29],[71,46],[15,10],[16,13],[22,16],[49,36],[49,36],[52,38],[61,38],[17,12],[9,8],[9,8],[9,8]],"count":[[79,21]],"kept":[{"done":[6,6],"fresh":[7,7],"new":[61,3],"picked":[5,5]}],"memory":[[-9723008,11608928]],"min-error":[[30.119158265407254,"binary64"]],"time":56.510009765625,"type":"prune"},{"accuracy":[31.384708065312598],"baseline":[31.384708065312605],"branch":[["x",31.384708065312598,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",31.384708065312598,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[33,1]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 1/3 binary64))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (/.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) x) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64))) (*.f64 x x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) x (*.f64 (cbrt.f64 x) (fma.f64 #s(literal -1/9 binary64) x #s(literal 5/81 binary64)))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 #s(literal 1/3 binary64) x) (fma.f64 (*.f64 #s(literal 1/9 binary64) (cbrt.f64 #s(literal -1 binary64))) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 5/81 binary64)))) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 #s(literal -10/243 binary64) (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (fma.f64 #s(literal 1/3 binary64) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -10/243 binary64) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (/.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/3 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/9 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (cbrt.f64 (pow.f64 x #s(literal 10 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal 10/243 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 11 binary64))) (cbrt.f64 (pow.f64 x #s(literal 13 binary64))) (*.f64 (/.f64 #s(literal 5/81 binary64) (pow.f64 (cbrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (cbrt.f64 (pow.f64 x #s(literal 16 binary64))))) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x)))"]],"memory":[[3070880,10672032]],"oracle":[63.795689962546014],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))))"]],"repr":["binary64"],"time":17.47607421875,"times":[[8.194091796875,"x"],[6.5380859375,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[32.23568464397142],"baseline":[32.23568464397141],"branch":[["x",32.23568464397142,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",32.23568464397142,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[19,1]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 1/3 binary64))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (/.f64 #s(approx (+ (* (* (cbrt (pow x 4)) 1/3) x) (* (cbrt x) (+ (* -1/9 x) 5/81))) (*.f64 (cbrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/3 binary64)))))"]],"memory":[[-1078416,7021296]],"oracle":[63.406491452366936],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))"]],"repr":["binary64"],"time":10.7880859375,"times":[[5.198974609375,"x"],[3.98193359375,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[33.87252786469132],"baseline":[33.872527864691314],"branch":[["x",33.87252786469132,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",33.87252786469133,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[13,1]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 1/3 binary64))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/81 binary64) x #s(literal -1/9 binary64)) x #s(literal 1/3 binary64)) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 #s(approx (+ (* (* x (cbrt (/ 1 (* x x)))) 1/3) (+ (* (* (cbrt -1) (cbrt (/ 1 (* x x)))) 1/9) (* (cbrt (/ 1 (pow x 5))) 5/81))) (*.f64 #s(literal 1/3 binary64) (cbrt.f64 x))) x)) (*.f64 x x)))"]],"memory":[[5515536,5515536]],"oracle":[63.08949759888481],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))"]],"repr":["binary64"],"time":7.9580078125,"times":[[3.631103515625,"x"],[3.0400390625,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[58.90503247821808],"baseline":[58.905032478218104],"branch":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",58.90503247821808,1,"binary64"],["x",58.905032478218104,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[10,1]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 1/3 binary64))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx x x) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 x x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (fma.f64 #s(literal 1/3 binary64) x (-.f64 #s(literal 1 binary64) (cbrt.f64 x))))"]],"memory":[[-4627024,4821104]],"oracle":[62.93855238624143],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (/.f64 #s(literal 1 binary64) x)))"]],"repr":["binary64"],"time":6.841796875,"times":[[2.39404296875,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"],[3.580078125,"x"]],"type":"regimes"},{"accuracy":[59.917047402372134],"baseline":[59.91704740237216],"branch":[["x",59.91704740237217,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",59.917047402372134,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[6,1]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 1/3 binary64))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))"]],"memory":[[3950832,3950832]],"oracle":[62.01576588229854],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))"]],"repr":["binary64"],"time":4.62109375,"times":[[2.112060546875,"x"],[1.799072265625,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[61.349007941790006],"baseline":[61.34900794179004],"branch":[["x",61.349007941790006,1,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",61.34900794179004,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[1,1]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))"]],"link":["."],"memory":[[-5561200,2704000]],"name":["2cbrt (problem 3.3.4)"],"oracle":[61.34900794179004],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":2.633056640625,"times":[[1.047119140625,"x"],[1.089111328125,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"egraph":[[14,6276,120,0.039563947],[13,3789,120,0.033375361],[12,1645,120,0.022403364],[11,998,120,0.011847488],[10,610,120,0.005520433],[9,440,120,0.004283642],[8,347,120,0.0022657],[7,292,120,0.001736133],[6,165,120,0.00176694],[5,119,120,0.001009433],[4,102,120,0.000870577],[3,88,120,0.000731981],[2,78,120,0.000680164],[1,67,120,0.000693258],[0,47,122,0.000799214]],"inputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))"]],"memory":[[2218448,10160368]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/9 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1 binary64))) #s(literal -1/9 binary64)))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) x)) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (pow.f64 (*.f64 x x) #s(literal -1 binary64)))) #s(literal 1/3 binary64)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (pow.f64 x #s(literal -1 binary64))))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))","#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))"]],"stop":[["node limit",1]],"time":150.72998046875,"type":"simplify"},{"compiler":[[122,51]],"memory":[[1228864,1228864]],"stop":[["fuel",1]],"time":2.764892578125,"type":"soundness"},{"compiler":[[122,51],[122,51],[25,11],[25,11],[7,6],[7,6]],"memory":[[24992,31499824]],"remove-preprocessing":[[],[],[],[],[],[],[]],"time":76.16015625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01904296875,"type":"end"}]