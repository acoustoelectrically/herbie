[{"memory":[[18576,18576]],"time":0.0341796875,"type":"start"},{"compiler":[[19,12]],"memory":[[84912,84912]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.7628198006136451,"unknown":0.0,"valid":0.23718019938635493}],[0,{"invalid":0.0,"precondition":0.7628198006136451,"unknown":0.23718019938635493,"valid":0.0}]],"time":0.39599609375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7628198006136451,"valid":0.23718019938635493}],"memory":[[24100016,472635600]],"mixsample":[[9.783203125,"ival-add",1200],[16.675048828125,"ival-sub",1200],[271.74609375,"adjust",800],[27.970947265625,"ival-mult",1200],[135.77099609375,"ival-log",2800],[149.147216796875,"ival-log1p",2800],[29.86572265625,"ival-mult",2000],[23.76953125,"ival-mult",2800],[4.304931640625,"ival-assert",0],[128.36083984375,"ival-sub",0],[125.830322265625,"ival-log1p",1600],[111.854736328125,"ival-log",1600],[7.9326171875,"ival-sub",400],[88.162841796875,"ival-log1p",1200],[129.84423828125,"ival-log",2000],[76.016845703125,"ival-log",1200],[57.9873046875,"ival-add",0],[11.404052734375,"ival-add",1600],[18.040771484375,"ival-sub",800],[126.591064453125,"ival-mult",0],[150.12353515625,"ival-log1p",2000],[7.915771484375,"ival-add",2800],[31.112060546875,"ival-mult",1600],[10.821533203125,"ival-add",2000],[178.45654296875,"ival-log1p",2400],[120.920654296875,"ival-log",0],[167.889892578125,"ival-log1p",0],[11.539794921875,"ival-add",2400],[33.36962890625,"ival-mult",2400],[26.894775390625,"ival->",0],[12.45361328125,"exact",0],[164.376953125,"ival-log",2400]],"outcomes":[[2761.65966796875,1,"valid",8256]],"time":3183.625,"type":"sample"},{"compiler":[[15,9],[53,11],[53,11]],"confusion":[[256,0,0,0]],"explanations":[["-.f64","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","nan-rescue",2,0,[["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","overflow",2],["(*.f64 n (log.f64 n))","overflow",2]],[[1]]],["-.f64","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","cancellation",254,0,[],[[1]]]],"fperrors":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",256,0,false,0,false],["n",0,0,false,0,false],["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(+.f64 n #s(literal 1 binary64))",0,0,false,0,false],["(log.f64 n)",0,0,false,0,false],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",0,0,false,0,false],["(*.f64 n (log.f64 n))",0,0,false,0,false],["(log.f64 (+.f64 n #s(literal 1 binary64)))",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-1349824,78658256]],"mixsample":[[0.87841796875,"ival-sub",1200],[0.445556640625,"ival-add",1200],[15.8984375,"adjust",800],[1.258544921875,"ival-mult",1200],[8.344970703125,"ival-log",2800],[8.41357421875,"ival-log1p",2800],[1.822509765625,"ival-mult",2000],[1.3115234375,"ival-mult",2800],[0.239013671875,"ival-assert",0],[7.5,"ival-sub",0],[7.60107421875,"ival-log1p",1600],[0.471923828125,"ival-sub",400],[7.361083984375,"ival-log",1600],[4.323486328125,"ival-log1p",1200],[8.53857421875,"ival-log",2000],[4.278564453125,"ival-log",1200],[3.23583984375,"ival-add",0],[0.673828125,"ival-add",1600],[7.289794921875,"ival-mult",0],[1.2109375,"ival-sub",800],[8.522216796875,"ival-log1p",2000],[0.40185546875,"ival-add",2800],[1.864990234375,"ival-mult",1600],[0.570068359375,"ival-add",2000],[9.87841796875,"ival-log1p",2400],[8.517333984375,"ival-log",0],[0.529541015625,"ival-true",0],[9.86962890625,"ival-log1p",0],[0.565673828125,"ival-add",2400],[1.7294921875,"ival-mult",2400],[0.333251953125,"exact",0],[9.8798828125,"ival-log",2400]],"outcomes":[[170.2841796875,1,"valid",512]],"time":255.592041015625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[15,9]],"egraph":[[0,1670,11,0.008031655],[9,1670,15,0.010117571],[8,1638,15,0.010806081],[7,1344,15,0.012606485],[6,891,15,0.008738605],[5,499,15,0.004258172],[4,258,15,0.00203933],[3,123,15,0.001005252],[2,59,15,0.000484786],[1,31,15,0.000324808],[0,16,15,0.000326713],[0,9,15,0.000151608]],"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"]],"memory":[[1817600,18885952]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (-.f64 (log1p.f64 n) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":217.47998046875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[43392,43392]],"time":0.2109375,"type":"eval"},{"alts":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","next",62.9680567244349,"binary64"]],"compiler":[[15,9]],"memory":[[343920,343920]],"time":0.7080078125,"type":"prune"},{"egraph":[[0,1670,39,0.010308384],[9,1670,51,0.011290338],[8,1638,51,0.012994034],[7,1344,51,0.013802305],[6,891,51,0.008059718],[5,499,51,0.003698421],[4,258,51,0.001942493],[3,123,51,0.000992119],[2,59,51,0.00046001],[1,31,51,0.000256827],[0,16,51,0.000239604],[0,9,51,0.000121263]],"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(+.f64 n #s(literal 1 binary64))","n","#s(literal 1 binary64)","(log.f64 (+.f64 n #s(literal 1 binary64)))","(*.f64 n (log.f64 n))","(log.f64 n)"]],"locations":[["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","cost-diff",0],["(log.f64 (+.f64 n #s(literal 1 binary64)))","cost-diff",2],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","cost-diff",2]],"memory":[[-3479920,4656352]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (-.f64 (log1p.f64 n) #s(literal 1 binary64)))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (log1p.f64 n))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(fma.f64 (log1p.f64 n) n (log1p.f64 n))","(+.f64 n #s(literal 1 binary64))","(-.f64 n #s(literal -1 binary64))","n","#s(literal 1 binary64)","(log.f64 (+.f64 n #s(literal 1 binary64)))","(log1p.f64 n)","(*.f64 n (log.f64 n))","(*.f64 (log.f64 n) n)","(log.f64 n)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":90.06103515625,"type":"simplify"},{"compiler":[[53,11]],"locations":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","accuracy",0.01171875],["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","accuracy",0.24609375],["(*.f64 n (log.f64 n))","accuracy",0.24609375],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","accuracy",61.96974409484126]],"memory":[[664272,17470080]],"mixsample":[[0.486083984375,"ival-sub",1200],[0.225341796875,"ival-add",1200],[7.87255859375,"adjust",800],[0.608642578125,"ival-mult",1200],[4.09521484375,"ival-log",2800],[4.33642578125,"ival-log1p",2800],[0.976806640625,"ival-mult",2000],[2.2734375,"ival-mult",2800],[0.11083984375,"ival-assert",0],[3.604248046875,"ival-sub",0],[3.951171875,"ival-log1p",1600],[0.202880859375,"ival-sub",400],[3.81298828125,"ival-log",1600],[2.24853515625,"ival-log1p",1200],[3.9443359375,"ival-log",2000],[1.987060546875,"ival-log",1200],[1.708984375,"ival-add",0],[0.35107421875,"ival-add",1600],[12.05908203125,"ival-mult",0],[0.57177734375,"ival-sub",800],[4.3896484375,"ival-log1p",2000],[0.218994140625,"ival-add",2800],[1.127685546875,"ival-mult",1600],[0.334716796875,"ival-add",2000],[5.44775390625,"ival-log1p",2400],[3.767333984375,"ival-log",0],[0.207275390625,"ival-true",0],[4.924560546875,"ival-log1p",0],[0.320556640625,"ival-add",2400],[0.9375,"ival-mult",2400],[0.18212890625,"exact",0],[4.75927734375,"ival-log",2400]],"outcomes":[[96.208251953125,1,"valid",256]],"time":107.5029296875,"type":"localize"},{"count":[[5,46]],"inputs":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(log.f64 (+.f64 n #s(literal 1 binary64)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(*.f64 n (log.f64 n))"]],"memory":[[3890048,25641088]],"outputs":[["(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(* n (log n))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))"]],"series":[[14.9560546875,"((- (* (+ n 1) (log (+ n 1))) (* n (log n))) (log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (* (+ n 1) (log (+ n 1))) (* n (log n)))","n","-inf"],[10.27099609375,"((- (* (+ n 1) (log (+ n 1))) (* n (log n))) (log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (* (+ n 1) (log (+ n 1))) (* n (log n)))","n","inf"],[45.843017578125,"((- (* (+ n 1) (log (+ n 1))) (* n (log n))) (log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (* (+ n 1) (log (+ n 1))) (* n (log n)))","n","0"]],"time":71.97998046875,"type":"series"},{"count":[[46,45]],"egraph":[[0,8301,517,0.075458889],[3,4960,546,0.030600212],[2,1424,562,0.017597516],[1,486,587,0.004672266],[0,154,649,0.001559409]],"inputs":[["(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(* n (log n))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))"]],"memory":[[-6300976,36973584]],"method":["egg-herbie"],"outputs":[["(* n (- 1 (log n)))","(fma.f64 (neg.f64 n) (log.f64 n) n)","(* n (- (+ 1 (* 1/2 n)) (log n)))","(*.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) n #s(literal 1 binary64)) (log.f64 n)) n)","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) n #s(literal -1/6 binary64)) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","n","(* n (+ 1 (* -1/2 n)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) n #s(literal -1/2 binary64)) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) n #s(literal 1/3 binary64)) n #s(literal -1/2 binary64)) n #s(literal 1 binary64)) n)","-1","#s(literal -1 binary64)","(- (* n (- 1 (log n))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(fma.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) n #s(literal 1 binary64)) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(* n (+ 1 (* 1/2 n)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) n #s(literal -1/6 binary64)) n #s(literal 1/2 binary64)) n #s(literal 1 binary64)) n)","(* n (log n))","(*.f64 (log.f64 n) n)","(+ 1 (* -1 (log (/ 1 n))))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(+.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) (log.f64 n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n)) (log.f64 n))","(* -1 (log (/ 1 n)))","(log.f64 n)","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(+.f64 (log.f64 n) (/.f64 #s(literal 1 binary64) n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 1/2 binary64)) n) #s(literal -1 binary64)) n) (log.f64 n))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n) #s(literal -1/2 binary64)) n) (log.f64 n))","(* -1 (* n (log (/ 1 n))))","(*.f64 (log.f64 n) n)","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(fma.f64 (log.f64 n) n (+.f64 (log.f64 n) #s(literal 1 binary64)))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(fma.f64 (log.f64 n) n (fma.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) n (+.f64 (log.f64 n) #s(literal 1 binary64))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(fma.f64 (/.f64 #s(literal -1/6 binary64) (pow.f64 n #s(literal 3 binary64))) n (fma.f64 (log.f64 n) n (fma.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) n (+.f64 (log.f64 n) #s(literal 1 binary64)))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(-.f64 (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(-.f64 (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) n)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) n)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 1/2 binary64)) n)) n)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (/.f64 #s(literal -1 binary64) n))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n)","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n) (-.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) n) #s(literal -1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))","(-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n) (-.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))))"]],"stop":[["iter limit",1],["node limit",1]],"time":253.2890625,"type":"simplify"},{"count":[[5,67]],"inputs":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(log.f64 (+.f64 n #s(literal 1 binary64)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(*.f64 n (log.f64 n))"]],"memory":[[3575872,19637696]],"outputs":[["(neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 n (log.f64 n)) #s(literal 2 binary64))) (neg.f64 (fma.f64 (log.f64 n) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 n (log.f64 n)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (fma.f64 (log.f64 n) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) (*.f64 n (log.f64 n)) (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 2 binary64))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 n (log.f64 n)) #s(literal 3 binary64)))) (fma.f64 (fma.f64 (log.f64 n) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) (*.f64 n (log.f64 n)) (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 2 binary64))) (pow.f64 (*.f64 n (log.f64 n)) #s(literal 2 binary64))) (fma.f64 (log.f64 n) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(+.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) (log1p.f64 n)) (*.f64 (log1p.f64 n) n))","(+.f64 (*.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (log1p.f64 n) n)) (log1p.f64 n))","(+.f64 (log1p.f64 n) (fma.f64 (log1p.f64 n) n (*.f64 (neg.f64 n) (log.f64 n))))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (*.f64 n (log.f64 n))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 #s(literal 1 binary64) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 1 binary64)))","(+.f64 (*.f64 (log1p.f64 n) n) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(neg.f64 (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 n #s(literal 1 binary64)))))","(+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))))","(+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (neg.f64 (log.f64 (+.f64 n #s(literal -1 binary64)))))","(+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (neg.f64 (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64))))))","(+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 n) n)) (log1p.f64 (neg.f64 n)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 n #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64)))))","(-.f64 (log.f64 (neg.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))))","(*.f64 (log1p.f64 n) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 n))","(/.f64 (-.f64 (*.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (fma.f64 n n #s(literal -1 binary64)))) (*.f64 (log.f64 (+.f64 n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64))))) (+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log1p.f64 (*.f64 (*.f64 n n) n))) (*.f64 (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64)))) (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64)))))) (+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (+.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (log.f64 (+.f64 n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64))) (*.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64)))))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal 1 binary64))))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal 1 binary64)))))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal 1 binary64))))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal 1 binary64)))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal -1 binary64)))","(+.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal -1 binary64))","(+.f64 (+.f64 #s(literal -1 binary64) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))))","(+.f64 (log1p.f64 n) (fma.f64 (log1p.f64 n) n (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 1 binary64)))","(+.f64 (*.f64 (log1p.f64 n) n) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (*.f64 (log1p.f64 n) n) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (*.f64 (log1p.f64 n) n) (log1p.f64 n))","(+.f64 (log1p.f64 n) (*.f64 (log1p.f64 n) n))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))","(*.f64 (log1p.f64 n) (+.f64 n #s(literal 1 binary64)))","(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (*.f64 n n) n #s(literal -1 binary64))) (fma.f64 (+.f64 n #s(literal 1 binary64)) n #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64))) (+.f64 n #s(literal 1 binary64)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)) (log1p.f64 n)))","(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (log1p.f64 n)) (/.f64 #s(literal 1 binary64) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (log1p.f64 n)) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 #s(literal 1 binary64) n)) (-.f64 #s(literal 1 binary64) n) (*.f64 (*.f64 n n) (*.f64 (*.f64 n n) (*.f64 n n))))) (fma.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)) (*.f64 (*.f64 n n) (*.f64 n n))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (log1p.f64 n)) (*.f64 (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n))","(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))) (log1p.f64 n)))","(/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (+.f64 n #s(literal -1 binary64)))","(*.f64 n (log.f64 n))","(*.f64 (log.f64 n) n)","(*.f64 (*.f64 n (log.f64 n)) #s(literal 1 binary64))","(*.f64 (*.f64 (log.f64 n) #s(literal 1 binary64)) n)","(*.f64 #s(literal 1 binary64) (*.f64 n (log.f64 n)))","(*.f64 n (*.f64 (log.f64 n) #s(literal 1 binary64)))","(*.f64 n (*.f64 #s(literal 1 binary64) (log.f64 n)))"]],"time":539.41796875,"type":"rewrite"},{"compiler":[[2711,526]],"memory":[[3563440,11365584]],"time":15.43408203125,"type":"eval"},{"alts":[["(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","next",0.01171875,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","next",0.0,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","next",63.00436225087523,"binary64"]],"compiler":[[20,13],[22,14],[17,11]],"count":[[113,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[112,3],"picked":[1,0]}],"memory":[[-4222480,4786784]],"min-error":[[0.0,"binary64"]],"time":3.558837890625,"type":"prune"},{"egraph":[[0,1832,83,0.008600265],[12,1832,99,0.011957129],[11,1817,99,0.011700992],[10,1783,99,0.011694463],[9,1742,99,0.013239599],[8,1661,99,0.011047881],[7,1343,99,0.015428949],[6,898,99,0.00894175],[5,507,99,0.004279039],[4,271,99,0.002062094],[3,137,99,0.00112252],[2,70,99,0.000518797],[1,41,99,0.000296343],[0,24,99,0.000279322],[0,19,99,0.000154473]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","n","(log.f64 n)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(log.f64 n)","n","#s(literal 1 binary64)"]],"locations":[["(log.f64 n)","cost-diff",0],["(+.f64 (log.f64 n) #s(literal 1 binary64))","cost-diff",0],["#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(log.f64 n)","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) n)","cost-diff",0],["(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","cost-diff",0]],"memory":[[5133136,5133136]],"method":["egg-herbie"],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","n","(log.f64 n)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (-.f64 (log.f64 n) #s(literal -1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (-.f64 (log.f64 n) #s(literal -1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(-.f64 (log.f64 n) #s(literal -1 binary64))","(log.f64 n)","n","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":119.093017578125,"type":"simplify"},{"compiler":[[82,16]],"locations":[["(log.f64 n)","accuracy",0.0],["#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","accuracy",0.0],["(+.f64 (log.f64 n) #s(literal 1 binary64))","accuracy",0.0078125],["(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",0.01171875],["(/.f64 #s(literal 1/2 binary64) n)","accuracy",0.0],["(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","accuracy",0.0],["(log.f64 n)","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","accuracy",63.00436225087523]],"memory":[[-1972176,22183952]],"mixsample":[[0.4736328125,"ival-sub",1200],[12.0341796875,"adjust",800],[2.110107421875,"ival-div",0],[0.673828125,"ival-mult",1200],[4.124267578125,"ival-log",2800],[0.114501953125,"ival-assert",0],[3.88525390625,"ival-sub",0],[0.22216796875,"ival-sub",400],[3.3779296875,"ival-log",1600],[2.51416015625,"ival-log1p",1200],[6.65087890625,"ival-add",0],[2.037841796875,"ival-log",1200],[0.549072265625,"ival-sub",800],[0.9912109375,"ival-mult",1600],[5.4736328125,"ival-log1p",0],[0.943359375,"ival-mult",2400],[0.36962890625,"ival-add",2400],[5.03515625,"ival-log",2400],[0.292236328125,"ival-add",1200],[0.892333984375,"ival-mult",2000],[5.04736328125,"ival-log1p",2800],[0.84765625,"ival-mult",2800],[4.561767578125,"ival-log1p",1600],[4.262451171875,"ival-log",2000],[3.656005859375,"ival-mult",0],[0.342041015625,"ival-add",1600],[4.666015625,"ival-log1p",2000],[0.26171875,"ival-add",2800],[0.3564453125,"ival-add",2000],[5.7216796875,"ival-log1p",2400],[0.2236328125,"ival-true",0],[4.53857421875,"ival-log",0],[0.43017578125,"exact",0]],"outcomes":[[114.134033203125,1,"valid",256]],"time":128.7109375,"type":"localize"},{"count":[[8,28]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(/.f64 #s(literal 1/2 binary64) n)","(log.f64 n)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))"]],"memory":[[388992,17972928]],"outputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(/ 1/2 n)","(/ (+ 1/2 (* n (log n))) n)","(log n)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(+ 1 (log n))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))"]],"series":[[7.825927734375,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (log n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+ (log n) 1))","n","-inf"],[7.579833984375,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (log n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+ (log n) 1))","n","inf"],[9.143798828125,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (log n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+ (log n) 1))","n","0"]],"time":25.174072265625,"type":"series"},{"count":[[28,28]],"egraph":[[0,8159,265,0.076444721],[5,6967,278,0.024051684],[4,4520,278,0.026668132],[3,1586,286,0.018292335],[2,555,290,0.005422027],[1,216,300,0.001747629],[0,83,324,0.000822143]],"inputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(/ 1/2 n)","(/ (+ 1/2 (* n (log n))) n)","(log n)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(+ 1 (log n))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))"]],"memory":[[4759792,34376448]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* n (- 1 (log n))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(/ 1/2 n)","(/.f64 #s(literal 1/2 binary64) n)","(/ (+ 1/2 (* n (log n))) n)","(/.f64 (fma.f64 (log.f64 n) n #s(literal 1/2 binary64)) n)","(log n)","(log.f64 n)","(* n (- 1 (log n)))","(*.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n)","(* n (- (+ 1 (* 1/2 n)) (log n)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) n #s(literal -1/6 binary64)) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(+ 1 (log n))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(* -1 (log (/ 1 n)))","(log.f64 n)","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ 1 (* -1 (log (/ 1 n))))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n)))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(-.f64 (+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n))) (/.f64 #s(literal -1/2 binary64) n))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(-.f64 (+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(-.f64 (+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))"]],"stop":[["iter limit",1],["node limit",1]],"time":242.51904296875,"type":"simplify"},{"count":[[8,63]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(/.f64 #s(literal 1/2 binary64) n)","(log.f64 n)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))"]],"memory":[[1564240,17740400]],"outputs":[["#s(approx (- (* (log (+ n 1)) (+ n 1)) (+ (* n (log n)) 1)) #s(literal -1 binary64))","#s(approx (- (* (log (+ n 1)) (+ n 1)) (+ (* n (log n)) 1)) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))","(neg.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 n n) n)) (pow.f64 (log.f64 n) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n)) (log.f64 n) (/.f64 #s(literal 1/4 binary64) (*.f64 n n))))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 n n) n)) (pow.f64 (log.f64 n) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n)) (log.f64 n) (/.f64 #s(literal 1/4 binary64) (*.f64 n n)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) (pow.f64 (log.f64 n) #s(literal 2 binary64)))) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(+.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n))","(+.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)) (*.f64 n n))) (neg.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(-.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)) (*.f64 n n))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))","(-.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (+.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))) (/.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) (+.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))))","(*.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))","(*.f64 (-.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (/.f64 #s(literal 1/4 binary64) (*.f64 n n))) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (-.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) (pow.f64 (log.f64 n) #s(literal 2 binary64))))","(*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))","(neg.f64 (/.f64 #s(literal -1/2 binary64) n))","(neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) n) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1/2 binary64) n))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 #s(literal -1/2 binary64) n))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 n #s(literal -1/2 binary64))) (/.f64 #s(literal -1/2 binary64) n))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (/.f64 #s(literal 1/2 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) n))","(+.f64 (log.f64 n) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (log.f64 n))","(*.f64 (log.f64 n) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log.f64 n))","(log.f64 n)","(fma.f64 (log.f64 n) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log.f64 n) #s(literal 0 binary64))","(fma.f64 #s(literal 0 binary64) #s(literal 2 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 3 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 1 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 0 binary64) (log.f64 n))","(fma.f64 #s(literal 3 binary64) #s(literal 0 binary64) (log.f64 n))","(fma.f64 #s(literal 2 binary64) #s(literal 0 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 1/2 binary64) (log.f64 n))","(-.f64 #s(approx (- (* (log (+ n 1)) (+ n 1)) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (log (+ n 1)) (+ n 1)) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(neg.f64 (/.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 n))))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (+.f64 (log.f64 n) #s(literal -1 binary64))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (log.f64 n) (+.f64 (log.f64 n) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (log.f64 n) (+.f64 (log.f64 n) #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (log.f64 n))","(+.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (+.f64 (log.f64 n) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (+.f64 (log.f64 n) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (log.f64 n))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 n))))","(*.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (log.f64 n))))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) #s(literal -1 binary64))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(*.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 n) #s(literal -1 binary64)) (+.f64 (log.f64 n) #s(literal -1 binary64))))"]],"time":956.97412109375,"type":"rewrite"},{"compiler":[[2811,378]],"memory":[[-11532752,9734480]],"time":53.93798828125,"type":"eval"},{"alts":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","next",0.0,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","next",60.823351815650355,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","done",63.00436225087523,"binary64"]],"compiler":[[18,11],[26,16],[17,11]],"count":[[109,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[106,2],"picked":[3,1]}],"memory":[[4905776,4905776]],"min-error":[[0.0,"binary64"]],"time":2.760009765625,"type":"prune"},{"egraph":[[0,1786,54,0.008028044],[12,1786,62,0.01033326],[11,1771,62,0.010934341],[10,1744,62,0.013300331],[9,1720,62,0.011187877],[8,1649,62,0.010924916],[7,1338,62,0.013145592],[6,891,62,0.008266412],[5,499,62,0.003951683],[4,261,62,0.001942954],[3,127,62,0.000994305],[2,63,62,0.000576517],[1,35,62,0.000270183],[0,19,62,0.000390393],[0,17,62,0.000101541]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","n","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)","n"]],"locations":[["(log.f64 n)","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) n)","cost-diff",0],["#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","cost-diff",0]],"memory":[[-2906496,4928688]],"method":["egg-herbie"],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","n","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)","n"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":116.390869140625,"type":"simplify"},{"compiler":[[46,14]],"locations":[["(log.f64 n)","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","accuracy",0.0],["(/.f64 #s(literal 1/2 binary64) n)","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","accuracy",0.0],["#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","accuracy",60.823351815650355]],"memory":[[1283152,18274752]],"mixsample":[[0.468994140625,"ival-sub",1200],[10.0703125,"adjust",800],[2.064208984375,"ival-div",0],[0.773193359375,"ival-mult",1200],[4.18115234375,"ival-log",2800],[0.11767578125,"ival-assert",0],[5.44140625,"ival-sub",0],[0.22900390625,"ival-sub",400],[3.577880859375,"ival-log",1600],[2.567138671875,"ival-log1p",1200],[3.962158203125,"ival-add",0],[2.260986328125,"ival-log",1200],[0.552490234375,"ival-sub",800],[0.966552734375,"ival-mult",1600],[6.36865234375,"ival-log1p",0],[1.019287109375,"ival-mult",2400],[0.36474609375,"ival-add",2400],[5.03759765625,"ival-log",2400],[0.266357421875,"ival-add",1200],[0.975341796875,"ival-mult",2000],[4.332763671875,"ival-log1p",2800],[0.65771484375,"ival-mult",2800],[3.894775390625,"ival-log1p",1600],[4.23486328125,"ival-log",2000],[3.729736328125,"ival-mult",0],[0.332275390625,"ival-add",1600],[4.48291015625,"ival-log1p",2000],[0.227783203125,"ival-add",2800],[0.31689453125,"ival-add",2000],[5.618408203125,"ival-log1p",2400],[0.235595703125,"ival-true",0],[3.908935546875,"ival-log",0],[0.3935546875,"exact",0]],"outcomes":[[98.08984375,1,"valid",256]],"time":114.588134765625,"type":"localize"},{"count":[[5,15]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)"]],"memory":[[2434368,17600656]],"outputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(/ 1/2 n)","(/ (+ 1/2 (* n (log n))) n)","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))"]],"series":[[8.594970703125,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log n))","n","-inf"],[7.55810546875,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log n))","n","inf"],[8.344970703125,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log n))","n","0"]],"time":24.98681640625,"type":"series"},{"count":[[15,15]],"egraph":[[0,8061,122,0.065128122],[8,7997,128,0.009538185],[7,7559,128,0.021162051],[6,6370,128,0.038849748],[5,5106,132,0.035129948],[4,2667,132,0.027569541],[3,983,136,0.010268995],[2,387,138,0.003283573],[1,164,143,0.001712086],[0,65,153,0.000704585]],"inputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(/ 1/2 n)","(/ (+ 1/2 (* n (log n))) n)","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))"]],"memory":[[-477008,31306944]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* n (- 1 (log n))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(/ 1/2 n)","(/.f64 #s(literal 1/2 binary64) n)","(/ (+ 1/2 (* n (log n))) n)","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(log n)","(log.f64 n)","(* -1 (log (/ 1 n)))","(log.f64 n)","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))"]],"stop":[["iter limit",1],["node limit",1]],"time":293.01318359375,"type":"simplify"},{"count":[[5,32]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)"]],"memory":[[-4274592,14555456]],"outputs":[["#s(approx (- (* (log (+ n 1)) (+ n 1)) (+ (* n (log n)) 1)) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(neg.f64 (/.f64 #s(literal -1/2 binary64) n))","(neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) n) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1/2 binary64) n))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 #s(literal -1/2 binary64) n))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 n #s(literal -1/2 binary64))) (/.f64 #s(literal -1/2 binary64) n))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (/.f64 #s(literal 1/2 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) n))","#s(approx (- (* (log (+ n 1)) (+ n 1)) (+ (* n (log n)) 1)) (log.f64 n))","(+.f64 (log.f64 n) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (log.f64 n))","(*.f64 (log.f64 n) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log.f64 n))","(log.f64 n)","(fma.f64 (log.f64 n) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log.f64 n) #s(literal 0 binary64))","(fma.f64 #s(literal 0 binary64) #s(literal 2 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 3 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 1 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 0 binary64) (log.f64 n))","(fma.f64 #s(literal 3 binary64) #s(literal 0 binary64) (log.f64 n))","(fma.f64 #s(literal 2 binary64) #s(literal 0 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 1/2 binary64) (log.f64 n))"]],"time":684.23583984375,"type":"rewrite"},{"compiler":[[1145,153]],"memory":[[4065648,4065648]],"time":4.75,"type":"eval"},{"alts":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","done",0.0,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","done",60.823351815650355,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","done",63.00436225087523,"binary64"]],"compiler":[[118,32],[18,11],[26,16],[17,11]],"count":[[49,3]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[46,0],"picked":[2,2]}],"memory":[[3712304,3712304]],"min-error":[[0.0,"binary64"]],"time":4.26904296875,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["n",0.0,1,"binary64"],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",0.0,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",0.0,1,"binary64"]],"compiler":[[1,1],[15,9],[13,8]],"count":[[6,1]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"]],"memory":[[-3055168,5109536]],"oracle":[63.012134222925376],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))"]],"repr":["binary64"],"time":6.952880859375,"times":[[2.057861328125,"n"],[1.697998046875,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[2.5,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"]],"type":"regimes"},{"accuracy":[60.823351815650334],"baseline":[60.823351815650355],"branch":[["n",60.823351815650334,1,"binary64"],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",60.82335181565035,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",60.82335181565035,1,"binary64"]],"compiler":[[1,1],[15,9],[13,8]],"count":[[2,1]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))"]],"memory":[[-4337248,4019680]],"oracle":[63.00436225087523],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))"]],"repr":["binary64"],"time":4.43701171875,"times":[[1.4921875,"n"],[1.10595703125,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[1.047119140625,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"]],"type":"regimes"},{"accuracy":[63.00436225087521],"baseline":[63.00436225087523],"branch":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",63.00436225087524,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",63.00436225087524,1,"binary64"],["n",63.00436225087521,1,"binary64"]],"compiler":[[15,9],[13,8],[1,1]],"count":[[1,1]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"link":["."],"memory":[[3750960,3750960]],"name":["logs (example 3.8)"],"oracle":[63.00436225087523],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"repr":["binary64"],"time":3.501220703125,"times":[[0.889892578125,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[0.890869140625,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"],[1.1240234375,"n"]],"type":"regimes"},{"egraph":[[8,7992,61,0.029778157],[7,4426,61,0.049862663],[6,1840,61,0.01828233],[5,761,61,0.010292318],[4,348,61,0.003752963],[3,158,61,0.001611342],[2,64,61,0.000637704],[1,34,61,0.000346921],[0,19,61,0.000342221]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"memory":[[1731776,9976464]],"method":["egg-herbie"],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"stop":[["node limit",1]],"time":133.8330078125,"type":"simplify"},{"compiler":[[61,20]],"memory":[[542656,542656]],"stop":[["done",1]],"time":0.90185546875,"type":"soundness"},{"compiler":[[61,20],[61,20],[24,17],[24,17],[15,9],[15,9]],"memory":[[-12326448,21413824]],"remove-preprocessing":[[],[],[],[]],"time":88.549072265625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.013916015625,"type":"end"}]