[{"memory":[[18832,18832]],"time":0.032958984375,"type":"start"},{"compiler":[[19,13]],"memory":[[645168,645168]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":2.4140625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[26120656,473327680]],"mixsample":[[145.12158203125,"ival-div",0],[185.2021484375,"adjust",800],[140.1044921875,"ival-div",400],[4.36376953125,"ival-assert",0],[15.231689453125,"ival-div",1600],[96.431396484375,"ival-sub",0],[16.50830078125,"ival-and",0],[0.054443359375,"ival-sub",400],[150.607177734375,"ival-sqrt",0],[155.837890625,"const",0],[23.8046875,"adjust",2000],[50.84619140625,"ival-add",0],[0.04296875,"ival-sub",800],[3.840087890625,"ival-add",1600],[15.8759765625,"ival-sqrt",1600],[43.7958984375,"ival-add",400],[43.503173828125,"ival->",0],[9.18212890625,"exact",0],[160.135498046875,"ival-sqrt",400],[24.21630859375,"ival-<",0]],"outcomes":[[1242.78564453125,1,"valid",6852],[302.67529296875,2,"valid",1132],[26.63916015625,0,"valid",272]],"time":1979.25,"type":"sample"},{"compiler":[[11,8],[34,10],[34,10]],"confusion":[[187,0,1,68]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cancellation",188,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",187,1,[2.3658231562759866e+215],0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(sqrt.f64 x)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,188],[0,68]],"maybe-confusion":[[187,0,0,1,0,68]],"memory":[[-6070992,65564912]],"mixsample":[[9.13525390625,"adjust",800],[7.548828125,"ival-div",0],[3.06005859375,"ival-add",0],[0.10986328125,"ival-add",1600],[0.478759765625,"ival-sqrt",1600],[6.793212890625,"ival-div",400],[0.494873046875,"ival-div",1600],[0.2099609375,"ival-assert",0],[5.43017578125,"ival-sub",0],[2.434326171875,"ival-add",400],[0.504638671875,"ival-true",0],[8.15380859375,"ival-sqrt",0],[0.35400390625,"exact",0],[1.02197265625,"adjust",2000],[7.783935546875,"ival-sqrt",400]],"outcomes":[[59.748779296875,1,"valid",420],[15.7890625,2,"valid",70],[1.4228515625,0,"valid",22]],"time":142.904052734375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[11,8]],"egraph":[[0,258,11,0.001642272],[11,258,11,0.001405293],[10,255,11,0.001634267],[9,234,11,0.001489964],[8,203,11,0.001487105],[7,142,11,0.001725696],[6,107,11,0.001369074],[5,68,11,0.00072018],[4,48,11,0.000309665],[3,36,11,0.000263264],[2,27,11,0.000205743],[1,19,11,0.000156022],[0,14,11,0.000188969],[0,8,11,0.000125642]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"memory":[[-3256656,14384480]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":163.43701171875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.079833984375,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",40.97099483279758,"binary64"]],"compiler":[[11,8]],"memory":[[320576,320576]],"time":1.31005859375,"type":"prune"},{"egraph":[[0,258,32,0.001332964],[11,258,32,0.001487733],[10,255,32,0.001707974],[9,234,32,0.001676882],[8,203,32,0.001445078],[7,142,32,0.00111917],[6,107,32,0.001135062],[5,68,32,0.000567866],[4,48,32,0.000319713],[3,36,32,0.000306024],[2,27,32,0.000254451],[1,19,32,0.0002639],[0,14,32,0.000273945],[0,8,32,0.000147677]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))"]],"locations":[["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0]],"memory":[[1091232,1091232]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":20.79296875,"type":"simplify"},{"compiler":[[34,10]],"locations":[["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","accuracy",0.28515625],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.30078125],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",40.912800390479504]],"memory":[[-609264,15216976]],"mixsample":[[6.973876953125,"adjust",800],[3.842041015625,"ival-div",0],[1.36669921875,"ival-add",0],[0.054443359375,"ival-add",1600],[0.26220703125,"ival-sqrt",1600],[3.760009765625,"ival-div",400],[0.25732421875,"ival-div",1600],[0.11669921875,"ival-assert",0],[2.525634765625,"ival-sub",0],[1.2783203125,"ival-add",400],[0.2197265625,"ival-true",0],[4.245849609375,"ival-sqrt",0],[0.160400390625,"exact",0],[0.516357421875,"adjust",2000],[4.1533203125,"ival-sqrt",400]],"outcomes":[[31.806396484375,1,"valid",210],[9.368408203125,2,"valid",35],[1.08251953125,0,"valid",11]],"time":54.25390625,"type":"localize"},{"count":[[4,25]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[2171440,2171440]],"outputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","1","(+ 1 (* -1/2 x))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))"]],"series":[[4.678955078125,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","-inf"],[2.056884765625,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","inf"],[1.319091796875,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","0"]],"time":8.6572265625,"type":"series"},{"count":[[25,25]],"egraph":[[0,8247,344,0.12154209],[3,3341,373,0.147190492],[2,930,383,0.010065856],[1,303,408,0.002462161],[0,114,457,0.000966974]],"inputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","1","(+ 1 (* -1/2 x))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))"]],"memory":[[9908368,55826432]],"method":["egg-herbie"],"outputs":[["(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(sqrt x)","(sqrt.f64 x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 x))","(fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(fma.f64 (fma.f64 #s(literal 3/8 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/16 binary64) x #s(literal 3/8 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(neg.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))"]],"stop":[["iter limit",1],["node limit",1]],"time":409.578857421875,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-2597056,13577280]],"outputs":[["x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))"]],"time":204.6240234375,"type":"rewrite"},{"compiler":[[674,139]],"memory":[[-3917344,3887168]],"time":6.4619140625,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) x)","fresh",59.01721410025442,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",40.97099483279758,"binary64"],["(-.f64 x x)","next",43.2027313011327,"binary64"],["(-.f64 x #s(literal 1 binary64))","fresh",61.79062226691756,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x)))","fresh",15.13672670900591,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","next",15.099103613420919,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","next",14.470714642318006,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","next",25.86690108577522,"binary64"],["x","next",61.79983633733473,"binary64"]],"compiler":[[3,3],[11,8],[3,2],[3,3],[36,25],[48,33],[25,18],[20,16],[1,1],[3,3],[3,2],[3,3],[36,25],[48,33],[25,18],[20,16],[1,1]],"count":[[40,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[39,8],"picked":[1,1]}],"memory":[[5005952,5005952]],"min-error":[[13.067922855379054,"binary64"]],"time":6.672119140625,"type":"prune"},{"egraph":[[0,8097,360,0.080837796],[5,7686,364,0.016853108],[4,2279,364,0.03081478],[3,706,364,0.008836346],[2,218,364,0.002264526],[1,110,364,0.000963774],[0,67,364,0.000649616],[0,40,366,0.000439363]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(sqrt.f64 x)","x","(-.f64 x x)","x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","#s(literal -1/2 binary64)","(+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))","(fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64))","#s(literal 1/4 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","(sqrt.f64 x)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(*.f64 x x)"]],"locations":[["(*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","cost-diff",0],["(+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","cost-diff",1],["(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","cost-diff",0],["(-.f64 x x)","cost-diff",2],["(/.f64 #s(literal -1/2 binary64) x)","cost-diff",0],["(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","cost-diff",0],["(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","cost-diff",0]],"memory":[[-8776240,38380848]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(sqrt.f64 x)","x","(-.f64 x x)","#s(literal 0 binary64)","x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))","#s(literal -1/2 binary64)","(+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))","(fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64))","#s(literal 1/4 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","(sqrt.f64 x)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":333.48095703125,"type":"simplify"},{"compiler":[[325,41]],"locations":[["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","accuracy",10.547988064171266],["(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","accuracy",14.409125897970911],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","accuracy",19.197758460043556],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","accuracy",23.301739059174626],["(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","accuracy",0.01171875],["(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.8019610904384626],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","accuracy",1.6188619550002374],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","accuracy",23.301739059174626],["(-.f64 x x)","accuracy",0.0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.11328125],["(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","accuracy",0.12109375],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","accuracy",1.53918623586791],["(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","accuracy",12.942672144002849]],"memory":[[7550064,55480096]],"mixsample":[[17.41064453125,"adjust",800],[14.932373046875,"ival-div",0],[3.666259765625,"ival-div",400],[0.10400390625,"ival-assert",0],[0.27490234375,"ival-div",1600],[8.212158203125,"ival-sub",0],[9.272705078125,"ival-sqrt",0],[9.96826171875,"ival-pow",0],[2.658203125,"adjust",2000],[9.138427734375,"ival-add",0],[15.605224609375,"ival-mult",0],[0.2763671875,"ival-sqrt",1600],[0.052001953125,"ival-add",1600],[1.16845703125,"ival-add",400],[0.23876953125,"ival-true",0],[0.794677734375,"exact",0],[4.367431640625,"ival-sqrt",400]],"outcomes":[[109.873291015625,1,"valid",210],[25.48291015625,2,"valid",35],[3.03515625,0,"valid",11]],"time":175.80712890625,"type":"localize"},{"count":[[16,62]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","(-.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))"]],"memory":[[22368,7427440]],"outputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ -1/2 (pow x 2))","(/ -1/2 x)","0","(* 1/2 (sqrt (/ 1 (pow x 3))))","(sqrt (/ 1 (pow x 3)))","(/ 1 (pow x 3))","(sqrt (/ 1 (pow x 5)))","(/ (+ (sqrt x) (* x (- (* 1/2 (sqrt x)) (sqrt x)))) (pow x 3))","(/ (+ (sqrt x) (* x (- (+ (* 1/2 (sqrt x)) (* x (- (sqrt x) (* 1/4 (sqrt x))))) (sqrt x)))) (pow x 3))","(/ (+ (sqrt x) (* x (- (+ (* 1/2 (sqrt x)) (* x (- (+ (sqrt x) (* -1 (sqrt (pow x 3)))) (* 1/4 (sqrt x))))) (sqrt x)))) (pow x 3))","(* -1/2 (sqrt (/ 1 (pow x 9))))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(/ (+ (sqrt x) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(* -1 (sqrt x))","(* x (- (sqrt (/ 1 (pow x 3))) (+ (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 (pow x 3)))))))","(* x (- (+ (sqrt (/ 1 (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 5))))) (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (* 1/4 (sqrt (/ 1 (pow x 3))))))))","(* x (- (+ (sqrt (/ 1 (pow x 3))) (+ (sqrt (/ 1 (pow x 7))) (* 1/2 (sqrt (/ 1 (pow x 5)))))) (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (* 1/4 (sqrt (/ 1 (pow x 3))))))))","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))) x)","(* 1/2 (sqrt x))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))))","(/ (+ (sqrt (/ 1 (pow x 3))) (* 1/2 (sqrt (/ 1 x)))) x)","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (- (* -1 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (* -1 (/ (- (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* (sqrt (/ 1 (pow x 5))) (pow (sqrt -1) 2))"]],"series":[[5.379150390625,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/ (/ -1/2 x) x) (/ -1/2 x) (- x x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (sqrt (/ 1 (pow x 3))) 1/2) (sqrt (/ 1 (pow x 3))) (/ 1 (pow x 3)) (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (sqrt (/ 1 x)) (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (sqrt (/ 1 (pow x 5))))","x","-inf"],[4.966796875,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/ (/ -1/2 x) x) (/ -1/2 x) (- x x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (sqrt (/ 1 (pow x 3))) 1/2) (sqrt (/ 1 (pow x 3))) (/ 1 (pow x 3)) (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (sqrt (/ 1 x)) (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (sqrt (/ 1 (pow x 5))))","x","inf"],[6.41015625,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/ (/ -1/2 x) x) (/ -1/2 x) (- x x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (sqrt (/ 1 (pow x 3))) 1/2) (sqrt (/ 1 (pow x 3))) (/ 1 (pow x 3)) (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (sqrt (/ 1 x)) (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (sqrt (/ 1 (pow x 5))))","x","0"]],"time":18.702880859375,"type":"series"},{"count":[[62,62]],"egraph":[[0,8294,1000,0.098230319],[2,2406,1058,0.028522874],[1,686,1209,0.007581458],[0,244,1604,0.002060892]],"inputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ -1/2 (pow x 2))","(/ -1/2 x)","0","(* 1/2 (sqrt (/ 1 (pow x 3))))","(sqrt (/ 1 (pow x 3)))","(/ 1 (pow x 3))","(sqrt (/ 1 (pow x 5)))","(/ (+ (sqrt x) (* x (- (* 1/2 (sqrt x)) (sqrt x)))) (pow x 3))","(/ (+ (sqrt x) (* x (- (+ (* 1/2 (sqrt x)) (* x (- (sqrt x) (* 1/4 (sqrt x))))) (sqrt x)))) (pow x 3))","(/ (+ (sqrt x) (* x (- (+ (* 1/2 (sqrt x)) (* x (- (+ (sqrt x) (* -1 (sqrt (pow x 3)))) (* 1/4 (sqrt x))))) (sqrt x)))) (pow x 3))","(* -1/2 (sqrt (/ 1 (pow x 9))))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(/ (+ (sqrt x) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(* -1 (sqrt x))","(* x (- (sqrt (/ 1 (pow x 3))) (+ (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 (pow x 3)))))))","(* x (- (+ (sqrt (/ 1 (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 5))))) (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (* 1/4 (sqrt (/ 1 (pow x 3))))))))","(* x (- (+ (sqrt (/ 1 (pow x 3))) (+ (sqrt (/ 1 (pow x 7))) (* 1/2 (sqrt (/ 1 (pow x 5)))))) (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (* 1/4 (sqrt (/ 1 (pow x 3))))))))","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))) x)","(* 1/2 (sqrt x))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))))","(/ (+ (sqrt (/ 1 (pow x 3))) (* 1/2 (sqrt (/ 1 x)))) x)","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (- (* -1 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (* -1 (/ (- (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* (sqrt (/ 1 (pow x 5))) (pow (sqrt -1) 2))"]],"memory":[[-15302816,53028320]],"method":["egg-herbie"],"outputs":[["(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ -1/2 (pow x 2))","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","(/ -1/2 x)","(/.f64 #s(literal -1/2 binary64) x)","0","#s(literal 0 binary64)","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(sqrt (/ 1 (pow x 3)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/ 1 (pow x 3))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(sqrt (/ 1 (pow x 5)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/ (+ (sqrt x) (* x (- (* 1/2 (sqrt x)) (sqrt x)))) (pow x 3))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) x (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (sqrt x) (* x (- (+ (* 1/2 (sqrt x)) (* x (- (sqrt x) (* 1/4 (sqrt x))))) (sqrt x)))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (sqrt x) (* x (- (+ (* 1/2 (sqrt x)) (* x (- (+ (sqrt x) (* -1 (sqrt (pow x 3)))) (* 1/4 (sqrt x))))) (sqrt x)))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64)))","(* -1/2 (sqrt (/ 1 (pow x 9))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 5))","(/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 5))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 5))","(/.f64 (fma.f64 (fma.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 3))","(/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 3))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (sqrt x) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64)))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (sqrt x))","(neg.f64 (sqrt.f64 x))","(* x (- (sqrt (/ 1 (pow x 3))) (+ (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3/4 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (- (+ (sqrt (/ 1 (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 5))))) (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (* 1/4 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3/4 binary64)) (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* x (- (+ (sqrt (/ 1 (pow x 3))) (+ (sqrt (/ 1 (pow x 7))) (* 1/2 (sqrt (/ 1 (pow x 5)))))) (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (* 1/4 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 3/4 binary64)) (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))) x)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64))))) #s(literal -1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))) x)","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(* x (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64))))) #s(literal -1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))) x)","(/ (+ (sqrt (/ 1 (pow x 3))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x)","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) #s(literal 1/2 binary64)) x)","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(* (sqrt x) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 x))","(* -1 (* x (- (* -1 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal -5/4 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (- (* -1 (/ (- (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (-.f64 (/.f64 (fma.f64 #s(literal -5/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/2 binary64)) x)) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (- (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (-.f64 (/.f64 (fma.f64 #s(literal -5/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))) x))","(/.f64 (*.f64 (fma.f64 #s(literal 5/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) #s(literal 1/2 binary64)) x)","(* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 5/8 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/2 binary64)) x) #s(literal 1/2 binary64))) (neg.f64 x))) x)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 (/.f64 (fma.f64 #s(literal -5/8 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (neg.f64 x))) x) #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)))))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) (fma.f64 #s(literal 5/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 5/8 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/2 binary64)) x) #s(literal 1/2 binary64))) (neg.f64 x))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(fma.f64 (/.f64 (fma.f64 #s(literal -5/8 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (neg.f64 x))) x) x (*.f64 (*.f64 #s(literal 1/2 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64))","(* -1 (/ (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)","(* (sqrt (/ 1 (pow x 5))) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))"]],"stop":[["iter limit",1],["node limit",1]],"time":254.301025390625,"type":"simplify"},{"count":[[16,198]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","(-.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))"]],"memory":[[-9618096,17483824]],"outputs":[["#s(approx 8 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(approx 8 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(approx 8 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/4 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 10 binary64)","#s(literal 5/2 binary64)"]],"time":557.638916015625,"type":"rewrite"},{"compiler":[[3616,425]],"memory":[[7624496,7624496]],"time":10.447998046875,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) x)","next",59.01721410025442,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",40.97099483279758,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x)))","fresh",15.13672670900591,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","done",15.099103613420919,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","next",15.184263262569088,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","fresh",16.020175426355173,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","done",14.470714642318006,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","next",15.981094196096112,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","done",25.86690108577522,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","fresh",0.9224606466336005,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","next",0.853627050237989,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))))","fresh",45.88277747811813,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","fresh",61.0019310526768,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","next",43.2027313011327,"binary64"]],"compiler":[[3,3],[11,8],[36,25],[48,33],[68,44],[56,38],[25,18],[25,18],[20,16],[68,44],[79,49],[40,26],[13,10],[13,10],[3,3],[36,25],[68,44],[56,38],[25,18],[68,44],[79,49],[40,26],[13,10],[13,10]],"count":[[87,14]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[78,8],"picked":[5,3]}],"memory":[[563808,8494752]],"min-error":[[0.2769306918393207,"binary64"]],"time":12.130126953125,"type":"prune"},{"egraph":[[0,8048,474,0.075672502],[5,7054,498,0.021414807],[4,2751,506,0.031100706],[3,866,514,0.010194767],[2,313,529,0.004411871],[1,153,573,0.001571061],[0,86,573,0.000780001],[0,62,573,0.000453578]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","#s(literal -1/2 binary64)","(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","#s(literal 3/4 binary64)","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1/4 binary64) x)","#s(literal 1/4 binary64)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","#s(literal 0 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(sqrt.f64 x)","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","#s(literal -1/2 binary64)","(*.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","#s(literal 1/2 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(literal -3/8 binary64)","(*.f64 x x)"]],"locations":[["(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","cost-diff",3],["(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","cost-diff",4],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","cost-diff",0],["(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","cost-diff",0],["#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","cost-diff",0],["(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","cost-diff",3],["(fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","cost-diff",8]],"memory":[[-1980992,35362656]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (-.f64 (/.f64 (+.f64 #s(literal -3/8 binary64) (/.f64 #s(literal 1/4 binary64) x)) x) #s(literal -1/2 binary64)))))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (-.f64 (/.f64 (+.f64 #s(literal -3/8 binary64) (/.f64 #s(literal 1/4 binary64) x)) x) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (-.f64 (/.f64 (+.f64 #s(literal -3/8 binary64) (/.f64 #s(literal 1/4 binary64) x)) x) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 (/.f64 (+.f64 #s(literal -3/8 binary64) (/.f64 #s(literal 1/4 binary64) x)) x) #s(literal -1/2 binary64)))","#s(literal -1/2 binary64)","(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(*.f64 (+.f64 (/.f64 #s(literal 3/4 binary64) x) #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(literal 3/4 binary64)","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(*.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) x) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1/4 binary64) x)","#s(literal 1/4 binary64)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","#s(literal 0 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(sqrt.f64 x)","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","#s(literal -1/2 binary64)","(*.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -3/8 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -3/8 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -3/8 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -3/8 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","(*.f64 (-.f64 (/.f64 #s(literal -3/8 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(literal 1/2 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(*.f64 (/.f64 #s(literal -3/8 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(literal -3/8 binary64)","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":237.64404296875,"type":"simplify"},{"compiler":[[379,56]],"locations":[["(*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","accuracy",0.3046875],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","accuracy",0.6775983681774936],["#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","accuracy",0.7310599754785831],["(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x))","accuracy",14.409125897970911],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.11328125],["(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","accuracy",1.2198672835606168],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","accuracy",1.53918623586791],["(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","accuracy",12.942672144002849],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","accuracy",43.2027313011327],["(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","accuracy",0.17578125],["(*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","accuracy",0.21875],["#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","accuracy",0.4765850547057258],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","accuracy",0.6775983681774936]],"memory":[[5013248,73209200]],"mixsample":[[29.3203125,"ival-div",0],[102.464599609375,"adjust",800],[3.87548828125,"ival-div",400],[0.15478515625,"ival-assert",0],[0.254150390625,"ival-div",1600],[6.976806640625,"ival-sub",0],[11.07568359375,"ival-sqrt",0],[9.76611328125,"ival-pow",0],[3.591064453125,"adjust",2000],[14.27978515625,"ival-add",0],[0.0576171875,"ival-add",1600],[34.056640625,"ival-mult",0],[0.2890625,"ival-sqrt",1600],[1.159423828125,"ival-add",400],[0.255126953125,"ival-true",0],[1.168212890625,"exact",0],[4.562255859375,"ival-sqrt",400],[2.282470703125,"ival-neg",0]],"outcomes":[[230.240966796875,1,"valid",210],[35.117431640625,2,"valid",35],[4.376708984375,0,"valid",11]],"time":312.033935546875,"type":"localize"},{"count":[[19,79]],"inputs":[["(fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","(*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"memory":[[-674512,6799344]],"outputs":[["(* 1/4 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 3))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(* 3/4 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1 (sqrt (pow x 3))) (* 3/4 (sqrt x))) (pow x 2))","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 9))))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 5))","(/ 1 x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(* -3/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -3/8 (sqrt (/ 1 x)))","(/ (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(* 1/4 (sqrt (/ 1 (pow x 3))))","(* 1/4 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 4))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 4))","(/ -1/2 (pow x 2))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(* 1/2 (sqrt (/ 1 x)))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* -1 (sqrt (/ 1 x)))","(- (* 3/4 (sqrt (/ 1 (pow x 3)))) (sqrt (/ 1 x)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(* -1 (sqrt x))","(* x (- (sqrt (/ 1 (pow x 3))) (sqrt (/ 1 x))))","(* 1/2 (sqrt x))","(* x (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))) x)","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (* 3/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* 1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))))","(* 1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))"]],"series":[[6.574951171875,"((+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x)))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (- (sqrt (/ 1 x)) (sqrt x)) (/ -1/2 (* x x))) (- (sqrt (/ 1 x)) (sqrt x)) (sqrt (/ 1 x)) (+ (* 1/2 (sqrt (/ 1 x))) (/ (* -3/8 (sqrt (/ 1 x))) x)) (* (+ (* 1/2 (sqrt (/ 1 x))) (/ (* -3/8 (sqrt (/ 1 x))) x)) x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (* (/ 1/4 x) (sqrt (/ 1 x))) (/ (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) x) (/ -1/2 (* x x)) (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* -3/8 (sqrt (/ 1 x))))","x","-inf"],[3.18896484375,"((+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x)))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (- (sqrt (/ 1 x)) (sqrt x)) (/ -1/2 (* x x))) (- (sqrt (/ 1 x)) (sqrt x)) (sqrt (/ 1 x)) (+ (* 1/2 (sqrt (/ 1 x))) (/ (* -3/8 (sqrt (/ 1 x))) x)) (* (+ (* 1/2 (sqrt (/ 1 x))) (/ (* -3/8 (sqrt (/ 1 x))) x)) x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (* (/ 1/4 x) (sqrt (/ 1 x))) (/ (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) x) (/ -1/2 (* x x)) (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* -3/8 (sqrt (/ 1 x))))","x","inf"],[5.333984375,"((+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x)))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (- (sqrt (/ 1 x)) (sqrt x)) (/ -1/2 (* x x))) (- (sqrt (/ 1 x)) (sqrt x)) (sqrt (/ 1 x)) (+ (* 1/2 (sqrt (/ 1 x))) (/ (* -3/8 (sqrt (/ 1 x))) x)) (* (+ (* 1/2 (sqrt (/ 1 x))) (/ (* -3/8 (sqrt (/ 1 x))) x)) x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (* (/ 1/4 x) (sqrt (/ 1 x))) (/ (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) x) (/ -1/2 (* x x)) (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* -3/8 (sqrt (/ 1 x))))","x","0"]],"time":17.72802734375,"type":"series"},{"count":[[79,79]],"egraph":[[0,8243,1178,0.095477851],[3,6059,1242,0.027410566],[2,2307,1245,0.027031099],[1,675,1302,0.008064233],[0,249,1725,0.0025365]],"inputs":[["(* 1/4 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 3))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(* 3/4 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1 (sqrt (pow x 3))) (* 3/4 (sqrt x))) (pow x 2))","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 9))))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 5))","(/ 1 x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(* -3/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -3/8 (sqrt (/ 1 x)))","(/ (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(* 1/4 (sqrt (/ 1 (pow x 3))))","(* 1/4 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 4))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 4))","(/ -1/2 (pow x 2))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(* 1/2 (sqrt (/ 1 x)))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* -1 (sqrt (/ 1 x)))","(- (* 3/4 (sqrt (/ 1 (pow x 3)))) (sqrt (/ 1 x)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(* -1 (sqrt x))","(* x (- (sqrt (/ 1 (pow x 3))) (sqrt (/ 1 x))))","(* 1/2 (sqrt x))","(* x (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))) x)","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (* 3/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* 1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))))","(* 1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))"]],"memory":[[-3464160,47029056]],"method":["egg-herbie"],"outputs":[["(* 1/4 (sqrt (/ 1 (pow x 5))))","(*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -3/8 binary64) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(* 3/4 (sqrt (/ 1 (pow x 3))))","(*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/ (+ (* -1 (sqrt (pow x 3))) (* 3/4 (sqrt x))) (pow x 2))","(/.f64 (-.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(* -1/2 (sqrt (/ 1 (pow x 9))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 5))","(/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 5))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 5))","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) #s(literal -1/2 binary64))) (*.f64 x x) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal 5 binary64)))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","(* -3/8 (sqrt (/ 1 (pow x 3))))","(*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/ (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(* -3/8 (sqrt (/ 1 x)))","(*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x)","(* 1/4 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/4 binary64))","(* 1/4 (sqrt (/ 1 (pow x 7))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/4 binary64))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 4))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -3/8 binary64) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 4))","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/ -1/2 (pow x 2))","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 3))","(/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 3))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) #s(literal -1/2 binary64))) (*.f64 x x) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(* -1 (sqrt (/ 1 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (* 3/4 (sqrt (/ 1 (pow x 3)))) (sqrt (/ 1 x)))","(-.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) (*.f64 x x))","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))) x)","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64))))) #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)","(* -1 (sqrt x))","(neg.f64 (sqrt.f64 x))","(* x (- (sqrt (/ 1 (pow x 3))) (sqrt (/ 1 x))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* x (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))) x)","(/.f64 (fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))) x)","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (*.f64 #s(literal -1/2 binary64) x) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(* x (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64))))) #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))","(+ (* -3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)))","(+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(- (* 3/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 #s(literal -3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))) x))","(*.f64 (/.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal -5/4 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x) #s(literal -1/2 binary64))","(* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -5/4 binary64)) #s(literal -1/2 binary64))) x)) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -5/4 binary64)) #s(literal -1/2 binary64))) (neg.f64 x))) (neg.f64 x))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x))","(* (sqrt x) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 x))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (-.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x)","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* 1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) x)","(* 1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) x)","(* -1 (/ (+ (* -1 (/ (+ (* -3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)) x)","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal -5/4 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(literal -1/2 binary64)) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -5/4 binary64)) #s(literal -1/2 binary64))) x) x (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) x)))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -5/4 binary64)) #s(literal -1/2 binary64))) (neg.f64 x))) (neg.f64 x))","(* -3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":307.908935546875,"type":"simplify"},{"count":[[19,187]],"inputs":[["(fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x))","(*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"memory":[[3358432,18867024]],"outputs":[["#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(approx 125 #s(approx 125 #s(literal -1/2 binary64)))","#s(approx 125 #s(literal -1/2 binary64))","#s(approx 125 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(approx 125 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(approx 125 (/.f64 #s(approx 125 #s(literal -1/2 binary64)) #s(literal -1/2 binary64)))","(/.f64 #s(approx 125 #s(literal -1/2 binary64)) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(approx 125 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -3/8 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)"]],"time":893.110107421875,"type":"rewrite"},{"compiler":[[7038,595]],"memory":[[-1095936,10517104]],"time":15.0498046875,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",40.97099483279758,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","done",15.099103613420919,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","done",15.184263262569088,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","next",16.020175426355173,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) #s(approx (* (+ (* 1/2 (sqrt (/ 1 x))) (/ (* -3/8 (sqrt (/ 1 x))) x)) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x))) (*.f64 x x)))","fresh",44.89232942433399,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","done",14.470714642318006,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","done",15.981094196096112,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","done",25.86690108577522,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","next",45.69426957626367,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","fresh",16.060243350104912,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","fresh",0.9224606466336005,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) #s(approx (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x)))) (/.f64 (-.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","fresh",44.83912082739873,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","next",0.853627050237989,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","next",1.7910786067238715,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x)))","fresh",58.958010179278446,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","next",61.0019310526768,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","done",43.2027313011327,"binary64"]],"compiler":[[11,8],[48,33],[68,44],[56,38],[82,51],[25,18],[25,18],[20,16],[35,23],[29,19],[68,44],[94,60],[80,49],[88,52],[55,37],[13,10],[13,10],[56,38],[82,51],[35,23],[29,19],[68,44],[94,60],[80,49],[88,52],[55,37],[13,10]],"count":[[122,17]],"kept":[{"done":[4,4],"fresh":[5,3],"new":[108,7],"picked":[5,3]}],"memory":[[-4986656,11295440]],"min-error":[[0.2707394320708787,"binary64"]],"time":13.6650390625,"type":"prune"},{"egraph":[[0,8085,662,0.076017731],[5,7329,690,0.020744477],[4,2839,708,0.031198781],[3,985,724,0.012011834],[2,374,733,0.003596385],[1,187,797,0.001554929],[0,103,802,0.000887107],[0,75,806,0.000543265]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))))","#s(literal -1/2 binary64)","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","#s(literal -1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","#s(literal 3/4 binary64)","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x)","(*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","(*.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","#s(literal 1/4 binary64)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","(*.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x))","(/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","#s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/2 binary64)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","(*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","#s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x))","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","(-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))","(sqrt.f64 x)","x","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","#s(literal -1/2 binary64)","(*.f64 x x)"]],"locations":[["(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","cost-diff",0],["#s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x))","cost-diff",0],["(*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","cost-diff",0],["#s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","cost-diff",0],["(/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","cost-diff",0],["#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","cost-diff",0],["#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","cost-diff",0],["(*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))))","cost-diff",2],["(fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","cost-diff",4],["(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","cost-diff",6]],"memory":[[4318320,35138608]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (+.f64 (/.f64 (+.f64 #s(literal -3/8 binary64) (/.f64 #s(literal 1/4 binary64) x)) x) #s(literal 1/2 binary64)))))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (+.f64 (/.f64 (+.f64 #s(literal -3/8 binary64) (/.f64 #s(literal 1/4 binary64) x)) x) #s(literal 1/2 binary64))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (+.f64 (/.f64 (+.f64 #s(literal -3/8 binary64) (/.f64 #s(literal 1/4 binary64) x)) x) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 (+.f64 #s(literal -3/8 binary64) (/.f64 #s(literal 1/4 binary64) x)) x) #s(literal 1/2 binary64)))","#s(literal -1/2 binary64)","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal -1 binary64) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 3/4 binary64)) x)))","#s(literal -1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 3/4 binary64)) x))","#s(literal 3/4 binary64)","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x)","(*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","(*.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","#s(literal 1/4 binary64)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) (*.f64 x x)))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) (*.f64 x x))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","(*.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x))","(/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","#s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/2 binary64)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","(*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","#s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x))","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","(-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))","(sqrt.f64 x)","x","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","#s(literal -1/2 binary64)","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":239.580078125,"type":"simplify"},{"compiler":[[488,61]],"locations":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","accuracy",1.53918623586791],["(*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","accuracy",12.942672144002849],["(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","accuracy",18.626248361407885],["(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","accuracy",23.23188745306421],["(/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","accuracy",0.17578125],["#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x))","accuracy",0.4765850547057258],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","accuracy",0.6775983681774936],["#s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","accuracy",1.61294947634188],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","accuracy",0.6775983681774936],["#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","accuracy",1.6282715695213383],["(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","accuracy",14.409125897970911],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","accuracy",61.0019310526768],["(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","accuracy",0.18359375],["#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x))","accuracy",0.4765850547057258],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","accuracy",0.6775983681774936],["(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","accuracy",1.2198672835606168]],"memory":[[3436416,85529280]],"mixsample":[[35.011962890625,"ival-div",0],[26.373291015625,"adjust",800],[3.775390625,"ival-div",400],[0.13623046875,"ival-assert",0],[0.325439453125,"ival-div",1600],[9.648193359375,"ival-sub",0],[16.204345703125,"ival-sqrt",0],[16.81103515625,"ival-pow",0],[3.453857421875,"adjust",2000],[17.292236328125,"ival-add",0],[0.059326171875,"ival-add",1600],[40.010986328125,"ival-mult",0],[0.29833984375,"ival-sqrt",1600],[1.129150390625,"ival-add",400],[0.2939453125,"ival-true",0],[0.942138671875,"exact",0],[4.884521484375,"ival-sqrt",400],[2.451171875,"ival-neg",0]],"outcomes":[[184.644287109375,1,"valid",210],[38.82861328125,2,"valid",35],[4.426025390625,0,"valid",11]],"time":281.64892578125,"type":"localize"},{"count":[[21,79]],"inputs":[["(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x))","(/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","#s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","(*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","#s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x))","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x))","(sqrt.f64 x)","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))"]],"memory":[[-979232,6925008]],"outputs":[["(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 3/4 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1 (sqrt (pow x 3))) (* 3/4 (sqrt x))))) (pow x 3))","(* 1/4 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 3))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 9))))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(* 1/2 (sqrt x))","(* 1/4 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 4))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 4))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(/ -1/2 (pow x 2))","(sqrt x)","(sqrt (pow x 3))","(* 3/4 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 3/4 (sqrt (/ 1 x)))) x)","(* -1 (sqrt (/ 1 x)))","(+ (* -1 (sqrt (/ 1 x))) (* 3/4 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 3/4 (sqrt (/ 1 (pow x 3))))))","(* 1/2 (sqrt (/ 1 x)))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))) x)","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))))","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(* -1 (sqrt x))","(* x (- (sqrt (/ 1 (pow x 3))) (sqrt (/ 1 x))))","(* x (+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x)))))","(* 3/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -3/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (/ (+ (* -3/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))))","(* (sqrt (pow x 3)) (pow (sqrt -1) 2))"]],"series":[[5.614990234375,"((+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (* (/ -1/2 (* x x)) (sqrt (/ 1 x)))) (+ (* -1 (sqrt (/ 1 x))) (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (* (/ -1/2 (* x x)) (sqrt (/ 1 x))))) (* -1/2 (+ (* -1 (sqrt (/ 1 x))) (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (* (/ -1/2 (* x x)) (sqrt (/ 1 x)))))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* 1/2 (sqrt x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/ (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) x) (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (- (sqrt (/ 1 x)) (sqrt x)) (/ -1/2 (* x x))) (- (sqrt (/ 1 x)) (sqrt x)) (/ (- (sqrt x) (sqrt (pow x 3))) x) (/ -1/2 (* x x)) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (sqrt x) (sqrt (pow x 3)))","x","-inf"],[5.369873046875,"((+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (* (/ -1/2 (* x x)) (sqrt (/ 1 x)))) (+ (* -1 (sqrt (/ 1 x))) (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (* (/ -1/2 (* x x)) (sqrt (/ 1 x))))) (* -1/2 (+ (* -1 (sqrt (/ 1 x))) (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (* (/ -1/2 (* x x)) (sqrt (/ 1 x)))))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* 1/2 (sqrt x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/ (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) x) (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (- (sqrt (/ 1 x)) (sqrt x)) (/ -1/2 (* x x))) (- (sqrt (/ 1 x)) (sqrt x)) (/ (- (sqrt x) (sqrt (pow x 3))) x) (/ -1/2 (* x x)) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (sqrt x) (sqrt (pow x 3)))","x","inf"],[3.075927734375,"((+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (* (/ -1/2 (* x x)) (sqrt (/ 1 x)))) (+ (* -1 (sqrt (/ 1 x))) (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (* (/ -1/2 (* x x)) (sqrt (/ 1 x))))) (* -1/2 (+ (* -1 (sqrt (/ 1 x))) (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (* (/ -1/2 (* x x)) (sqrt (/ 1 x)))))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* 1/2 (sqrt x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/ (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) x) (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (- (sqrt (/ 1 x)) (sqrt x)) (/ -1/2 (* x x))) (- (sqrt (/ 1 x)) (sqrt x)) (/ (- (sqrt x) (sqrt (pow x 3))) x) (/ -1/2 (* x x)) (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (sqrt x) (sqrt (pow x 3)))","x","0"]],"time":16.198974609375,"type":"series"},{"count":[[79,79]],"egraph":[[0,8373,1203,0.10545284],[3,6263,1271,0.023971122],[2,2442,1273,0.021063562],[1,726,1339,0.008800501],[0,264,1777,0.002486025]],"inputs":[["(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 3/4 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1 (sqrt (pow x 3))) (* 3/4 (sqrt x))))) (pow x 3))","(* 1/4 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 3))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 9))))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 5))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 3))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(* 1/2 (sqrt x))","(* 1/4 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 4))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 4))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(/ -1/2 (pow x 2))","(sqrt x)","(sqrt (pow x 3))","(* 3/4 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 3/4 (sqrt (/ 1 x)))) x)","(* -1 (sqrt (/ 1 x)))","(+ (* -1 (sqrt (/ 1 x))) (* 3/4 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 3/4 (sqrt (/ 1 (pow x 3))))))","(* 1/2 (sqrt (/ 1 x)))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))) x)","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))))","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(* -1 (sqrt x))","(* x (- (sqrt (/ 1 (pow x 3))) (sqrt (/ 1 x))))","(* x (+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x)))))","(* 3/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -3/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (/ (+ (* -3/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* -1 (/ (+ (* -3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))))","(* (sqrt (pow x 3)) (pow (sqrt -1) 2))"]],"memory":[[4713504,47252112]],"method":["egg-herbie"],"outputs":[["(* -1/2 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* 3/4 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3/4 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1 (sqrt (pow x 3))) (* 3/4 (sqrt x))))) (pow x 3))","(/.f64 (fma.f64 (neg.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 3/4 binary64) x #s(literal -1/2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 1/4 (sqrt (/ 1 (pow x 5))))","(*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 3))","(/.f64 (fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(* -1/2 (sqrt (/ 1 (pow x 9))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 5))","(/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 5))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 3/4 binary64) x #s(literal -1/2 binary64))) x (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 5))","(/.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 3/4 binary64) x #s(literal -1/2 binary64))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/2 binary64) x))) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* -1/2 (* x (- (* 1/2 (sqrt x)) (sqrt x))))) (pow x 3))","(/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (* x (- (sqrt x) (* 1/4 (sqrt x))))) (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x)))))) (pow x 3))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 3/4 binary64) x #s(literal -1/2 binary64))) x (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* x (+ (* -1/2 (- (* 1/2 (sqrt x)) (sqrt x))) (* x (+ (* -1/2 (- (sqrt x) (* 1/4 (sqrt x)))) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 3/4 binary64) x #s(literal -1/2 binary64))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/2 binary64) x))) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* 1/4 (sqrt (/ 1 (pow x 7))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/4 binary64))","(/ (+ (* -3/8 (sqrt (pow x 3))) (* 1/4 (sqrt x))) (pow x 4))","(/.f64 (fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/ (+ (* 1/4 (sqrt x)) (* x (+ (* -3/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 4))","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","(/ -1/2 (pow x 2))","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","(sqrt x)","(sqrt.f64 x)","(sqrt (pow x 3))","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(* 3/4 (sqrt (/ 1 (pow x 3))))","(*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 3/4 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64))) x)","(* -1 (sqrt (/ 1 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (sqrt (/ 1 x))) (* 3/4 (sqrt (/ 1 (pow x 3)))))","(-.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 3/4 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (-.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) (*.f64 x x))","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(/ (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))) x)","(/.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 3/4 binary64) x))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))) x)","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 3/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64))))) #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* x (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 3/4 binary64) x))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(* x (+ (* -1/2 (sqrt (/ 1 (pow x 7)))) (+ (* -1/2 (/ (- (sqrt (/ 1 x)) (* 1/4 (sqrt (/ 1 x)))) x)) (+ (* -1/2 (/ (- (* 1/2 (sqrt (/ 1 x))) (sqrt (/ 1 x))) (pow x 2))) (* 1/2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 3/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64))))) #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(/ (+ (* -3/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))) x)","(/.f64 (fma.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))) x)","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)","(* -1 (sqrt x))","(neg.f64 (sqrt.f64 x))","(* x (- (sqrt (/ 1 (pow x 3))) (sqrt (/ 1 x))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x)))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* 3/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 #s(literal -3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(* -1 (/ (+ (* -3/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 #s(literal -3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))) x)","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (/ (+ (* -3/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64))) x))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))","(+ (* -3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)))","(+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))) x))","(*.f64 (/.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal -5/4 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x) #s(literal -1/2 binary64))","(* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -5/4 binary64)) #s(literal -1/2 binary64))) x)) x))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -5/4 binary64)) #s(literal -1/2 binary64))) (neg.f64 x))) (neg.f64 x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (/ (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal -5/4 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(literal -1/2 binary64)) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))) (* 1/2 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -5/4 binary64)) #s(literal -1/2 binary64))) x) x (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) x)))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (- (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (- (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* -1/4 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -5/4 binary64)) #s(literal -1/2 binary64))) (neg.f64 x))) (neg.f64 x))","(* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 3/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) x)","(* -1 (/ (+ (* -1 (/ (+ (* -3/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/4 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)) x)","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x) #s(literal 1/2 binary64))","(* (sqrt x) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 x))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)) (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))))","(*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x)","(* (sqrt (pow x 3)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))"]],"stop":[["iter limit",1],["node limit",1]],"time":298.737060546875,"type":"simplify"},{"count":[[21,133]],"inputs":[["(fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","(/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","#s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x))","(/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","#s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","(*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x)))","#s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x))","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","#s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x))","(sqrt.f64 x)","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))"]],"memory":[[-8928096,18739248]],"outputs":[["#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(approx 125 #s(approx 125 #s(literal 3/4 binary64)))","#s(approx 125 #s(literal 3/4 binary64))","#s(approx 125 (/.f64 #s(approx 125 #s(literal 3/4 binary64)) #s(literal 3/4 binary64)))","(/.f64 #s(approx 125 #s(literal 3/4 binary64)) #s(literal 3/4 binary64))","#s(approx 125 #s(literal 3/4 binary64))","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(approx 125 #s(approx 125 (/.f64 #s(approx 125 #s(literal 3/4 binary64)) #s(literal 3/4 binary64))))","#s(approx 125 (/.f64 #s(approx 125 #s(literal 3/4 binary64)) #s(literal 3/4 binary64)))","(/.f64 #s(approx 125 #s(literal 3/4 binary64)) #s(literal 3/4 binary64))","#s(approx 125 #s(literal 3/4 binary64))","#s(approx 125 (*.f64 #s(approx 125 #s(literal 3/4 binary64)) #s(literal 3/4 binary64)))","(*.f64 #s(approx 125 #s(literal 3/4 binary64)) #s(literal 3/4 binary64))","#s(approx 125 #s(literal 3/4 binary64))","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(approx 125 #s(literal 3/4 binary64))","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 125 binary64)","#s(literal 5 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)"]],"time":954.544921875,"type":"rewrite"},{"compiler":[[6558,593]],"memory":[[2340736,10051792]],"time":14.444091796875,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",40.97099483279758,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))","done",15.099103613420919,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","done",15.184263262569088,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","done",16.020175426355173,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) #s(approx (* (+ (* 1/2 (sqrt (/ 1 x))) (/ (* -3/8 (sqrt (/ 1 x))) x)) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x))) (*.f64 x x)))","fresh",44.89232942433399,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","done",14.470714642318006,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","done",15.981094196096112,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","done",25.86690108577522,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","done",45.69426957626367,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","fresh",16.060243350104912,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 3/4 binary64) x #s(literal -1/2 binary64))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/2 binary64) x))) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))))","fresh",51.07684951989115,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","fresh",0.9224606466336005,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) #s(approx (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x)))) (/.f64 (-.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","fresh",44.83912082739873,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","done",0.853627050237989,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/4 binary64))) x)))","fresh",60.99537834024535,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","done",1.7910786067238715,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x)))","fresh",58.958010179278446,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","done",61.0019310526768,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","done",43.2027313011327,"binary64"]],"compiler":[[1117,187],[11,8],[48,33],[68,44],[56,38],[82,51],[25,18],[25,18],[20,16],[35,23],[29,19],[79,52],[68,44],[94,60],[80,49],[63,44],[88,52],[55,37],[13,10],[13,10]],"count":[[119,19]],"kept":[{"done":[7,7],"fresh":[5,5],"new":[102,2],"picked":[5,5]}],"memory":[[5229264,13547008]],"min-error":[[0.27067428073827465,"binary64"]],"time":18.159912109375,"type":"prune"},{"accuracy":[0.8536270502379888],"baseline":[0.853627050237989],"branch":[["x",0.8536270502379889,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.8536270502379888,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[26,1]],"inputs":[["x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x)))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/4 binary64))) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) #s(approx (* (+ (* 1/2 (sqrt (/ 1 x))) (/ (* -3/8 (sqrt (/ 1 x))) x)) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -3/8 binary64) (sqrt.f64 x))) x))) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) #s(approx (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x)))) (/.f64 (-.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 x x))) (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 3/4 binary64) x #s(literal -1/2 binary64))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/2 binary64) x))) x (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 5 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)))"]],"memory":[[-8775920,8770016]],"oracle":[63.63380873040644],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))"]],"repr":["binary64"],"time":14.39013671875,"times":[[5.89892578125,"x"],[4.947021484375,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[0.9224606466336005],"baseline":[0.9224606466336005],"branch":[["x",0.9224606466336005,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.9224606466336005,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[16,1]],"inputs":[["x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x)))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/4 binary64))) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)) (*.f64 x x)))"]],"memory":[[6190720,6190720]],"oracle":[62.61095716558688],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))"]],"repr":["binary64"],"time":8.85986328125,"times":[[4.218994140625,"x"],[3.403076171875,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[1.7910786067238713],"baseline":[1.7910786067238715],"branch":[["x",1.7910786067238715,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",1.7910786067238713,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[14,1]],"inputs":[["x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x)))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/4 binary64))) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))"]],"memory":[[-2274864,5911632]],"oracle":[62.61095716558688],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))"]],"repr":["binary64"],"time":8.300048828125,"times":[[3.75390625,"x"],[3.4521484375,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[16.020175426355166],"baseline":[16.020175426355173],"branch":[["x",16.02017542635517,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",16.020175426355166,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[9,1]],"inputs":[["x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x)))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))"]],"memory":[[-3650240,4649968]],"oracle":[62.288427475117636],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))"]],"repr":["binary64"],"time":6.10400390625,"times":[[2.79296875,"x"],[2.387939453125,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[41.85603172113558],"baseline":[43.2027313011327],"branch":[["x",41.85603172113558,2,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",43.20273130113272,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[7,2]],"inputs":[["x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x)))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[4124448,4124448]],"oracle":[62.288427475117636],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))"]],"repr":["binary64"],"time":5.115966796875,"times":[[2.255859375,"x"],[2.142822265625,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[43.202731301132715],"baseline":[43.2027313011327],"branch":[["x",43.202731301132715,1,"binary64"]],"compiler":[[1,1]],"count":[[5,1]],"inputs":[["x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 1/4 binary64))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)"]],"memory":[[2265024,2265024]],"oracle":[62.288427475117636],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))"]],"repr":["binary64"],"time":2.4150390625,"times":[[1.947998046875,"x"]],"type":"regimes"},{"accuracy":[61.79983633733467],"baseline":[61.79983633733473],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",61.79983633733472,1,"binary64"],["x",61.79983633733467,1,"binary64"]],"compiler":[[11,8],[1,1]],"count":[[1,1]],"inputs":[["x"]],"link":["."],"memory":[[-6047968,2720736]],"name":["2isqrt (example 3.6)"],"oracle":[61.79983633733473],"outputs":[["x"]],"repr":["binary64"],"time":2.760009765625,"times":[[1.22509765625,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"],[1.06103515625,"x"]],"type":"regimes"},{"bstep":[[15.85009765625,6.2877428880762756e+153,8.802300759271632e+154]],"compiler":[[13,11],[55,38],[13,11],[55,38],[13,11],[55,38],[13,11],[55,38],[13,11],[55,38],[13,11],[55,38],[13,11],[1,1]],"memory":[[5297344,5297344]],"method":["binary-search"],"mixsample":[[1.631591796875,"adjust",800],[1.39453125,"ival-div",0],[0.51806640625,"ival-add",0],[1.388916015625,"ival-div",400],[0.033447265625,"ival-assert",0],[0.84619140625,"ival-sub",0],[0.476806640625,"ival-add",400],[0.0771484375,"ival-true",0],[1.310791015625,"ival-sqrt",0],[0.052001953125,"exact",0],[1.557373046875,"ival-sqrt",400]],"outcomes":[[12.064208984375,1,"valid",96]],"stop":[["narrow-enough",1]],"time":18.401123046875,"type":"bsearch"},{"egraph":[[4,2417,369,0.032135595],[3,720,372,0.009275428],[2,264,372,0.002868648],[1,135,377,0.001539597],[0,81,377,0.001126223]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","(if (<=.f64 x #s(literal 9200000000000000518545305213024033598426264470011267738519857070493786661378473380073103507677649297895503436806787926142187353037583420782826193300750336 binary64)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","x"]],"memory":[[-1552432,14107488]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64)))) x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","(if (<=.f64 x #s(literal 9200000000000000518545305213024033598426264470011267738519857070493786661378473380073103507677649297895503436806787926142187353037583420782826193300750336 binary64)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))","x"]],"stop":[["node limit",1]],"time":75.60986328125,"type":"simplify"},{"compiler":[[378,85]],"memory":[[1474016,1474016]],"stop":[["fuel",1]],"time":2.887939453125,"type":"soundness"},{"compiler":[[378,85],[378,85],[9,7],[9,7],[11,8],[11,8]],"memory":[[-7616512,28987792]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":104.072021484375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01318359375,"type":"end"}]