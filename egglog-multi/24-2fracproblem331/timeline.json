[{"memory":[[11104,11104]],"time":0.026123046875,"type":"start"},{"compiler":[[11,8]],"memory":[[668736,668736]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":1.98095703125,"type":"analyze"},{"bogosity":[{"infinite":0.00024212977682897286,"invalid":0.0,"precondition":0.00048828125,"valid":0.9992695889731711}],"memory":[[16060272,245564688]],"mixsample":[[151.67919921875,"ival-div",0],[83.2333984375,"adjust",800],[63.857177734375,"ival-add",0],[68.64599609375,"ival-div",400],[4.26123046875,"ival-assert",0],[66.71484375,"ival-sub",0],[26.5,"ival-add",400],[6.984375,"ival-true",0],[0.01708984375,"ival-sub",400],[5.918212890625,"exact",0]],"outcomes":[[454.6884765625,1,"valid",3811],[245.4267578125,0,"valid",4445]],"time":966.510009765625,"type":"sample"},{"compiler":[[9,6],[24,8],[24,8]],"confusion":[[62,0,1,193]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","cancellation",63,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",62,1,[-6.036062164988527e+161],0,false],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,63],[0,193]],"maybe-confusion":[[62,0,0,1,0,193]],"memory":[[-1348256,43640768]],"mixsample":[[4.4169921875,"adjust",800],[8.36572265625,"ival-div",0],[2.958740234375,"ival-add",0],[3.71337890625,"ival-div",400],[0.234619140625,"ival-assert",0],[3.43994140625,"ival-sub",0],[1.1650390625,"ival-add",400],[0.468994140625,"ival-true",0],[0.316162109375,"exact",0]],"outcomes":[[26.40234375,1,"valid",232],[14.255126953125,0,"valid",280]],"time":90.616943359375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,6]],"egraph":[[0,275,9,0.001132245],[10,275,9,0.001329541],[9,266,9,0.001762183],[8,228,9,0.001721461],[7,150,9,0.001283501],[6,105,9,0.001071177],[5,64,9,0.000671424],[4,44,9,0.000307147],[3,32,9,0.000253197],[2,23,9,0.000176966],[1,15,9,0.000157882],[0,10,9,0.000165855],[0,6,9,9.6419e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-1306656,15014384]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":159.755126953125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.096923828125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","next",13.131148238209098,"binary64"]],"compiler":[[9,6]],"memory":[[307408,307408]],"time":0.779052734375,"type":"prune"},{"egraph":[[0,275,22,0.001600629],[10,275,22,0.0017257],[9,266,22,0.002011657],[8,228,22,0.002150936],[7,150,22,0.001193396],[6,105,22,0.000968522],[5,64,22,0.000505789],[4,44,22,0.000327806],[3,32,22,0.00026614],[2,23,22,0.000211536],[1,15,22,0.000146322],[0,10,22,0.000156962],[0,6,22,8.9214e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 1 binary64) x)"]],"locations":[["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","cost-diff",0]],"memory":[[1088976,1088976]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(/.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":19.433837890625,"type":"simplify"},{"compiler":[[24,8]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.01171875],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","accuracy",13.095230877707014]],"memory":[[1327648,9081760]],"mixsample":[[2.704345703125,"adjust",800],[4.606201171875,"ival-div",0],[2.0078125,"ival-add",0],[2.1357421875,"ival-div",400],[0.134521484375,"ival-assert",0],[2.100830078125,"ival-sub",0],[7.6982421875,"ival-add",400],[0.2431640625,"ival-true",0],[0.181396484375,"exact",0]],"outcomes":[[24.953369140625,1,"valid",116],[8.848876953125,0,"valid",140]],"time":41.89111328125,"type":"localize"},{"count":[[4,24]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[-12719136,876064]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))"]],"series":[[1.23095703125,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","-inf"],[0.48486328125,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","inf"],[2.927978515625,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","0"]],"time":5.2138671875,"type":"series"},{"count":[[24,23]],"egraph":[[0,8018,186,0.069434724],[7,7554,188,0.01625803],[6,6748,188,0.021416351],[5,5373,188,0.029882751],[4,3307,189,0.037378439],[3,1026,194,0.017533188],[2,353,198,0.003146418],[1,150,210,0.001127999],[0,53,229,0.000515157]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))"]],"memory":[[6420688,27789808]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ -1 (pow x 2))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal -1 binary64)) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal -1 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":273.3330078125,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[-1168528,11059696]],"outputs":[["(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) x)","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x (+.f64 x #s(literal 1 binary64)))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) x)","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x (+.f64 x #s(literal 1 binary64)))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) x)","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x (+.f64 x #s(literal 1 binary64)))","x","(neg.f64 x)","(+.f64 #s(literal 6 binary64) x)","(-.f64 #s(literal 6 binary64) x)","(-.f64 (/.f64 #s(literal 6 binary64) x) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 (*.f64 x x) x)","(*.f64 x (*.f64 x x))","(*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))","(*.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))","(*.f64 (*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) x) (*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) x))","(*.f64 (*.f64 x (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (*.f64 x (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","(*.f64 (*.f64 (*.f64 x x) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))"]],"time":225.2080078125,"type":"rewrite"},{"compiler":[[570,119]],"memory":[[-3248240,4486352]],"time":6.14306640625,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","done",13.131148238209098,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","next",30.92975393979138,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","fresh",31.071334779430252,"binary64"],["(+.f64 x #s(literal 1 binary64))","next",62.15415538644602,"binary64"],["(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","next",62.146548679182,"binary64"],["(neg.f64 (+.f64 x #s(literal 1 binary64)))","fresh",62.13580869549885,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x))","fresh",31.62984741551779,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","next",32.056173548978244,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","fresh",39.131714092708584,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","next",30.408680206983018,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64))))","fresh",38.87160284787966,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","fresh",31.181151069554055,"binary64"]],"compiler":[[9,6],[13,9],[11,8],[3,3],[5,5],[4,4],[23,15],[15,10],[17,12],[13,9],[25,17],[19,13],[13,9],[11,8],[3,3],[5,5],[4,4],[23,15],[15,10],[17,12],[13,9],[25,17],[19,13]],"count":[[48,12]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[47,11],"picked":[1,1]}],"memory":[[6271488,6271488]],"min-error":[[0.09263377155338329,"binary64"]],"time":8.340087890625,"type":"prune"},{"egraph":[[0,689,87,0.002653429],[13,689,87,0.004263276],[12,677,87,0.00418704],[11,628,87,0.004219148],[10,603,87,0.004308529],[9,557,87,0.004319759],[8,472,87,0.003456684],[7,377,87,0.003317439],[6,277,87,0.002055304],[5,181,87,0.001377963],[4,118,87,0.000930582],[3,81,87,0.000486269],[2,57,87,0.000369629],[1,38,87,0.000330141],[0,25,89,0.000339112],[0,18,89,0.0001535]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 6 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x"]],"locations":[["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["(/.f64 (/.f64 #s(literal -1 binary64) x) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","cost-diff",0],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",2],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","cost-diff",0]],"memory":[[-6058304,2253376]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal -7 binary64))","#s(literal 6 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":46.958984375,"type":"simplify"},{"compiler":[[73,14]],"locations":[["(/.f64 #s(literal -1 binary64) x)","accuracy",0.0],["(/.f64 (/.f64 #s(literal -1 binary64) x) x)","accuracy",0.1640625],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","accuracy",31.970236050096524],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","accuracy",13.095230877707014],["#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","accuracy",31.444198802498423],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.00390625],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal -1 binary64) x)","accuracy",0.0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","accuracy",30.408680206983018]],"memory":[[-269872,16583488]],"mixsample":[[3.640625,"adjust",800],[7.282470703125,"ival-div",0],[3.185791015625,"ival-add",0],[1.6318359375,"ival-div",400],[0.100341796875,"ival-assert",0],[2.916015625,"ival-sub",0],[0.640625,"ival-add",400],[0.207763671875,"ival-true",0],[0.321533203125,"exact",0]],"outcomes":[[26.61669921875,1,"valid",116],[13.531005859375,0,"valid",140]],"time":51.1298828125,"type":"localize"},{"count":[[10,30]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)"]],"memory":[[1798320,1798320]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 x)","7","(+ 7 x)","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","x","(* x (+ 1 (/ 1 x)))","(* x (+ 1 (* 7 (/ 1 x))))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(* -1 x)","(* x (- (/ 1 x) 1))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 x))))"]],"series":[[0.7041015625,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 x) (+ x 1) (+ 6 (+ x 1)) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (- 1 x) (/ 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (/ -1 x) x))","x","-inf"],[0.804931640625,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 x) (+ x 1) (+ 6 (+ x 1)) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (- 1 x) (/ 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (/ -1 x) x))","x","inf"],[1.509033203125,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 x) (+ x 1) (+ 6 (+ x 1)) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (- 1 x) (/ 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (/ -1 x) x))","x","0"]],"time":3.524169921875,"type":"series"},{"count":[[30,29]],"egraph":[[0,8058,193,0.060495093],[6,7838,195,0.011644227],[5,6491,195,0.026729186],[4,3943,195,0.029188981],[3,1166,209,0.018155674],[2,409,213,0.004164741],[1,173,225,0.001408495],[0,61,246,0.000566245]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 x)","7","(+ 7 x)","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","x","(* x (+ 1 (/ 1 x)))","(* x (+ 1 (* 7 (/ 1 x))))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(* -1 x)","(* x (- (/ 1 x) 1))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 x))))"]],"memory":[[6745008,28039424]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal -1 binary64))","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 x #s(literal 1 binary64))","7","#s(literal 7 binary64)","(+ 7 x)","(+.f64 #s(literal 7 binary64) x)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ -1 (pow x 2))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","x","(* x (+ 1 (/ 1 x)))","(+.f64 x #s(literal 1 binary64))","(* x (+ 1 (* 7 (/ 1 x))))","(+.f64 #s(literal 7 binary64) x)","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(* -1 x)","(neg.f64 x)","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":229.85400390625,"type":"simplify"},{"count":[[10,94]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)"]],"memory":[[-3986176,16459040]],"outputs":[["#s(approx (+ 1 x) x)","x","(neg.f64 x)","(+.f64 x #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) x)","(-.f64 #s(literal 6 binary64) x)","(-.f64 (*.f64 x #s(literal 6 binary64)) x)","(*.f64 x #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) x)","(*.f64 (*.f64 x x) x)","(*.f64 x (*.f64 x x))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))))","(*.f64 (pow.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))) (*.f64 x (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))))","(*.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))))","(neg.f64 (+.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) x)","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal -1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal -1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) (*.f64 x x))","(+.f64 (+.f64 x #s(literal -1 binary64)) (fma.f64 x #s(literal 6 binary64) #s(literal 6 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (+.f64 x #s(literal -1 binary64)) x)","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64))","(+.f64 (+.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal 6 binary64)))","(+.f64 (+.f64 x x) #s(literal -1 binary64))","(+.f64 (*.f64 x x) (*.f64 x x))","(+.f64 (*.f64 x x) x)","(+.f64 (*.f64 x x) #s(literal -1 binary64))","(neg.f64 (+.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) x)","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal -1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal -1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) (*.f64 x x))","(+.f64 (+.f64 x #s(literal -1 binary64)) (fma.f64 x #s(literal 6 binary64) #s(literal 6 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (+.f64 x #s(literal -1 binary64)) x)","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64))","(+.f64 (+.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal 6 binary64)))","(+.f64 (+.f64 x x) #s(literal -1 binary64))","(+.f64 (*.f64 x x) (*.f64 x x))","(+.f64 (*.f64 x x) x)","(+.f64 (*.f64 x x) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","#s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64)))","(neg.f64 (+.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) x)","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal -1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal -1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) (*.f64 x x))","(+.f64 (+.f64 x #s(literal -1 binary64)) (fma.f64 x #s(literal 6 binary64) #s(literal 6 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (+.f64 x #s(literal -1 binary64)) x)","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64))","(+.f64 (+.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal 6 binary64)))","(+.f64 (+.f64 x x) #s(literal -1 binary64))","(+.f64 (*.f64 x x) (*.f64 x x))","(+.f64 (*.f64 x x) x)","(+.f64 (*.f64 x x) #s(literal -1 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) x)","(-.f64 #s(literal 6 binary64) x)","(-.f64 (*.f64 x #s(literal 6 binary64)) x)","(*.f64 x #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) x)","(*.f64 (*.f64 x x) x)","(*.f64 x (*.f64 x x))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))))","(*.f64 (pow.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))) (*.f64 x (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))))","(*.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64)))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 6 binary64))))","#s(approx (+ 1 x) (*.f64 x x))","(neg.f64 (*.f64 x x))","(+.f64 (*.f64 x #s(literal 6 binary64)) (*.f64 x x))","(+.f64 (*.f64 x x) (*.f64 x #s(literal 6 binary64)))","(+.f64 (*.f64 x x) #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) (*.f64 x x))","(+.f64 (*.f64 x x) (neg.f64 (*.f64 x #s(literal 6 binary64))))","(-.f64 (*.f64 x #s(literal 6 binary64)) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 x #s(literal 6 binary64)))","(-.f64 #s(literal 6 binary64) (*.f64 x x))","(-.f64 (/.f64 #s(literal 6 binary64) (*.f64 x x)) (*.f64 x x))","(*.f64 x x)","(*.f64 (*.f64 x x) #s(literal -1 binary64))","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 #s(literal -1 binary64) (*.f64 x x))","(*.f64 x (-.f64 x #s(literal 6 binary64)))"]],"time":305.19091796875,"type":"rewrite"},{"compiler":[[1345,218]],"memory":[[1565056,9316624]],"time":13.820068359375,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","done",13.131148238209098,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","done",30.92975393979138,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","next",31.071334779430252,"binary64"],["(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","fresh",45.45660357160201,"binary64"],["(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","next",62.21621702171874,"binary64"],["(+.f64 x #s(literal -1 binary64))","fresh",62.218372936464334,"binary64"],["(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","fresh",62.14463359671398,"binary64"],["(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","fresh",62.06399935836945,"binary64"],["(neg.f64 (+.f64 x #s(literal 1 binary64)))","fresh",62.13580869549885,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x))","fresh",31.62984741551779,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","done",32.056173548978244,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","fresh",39.131714092708584,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","next",61.65837330692648,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","done",30.408680206983018,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","fresh",62.064741976259555,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x))))","fresh",41.22889308916297,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","fresh",31.181151069554055,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","fresh",61.88520511718742,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","fresh",62.76292654837383,"binary64"],["#s(approx (+ x 1) #s(literal 1 binary64))","fresh",62.0127962104986,"binary64"],["#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","next",62.146548679182,"binary64"],["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","next",62.00685155369016,"binary64"]],"compiler":[[9,6],[13,9],[11,8],[9,7],[5,4],[3,3],[7,6],[6,6],[4,4],[23,14],[15,10],[17,12],[14,9],[13,9],[13,9],[23,16],[19,13],[12,8],[11,7],[5,5],[9,8],[7,7],[11,8],[9,7],[5,4],[3,3],[7,6],[6,6],[4,4],[23,14],[17,12],[14,9],[13,9],[23,16],[19,13],[12,8],[11,7],[5,5],[9,8],[7,7]],"count":[[114,22]],"kept":[{"done":[1,1],"fresh":[6,4],"new":[102,14],"picked":[5,3]}],"memory":[[-6363056,11757424]],"min-error":[[0.08064006324130751,"binary64"]],"time":16.656005859375,"type":"prune"},{"egraph":[[0,721,64,0.003047812],[14,721,64,0.003478022],[13,719,64,0.003600112],[12,701,64,0.004008504],[11,643,64,0.003953506],[10,596,64,0.00451615],[9,519,64,0.003400067],[8,436,64,0.002594022],[7,322,64,0.002677051],[6,227,64,0.00236273],[5,136,64,0.00114577],[4,103,64,0.000567012],[3,86,64,0.000471442],[2,72,64,0.000357931],[1,47,64,0.000396061],[0,28,71,0.000325336],[0,21,76,0.000168119]],"inputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) x)","x","#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(literal 7 binary64)","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","(+.f64 #s(literal 7 binary64) x)","#s(literal 7 binary64)","x","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 x #s(literal -1 binary64))","x","#s(literal -1 binary64)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(/.f64 (neg.f64 x) x)","(neg.f64 x)","x"]],"locations":[["(neg.f64 x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","cost-diff",0],["(/.f64 (neg.f64 x) x)","cost-diff",3],["(+.f64 x #s(literal -1 binary64))","cost-diff",0],["(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","cost-diff",2],["(+.f64 #s(literal 7 binary64) x)","cost-diff",0],["#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","cost-diff",0],["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0]],"memory":[[2221808,2221808]],"method":["egg-herbie"],"outputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) x)","x","#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(literal 7 binary64)","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (+ 6 (+ x 1)) (-.f64 x #s(literal -7 binary64)))","(+.f64 #s(literal 7 binary64) x)","(-.f64 x #s(literal -7 binary64))","#s(literal 7 binary64)","x","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 x #s(literal 2 binary64))","(+.f64 x #s(literal -1 binary64))","(-.f64 x #s(literal 1 binary64))","x","#s(literal -1 binary64)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 x) x)","#s(literal -1 binary64)","(neg.f64 x)","x"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":46.930908203125,"type":"simplify"},{"compiler":[[63,17]],"locations":[["(/.f64 (neg.f64 x) x)","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","accuracy",61.65837330692648],["(+.f64 x #s(literal -1 binary64))","accuracy",0.0],["(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","accuracy",0.01171875],["(+.f64 #s(literal 7 binary64) x)","accuracy",0.0],["#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","accuracy",0.0],["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","accuracy",31.252496154043303],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","accuracy",13.095230877707014],["#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","accuracy",31.112992571357]],"memory":[[1571008,17561568]],"mixsample":[[5.619384765625,"adjust",800],[5.6044921875,"ival-div",0],[9.357421875,"ival-add",0],[1.9111328125,"ival-div",400],[0.113037109375,"ival-assert",0],[1.97119140625,"ival-sub",0],[0.872802734375,"ival-add",400],[0.210205078125,"ival-true",0],[0.551513671875,"exact",0],[1.335693359375,"ival-neg",0]],"outcomes":[[28.04296875,1,"valid",116],[18.86474609375,0,"valid",140]],"time":60.531982421875,"type":"localize"},{"count":[[11,34]],"inputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","(+.f64 #s(literal 7 binary64) x)","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 x #s(literal -1 binary64))","(/.f64 (neg.f64 x) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(neg.f64 x)"]],"memory":[[1224112,1224112]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ 1 x)","7","(+ 7 x)","-2","(- x 2)","-1","(- x 1)","(* -1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (* 7 (/ 1 x))))","(* x (- 1 (* 2 (/ 1 x))))","(* x (- 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (* 2 (/ 1 x)) 1)))","(* -1 (* x (- (/ 1 x) 1)))"]],"series":[[0.6279296875,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (/ 1 x) (+ 6 (+ x 1)) (+ 6 (+ x 1)) (+ 7 x) (+ (+ x -1) -1) (+ x -1) (/ (neg x) x) (- (/ 1 (+ x 1)) (/ 1 x)) (neg x))","x","-inf"],[0.4599609375,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (/ 1 x) (+ 6 (+ x 1)) (+ 6 (+ x 1)) (+ 7 x) (+ (+ x -1) -1) (+ x -1) (/ (neg x) x) (- (/ 1 (+ x 1)) (/ 1 x)) (neg x))","x","inf"],[0.5,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (/ 1 x) (+ 6 (+ x 1)) (+ 6 (+ x 1)) (+ 7 x) (+ (+ x -1) -1) (+ x -1) (/ (neg x) x) (- (/ 1 (+ x 1)) (/ 1 x)) (neg x))","x","0"]],"time":2.156005859375,"type":"series"},{"count":[[34,33]],"egraph":[[0,8082,201,0.064477771],[5,7021,203,0.020926169],[4,4059,203,0.033314805],[3,1295,217,0.018586053],[2,460,221,0.005053904],[1,186,233,0.001600785],[0,66,252,0.000617731]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ 1 x)","7","(+ 7 x)","-2","(- x 2)","-1","(- x 1)","(* -1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (* 7 (/ 1 x))))","(* x (- 1 (* 2 (/ 1 x))))","(* x (- 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (* 2 (/ 1 x)) 1)))","(* -1 (* x (- (/ 1 x) 1)))"]],"memory":[[-1231408,29612576]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","7","#s(literal 7 binary64)","(+ 7 x)","(+.f64 #s(literal 7 binary64) x)","-2","#s(literal -2 binary64)","(- x 2)","(-.f64 x #s(literal 2 binary64))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(* -1 x)","(neg.f64 x)","(/ -1 (pow x 2))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","x","(* x (+ 1 (* 7 (/ 1 x))))","(+.f64 #s(literal 7 binary64) x)","(* x (- 1 (* 2 (/ 1 x))))","(-.f64 x #s(literal 2 binary64))","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(* -1 (* x (- (* 2 (/ 1 x)) 1)))","(-.f64 x #s(literal 2 binary64))","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":227.401123046875,"type":"simplify"},{"count":[[11,95]],"inputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","(+.f64 #s(literal 7 binary64) x)","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 x #s(literal -1 binary64))","(/.f64 (neg.f64 x) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(neg.f64 x)"]],"memory":[[5801120,14040496]],"outputs":[["(-.f64 #s(approx 7 #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx 7 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 7 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal -2 binary64)","#s(literal -8 binary64)","#s(literal -7 binary64)","#s(literal -6 binary64)","#s(approx 7 #s(literal 1 binary64))","#s(approx 7 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 7 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal -2 binary64)","#s(literal -8 binary64)","#s(literal -7 binary64)","#s(literal -6 binary64)","#s(literal 1 binary64)","#s(literal 7 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal -2 binary64)","#s(literal -8 binary64)","#s(literal -7 binary64)","#s(literal -6 binary64)","#s(literal 1 binary64)","#s(literal 7 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal -2 binary64)","#s(literal -8 binary64)","#s(literal -7 binary64)","#s(literal -6 binary64)","#s(literal 1 binary64)","#s(literal 7 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal -2 binary64)","#s(literal -8 binary64)","#s(literal -7 binary64)","#s(literal -6 binary64)","#s(approx 7 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 7 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal -2 binary64)","#s(literal -8 binary64)","#s(literal -7 binary64)","#s(literal -6 binary64)"]],"time":318.325927734375,"type":"rewrite"},{"compiler":[[488,111]],"memory":[[-6715568,3819504]],"time":7.7939453125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","done",13.131148238209098,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","done",30.92975393979138,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","done",31.071334779430252,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","fresh",61.65682190206693,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","next",61.65837330692648,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","fresh",45.86963138617554,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","next",62.0059393206063,"binary64"],["(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","next",62.14463359671398,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x))","fresh",31.62984741551779,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","done",32.056173548978244,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","fresh",39.131714092708584,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","done",30.408680206983018,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x))))","fresh",41.22889308916297,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","next",31.181151069554055,"binary64"],["#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","fresh",61.65820649039762,"binary64"],["#s(approx (+ x 1) #s(literal 1 binary64))","next",62.0127962104986,"binary64"],["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","done",62.00685155369016,"binary64"]],"compiler":[[9,6],[13,9],[11,8],[9,8],[9,8],[9,7],[9,8],[7,6],[23,14],[15,10],[17,12],[13,9],[23,16],[19,13],[7,6],[5,5],[7,7],[9,8],[9,8],[9,7],[9,8],[7,6],[23,14],[17,12],[23,16],[19,13],[7,6],[5,5]],"count":[[62,17]],"kept":[{"done":[4,4],"fresh":[13,6],"new":[40,5],"picked":[5,2]}],"memory":[[-1429264,6877776]],"min-error":[[0.08064006324130751,"binary64"]],"time":11.680908203125,"type":"prune"},{"egraph":[[0,8132,96,0.04267163],[10,6743,96,0.023542707],[9,4925,96,0.027875828],[8,3022,96,0.022327466],[7,2467,96,0.020782423],[6,2029,96,0.016785817],[5,1380,96,0.012667587],[4,520,96,0.006747373],[3,192,96,0.002028961],[2,91,96,0.000959149],[1,53,96,0.000506842],[0,31,98,0.000402523],[0,22,102,0.000202208]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (+ x 1) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal -8 binary64)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 2 binary64)","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","#s(literal 6 binary64)","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64))","(+.f64 x #s(literal -1 binary64))","x","#s(literal -1 binary64)"]],"locations":[["(+.f64 x #s(literal -1 binary64))","cost-diff",0],["(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64))","cost-diff",2],["(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","cost-diff",2],["#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","cost-diff",0],["#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","cost-diff",0],["#s(approx (+ x 1) #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["(-.f64 (/.f64 #s(literal -1 binary64) x) x)","cost-diff",0],["(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","cost-diff",0]],"memory":[[7320816,21714592]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (/.f64 #s(literal -1 binary64) x))))","(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))","(*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (+ x 1) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal -8 binary64)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 2 binary64)","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","(-.f64 x #s(literal -11 binary64))","#s(literal 6 binary64)","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64))","(-.f64 x #s(literal -5 binary64))","(+.f64 x #s(literal -1 binary64))","(-.f64 x #s(literal 1 binary64))","x","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":242.93798828125,"type":"simplify"},{"compiler":[[84,21]],"locations":[["(+.f64 x #s(literal -1 binary64))","accuracy",0.0],["(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64))","accuracy",0.0078125],["(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","accuracy",0.0078125],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","accuracy",0.01953125],["#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","accuracy",31.112992571357],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","accuracy",0.0],["#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","accuracy",31.112992571357],["#s(approx (+ x 1) #s(literal 1 binary64))","accuracy",31.333082464176492],["(-.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 (/.f64 #s(literal -1 binary64) x) x)","accuracy",0.0078125],["(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))","accuracy",0.025722509768442016],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","accuracy",31.16714737081745]],"memory":[[-4630368,21859584]],"mixsample":[[6.83642578125,"adjust",800],[5.696044921875,"ival-div",0],[7.418701171875,"ival-add",0],[1.727783203125,"ival-mult",0],[1.745849609375,"ival-div",400],[0.10791015625,"ival-assert",0],[7.8076171875,"ival-sub",0],[0.720947265625,"ival-add",400],[0.23681640625,"ival-true",0],[0.6796875,"exact",0]],"outcomes":[[61.46142578125,1,"valid",116],[18.1025390625,0,"valid",140]],"time":93.2080078125,"type":"localize"},{"count":[[12,64]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(approx (+ x 1) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64))","(+.f64 x #s(literal -1 binary64))","(-.f64 #s(literal 1 binary64) x)"]],"memory":[[1603488,1603488]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(/ (- (* -1 (pow x 2)) 1) x)","1","(+ 1 x)","9","(+ 9 (* -1 x))","(+ 9 (* x (- x 1)))","(+ 9 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","-1","(- (* -1 x) 1)","(- (* x (- x 1)) 1)","(- (* x (- (* x (+ 1 (* -1 x))) 1)) 1)","11","(+ 11 x)","5","(+ 5 x)","(- x 1)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(pow x 2)","(* (pow x 2) (- 1 (/ 1 x)))","(* (pow x 2) (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)))","(* (pow x 2) (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))))","(* -1 x)","(* -1 (* x (+ 1 (/ 1 (pow x 2)))))","x","(* x (+ 1 (/ 1 x)))","8","(+ 8 (/ 1 x))","(- (+ 8 (/ 1 x)) (/ 1 (pow x 2)))","(- (+ 8 (+ (/ 1 x) (/ 1 (pow x 3)))) (/ 1 (pow x 2)))","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","-2","(- (/ 1 x) 2)","(- (/ 1 x) (+ 2 (/ 1 (pow x 2))))","(- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 2 (/ 1 (pow x 2))))","(* x (+ 1 (* 11 (/ 1 x))))","(* x (+ 1 (* 5 (/ 1 x))))","(* x (- 1 (/ 1 x)))","(* x (- (/ 1 x) 1))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* (pow x 2) (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))))","(* (pow x 2) (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))))","(+ 8 (* -1 (/ (- (/ 1 x) 1) x)))","(+ 8 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(- (* -1 (/ (- (/ 1 x) 1) x)) 2)","(- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 2)","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* x (- 1 (/ 1 x))))"]],"series":[[0.64697265625,"((- (/ 1 (+ x 1)) (/ 1 x)) (* (- (/ -1 x) x) (- 1 x)) (- (/ -1 x) x) (/ -1 x) (+ x 1) (- (/ 1 (+ x 1)) -8) (/ 1 (+ x 1)) (- (/ 1 (+ x 1)) 2) (+ 6 (+ (+ x -1) 6)) (+ (+ x -1) 6) (+ x -1) (- 1 x))","x","-inf"],[0.80908203125,"((- (/ 1 (+ x 1)) (/ 1 x)) (* (- (/ -1 x) x) (- 1 x)) (- (/ -1 x) x) (/ -1 x) (+ x 1) (- (/ 1 (+ x 1)) -8) (/ 1 (+ x 1)) (- (/ 1 (+ x 1)) 2) (+ 6 (+ (+ x -1) 6)) (+ (+ x -1) 6) (+ x -1) (- 1 x))","x","inf"],[0.919921875,"((- (/ 1 (+ x 1)) (/ 1 x)) (* (- (/ -1 x) x) (- 1 x)) (- (/ -1 x) x) (/ -1 x) (+ x 1) (- (/ 1 (+ x 1)) -8) (/ 1 (+ x 1)) (- (/ 1 (+ x 1)) 2) (+ 6 (+ (+ x -1) 6)) (+ (+ x -1) 6) (+ x -1) (- 1 x))","x","0"]],"time":3.043212890625,"type":"series"},{"count":[[64,63]],"egraph":[[0,8068,393,0.086918812],[4,6749,405,0.023503571],[3,2314,423,0.037367794],[2,769,435,0.009872336],[1,297,459,0.00251877],[0,103,502,0.000920994]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(/ (- (* -1 (pow x 2)) 1) x)","1","(+ 1 x)","9","(+ 9 (* -1 x))","(+ 9 (* x (- x 1)))","(+ 9 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","-1","(- (* -1 x) 1)","(- (* x (- x 1)) 1)","(- (* x (- (* x (+ 1 (* -1 x))) 1)) 1)","11","(+ 11 x)","5","(+ 5 x)","(- x 1)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(pow x 2)","(* (pow x 2) (- 1 (/ 1 x)))","(* (pow x 2) (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)))","(* (pow x 2) (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))))","(* -1 x)","(* -1 (* x (+ 1 (/ 1 (pow x 2)))))","x","(* x (+ 1 (/ 1 x)))","8","(+ 8 (/ 1 x))","(- (+ 8 (/ 1 x)) (/ 1 (pow x 2)))","(- (+ 8 (+ (/ 1 x) (/ 1 (pow x 3)))) (/ 1 (pow x 2)))","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","-2","(- (/ 1 x) 2)","(- (/ 1 x) (+ 2 (/ 1 (pow x 2))))","(- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 2 (/ 1 (pow x 2))))","(* x (+ 1 (* 11 (/ 1 x))))","(* x (+ 1 (* 5 (/ 1 x))))","(* x (- 1 (/ 1 x)))","(* x (- (/ 1 x) 1))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* (pow x 2) (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))))","(* (pow x 2) (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))))","(+ 8 (* -1 (/ (- (/ 1 x) 1) x)))","(+ 8 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(- (* -1 (/ (- (/ 1 x) 1) x)) 2)","(- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 2)","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* x (- 1 (/ 1 x))))"]],"memory":[[5799120,36743216]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(/ (- (* -1 (pow x 2)) 1) x)","(-.f64 (/.f64 #s(literal -1 binary64) x) x)","1","#s(literal 1 binary64)","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","9","#s(literal 9 binary64)","(+ 9 (* -1 x))","(-.f64 #s(literal 9 binary64) x)","(+ 9 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 9 binary64))","(+ 9 (* x (- (* x (+ 1 (* -1 x))) 1)))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) x #s(literal 9 binary64))","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- x 1)) 1)","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (+ 1 (* -1 x))) 1)) 1)","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) x #s(literal -1 binary64))","11","#s(literal 11 binary64)","(+ 11 x)","(+.f64 #s(literal 11 binary64) x)","5","#s(literal 5 binary64)","(+ 5 x)","(+.f64 #s(literal 5 binary64) x)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(/ -1 (pow x 2))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 1 binary64) x) x))","(pow x 2)","(*.f64 x x)","(* (pow x 2) (- 1 (/ 1 x)))","(*.f64 (-.f64 x #s(literal 1 binary64)) x)","(* (pow x 2) (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* (pow x 2) (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(* -1 x)","(neg.f64 x)","(* -1 (* x (+ 1 (/ 1 (pow x 2)))))","(-.f64 (/.f64 #s(literal -1 binary64) x) x)","x","(* x (+ 1 (/ 1 x)))","(-.f64 x #s(literal -1 binary64))","8","#s(literal 8 binary64)","(+ 8 (/ 1 x))","(+.f64 #s(literal 8 binary64) (/.f64 #s(literal 1 binary64) x))","(- (+ 8 (/ 1 x)) (/ 1 (pow x 2)))","(-.f64 #s(literal 8 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(- (+ 8 (+ (/ 1 x) (/ 1 (pow x 3)))) (/ 1 (pow x 2)))","(fma.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal 8 binary64))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 x x))","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))","-2","#s(literal -2 binary64)","(- (/ 1 x) 2)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))","(- (/ 1 x) (+ 2 (/ 1 (pow x 2))))","(-.f64 #s(literal -2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 2 (/ 1 (pow x 2))))","(fma.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -2 binary64))","(* x (+ 1 (* 11 (/ 1 x))))","(+.f64 #s(literal 11 binary64) x)","(* x (+ 1 (* 5 (/ 1 x))))","(+.f64 #s(literal 5 binary64) x)","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 1 binary64) x) x))","(* (pow x 2) (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* (pow x 2) (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(+ 8 (* -1 (/ (- (/ 1 x) 1) x)))","(-.f64 #s(literal 8 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(+ 8 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)))","(fma.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal 8 binary64))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 x x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))","(- (* -1 (/ (- (/ 1 x) 1) x)) 2)","(-.f64 #s(literal -2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))","(- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 2)","(fma.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) #s(literal -2 binary64))","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":285.0498046875,"type":"simplify"},{"count":[[12,110]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(approx (+ x 1) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64))","(+.f64 x #s(literal -1 binary64))","(-.f64 #s(literal 1 binary64) x)"]],"memory":[[-4629008,15483712]],"outputs":[["#s(approx 6 #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -8 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal 12 binary64)","#s(literal 4 binary64)","#s(literal -6 binary64)","#s(literal -2 binary64)","#s(literal -10 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -8 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal 12 binary64)","#s(literal 4 binary64)","#s(literal -6 binary64)","#s(literal -2 binary64)","#s(literal -10 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -8 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal 12 binary64)","#s(literal 4 binary64)","#s(literal -6 binary64)","#s(literal -2 binary64)","#s(literal -10 binary64)","#s(approx 6 #s(literal -1 binary64))","(-.f64 #s(approx 6 #s(literal -1 binary64)) #s(literal -1 binary64))","#s(approx 6 #s(literal -1 binary64))","(-.f64 #s(approx 6 #s(literal -1 binary64)) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -8 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal 12 binary64)","#s(literal 4 binary64)","#s(literal -6 binary64)","#s(literal -2 binary64)","#s(literal -10 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -8 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal 12 binary64)","#s(literal 4 binary64)","#s(literal -6 binary64)","#s(literal -2 binary64)","#s(literal -10 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -8 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal 12 binary64)","#s(literal 4 binary64)","#s(literal -6 binary64)","#s(literal -2 binary64)","#s(literal -10 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -8 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal 12 binary64)","#s(literal 4 binary64)","#s(literal -6 binary64)","#s(literal -2 binary64)","#s(literal -10 binary64)"]],"time":341.63818359375,"type":"rewrite"},{"compiler":[[985,174]],"memory":[[-1552000,6419360]],"time":8.304931640625,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","done",13.131148238209098,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","done",30.92975393979138,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","done",31.071334779430252,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","fresh",61.65682190206693,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x))","fresh",31.62984741551779,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","done",32.056173548978244,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","fresh",39.131714092708584,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","fresh",32.511808699339085,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","done",30.408680206983018,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x))))","fresh",41.22889308916297,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","done",31.181151069554055,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","fresh",62.00499478534346,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","fresh",45.86963138617554,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","fresh",61.65837330692648,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","fresh",61.656943047426196,"binary64"]],"compiler":[[406,98],[9,6],[13,9],[11,8],[9,8],[23,14],[15,10],[17,12],[15,10],[13,9],[23,16],[19,13],[11,8],[11,8],[11,8],[11,8]],"count":[[86,15]],"kept":[{"done":[6,5],"fresh":[6,4],"new":[69,5],"picked":[5,1]}],"memory":[[1629936,9910160]],"min-error":[[0.053296313241307514,"binary64"]],"time":12.843017578125,"type":"prune"},{"accuracy":[0.18111707012021167],"baseline":[13.131148238209098],"branch":[["x",0.18111707012021167,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",0.18111707012021167,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[36,3]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64))))"]],"memory":[[-5991808,10965824]],"oracle":[63.36848807141621],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":21.64794921875,"times":[[8.568115234375,"x"],[9.949951171875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[0.4657663322641501],"baseline":[13.131148238209098],"branch":[["x",0.4657663322641501,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",0.4657663322641501,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[31,3]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[1914832,9901408]],"oracle":[63.22861131431174],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":16.945068359375,"times":[[7.7919921875,"x"],[7.04296875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[0.9780751801265167],"baseline":[30.408680206983018],"branch":[["x",0.9780751801265167,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",0.9780751801265167,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[30,3]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))"]],"memory":[[1846112,9674720]],"oracle":[63.22861131431174],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))"]],"repr":["binary64"],"time":16.56005859375,"times":[[7.657958984375,"x"],[6.902099609375,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[1.43371033048736],"baseline":[30.408680206983018],"branch":[["x",1.4337103304873602,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",1.43371033048736,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[29,3]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))"]],"memory":[[1444912,9391328]],"oracle":[63.22861131431174],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))"]],"repr":["binary64"],"time":16.44287109375,"times":[[7.608154296875,"x"],[6.908935546875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[1.5006587429145715],"baseline":[30.408680206983018],"branch":[["x",1.500658742914572,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",1.5006587429145715,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[28,3]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-335632,9297104]],"oracle":[63.12571182473078],"outputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":15.593994140625,"times":[[6.661865234375,"x"],[6.5888671875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[1.7010479021001268],"baseline":[30.408680206983018],"branch":[["x",1.7010479021001272,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",1.7010479021001268,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[27,3]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))"]],"memory":[[942704,8984448]],"oracle":[63.12571182473078],"outputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":14.93798828125,"times":[[6.531005859375,"x"],[6.532958984375,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[14.45093268812758],"baseline":[30.408680206983018],"branch":[["x",14.45093268812758,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",14.450932688127585,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[26,3]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[786624,8871440]],"oracle":[63.04673471355978],"outputs":[["(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)"]],"repr":["binary64"],"time":15.498046875,"times":[[7.176025390625,"x"],[6.281005859375,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[14.717055611076443],"baseline":[30.408680206983018],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",14.837855071565423,3,"binary64"],["x",14.717055611076443,3,"binary64"]],"compiler":[[9,6],[1,1]],"count":[[25,3]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (neg.f64 x) x))"]],"memory":[[694304,8565440]],"oracle":[63.04673471355978],"outputs":[["(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)"]],"repr":["binary64"],"time":14.530029296875,"times":[[6.10302734375,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"],[6.6181640625,"x"]],"type":"regimes"},{"accuracy":[45.456603571602024],"baseline":[45.45660357160201],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",45.456603571602045,1,"binary64"],["x",45.456603571602024,1,"binary64"]],"compiler":[[9,6],[1,1]],"count":[[23,1]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","(+.f64 #s(literal 6 binary64) (neg.f64 (+.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 6 binary64) (+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal 6 binary64)))"]],"memory":[[-10909504,8161248]],"oracle":[63.04673471355978],"outputs":[["(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)"]],"repr":["binary64"],"time":66.016845703125,"times":[[6.392822265625,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"],[57.658935546875,"x"]],"type":"regimes"},{"accuracy":[45.86963138617553],"baseline":[45.86963138617554],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",45.86963138617553,1,"binary64"],["x",45.86963138617555,1,"binary64"]],"compiler":[[9,6],[1,1]],"count":[[20,1]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 12 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 x))","#s(approx (+ 6 (+ x 1)) (+.f64 #s(literal 7 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 #s(literal 6 binary64) x))","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal -8 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 12 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))"]],"memory":[[-762784,7385296]],"oracle":[63.0467347073008],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":13.47607421875,"times":[[5.71484375,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"],[6.2451171875,"x"]],"type":"regimes"},{"accuracy":[61.656943047426175],"baseline":[61.656943047426196],"branch":[["x",61.656943047426196,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",61.656943047426175,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[5,1]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -1 binary64))"]],"memory":[[-4216208,4021152]],"oracle":[62.774197246919464],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))"]],"repr":["binary64"],"time":4.74609375,"times":[[2.07421875,"x"],[1.958984375,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[61.65820649039761],"baseline":[61.65820649039762],"branch":[["x",61.65820649039761,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",61.65820649039763,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[3,1]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))"]],"memory":[[3503568,3503568]],"oracle":[62.77368335446549],"outputs":[["#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))"]],"repr":["binary64"],"time":3.864013671875,"times":[[1.51416015625,"x"],[1.662109375,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[62.006851553690154],"baseline":[62.00685155369016],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",62.00685155369018,1,"binary64"],["x",62.006851553690154,1,"binary64"]],"compiler":[[9,6],[1,1]],"count":[[2,1]],"inputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))","#s(approx (+ x 1) #s(literal 1 binary64))"]],"link":["."],"memory":[[3209024,3209024]],"name":["2frac (problem 3.3.1)"],"oracle":[62.01486318828761],"outputs":[["#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))"]],"repr":["binary64"],"time":3.345947265625,"times":[[1.282958984375,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"],[1.5048828125,"x"]],"type":"regimes"},{"bstep":[[0.032958984375,0.0,458.04268019351747],[0.203857421875,-2.425117751365534e-8,-8.557732335302012e-11]],"compiler":[[3,4],[9,6]],"memory":[[287088,287088]],"method":["left-value","left-value"],"time":0.950927734375,"type":"bsearch"},{"bstep":[[0.02587890625,0.0,458.04268019351747],[0.131103515625,-7.051437517247682e-15,-6.147889621853901e-19]],"compiler":[[3,4],[9,6]],"memory":[[275824,275824]],"method":["left-value","left-value"],"time":0.611083984375,"type":"bsearch"},{"bstep":[[0.02490234375,0.0,458.04268019351747],[0.115966796875,-144.7347863683263,-6.351896290012187e-8]],"compiler":[[3,4],[9,6]],"memory":[[278608,278608]],"method":["left-value","left-value"],"time":0.56494140625,"type":"bsearch"},{"bstep":[[0.02978515625,0.0,458.04268019351747],[0.344970703125,-144.7347863683263,-6.351896290012187e-8]],"compiler":[[3,4],[9,6]],"memory":[[-8034576,281008]],"method":["left-value","left-value"],"time":0.865966796875,"type":"bsearch"},{"bstep":[[0.024169921875,0.0,458.04268019351747],[0.114013671875,-144.7347863683263,-6.351896290012187e-8]],"compiler":[[3,4],[9,6]],"memory":[[275984,275984]],"method":["left-value","left-value"],"time":0.6240234375,"type":"bsearch"},{"bstep":[[0.024169921875,0.0,458.04268019351747],[0.125,-144.7347863683263,-6.351896290012187e-8]],"compiler":[[3,4],[9,6]],"memory":[[281376,281376]],"method":["left-value","left-value"],"time":0.635009765625,"type":"bsearch"},{"bstep":[[10.965087890625,0.006862100617309641,3967.286579618929],[10.4228515625,-6421.957107843566,-0.002187989964907009]],"compiler":[[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[9,8],[11,9],[1,1]],"memory":[[-490256,8351136]],"method":["binary-search","binary-search"],"mixsample":[[4.171630859375,"ival-div",0],[1.270263671875,"ival-sub",0],[0.180419921875,"ival-true",0],[1.412109375,"ival-add",0],[0.13818359375,"exact",0],[0.099365234375,"ival-assert",0]],"outcomes":[[12.065185546875,0,"valid",288]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":25.7470703125,"type":"bsearch"},{"bstep":[[19.06298828125,1.758822775365917e+96,9.400469120811991e+102],[0.864990234375,-6421.957107843566,-0.002187989964907009]],"compiler":[[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[13,10],[9,8],[11,9],[1,1]],"memory":[[6683936,6683936]],"method":["binary-search","binary-search"],"mixsample":[[2.627685546875,"adjust",800],[2.032958984375,"ival-div",0],[0.87158203125,"ival-add",0],[2.2138671875,"ival-div",400],[0.056640625,"ival-assert",0],[1.316650390625,"ival-sub",0],[0.7919921875,"ival-add",400],[0.108642578125,"ival-true",0],[0.07177734375,"exact",0]],"outcomes":[[13.85693359375,1,"valid",144]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":23.640869140625,"type":"bsearch"},{"egraph":[[13,1535,431,0.007724653],[12,1525,431,0.007322133],[11,1441,431,0.008254873],[10,1369,431,0.008941555],[9,1226,431,0.009270069],[8,798,431,0.009814369],[7,569,431,0.007265631],[6,342,431,0.004302973],[5,241,431,0.002696802],[4,203,431,0.002466752],[3,168,432,0.002329836],[2,144,433,0.001958965],[1,115,433,0.001712588],[0,76,433,0.001853878]],"inputs":[["(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -3022314549036573/151115727451828646838272 binary64)) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -6338253001141147/1267650600228229401496703205376 binary64)) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -100 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -100 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -100 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -100 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 x #s(literal -1 binary64)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x) (if (<=.f64 x #s(literal 1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)))","(if (<=.f64 x #s(literal -1 binary64)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x) (if (<=.f64 x #s(literal 4500000000000000207549832449720666175124697331421700090370076134636293935103540159089361458000161669120 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))"]],"memory":[[-869760,7249824]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -3022314549036573/151115727451828646838272 binary64)) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -3022314549036573/151115727451828646838272 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -6338253001141147/1267650600228229401496703205376 binary64)) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -6338253001141147/1267650600228229401496703205376 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -100 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -100 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 #s(literal -1 binary64) x))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 #s(literal -1 binary64) x)))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -100 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -100 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 #s(literal -1 binary64) x))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 #s(literal -1 binary64) x)))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -100 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -100 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -100 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -100 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(if (<=.f64 x #s(literal -1 binary64)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x) (if (<=.f64 x #s(literal 1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)))","(if (<=.f64 x #s(literal -1 binary64)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x) (if (<=.f64 x #s(literal 1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)))","(if (<=.f64 x #s(literal -1 binary64)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x) (if (<=.f64 x #s(literal 4500000000000000207549832449720666175124697331421700090370076134636293935103540159089361458000161669120 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)))","(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))","#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))","#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))"]],"stop":[["saturated",1]],"time":91.594970703125,"type":"simplify"},{"compiler":[[523,79]],"memory":[[-5157360,2973824]],"stop":[["fuel",1]],"time":6.777099609375,"type":"soundness"},{"compiler":[[523,79],[523,79],[7,6],[7,6],[9,6],[9,6]],"memory":[[8719440,47971936]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":68.678955078125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01708984375,"type":"end"}]