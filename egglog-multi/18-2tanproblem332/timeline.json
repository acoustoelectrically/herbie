[{"memory":[[27264,27264]],"time":0.0791015625,"type":"start"},{"compiler":[[27,19]],"memory":[[-4421504,12650128]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":69.11083984375,"type":"analyze"},{"bogosity":[{"invalid":0.49935711501970126,"precondition":0.4942799140699208,"valid":0.006362970910377951}],"memory":[[62853024,1665017520]],"mixsample":[[92.389404296875,"adjust",800],[223.174560546875,"ival-add",0],[256.8857421875,"ival-mult",0],[225.030517578125,"ival-fabs",0],[15.55029296875,"ival-assert",0],[196.14013671875,"ival-sub",0],[640.072021484375,"ival-tan",0],[116.40625,"ival-and",0],[0.040283203125,"ival-sub",400],[611.857421875,"const",0],[0.457763671875,"ival-tan",400],[50.98681640625,"exact",0],[209.5810546875,"ival-<=",0],[174.70654296875,"ival-<",0]],"outcomes":[[504.2998046875,1,"valid",2754],[2862.175048828125,0,"invalid",26347],[567.989013671875,0,"valid",5502]],"time":5392.34619140625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[223,1,1,31]],"explanations":[["tan.f64","(tan.f64 (+.f64 x eps))","sensitivity",1,2,[],[[1]]],["-.f64","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","cancellation",223,11,[],[[]]]],"fperrors":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",223,1,[3.9520303407702214e-273,1.9843651093236284e-275],1,[-1.0317723897299045e-157,1.2692472193346718e-159]],["(tan.f64 (+.f64 x eps))",2,0,false,1,[-48.74100220970465,1.4252422205956073e-13]],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(tan.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,224],[0,32]],"maybe-confusion":[[223,1,0,1,9,22]],"memory":[[-3159200,39479728]],"mixsample":[[0.487060546875,"ival-tan",2000],[4.21875,"adjust",800],[0.01220703125,"ival-tan",800],[3.2802734375,"ival-add",0],[0.198974609375,"ival-assert",0],[3.12353515625,"ival-sub",0],[10.6123046875,"ival-tan",0],[0.4375,"ival-true",0],[0.035888671875,"adjust",2800],[0.14599609375,"ival-tan",400],[0.035888671875,"adjust",2000]],"outcomes":[[20.956298828125,1,"valid",192],[0.826171875,3,"valid",2],[16.429443359375,0,"valid",318]],"time":84.115966796875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,183,7,0.00065261],[10,183,7,0.000776956],[9,175,7,0.000873673],[8,159,7,0.000986099],[7,110,7,0.000839981],[6,80,7,0.000958765],[5,47,7,0.000454185],[4,32,7,0.000269979],[3,24,7,0.000265787],[2,18,7,0.000131621],[1,13,7,0.000123345],[0,10,7,0.000137386],[0,6,7,9.7723e-5]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"memory":[[-2220848,14917152]],"method":["egg-herbie"],"outputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":158.5859375,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.092041015625,"type":"eval"},{"alts":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","next",24.80525489337457,"binary64"]],"compiler":[[7,6]],"memory":[[314992,314992]],"time":0.45703125,"type":"prune"},{"egraph":[[0,183,18,0.000686237],[10,183,18,0.000736993],[9,175,18,0.000855388],[8,159,18,0.000882653],[7,110,18,0.000780123],[6,80,18,0.000741567],[5,47,18,0.000448477],[4,32,18,0.000242191],[3,24,18,0.000325567],[2,18,18,0.00024263],[1,13,18,0.000258758],[0,10,18,0.000176663],[0,6,18,9.9868e-5]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(tan.f64 x)"]],"locations":[["(tan.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(tan.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","cost-diff",0]],"memory":[[818960,818960]],"method":["egg-herbie"],"outputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(tan.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","(tan.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.625,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(tan.f64 x)","accuracy",0.01171875],["(tan.f64 (+.f64 x eps))","accuracy",0.14205703266231048],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","accuracy",24.617502576095546]],"memory":[[571776,8573408]],"mixsample":[[0.22607421875,"ival-tan",2000],[2.324462890625,"adjust",800],[0.007080078125,"ival-tan",800],[1.66455078125,"ival-add",0],[0.088623046875,"ival-assert",0],[1.552978515625,"ival-sub",0],[5.197021484375,"ival-tan",0],[0.166015625,"ival-true",0],[0.01806640625,"adjust",2800],[0.086669921875,"ival-tan",400],[0.01904296875,"adjust",2000]],"outcomes":[[11.349365234375,1,"valid",96],[0.412109375,3,"valid",1],[8.056884765625,0,"valid",159]],"time":26.7099609375,"type":"localize"},{"count":[[4,31]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(+.f64 x eps)","(tan.f64 x)"]],"memory":[[4268816,4268816]],"outputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(* x (+ 1 (/ eps x)))","(/ (sin x) (cos x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(* eps (+ 1 (/ x eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[1.8349609375,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","eps","-inf"],[1.93701171875,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","eps","inf"],[3.694091796875,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","eps","0"],[1.469970703125,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","x","-inf"],[1.580078125,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","x","inf"],[2.125,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","x","0"]],"time":13.69091796875,"type":"series"},{"count":[[31,29]],"egraph":[[0,8335,686,0.085812423],[3,6077,710,0.025901406],[2,1539,873,0.019596988],[1,464,884,0.005059888],[0,157,950,0.001462232]],"inputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(* x (+ 1 (/ eps x)))","(/ (sin x) (cos x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(* eps (+ 1 (/ x eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[7083200,42948896]],"method":["egg-herbie"],"outputs":[["(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 eps) (sin.f64 eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (+.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal -1/3 binary64))) #s(literal 1/2 binary64))) x (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)) #s(literal 1 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 eps) (sin.f64 eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) #s(literal -1/3 binary64))) x) x (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)) #s(literal 1 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+ eps x)","(+.f64 eps x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":232.4189453125,"type":"simplify"},{"count":[[4,59]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(+.f64 x eps)","(tan.f64 x)"]],"memory":[[-7888720,15338480]],"outputs":[["(neg.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))","(+.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x)))","(+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))","(+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))))))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (+.f64 (tan.f64 (+.f64 x eps)) #s(literal 0 binary64)) (tan.f64 x))","(-.f64 #s(literal 0 binary64) (-.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))","(-.f64 (/.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64)) (cos.f64 x))) (/.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64)) (cos.f64 x))))","(neg.f64 (/.f64 (sin.f64 (+.f64 x eps)) (neg.f64 (cos.f64 (+.f64 x eps)))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (cos.f64 (+.f64 x eps))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))","(neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64)))))","(*.f64 #s(literal 1 binary64) (tan.f64 (+.f64 x eps)))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 (+.f64 x eps))) (sin.f64 (+.f64 x eps)))","(*.f64 (sin.f64 (+.f64 x eps)) (/.f64 #s(literal 1 binary64) (cos.f64 (+.f64 x eps))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))) (+.f64 (tan.f64 x) (tan.f64 eps)))","(*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))","(*.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (+.f64 x eps)))))","(*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64)))","(*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64)))))","(/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps)))","(/.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (neg.f64 (cos.f64 (+.f64 x eps))))","(neg.f64 (/.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps)) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (-.f64 x eps)))","(+.f64 x eps)","(+.f64 eps x)","(+.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (neg.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(*.f64 #s(literal 1 binary64) (+.f64 x eps))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (/.f64 #s(literal 1 binary64) (-.f64 x eps)))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 x eps) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x eps))))","(neg.f64 (neg.f64 (tan.f64 x)))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal -1 binary64))","(tan.f64 x)"]],"time":397.072021484375,"type":"rewrite"},{"compiler":[[1817,353]],"memory":[[483456,8179232]],"time":10.93212890625,"type":"eval"},{"alts":[["(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","fresh",24.6364625139351,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","fresh",24.803607295085406,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",24.80525489337457,"binary64"],["(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","fresh",24.639188534907582,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","next",1.50335005900982,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","next",0.825477959923993,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","next",1.6755073086457821,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.3530025198224749,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","next",0.28899315415879956,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","next",0.4507143684342264,"binary64"]],"compiler":[[25,14],[12,10],[7,6],[18,12],[41,21],[20,14],[13,10],[68,29],[126,35],[31,19],[25,14],[12,10],[18,12],[41,21],[20,14],[13,10],[68,29],[126,35],[31,19]],"count":[[81,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[80,9],"picked":[1,1]}],"memory":[[-520272,7800960]],"min-error":[[0.017910009768442016,"binary64"]],"time":9.31298828125,"type":"prune"},{"egraph":[[0,8180,1131,0.087422497],[4,6203,1162,0.024814615],[3,1689,1273,0.019302327],[2,472,1310,0.005220408],[1,189,1310,0.002114932],[0,105,1312,0.001051799],[0,56,1312,0.000710922]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x))))","(sin.f64 x)","x","(fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))","(/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","(/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","eps","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (sin.f64 x) eps)","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","eps","(cos.f64 eps)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(sin.f64 x)","x","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (sin.f64 x) eps)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","(fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))","(/.f64 x (cos.f64 eps))","x","(cos.f64 eps)","eps","(+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","(sin.f64 eps)","#s(literal 3 binary64)","(pow.f64 (cos.f64 eps) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))","(pow.f64 (sin.f64 eps) #s(literal 2 binary64))","(/.f64 (sin.f64 eps) (cos.f64 eps))"]],"locations":[["(/.f64 x (cos.f64 eps))","cost-diff",0],["(fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","cost-diff",0],["(fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))","cost-diff",5],["(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","cost-diff",0],["(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","cost-diff",1],["(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","cost-diff",1],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","cost-diff",0],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","cost-diff",0],["(cos.f64 eps)","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["(/.f64 (sin.f64 eps) (cos.f64 eps))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","cost-diff",0],["(neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","cost-diff",1],["(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","cost-diff",1],["(fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","cost-diff",2],["(fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))","cost-diff",15]],"memory":[[1338992,48899168]],"method":["egg-herbie"],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -2/3 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps)) #s(literal -1/3 binary64))) (*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)))))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -2/3 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps)) #s(literal -1/3 binary64))) (*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))))","(fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(fma.f64 (*.f64 eps eps) (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -2/3 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps)) #s(literal -1/3 binary64))) (*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -2/3 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps)) #s(literal -1/3 binary64))) eps)","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -2/3 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps)) #s(literal -1/3 binary64)))","(fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -2/3 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps)) (-.f64 #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x))))","(*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -2/3 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (sin.f64 x))","(sin.f64 x)","x","(fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))","(fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -2/3 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","(/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x))","(/.f64 (-.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (cos.f64 x))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(-.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","eps","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x))","(*.f64 (sin.f64 x) eps)","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","eps","(cos.f64 eps)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(sin.f64 x)","x","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x))","(*.f64 (sin.f64 x) eps)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (sin.f64 eps) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)) x)) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","(fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(fma.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (sin.f64 eps) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)) x)) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (sin.f64 eps) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)) x))","(/.f64 x (cos.f64 eps))","x","(cos.f64 eps)","eps","(+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","(sin.f64 eps)","#s(literal 3 binary64)","(pow.f64 (cos.f64 eps) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))","(pow.f64 (sin.f64 eps) #s(literal 2 binary64))","(/.f64 (sin.f64 eps) (cos.f64 eps))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":242.18994140625,"type":"simplify"},{"compiler":[[1195,62]],"locations":[["(pow.f64 (sin.f64 eps) #s(literal 2 binary64))","accuracy",0.01171875],["(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","accuracy",0.015625],["(fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))","accuracy",0.01953125],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","accuracy",1.50335005900982],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","accuracy",0.01953125],["(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","accuracy",0.01953125],["(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","accuracy",0.0234375],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","accuracy",0.431183117476981],["(cos.f64 x)","accuracy",0.0078125],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","accuracy",0.01953125],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","accuracy",0.8254781053963792],["(sin.f64 eps)","accuracy",0.0],["(cos.f64 eps)","accuracy",0.0],["(/.f64 (sin.f64 eps) (cos.f64 eps))","accuracy",0.00390625],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","accuracy",1.6755073086457821],["(pow.f64 (sin.f64 x) #s(literal 4 binary64))","accuracy",0.04201127930532605],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","accuracy",0.26946190415879956],["(*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x))))","accuracy",0.3203125],["(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","accuracy",0.328125]],"memory":[[3989792,87646800]],"mixsample":[[11.98974609375,"adjust",800],[22.854248046875,"ival-div",0],[19.536376953125,"ival-add",0],[30.98779296875,"ival-mult",0],[5.199462890625,"ival-sin",0],[0.1181640625,"ival-assert",0],[1.7177734375,"ival-sub",0],[0.2880859375,"ival-true",0],[6.352294921875,"ival-tan",0],[5.208740234375,"ival-cos",0],[5.954833984375,"const",0],[0.646728515625,"exact",0],[13.09814453125,"ival-pow2",0],[10.088623046875,"ival-pow",0],[2.959716796875,"ival-neg",0]],"outcomes":[[105.095458984375,1,"valid",94],[77.934326171875,0,"valid",162]],"time":279.8291015625,"type":"localize"},{"count":[[29,164]],"inputs":[["(fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))","(fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","(cos.f64 eps)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","(fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 x (cos.f64 eps))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","(*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","(pow.f64 (sin.f64 eps) #s(literal 2 binary64))"]],"memory":[[2146480,33914112]],"outputs":[["-2/3","(- (* -2 (pow x 2)) 2/3)","(- (* (pow x 2) (- (* -37/12 (pow x 2)) 2)) 2/3)","(- (* (pow x 2) (- (* (pow x 2) (- (* -154/45 (pow x 2)) 37/12)) 2)) 2/3)","-1/3","(- (* -2/3 (* eps x)) 1/3)","(- (* x (+ (* -4/3 x) (* -2/3 eps))) 1/3)","(- (* x (+ (* -2/3 eps) (* x (- (* -17/9 (* eps x)) 4/3)))) 1/3)","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (* x (+ eps (* 2/3 (pow eps 3))))) (* eps (+ 1 (* 1/3 (pow eps 2)))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (* eps (+ eps (* 2/3 (pow eps 3)))))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (+ eps (* 2/3 (pow eps 3)))) (* x (+ (* eps (* x (- (+ eps (+ (* -1/6 eps) (* 17/9 (pow eps 3)))) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))))))","1/3","(+ 1/3 (* 2/3 (* eps x)))","(+ 1/3 (* x (- (* 4/3 x) (* -2/3 eps))))","(+ 1/3 (* x (- (* x (+ 4/3 (* 17/9 (* eps x)))) (* -2/3 eps))))","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (* -1/3 eps) (* -1 eps))))))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (+ (* -1/3 eps) (* (pow x 2) (- (* 2/45 eps) (+ (* -1 (- (* -1/3 eps) (* -1 eps))) (* 1/3 eps))))) (* -1 eps))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 2/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* (pow x 2) (+ 17/45 (* 62/315 (pow x 2))))))))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(/ (pow (sin eps) 2) (pow (cos eps) 2))","(+ (* x (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3)))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))","(+ (* x (+ (* x (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3)))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) (/ (sin eps) (cos eps)))","(/ x (cos eps))","(* 1/3 eps)","(+ (* 1/3 eps) (* 2/3 (* (pow eps 2) x)))","(+ (* 1/3 eps) (* x (+ (* 2/3 (pow eps 2)) (* 4/3 (* eps x)))))","(+ (* 1/3 eps) (* x (+ (* 2/3 (pow eps 2)) (* x (+ (* 4/3 eps) (* 17/9 (* (pow eps 2) x)))))))","(* -2/3 x)","(* x (- (* -17/9 (pow x 2)) 2/3))","(* x (- (* (pow x 2) (- (* -124/45 (pow x 2)) 17/9)) 2/3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -2764/945 (pow x 2)) 124/45)) 17/9)) 2/3))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* 5/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 5/6 (* 61/120 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 5/6 (* (pow x 2) (+ 61/120 (* 277/1008 (pow x 2))))))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))))","(* eps (+ (* -1 (* (pow eps 2) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2)))","(/ (pow (sin x) 2) (pow (cos x) 2))","(pow (sin x) 2)","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (* eps (sin x)) (cos x)))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* x (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3))))","(* x (+ (/ (sin eps) (cos eps)) (+ (/ (pow (sin eps) 2) (* x (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 3)))))","(* (pow x 2) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3))))","(* (pow x 2) (+ (/ (sin eps) (cos eps)) (+ (/ (pow (sin eps) 2) (* x (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 3)))))","(* (pow x 2) (+ (/ (sin eps) (cos eps)) (+ (/ (sin eps) (* (pow x 2) (cos eps))) (+ (/ (pow (sin eps) 2) (* x (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 3))))))","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))))))","(* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))","(pow (sin x) 4)","(pow (cos x) 2)","(cos x)","(/ (sin x) (pow (cos x) 2))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (* x (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2)))) (cos eps))","(* -1 (* x (+ (* -1 (/ (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (* x (pow (cos eps) 2)))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (sin eps) (* x (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) x)) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3)))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (+ (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(- (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps x)","(* eps (+ eps x))","(* eps (+ x (* eps (+ 1 (* eps (- (* 5/6 x) (* -1/2 x)))))))","(* eps (+ x (* eps (+ 1 (* eps (- (+ (* 2/3 eps) (* 5/6 x)) (* -1/2 x)))))))","(* eps (+ 1 (pow x 2)))","(* eps (+ 1 (+ (* eps x) (pow x 2))))","(* eps (+ 1 (+ (* eps (+ x (* eps (+ 1/3 (* x (- (* 5/6 x) (* -1/2 x))))))) (pow x 2))))","(* eps (+ 1 (+ (* eps (+ x (* eps (+ 1/3 (+ (* 2/3 (* eps x)) (* x (- (* 5/6 x) (* -1/2 x)))))))) (pow x 2))))","(+ x (* 1/2 (* (pow eps 2) x)))","(+ x (* (pow eps 2) (- (* -1 (* (pow eps 2) (+ (* -1/4 x) (* 1/24 x)))) (* -1/2 x))))","(+ x (* (pow eps 2) (- (* (pow eps 2) (- (* -1 (* (pow eps 2) (+ (* -1/720 x) (+ (* 1/48 x) (* 1/2 (+ (* -1/4 x) (* 1/24 x))))))) (+ (* -1/4 x) (* 1/24 x)))) (* -1/2 x))))","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(* eps (+ (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(pow eps 3)","(* (pow eps 3) (+ 1 (* -1/2 (pow eps 2))))","(* (pow eps 3) (+ 1 (* (pow eps 2) (- (* 13/120 (pow eps 2)) 1/2))))","(* (pow eps 3) (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 13/120 (* -41/3024 (pow eps 2)))) 1/2))))","(pow eps 2)","(* (pow eps 2) (+ 1 (* -1/3 (pow eps 2))))","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* 2/45 (pow eps 2)) 1/3))))","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 2/45 (* -1/315 (pow eps 2)))) 1/3))))","(* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))","(* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (+ (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))))","(* -1 (* (pow eps 4) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(* eps (- (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(sin eps)","(cos eps)","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(/ (* eps (sin x)) (cos x))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(+ (/ (* x (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2)))) (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 2)))","(+ (* x (+ (/ (* x (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2)))) (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) (/ (sin eps) (cos eps)))","(* -1 (* (pow eps 2) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(* (pow eps 2) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(pow (sin eps) 3)","(pow (sin eps) 2)","(* -1 (* eps (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* -1 (* eps (- (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* eps (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))"]],"series":[[11.68505859375,"((+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x))) (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) (- (tan (+ x eps)) (tan x)) (+ (* (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) x) (/ (sin eps) (cos eps))) (/ x (cos eps)) (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) (- (tan (+ x eps)) (tan x)) (pow (sin x) 4) (pow (cos x) 2) (cos x) (/ (sin x) (pow (cos x) 2)) (pow (sin eps) 3) (pow (sin eps) 2))","eps","-inf"],[13.10205078125,"((+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x))) (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) (- (tan (+ x eps)) (tan x)) (+ (* (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) x) (/ (sin eps) (cos eps))) (/ x (cos eps)) (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) (- (tan (+ x eps)) (tan x)) (pow (sin x) 4) (pow (cos x) 2) (cos x) (/ (sin x) (pow (cos x) 2)) (pow (sin eps) 3) (pow (sin eps) 2))","eps","inf"],[12.427001953125,"((+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x))) (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) (- (tan (+ x eps)) (tan x)) (+ (* (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) x) (/ (sin eps) (cos eps))) (/ x (cos eps)) (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) (- (tan (+ x eps)) (tan x)) (pow (sin x) 4) (pow (cos x) 2) (cos x) (/ (sin x) (pow (cos x) 2)) (pow (sin eps) 3) (pow (sin eps) 2))","eps","0"],[25.928955078125,"((+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x))) (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) (- (tan (+ x eps)) (tan x)) (+ (* (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) x) (/ (sin eps) (cos eps))) (/ x (cos eps)) (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) (- (tan (+ x eps)) (tan x)) (pow (sin x) 4) (pow (cos x) 2) (cos x) (/ (sin x) (pow (cos x) 2)) (pow (sin eps) 3) (pow (sin eps) 2))","x","-inf"],[19.52197265625,"((+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x))) (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) (- (tan (+ x eps)) (tan x)) (+ (* (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) x) (/ (sin eps) (cos eps))) (/ x (cos eps)) (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) (- (tan (+ x eps)) (tan x)) (pow (sin x) 4) (pow (cos x) 2) (cos x) (/ (sin x) (pow (cos x) 2)) (pow (sin eps) 3) (pow (sin eps) 2))","x","inf"],[14.64599609375,"((+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x))) (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) (- (tan (+ x eps)) (tan x)) (+ (* (+ (* (/ x (cos eps)) (+ (/ (pow (sin eps) 3) (pow (cos eps) 2)) (sin eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))) x) (/ (sin eps) (cos eps))) (/ x (cos eps)) (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) (- (tan (+ x eps)) (tan x)) (pow (sin x) 4) (pow (cos x) 2) (cos x) (/ (sin x) (pow (cos x) 2)) (pow (sin eps) 3) (pow (sin eps) 2))","x","0"]],"time":103.372802734375,"type":"series"},{"count":[[164,162]],"egraph":[[0,8490,3963,0.11804019],[2,7463,4224,0.027957607],[1,2250,4287,0.025168152],[0,694,4440,0.008169139]],"inputs":[["-2/3","(- (* -2 (pow x 2)) 2/3)","(- (* (pow x 2) (- (* -37/12 (pow x 2)) 2)) 2/3)","(- (* (pow x 2) (- (* (pow x 2) (- (* -154/45 (pow x 2)) 37/12)) 2)) 2/3)","-1/3","(- (* -2/3 (* eps x)) 1/3)","(- (* x (+ (* -4/3 x) (* -2/3 eps))) 1/3)","(- (* x (+ (* -2/3 eps) (* x (- (* -17/9 (* eps x)) 4/3)))) 1/3)","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (* x (+ eps (* 2/3 (pow eps 3))))) (* eps (+ 1 (* 1/3 (pow eps 2)))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (* eps (+ eps (* 2/3 (pow eps 3)))))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (+ eps (* 2/3 (pow eps 3)))) (* x (+ (* eps (* x (- (+ eps (+ (* -1/6 eps) (* 17/9 (pow eps 3)))) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))))))","1/3","(+ 1/3 (* 2/3 (* eps x)))","(+ 1/3 (* x (- (* 4/3 x) (* -2/3 eps))))","(+ 1/3 (* x (- (* x (+ 4/3 (* 17/9 (* eps x)))) (* -2/3 eps))))","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (* -1/3 eps) (* -1 eps))))))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (+ (* -1/3 eps) (* (pow x 2) (- (* 2/45 eps) (+ (* -1 (- (* -1/3 eps) (* -1 eps))) (* 1/3 eps))))) (* -1 eps))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 2/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* (pow x 2) (+ 17/45 (* 62/315 (pow x 2))))))))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(/ (pow (sin eps) 2) (pow (cos eps) 2))","(+ (* x (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3)))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))","(+ (* x (+ (* x (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3)))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) (/ (sin eps) (cos eps)))","(/ x (cos eps))","(* 1/3 eps)","(+ (* 1/3 eps) (* 2/3 (* (pow eps 2) x)))","(+ (* 1/3 eps) (* x (+ (* 2/3 (pow eps 2)) (* 4/3 (* eps x)))))","(+ (* 1/3 eps) (* x (+ (* 2/3 (pow eps 2)) (* x (+ (* 4/3 eps) (* 17/9 (* (pow eps 2) x)))))))","(* -2/3 x)","(* x (- (* -17/9 (pow x 2)) 2/3))","(* x (- (* (pow x 2) (- (* -124/45 (pow x 2)) 17/9)) 2/3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -2764/945 (pow x 2)) 124/45)) 17/9)) 2/3))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* 5/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 5/6 (* 61/120 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 5/6 (* (pow x 2) (+ 61/120 (* 277/1008 (pow x 2))))))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))))","(* eps (+ (* -1 (* (pow eps 2) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2)))","(/ (pow (sin x) 2) (pow (cos x) 2))","(pow (sin x) 2)","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (* eps (sin x)) (cos x)))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* x (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3))))","(* x (+ (/ (sin eps) (cos eps)) (+ (/ (pow (sin eps) 2) (* x (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 3)))))","(* (pow x 2) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3))))","(* (pow x 2) (+ (/ (sin eps) (cos eps)) (+ (/ (pow (sin eps) 2) (* x (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 3)))))","(* (pow x 2) (+ (/ (sin eps) (cos eps)) (+ (/ (sin eps) (* (pow x 2) (cos eps))) (+ (/ (pow (sin eps) 2) (* x (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 3))))))","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))))))","(* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))","(pow (sin x) 4)","(pow (cos x) 2)","(cos x)","(/ (sin x) (pow (cos x) 2))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (* x (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2)))) (cos eps))","(* -1 (* x (+ (* -1 (/ (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (* x (pow (cos eps) 2)))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (sin eps) (* x (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) x)) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3)))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (+ (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(- (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps x)","(* eps (+ eps x))","(* eps (+ x (* eps (+ 1 (* eps (- (* 5/6 x) (* -1/2 x)))))))","(* eps (+ x (* eps (+ 1 (* eps (- (+ (* 2/3 eps) (* 5/6 x)) (* -1/2 x)))))))","(* eps (+ 1 (pow x 2)))","(* eps (+ 1 (+ (* eps x) (pow x 2))))","(* eps (+ 1 (+ (* eps (+ x (* eps (+ 1/3 (* x (- (* 5/6 x) (* -1/2 x))))))) (pow x 2))))","(* eps (+ 1 (+ (* eps (+ x (* eps (+ 1/3 (+ (* 2/3 (* eps x)) (* x (- (* 5/6 x) (* -1/2 x)))))))) (pow x 2))))","(+ x (* 1/2 (* (pow eps 2) x)))","(+ x (* (pow eps 2) (- (* -1 (* (pow eps 2) (+ (* -1/4 x) (* 1/24 x)))) (* -1/2 x))))","(+ x (* (pow eps 2) (- (* (pow eps 2) (- (* -1 (* (pow eps 2) (+ (* -1/720 x) (+ (* 1/48 x) (* 1/2 (+ (* -1/4 x) (* 1/24 x))))))) (+ (* -1/4 x) (* 1/24 x)))) (* -1/2 x))))","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(* eps (+ (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(pow eps 3)","(* (pow eps 3) (+ 1 (* -1/2 (pow eps 2))))","(* (pow eps 3) (+ 1 (* (pow eps 2) (- (* 13/120 (pow eps 2)) 1/2))))","(* (pow eps 3) (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 13/120 (* -41/3024 (pow eps 2)))) 1/2))))","(pow eps 2)","(* (pow eps 2) (+ 1 (* -1/3 (pow eps 2))))","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* 2/45 (pow eps 2)) 1/3))))","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 2/45 (* -1/315 (pow eps 2)))) 1/3))))","(* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))","(* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (+ (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))))","(* -1 (* (pow eps 4) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(* eps (- (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(sin eps)","(cos eps)","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(/ (* eps (sin x)) (cos x))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(+ (/ (* x (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2)))) (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 2)))","(+ (* x (+ (/ (* x (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2)))) (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) (/ (sin eps) (cos eps)))","(* -1 (* (pow eps 2) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(* (pow eps 2) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(pow (sin eps) 3)","(pow (sin eps) 2)","(* -1 (* eps (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* -1 (* eps (- (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* eps (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))"]],"memory":[[2830112,66562544]],"method":["egg-herbie"],"outputs":[["-2/3","#s(literal -2/3 binary64)","(- (* -2 (pow x 2)) 2/3)","(fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2/3 binary64))","(- (* (pow x 2) (- (* -37/12 (pow x 2)) 2)) 2/3)","(fma.f64 (fma.f64 #s(literal -37/12 binary64) (*.f64 x x) #s(literal -2 binary64)) (*.f64 x x) #s(literal -2/3 binary64))","(- (* (pow x 2) (- (* (pow x 2) (- (* -154/45 (pow x 2)) 37/12)) 2)) 2/3)","(fma.f64 (fma.f64 (fma.f64 #s(literal -154/45 binary64) (*.f64 x x) #s(literal -37/12 binary64)) (*.f64 x x) #s(literal -2 binary64)) (*.f64 x x) #s(literal -2/3 binary64))","-1/3","#s(literal -1/3 binary64)","(- (* -2/3 (* eps x)) 1/3)","(fma.f64 (*.f64 #s(literal -2/3 binary64) x) eps #s(literal -1/3 binary64))","(- (* x (+ (* -4/3 x) (* -2/3 eps))) 1/3)","(fma.f64 (fma.f64 #s(literal -4/3 binary64) x (*.f64 #s(literal -2/3 binary64) eps)) x #s(literal -1/3 binary64))","(- (* x (+ (* -2/3 eps) (* x (- (* -17/9 (* eps x)) 4/3)))) 1/3)","(fma.f64 (fma.f64 (fma.f64 #s(literal -17/9 binary64) (*.f64 eps x) #s(literal -4/3 binary64)) x (*.f64 #s(literal -2/3 binary64) eps)) x #s(literal -1/3 binary64))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)","(+ (* eps (* x (+ eps (* 2/3 (pow eps 3))))) (* eps (+ 1 (* 1/3 (pow eps 2)))))","(*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (* eps (+ eps (* 2/3 (pow eps 3)))))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (+ eps (* 2/3 (pow eps 3)))) (* x (+ (* eps (* x (- (+ eps (+ (* -1/6 eps) (* 17/9 (pow eps 3)))) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (+.f64 (fma.f64 #s(literal 17/9 binary64) (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 1/3 binary64) eps)) eps) x) eps (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64) eps)) x (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* 2/3 (* eps x)))","(fma.f64 (*.f64 eps x) #s(literal 2/3 binary64) #s(literal 1/3 binary64))","(+ 1/3 (* x (- (* 4/3 x) (* -2/3 eps))))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) x (*.f64 #s(literal 2/3 binary64) eps)) x #s(literal 1/3 binary64))","(+ 1/3 (* x (- (* x (+ 4/3 (* 17/9 (* eps x)))) (* -2/3 eps))))","(fma.f64 (fma.f64 #s(literal 2/3 binary64) eps (*.f64 (fma.f64 #s(literal 17/9 binary64) (*.f64 eps x) #s(literal 4/3 binary64)) x)) x #s(literal 1/3 binary64))","(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (sin.f64 eps) #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (/.f64 x (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+ eps (* eps (pow x 2)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (* -1/3 eps) (* -1 eps))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 2/3 binary64) eps) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (+ (* -1/3 eps) (* (pow x 2) (- (* 2/45 eps) (+ (* -1 (- (* -1/3 eps) (* -1 eps))) (* 1/3 eps))))) (* -1 eps))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 #s(literal 2/45 binary64) eps (*.f64 #s(literal 2/3 binary64) eps)) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) (*.f64 #s(literal 2/3 binary64) eps)) (*.f64 x x) eps) (*.f64 x x) eps)","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 2/3 (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* (pow x 2) (+ 17/45 (* 62/315 (pow x 2))))))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(+ eps (* (pow eps 2) x))","(fma.f64 (*.f64 eps eps) x eps)","(+ eps (* x (+ (* eps x) (pow eps 2))))","(*.f64 (fma.f64 (+.f64 eps x) x #s(literal 1 binary64)) eps)","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)","1","#s(literal 1 binary64)","(+ 1 (* eps x))","(fma.f64 eps x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64))","(+ 1 (* x (+ eps x)))","(fma.f64 (+.f64 eps x) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(/ (pow (sin eps) 2) (pow (cos eps) 2))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))","(+ (* x (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3)))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))","(fma.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))","(+ (* x (+ (* x (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3)))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/ x (cos eps))","(/.f64 x (cos.f64 eps))","(* 1/3 eps)","(*.f64 #s(literal 1/3 binary64) eps)","(+ (* 1/3 eps) (* 2/3 (* (pow eps 2) x)))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)) x (*.f64 #s(literal 1/3 binary64) eps))","(+ (* 1/3 eps) (* x (+ (* 2/3 (pow eps 2)) (* 4/3 (* eps x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) x (*.f64 #s(literal 2/3 binary64) eps)) eps) x (*.f64 #s(literal 1/3 binary64) eps))","(+ (* 1/3 eps) (* x (+ (* 2/3 (pow eps 2)) (* x (+ (* 4/3 eps) (* 17/9 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 eps eps) x) #s(literal 17/9 binary64) (*.f64 #s(literal 4/3 binary64) eps)) x (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64))) x (*.f64 #s(literal 1/3 binary64) eps))","(* -2/3 x)","(*.f64 #s(literal -2/3 binary64) x)","(* x (- (* -17/9 (pow x 2)) 2/3))","(*.f64 (fma.f64 #s(literal -17/9 binary64) (*.f64 x x) #s(literal -2/3 binary64)) x)","(* x (- (* (pow x 2) (- (* -124/45 (pow x 2)) 17/9)) 2/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -124/45 binary64) (*.f64 x x) #s(literal -17/9 binary64)) (*.f64 x x) #s(literal -2/3 binary64)) x)","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -2764/945 (pow x 2)) 124/45)) 17/9)) 2/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2764/945 binary64) (*.f64 x x) #s(literal -124/45 binary64)) (*.f64 x x) #s(literal -17/9 binary64)) (*.f64 x x) #s(literal -2/3 binary64)) x)","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(*.f64 (fma.f64 (*.f64 #s(literal -2/3 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -34/945 binary64) (*.f64 x x) #s(literal 1/5 binary64)) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(+ 1 (* -1 (pow x 2)))","(-.f64 #s(literal 1 binary64) (*.f64 x x))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","x","(* x (+ 1 (* 5/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 5/6 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 5/6 (* 61/120 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 61/120 binary64) (*.f64 x x) #s(literal 5/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 5/6 (* (pow x 2) (+ 61/120 (* 277/1008 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 277/1008 binary64) (*.f64 x x) #s(literal 61/120 binary64)) (*.f64 x x) #s(literal 5/6 binary64)) x)","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))","(-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))))","(fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(* eps (+ (* -1 (* (pow eps 2) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(/ (pow (sin x) 2) (pow (cos x) 2))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow (sin x) 2)","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(+ 1 (/ (* eps (sin x)) (cos x)))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(* x (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3))))","(*.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x)","(* x (+ (/ (sin eps) (cos eps)) (+ (/ (pow (sin eps) 2) (* x (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 3)))))","(*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) x) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))) x)","(* (pow x 2) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3))))","(*.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x) x)","(* (pow x 2) (+ (/ (sin eps) (cos eps)) (+ (/ (pow (sin eps) 2) (* x (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 3)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) x) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))) x) x)","(* (pow x 2) (+ (/ (sin eps) (cos eps)) (+ (/ (sin eps) (* (pow x 2) (cos eps))) (+ (/ (pow (sin eps) 2) (* x (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 3))))))","(*.f64 (+.f64 (+.f64 (/.f64 (/.f64 (/.f64 (sin.f64 eps) x) x) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) x) (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)))) (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 x x))","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps)","(* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x))","(pow (sin x) 4)","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow (cos x) 2)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos x)","(cos.f64 x)","(/ (sin x) (pow (cos x) 2))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (* x (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2)))) (cos eps))","(*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 x (cos.f64 eps)))","(* -1 (* x (+ (* -1 (/ (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (* x (pow (cos eps) 2)))))))","(*.f64 x (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) x) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (cos.f64 eps))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (sin eps) (* x (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) x)) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (pow (cos eps) 3)))))","(*.f64 (-.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) x) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x)) (*.f64 x x))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (+ 1 (+ (* eps (+ (* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (+ 1 (+ (* eps (+ (* eps (+ (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(neg.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(- (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (+.f64 (-.f64 #s(literal 1/6 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 (-.f64 #s(literal 1/6 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) eps (+.f64 (-.f64 #s(literal 1/6 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 #s(literal -1/6 binary64) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/120 binary64) eps) eps #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(+ 1 (* -1/2 (pow eps 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(* eps x)","(*.f64 eps x)","(* eps (+ eps x))","(*.f64 (+.f64 eps x) eps)","(* eps (+ x (* eps (+ 1 (* eps (- (* 5/6 x) (* -1/2 x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps x) eps)","(* eps (+ x (* eps (+ 1 (* eps (- (+ (* 2/3 eps) (* 5/6 x)) (* -1/2 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) x (*.f64 #s(literal 2/3 binary64) eps)) eps #s(literal 1 binary64)) eps x) eps)","(* eps (+ 1 (pow x 2)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) eps)","(* eps (+ 1 (+ (* eps x) (pow x 2))))","(*.f64 (fma.f64 (+.f64 eps x) x #s(literal 1 binary64)) eps)","(* eps (+ 1 (+ (* eps (+ x (* eps (+ 1/3 (* x (- (* 5/6 x) (* -1/2 x))))))) (pow x 2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) x #s(literal 1/3 binary64)) eps x) eps (fma.f64 x x #s(literal 1 binary64))) eps)","(* eps (+ 1 (+ (* eps (+ x (* eps (+ 1/3 (+ (* 2/3 (* eps x)) (* x (- (* 5/6 x) (* -1/2 x)))))))) (pow x 2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) x (*.f64 #s(literal 2/3 binary64) eps)) x #s(literal 1/3 binary64)) eps x) eps (fma.f64 x x #s(literal 1 binary64))) eps)","(+ x (* 1/2 (* (pow eps 2) x)))","(fma.f64 (*.f64 (*.f64 eps eps) x) #s(literal 1/2 binary64) x)","(+ x (* (pow eps 2) (- (* -1 (* (pow eps 2) (+ (* -1/4 x) (* 1/24 x)))) (* -1/2 x))))","(fma.f64 (fma.f64 (*.f64 x #s(literal 5/24 binary64)) (*.f64 eps eps) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 eps eps) x)","(+ x (* (pow eps 2) (- (* (pow eps 2) (- (* -1 (* (pow eps 2) (+ (* -1/720 x) (+ (* 1/48 x) (* 1/2 (+ (* -1/4 x) (* 1/24 x))))))) (+ (* -1/4 x) (* 1/24 x)))) (* -1/2 x))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 x #s(literal 7/360 binary64) (*.f64 x #s(literal -5/48 binary64))) (*.f64 x #s(literal 5/24 binary64))) (*.f64 eps eps) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 eps eps) x)","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 eps))","(* eps (+ (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps)","(pow eps 3)","(pow.f64 eps #s(literal 3 binary64))","(* (pow eps 3) (+ 1 (* -1/2 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1 (* (pow eps 2) (- (* 13/120 (pow eps 2)) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 13/120 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 13/120 (* -41/3024 (pow eps 2)))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -41/3024 binary64) (*.f64 eps eps) #s(literal 13/120 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(pow eps 2)","(*.f64 eps eps)","(* (pow eps 2) (+ 1 (* -1/3 (pow eps 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/3 binary64) eps) eps #s(literal 1 binary64)) eps) eps)","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* 2/45 (pow eps 2)) 1/3))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2/45 binary64) eps) eps #s(literal -1/3 binary64)) (*.f64 eps eps) #s(literal 1 binary64)) eps) eps)","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 2/45 (* -1/315 (pow eps 2)))) 1/3))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 eps eps) #s(literal 2/45 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (*.f64 eps eps) #s(literal 1 binary64)) eps) eps)","(* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))","(*.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (+ (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))))","(*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps)","(* -1 (* (pow eps 4) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (sin.f64 x))) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(*.f64 (neg.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(*.f64 (fma.f64 (neg.f64 (sin.f64 x)) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) (*.f64 eps eps)) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(*.f64 (fma.f64 (neg.f64 (sin.f64 x)) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) (*.f64 eps eps))) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(*.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(* eps (- (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) (neg.f64 eps))","(sin eps)","(sin.f64 eps)","(cos eps)","(cos.f64 eps)","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 (*.f64 eps eps) (cos.f64 x)))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) (*.f64 eps eps) eps)","(/ (* eps (sin x)) (cos x))","(*.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))","(+ (/ (* x (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2)))) (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 2)))","(fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 x (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))","(+ (* x (+ (/ (* x (+ (sin eps) (/ (pow (sin eps) 3) (pow (cos eps) 2)))) (cos eps)) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 x (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(* -1 (* (pow eps 2) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(*.f64 (*.f64 (*.f64 eps eps) (neg.f64 (sin.f64 x))) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(* (pow eps 2) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(*.f64 (*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) (neg.f64 eps)) eps)","(pow (sin eps) 3)","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","(pow (sin eps) 2)","(pow.f64 (sin.f64 eps) #s(literal 2 binary64))","(* -1 (* eps (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)))))","(*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps)","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(*.f64 (neg.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps)) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(*.f64 (neg.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) eps) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps)) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* eps (- (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))","(*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) (neg.f64 eps))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* -1 (* eps (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 eps) eps)","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) eps)) (neg.f64 eps))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(*.f64 eps (+.f64 (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))))"]],"stop":[["iter limit",1],["node limit",1]],"time":361.623046875,"type":"simplify"},{"count":[[29,365]],"inputs":[["(fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))","(fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","(cos.f64 eps)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","(fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 x (cos.f64 eps))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","(*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","(pow.f64 (sin.f64 eps) #s(literal 2 binary64))"]],"memory":[[-3018064,26200560]],"outputs":[["#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -4/3 binary64)","#s(literal 6 binary64)","#s(literal 8/3 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 11/3 binary64)"]],"time":935.444091796875,"type":"rewrite"},{"compiler":[[32603,2233]],"memory":[[-3921088,43429872]],"time":60.321044921875,"type":"eval"},{"alts":[["(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","fresh",24.6364625139351,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",24.80525489337457,"binary64"],["(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","fresh",24.639188534907582,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps))","fresh",0.44128062820266845,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","fresh",0.8254775309245777,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","next",1.3258240603452105,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","fresh",1.3917411089652678,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","fresh",1.5680252618100408,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","fresh",1.4474936957052749,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","next",1.4633932541673358,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","fresh",1.4733795248261097,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","fresh",1.507148337370854,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","fresh",1.6755072214703857,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.9351758926973862,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.34918373040017264,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.3530025198224749,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.4407602541243289,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","fresh",1.1320050810639222,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","fresh",1.0206099169281269,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.4507143684342264,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","fresh",0.9062206735548441,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","fresh",1.5385342680785152,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","fresh",0.44909312820266845,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","fresh",1.511083575462593,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","fresh",1.675507311887192,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","fresh",1.675507584386129,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","next",0.28899315415879956,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","fresh",1.725140063865088,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","fresh",1.5307217680785152,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","fresh",1.725217133793873,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","next",0.4513781379711105,"binary64"],["#s(approx 4 #s(literal 2 binary64))","next",60.61919522398487,"binary64"]],"compiler":[[25,14],[7,6],[18,12],[37,20],[20,14],[37,24],[26,19],[41,26],[41,25],[36,23],[31,21],[24,16],[20,15],[142,50],[75,33],[168,58],[137,49],[57,36],[43,28],[40,25],[36,24],[45,27],[63,35],[39,24],[25,18],[144,46],[237,75],[154,52],[49,29],[39,23],[54,32],[3,5],[25,14],[18,12],[37,20],[20,14],[37,24],[26,19],[41,26],[41,25],[36,23],[31,21],[24,16],[20,15],[142,50],[75,33],[168,58],[137,49],[57,36],[43,28],[40,25],[36,24],[45,27],[63,35],[39,24],[25,18],[144,46],[237,75],[154,52],[49,29],[39,23],[54,32],[3,5]],"count":[[339,32]],"kept":[{"done":[1,1],"fresh":[4,2],"new":[329,29],"picked":[5,0]}],"memory":[[4093360,31104048]],"min-error":[[0.006191259768442017,"binary64"]],"time":39.634033203125,"type":"prune"},{"egraph":[[0,8164,1362,0.093370981],[3,3835,1382,0.026190349],[2,883,1439,0.012438817],[1,332,1445,0.00320233],[0,168,1445,0.001610439],[0,100,1469,0.000926895]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps))","(*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)","(fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))","(*.f64 (neg.f64 eps) eps)","(neg.f64 eps)","eps","(fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (sin.f64 x) eps)","(sin.f64 x)","x","(-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","#s(literal 2 binary64)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal -2/3 binary64)","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","#s(literal 3 binary64)","(-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))","#s(literal -1/3 binary64)","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(/.f64 eps (cos.f64 x))","#s(literal 1 binary64)","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","(fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps)","#s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64))","#s(literal 17/45 binary64)","(*.f64 x x)","x","#s(literal 2/3 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(literal -2/45 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","eps","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(/.f64 eps (cos.f64 x))","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","cost-diff",0],["(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","cost-diff",0],["#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","cost-diff",0],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","cost-diff",0],["(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","cost-diff",0],["(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","cost-diff",0],["#s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x))","cost-diff",0],["(fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","cost-diff",2],["#s(approx 4 #s(literal 2 binary64))","cost-diff",0],["#s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","cost-diff",0],["(fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))","cost-diff",1],["(fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","cost-diff",5]],"memory":[[-3169168,47286192]],"method":["egg-herbie"],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 #s(literal -1/3 binary64) (*.f64 (/.f64 #s(literal -2/3 binary64) (cos.f64 x)) (*.f64 (sin.f64 x) eps))) (neg.f64 (fma.f64 (*.f64 (sin.f64 x) eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) (*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))))))","#s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps))","#s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 #s(literal -1/3 binary64) (*.f64 (/.f64 #s(literal -2/3 binary64) (cos.f64 x)) (*.f64 (sin.f64 x) eps))) (neg.f64 (fma.f64 (*.f64 (sin.f64 x) eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) (*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)))))","(*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)","(fma.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 #s(literal -1/3 binary64) (*.f64 (/.f64 #s(literal -2/3 binary64) (cos.f64 x)) (*.f64 (sin.f64 x) eps))) (neg.f64 (fma.f64 (*.f64 (sin.f64 x) eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) (*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))))","(fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))","(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (fma.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)) (cos.f64 x))) (sin.f64 x)) (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (*.f64 (neg.f64 eps) eps) #s(literal -1/3 binary64) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))))))","(*.f64 (neg.f64 eps) eps)","(neg.f64 eps)","eps","(fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 #s(literal -1/3 binary64) (*.f64 (/.f64 #s(literal -2/3 binary64) (cos.f64 x)) (*.f64 (sin.f64 x) eps))) (neg.f64 (fma.f64 (*.f64 (sin.f64 x) eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(*.f64 (sin.f64 x) eps)","(sin.f64 x)","x","(-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x))","(/.f64 (fma.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64)) (cos.f64 x))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64))","(fma.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -2/3 binary64))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","#s(literal 2 binary64)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal -2/3 binary64)","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","#s(literal 3 binary64)","(-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(-.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))","(fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64))","#s(literal -1/3 binary64)","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(/.f64 eps (cos.f64 x))","#s(literal 1 binary64)","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 17/45 binary64) #s(literal 2/3 binary64)) x) x)) eps eps))","(fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps)","(fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 17/45 binary64) #s(literal 2/3 binary64)) x) x)) eps eps)","#s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x))","#s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 17/45 binary64) #s(literal 2/3 binary64)) x) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 17/45 binary64) #s(literal 2/3 binary64)) x) x)","(*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 17/45 binary64) #s(literal 2/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 17/45 binary64) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64))","(fma.f64 (*.f64 x x) #s(literal 17/45 binary64) #s(literal 2/3 binary64))","#s(literal 17/45 binary64)","(*.f64 x x)","x","#s(literal 2/3 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(literal -2/45 binary64)","(*.f64 x x)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)))))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))))","(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps)","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(sin.f64 x)","x","#s(literal 2 binary64)","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","eps","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(/.f64 eps (cos.f64 x))","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":285.221923828125,"type":"simplify"},{"compiler":[[986,94]],"locations":[["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","accuracy",0.01953125],["(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","accuracy",0.01953125],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","accuracy",0.431183117476981],["(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","accuracy",0.015625],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","accuracy",0.8254781053963792],["#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","accuracy",1.5621536126582154],["(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","accuracy",0.015625],["(*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","accuracy",0.02734375],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","accuracy",0.8254781053963792],["#s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x))","accuracy",1.4607059519948078],["#s(approx 4 #s(literal 2 binary64))","accuracy",52.0],["(pow.f64 (sin.f64 x) #s(literal 2 binary64))","accuracy",0.03125],["(pow.f64 (cos.f64 x) #s(literal 3 binary64))","accuracy",0.03125],["(pow.f64 (sin.f64 x) #s(literal 4 binary64))","accuracy",0.04201127930532605],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","accuracy",0.26946190415879956]],"memory":[[3790592,114295312]],"mixsample":[[17.631591796875,"adjust",800],[26.5087890625,"ival-div",0],[32.82763671875,"ival-add",0],[64.873291015625,"ival-mult",0],[2.84033203125,"ival-sin",0],[0.134521484375,"ival-assert",0],[4.76708984375,"ival-sub",0],[0.345947265625,"ival-true",0],[6.50341796875,"ival-tan",0],[3.088134765625,"ival-cos",0],[26.93408203125,"const",0],[0.835693359375,"exact",0],[9.81494140625,"ival-pow",0],[6.927490234375,"ival-pow2",0],[4.052734375,"ival-neg",0]],"outcomes":[[142.268798828125,1,"valid",94],[120.34228515625,0,"valid",162]],"time":346.69189453125,"type":"localize"},{"count":[[23,104]],"inputs":[["(fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps))","#s(approx 4 #s(literal 2 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","(fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps)","#s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))"]],"memory":[[-5338336,27160832]],"outputs":[["-1/3","(- (* -2/3 (* eps x)) 1/3)","(- (* x (+ (* -4/3 x) (* -2/3 eps))) 1/3)","(- (* x (+ (* -2/3 eps) (* x (- (* -17/9 (* eps x)) 4/3)))) 1/3)","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* 2/3 (pow eps 3))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (+ (* 2/3 (pow eps 3)) (* x (+ 1 (* 4/3 (pow eps 2)))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (+ (* 2/3 (pow eps 3)) (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (+ (* -1/6 eps) (* 17/9 (pow eps 3)))) (* -1/2 eps)))))))))))","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (* x (+ eps (* 2/3 (pow eps 3))))) (* eps (+ 1 (* 1/3 (pow eps 2)))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (* eps (+ eps (* 2/3 (pow eps 3)))))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (+ eps (* 2/3 (pow eps 3)))) (* x (+ (* eps (* x (- (+ eps (+ (* -1/6 eps) (* 17/9 (pow eps 3)))) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))))))","x","(* x (+ 1 (* 2/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","eps","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (* -1/3 eps) (* -1 eps))))))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (+ (* -1/3 eps) (* (pow x 2) (- (* 2/45 eps) (+ (* -1 (- (* -1/3 eps) (* -1 eps))) (* 1/3 eps))))) (* -1 eps))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 2/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* (pow x 2) (+ 17/45 (* 62/315 (pow x 2))))))))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* x (+ (* eps (- (* -1/6 eps) (* -1/2 eps))) (pow eps 2))))) (pow eps 2))))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","1","(+ 1 (* -3/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 7/8 (pow x 2)) 3/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 7/8 (* -61/240 (pow x 2)))) 3/2)))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","1/3","(+ 1/3 (* -2/45 (pow x 2)))","(- (+ (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))","(+ (* -1 (* (pow eps 2) (- (+ (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (+ (* -1 (* (pow eps 2) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* 17/45 (pow x 5))","(* (pow x 5) (+ 17/45 (* 2/3 (/ 1 (pow x 2)))))","(* (pow x 5) (+ 17/45 (+ (* 2/3 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2)))","(/ (pow (sin x) 2) (pow (cos x) 2))","(pow (sin x) 2)","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2))))","(pow (sin x) 4)","(pow (cos x) 3)","(* 17/45 (pow x 6))","(* (pow x 6) (+ 17/45 (* 2/3 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 17/45 (+ (* 2/3 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(pow (cos x) 2)","(* -2/45 (pow x 2))","(* (pow x 2) (- (* 1/3 (/ 1 (pow x 2))) 2/45))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 2/3 (/ 1 (pow x 2))) (pow x 2))) 17/45)))","(- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* -1 (* eps (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (+ (* -1 (* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))) (* -1 (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (+ (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))","(* eps (- (+ (* -1/3 (/ (pow (sin x) 2) (* eps (pow (cos x) 2)))) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* 1/3 (/ 1 eps)) (+ (/ (pow (sin x) 2) (* eps (pow (cos x) 2))) (/ (pow (sin x) 4) (* eps (pow (cos x) 4)))))))","(* -1 (* (pow eps 3) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))))","(* (pow eps 3) (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps))))","(* (pow eps 3) (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(* (pow eps 3) (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(* -1 (* (pow eps 4) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* -1 (* eps (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps)))))","(* -1 (* (pow eps 3) (- (+ (* -1/3 (/ (pow (sin x) 2) (* eps (pow (cos x) 2)))) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* 1/3 (/ 1 eps)) (+ (/ (pow (sin x) 2) (* eps (pow (cos x) 2))) (/ (pow (sin x) 4) (* eps (pow (cos x) 4))))))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) eps)) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps))) eps)) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* -1 (* eps (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)))","(* -1 (/ (* (pow eps 2) (* (sin x) (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1))) (cos x)))","(* (pow eps 2) (+ (* -1 (/ (* (sin x) (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)) (cos x))) (* -1 (/ (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1) eps))))"]],"series":[[8.798828125,"((+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) 4 (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (+ (* (sin x) (/ eps (cos x))) 1)) (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (pow (sin x) 4) (pow (cos x) 3) (* (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (pow (cos x) 2))","eps","-inf"],[6.68408203125,"((+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) 4 (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (+ (* (sin x) (/ eps (cos x))) 1)) (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (pow (sin x) 4) (pow (cos x) 3) (* (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (pow (cos x) 2))","eps","inf"],[10.011962890625,"((+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) 4 (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (+ (* (sin x) (/ eps (cos x))) 1)) (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (pow (sin x) 4) (pow (cos x) 3) (* (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (pow (cos x) 2))","eps","0"],[33.1640625,"((+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) 4 (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (+ (* (sin x) (/ eps (cos x))) 1)) (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (pow (sin x) 4) (pow (cos x) 3) (* (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (pow (cos x) 2))","x","-inf"],[17.10693359375,"((+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) 4 (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (+ (* (sin x) (/ eps (cos x))) 1)) (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (pow (sin x) 4) (pow (cos x) 3) (* (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (pow (cos x) 2))","x","inf"],[3.12890625,"((+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) 4 (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (+ (* (sin x) (/ eps (cos x))) 1)) (+ (* (pow (sin x) 2) (/ eps (pow (cos x) 2))) eps) (pow (sin x) 4) (pow (cos x) 3) (* (* (+ (* (+ (* 17/45 (* x x)) 2/3) (* x x)) 1) x) x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (pow (cos x) 2))","x","0"]],"time":83.833984375,"type":"series"},{"count":[[104,102]],"egraph":[[0,8482,3317,0.106057724],[2,6044,3481,0.027979005],[1,1704,3574,0.020643816],[0,522,3694,0.0059053]],"inputs":[["-1/3","(- (* -2/3 (* eps x)) 1/3)","(- (* x (+ (* -4/3 x) (* -2/3 eps))) 1/3)","(- (* x (+ (* -2/3 eps) (* x (- (* -17/9 (* eps x)) 4/3)))) 1/3)","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* 2/3 (pow eps 3))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (+ (* 2/3 (pow eps 3)) (* x (+ 1 (* 4/3 (pow eps 2)))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (+ (* 2/3 (pow eps 3)) (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (+ (* -1/6 eps) (* 17/9 (pow eps 3)))) (* -1/2 eps)))))))))))","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (* x (+ eps (* 2/3 (pow eps 3))))) (* eps (+ 1 (* 1/3 (pow eps 2)))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (* eps (+ eps (* 2/3 (pow eps 3)))))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (+ eps (* 2/3 (pow eps 3)))) (* x (+ (* eps (* x (- (+ eps (+ (* -1/6 eps) (* 17/9 (pow eps 3)))) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))))))","x","(* x (+ 1 (* 2/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","eps","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (* -1/3 eps) (* -1 eps))))))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (+ (* -1/3 eps) (* (pow x 2) (- (* 2/45 eps) (+ (* -1 (- (* -1/3 eps) (* -1 eps))) (* 1/3 eps))))) (* -1 eps))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 2/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* (pow x 2) (+ 17/45 (* 62/315 (pow x 2))))))))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* x (+ (* eps (- (* -1/6 eps) (* -1/2 eps))) (pow eps 2))))) (pow eps 2))))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","1","(+ 1 (* -3/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 7/8 (pow x 2)) 3/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 7/8 (* -61/240 (pow x 2)))) 3/2)))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","1/3","(+ 1/3 (* -2/45 (pow x 2)))","(- (+ (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))","(+ (* -1 (* (pow eps 2) (- (+ (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (+ (* -1 (* (pow eps 2) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* 17/45 (pow x 5))","(* (pow x 5) (+ 17/45 (* 2/3 (/ 1 (pow x 2)))))","(* (pow x 5) (+ 17/45 (+ (* 2/3 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2)))","(/ (pow (sin x) 2) (pow (cos x) 2))","(pow (sin x) 2)","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2))))","(pow (sin x) 4)","(pow (cos x) 3)","(* 17/45 (pow x 6))","(* (pow x 6) (+ 17/45 (* 2/3 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 17/45 (+ (* 2/3 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(pow (cos x) 2)","(* -2/45 (pow x 2))","(* (pow x 2) (- (* 1/3 (/ 1 (pow x 2))) 2/45))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 2/3 (/ 1 (pow x 2))) (pow x 2))) 17/45)))","(- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* -1 (* eps (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (+ (* -1 (* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))) (* -1 (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (+ (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))","(* eps (- (+ (* -1/3 (/ (pow (sin x) 2) (* eps (pow (cos x) 2)))) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* 1/3 (/ 1 eps)) (+ (/ (pow (sin x) 2) (* eps (pow (cos x) 2))) (/ (pow (sin x) 4) (* eps (pow (cos x) 4)))))))","(* -1 (* (pow eps 3) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))))","(* (pow eps 3) (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps))))","(* (pow eps 3) (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(* (pow eps 3) (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(* -1 (* (pow eps 4) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* -1 (* eps (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps)))))","(* -1 (* (pow eps 3) (- (+ (* -1/3 (/ (pow (sin x) 2) (* eps (pow (cos x) 2)))) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* 1/3 (/ 1 eps)) (+ (/ (pow (sin x) 2) (* eps (pow (cos x) 2))) (/ (pow (sin x) 4) (* eps (pow (cos x) 4))))))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) eps)) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps))) eps)) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* -1 (* eps (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)))","(* -1 (/ (* (pow eps 2) (* (sin x) (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1))) (cos x)))","(* (pow eps 2) (+ (* -1 (/ (* (sin x) (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)) (cos x))) (* -1 (/ (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1) eps))))"]],"memory":[[2796128,57549216]],"method":["egg-herbie"],"outputs":[["-1/3","#s(literal -1/3 binary64)","(- (* -2/3 (* eps x)) 1/3)","(fma.f64 (*.f64 #s(literal -2/3 binary64) eps) x #s(literal -1/3 binary64))","(- (* x (+ (* -4/3 x) (* -2/3 eps))) 1/3)","(fma.f64 (fma.f64 #s(literal -4/3 binary64) x (*.f64 #s(literal -2/3 binary64) eps)) x #s(literal -1/3 binary64))","(- (* x (+ (* -2/3 eps) (* x (- (* -17/9 (* eps x)) 4/3)))) 1/3)","(fma.f64 (fma.f64 (fma.f64 #s(literal -17/9 binary64) (*.f64 eps x) #s(literal -4/3 binary64)) x (*.f64 #s(literal -2/3 binary64) eps)) x #s(literal -1/3 binary64))","(+ 1 (* 1/3 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* 2/3 (pow eps 3))))))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (+ (* 2/3 (pow eps 3)) (* x (+ 1 (* 4/3 (pow eps 2)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (+ (* 2/3 (pow eps 3)) (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (+ (* -1/6 eps) (* 17/9 (pow eps 3)))) (* -1/2 eps)))))))))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 eps eps) #s(literal 17/9 binary64) #s(literal 1/3 binary64)) eps) x (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 eps)) (sin.f64 eps) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/2 binary64))))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)","(+ (* eps (* x (+ eps (* 2/3 (pow eps 3))))) (* eps (+ 1 (* 1/3 (pow eps 2)))))","(*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (* eps (+ eps (* 2/3 (pow eps 3)))))))","(*.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (+ eps (* 2/3 (pow eps 3)))) (* x (+ (* eps (* x (- (+ eps (+ (* -1/6 eps) (* 17/9 (pow eps 3)))) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 (fma.f64 eps (fma.f64 (*.f64 eps eps) #s(literal 17/9 binary64) #s(literal 1/3 binary64)) eps) x (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","x","(* x (+ 1 (* 2/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) x)","eps","(+ eps (* eps (pow x 2)))","(fma.f64 (*.f64 x x) eps eps)","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (* -1/3 eps) (* -1 eps))))))","(fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 2/3 binary64) #s(literal 1 binary64))) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (+ (* -1/3 eps) (* (pow x 2) (- (* 2/45 eps) (+ (* -1 (- (* -1/3 eps) (* -1 eps))) (* 1/3 eps))))) (* -1 eps))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/45 binary64) eps) (*.f64 #s(literal -1/3 binary64) eps)) (*.f64 x x) (*.f64 #s(literal 2/3 binary64) eps)) (*.f64 x x) eps) (*.f64 x x) eps)","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 2/3 (pow x 2))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 2/3 binary64) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* (pow x 2) (+ 17/45 (* 62/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 2/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(+ eps (* (pow eps 2) x))","(fma.f64 (*.f64 eps eps) x eps)","(+ eps (* x (+ (* eps x) (pow eps 2))))","(fma.f64 (*.f64 eps (+.f64 eps x)) x eps)","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) eps eps) x (*.f64 eps eps)) x eps)","(+ eps (* x (+ (* x (+ eps (* x (+ (* eps (- (* -1/6 eps) (* -1/2 eps))) (pow eps 2))))) (pow eps 2))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) eps eps) x (*.f64 eps eps)) x eps)","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -2/3 binary64) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -34/945 binary64) (*.f64 x x) #s(literal 1/5 binary64)) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* -3/2 (pow x 2)))","(fma.f64 #s(literal -3/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 7/8 (pow x 2)) 3/2)))","(fma.f64 (fma.f64 #s(literal 7/8 binary64) (*.f64 x x) #s(literal -3/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 7/8 (* -61/240 (pow x 2)))) 3/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -61/240 binary64) (*.f64 x x) #s(literal 7/8 binary64)) (*.f64 x x) #s(literal -3/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* -1 (pow x 2)))","(-.f64 #s(literal 1 binary64) (*.f64 x x))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -2/45 (pow x 2)))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(- (+ (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))","(fma.f64 (*.f64 eps (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64)))))) (sin.f64 x) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(+ (* -1 (* (pow eps 2) (- (+ (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 eps (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64)))))) (sin.f64 x) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* eps (+ (* -1 (* (pow eps 2) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x)) eps (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps)","(* 17/45 (pow x 5))","(*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 17/45 binary64))","(* (pow x 5) (+ 17/45 (* 2/3 (/ 1 (pow x 2)))))","(*.f64 (+.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 x x)) #s(literal 17/45 binary64)) (pow.f64 x #s(literal 5 binary64)))","(* (pow x 5) (+ 17/45 (+ (* 2/3 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(*.f64 (+.f64 (+.f64 #s(literal 17/45 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 2/3 binary64) (*.f64 x x))) (pow.f64 x #s(literal 5 binary64)))","(+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(/ (pow (sin x) 2) (pow (cos x) 2))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow (sin x) 2)","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2))))","(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(pow (sin x) 4)","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow (cos x) 3)","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","(* 17/45 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 17/45 binary64))","(* (pow x 6) (+ 17/45 (* 2/3 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 6 binary64)) (+.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 x x)) #s(literal 17/45 binary64)))","(* (pow x 6) (+ 17/45 (+ (* 2/3 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(*.f64 (pow.f64 x #s(literal 6 binary64)) (+.f64 (+.f64 #s(literal 17/45 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 2/3 binary64) (*.f64 x x))))","(pow (cos x) 2)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(* -2/45 (pow x 2))","(*.f64 #s(literal -2/45 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/3 (/ 1 (pow x 2))) 2/45))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 2/45 binary64)) x) x)","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 2/3 (/ 1 (pow x 2))) (pow x 2))) 17/45)))","(*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (-.f64 #s(literal -17/45 binary64) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 2/3 binary64)) x) x)))","(- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))","(-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 x)) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64))","(+ 1 (+ (* eps (+ (* -1 (* eps (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (fma.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(+ 1 (+ (* eps (+ (* eps (+ (* -1 (* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))) (* -1 (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (*.f64 eps (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64)))))) (sin.f64 x) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 #s(literal 1/6 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) (neg.f64 eps) (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (+ 1 (+ (* eps (+ (* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (+ 1 (+ (* eps (+ (* eps (+ (* -1 (* eps (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x))))))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x)) eps (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))","(*.f64 (*.f64 (sin.f64 x) eps) (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))))","(* eps (- (+ (* -1/3 (/ (pow (sin x) 2) (* eps (pow (cos x) 2)))) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* 1/3 (/ 1 eps)) (+ (/ (pow (sin x) 2) (* eps (pow (cos x) 2))) (/ (pow (sin x) 4) (* eps (pow (cos x) 4)))))))","(*.f64 (-.f64 (fma.f64 (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) eps)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps)","(* -1 (* (pow eps 3) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))))","(*.f64 (*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (sin.f64 x)) (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))))","(* (pow eps 3) (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))) (sin.f64 x) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)))","(* (pow eps 3) (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(*.f64 (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) (*.f64 eps eps)) (fma.f64 (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))) (sin.f64 x) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(*.f64 (-.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 (sin.f64 x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) eps))) (/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))) (sin.f64 x) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 4) (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (neg.f64 (sin.f64 x))) (-.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(*.f64 (fma.f64 (neg.f64 (sin.f64 x)) (-.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (-.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) eps))) (/.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(*.f64 (-.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 (sin.f64 x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) eps))) (/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (-.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps))) (pow.f64 eps #s(literal 4 binary64)))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) (*.f64 eps eps))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) (*.f64 eps eps) eps)","(* -1 (* eps (+ (* -1 (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (* -1 (/ (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))))) eps)))))","(*.f64 (fma.f64 (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))) (sin.f64 x) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps)","(* -1 (* (pow eps 3) (- (+ (* -1/3 (/ (pow (sin x) 2) (* eps (pow (cos x) 2)))) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5))))))) (+ (* 1/3 (/ 1 eps)) (+ (/ (pow (sin x) 2) (* eps (pow (cos x) 2))) (/ (pow (sin x) 4) (* eps (pow (cos x) 4))))))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (-.f64 (fma.f64 (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) eps)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) eps)) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (-.f64 (*.f64 (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))) (sin.f64 x)) (/.f64 (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (- (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ 1/3 (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps))) eps)) (* (sin x) (- (* -2/3 (/ (pow (sin x) 2) (pow (cos x) 3))) (+ (* 2/3 (/ 1 (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 3)) (/ (pow (sin x) 4) (pow (cos x) 5)))))))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 (-.f64 (/.f64 (*.f64 #s(literal -2/3 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 2/3 binary64) (cos.f64 x))) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 5 binary64))))) (sin.f64 x) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (-.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (+.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (cos.f64 x))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps)))","(* (pow eps 4) (+ (* -1 (* (sin x) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 3))) (* -2/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) (cos x)))))) (* -1 (/ (+ (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (-.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (sin.f64 x) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps)))","(* -1 (* eps (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(* -1 (/ (* (pow eps 2) (* (sin x) (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1))) (cos x)))","(*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) (*.f64 eps eps))","(* (pow eps 2) (+ (* -1 (/ (* (sin x) (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)) (cos x))) (* -1 (/ (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1) eps))))","(*.f64 (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":278.953125,"type":"simplify"},{"count":[[23,177]],"inputs":[["(fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps))","#s(approx 4 #s(literal 2 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","(fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps)","#s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))"]],"memory":[[6786880,23011728]],"outputs":[["#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(approx 4 #s(approx 4 #s(literal 2 binary64)))","#s(approx 4 #s(literal 2 binary64))","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(approx 4 (fma.f64 #s(approx 4 #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(fma.f64 #s(approx 4 #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))","#s(approx 4 #s(literal 2 binary64))","#s(approx 4 (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)))","(fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))","(/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64)))","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(approx 4 #s(approx 4 #s(literal 2 binary64)))","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal -2/3 binary64)","#s(literal 4 binary64)","#s(literal 3 binary64)","#s(literal -1/3 binary64)","#s(literal 1 binary64)","#s(literal 17/45 binary64)","#s(literal 2/3 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)"]],"time":2037.718994140625,"type":"rewrite"},{"compiler":[[21345,1003]],"memory":[[1230528,17774336]],"time":30.14892578125,"type":"eval"},{"alts":[["(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","fresh",24.6364625139351,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",24.80525489337457,"binary64"],["(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","fresh",24.639188534907582,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps))","fresh",0.44128062820266845,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","fresh",0.8254775309245777,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","fresh",1.3917411089652678,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","next",1.3452407331912544,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","fresh",1.3798887021400807,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","fresh",1.5680252618100408,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","fresh",52.01172519871359,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","fresh",1.4474936957052749,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","done",1.4633932541673358,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","fresh",1.4733795248261097,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","fresh",1.507148337370854,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","fresh",1.6755072214703857,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","next",0.34918373040017264,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.4407602541243289,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","next",1.1320050810639222,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","fresh",1.0206099169281269,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.4507143684342264,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","fresh",0.9062206735548441,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","next",1.5385342680785152,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","fresh",0.44909312820266845,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","fresh",1.675507311887192,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","fresh",1.725140063865088,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","done",0.28899315415879956,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","fresh",0.9351758926973862,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","fresh",0.3530025198224749,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","fresh",1.675507584386129,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","fresh",1.5032710754625893,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","next",1.725217133793873,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","done",0.4513781379711105,"binary64"],["#s(approx 4 #s(literal 2 binary64))","done",60.61919522398487,"binary64"]],"compiler":[[25,14],[7,6],[18,12],[37,20],[20,14],[26,19],[56,32],[46,28],[41,26],[16,12],[41,25],[36,23],[31,21],[24,16],[20,15],[75,33],[137,49],[57,36],[43,28],[40,25],[36,24],[45,27],[63,35],[25,18],[154,52],[237,75],[253,84],[275,83],[252,74],[41,24],[39,23],[54,32],[3,5],[25,14],[18,12],[37,20],[20,14],[26,19],[56,32],[46,28],[41,26],[16,12],[41,25],[31,21],[24,16],[20,15],[75,33],[137,49],[57,36],[43,28],[40,25],[36,24],[45,27],[63,35],[25,18],[154,52],[253,84],[275,83],[252,74],[41,24],[39,23]],"count":[[170,33]],"kept":[{"done":[1,1],"fresh":[26,20],"new":[138,8],"picked":[5,4]}],"memory":[[465648,25002656]],"min-error":[[0.006191259768442017,"binary64"]],"time":38.0361328125,"type":"prune"},{"egraph":[[0,8074,1192,0.083708673],[4,6773,1232,0.019619227],[3,2106,1232,0.020947095],[2,634,1250,0.006739019],[1,288,1250,0.002626849],[0,164,1282,0.001607364],[0,90,1309,0.000965037]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(*.f64 (sin.f64 x) #s(literal 6 binary64))","(sin.f64 x)","x","#s(literal 6 binary64)","eps","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (sin.f64 x) eps)","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps))","(fma.f64 (*.f64 eps eps) x eps)","(*.f64 eps eps)","eps","x","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps)","(fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64))","(*.f64 #s(literal 4/3 binary64) x)","#s(literal 4/3 binary64)","x","eps","#s(literal 1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","(/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","#s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","(fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))","(fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64))","#s(literal -1/315 binary64)","(*.f64 x x)","#s(literal 2/45 binary64)","#s(literal -1/3 binary64)","#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps)","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(sin.f64 x)","x","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps)","(fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps))","(-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps)))","(*.f64 #s(literal 1/120 binary64) eps)","#s(literal 1/120 binary64)","eps","(fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))","#s(literal 1/24 binary64)","(*.f64 #s(literal -1/6 binary64) eps)","#s(literal -1/6 binary64)","(*.f64 x x)","(*.f64 #s(literal 1/3 binary64) eps)","#s(literal 1/3 binary64)"]],"locations":[["(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps)","cost-diff",1],["(fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps))","cost-diff",2],["(fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))","cost-diff",3],["(-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps)))","cost-diff",4],["#s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x)))","cost-diff",0],["(/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","cost-diff",0],["(fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","cost-diff",0],["(*.f64 eps eps)","cost-diff",0],["(fma.f64 (*.f64 eps eps) x eps)","cost-diff",0],["#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","cost-diff",0],["(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","cost-diff",1],["(neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","cost-diff",1],["(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","cost-diff",1],["(fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","cost-diff",2]],"memory":[[-8772336,44529888]],"method":["egg-herbie"],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 6 binary64) eps)) #s(literal -1/3 binary64))) (*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)))))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 6 binary64) eps)) #s(literal -1/3 binary64))) (*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))))","(fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(fma.f64 (*.f64 eps eps) (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 6 binary64) eps)) #s(literal -1/3 binary64))) (*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 6 binary64) eps)) #s(literal -1/3 binary64))) eps)","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 6 binary64) eps)) #s(literal -1/3 binary64)))","(fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(fma.f64 (sin.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 6 binary64) eps)) (-.f64 #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (sin.f64 x) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) (sin.f64 x))","(sin.f64 x)","x","#s(literal 6 binary64)","eps","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(-.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x))","(*.f64 (sin.f64 x) eps)","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps))","(fma.f64 (*.f64 eps eps) x eps)","(*.f64 eps eps)","eps","x","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps)","(fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64))","(*.f64 #s(literal 4/3 binary64) x)","#s(literal 4/3 binary64)","x","eps","#s(literal 1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) #s(approx (pow (sin x) 2) (fma.f64 (fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/315 binary64) #s(literal 2/45 binary64)) x) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64)))) eps))","(fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","(fma.f64 (/.f64 eps #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) #s(approx (pow (sin x) 2) (fma.f64 (fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/315 binary64) #s(literal 2/45 binary64)) x) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64)))) eps)","(/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(/.f64 #s(approx (pow (sin x) 2) (fma.f64 (fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/315 binary64) #s(literal 2/45 binary64)) x) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64)))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","#s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x)))","#s(approx (pow (sin x) 2) (fma.f64 (fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/315 binary64) #s(literal 2/45 binary64)) x) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/315 binary64) #s(literal 2/45 binary64)) x) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64)))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","(fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/315 binary64) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))","(fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/315 binary64) #s(literal 2/45 binary64))","#s(literal -1/315 binary64)","(*.f64 x x)","#s(literal 2/45 binary64)","#s(literal -1/3 binary64)","#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (fma.f64 eps x #s(literal 1 binary64))))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps)","(*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (fma.f64 eps x #s(literal 1 binary64)))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64))))","(*.f64 #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (fma.f64 eps x #s(literal 1 binary64)))) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(sin.f64 x)","x","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))","#s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (fma.f64 eps x #s(literal 1 binary64))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (fma.f64 eps x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps)","(fma.f64 (*.f64 eps (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64))) (*.f64 x x) eps)","(fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps))","(*.f64 eps (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)))","(-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps)))","(*.f64 #s(literal 2/15 binary64) eps)","(*.f64 #s(literal 1/120 binary64) eps)","#s(literal 1/120 binary64)","eps","(fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))","(*.f64 #s(literal -1/8 binary64) eps)","#s(literal 1/24 binary64)","(*.f64 #s(literal -1/6 binary64) eps)","#s(literal -1/6 binary64)","(*.f64 x x)","(*.f64 #s(literal 1/3 binary64) eps)","#s(literal 1/3 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":310.3818359375,"type":"simplify"},{"compiler":[[925,89]],"locations":[["(*.f64 #s(literal 1/3 binary64) eps)","accuracy",0.33984375],["(*.f64 #s(literal -1/6 binary64) eps)","accuracy",0.33984375],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","accuracy",0.431183117476981],["#s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))","accuracy",1.1237732098833333],["(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","accuracy",0.015625],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","accuracy",0.8254781053963792],["#s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x)))","accuracy",1.541946064681995],["#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","accuracy",1.5621536126582154],["(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","accuracy",0.01953125],["(*.f64 #s(literal 4/3 binary64) x)","accuracy",0.3046875],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","accuracy",0.431183117476981],["#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","accuracy",1.5268855485379147],["(fma.f64 (*.f64 eps eps) x eps)","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","accuracy",0.431183117476981],["#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps))","accuracy",1.7218732457427586],["(pow.f64 (sin.f64 x) #s(literal 4 binary64))","accuracy",0.04201127930532605],["(*.f64 (sin.f64 x) #s(literal 6 binary64))","accuracy",0.1953125],["(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","accuracy",0.328125],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","accuracy",0.32939031557260023]],"memory":[[9036576,122038224]],"mixsample":[[14.386474609375,"ival-div",0],[23.02685546875,"adjust",800],[0.251953125,"ival-mult",2000],[0.01318359375,"const",400],[0.22412109375,"ival-assert",0],[3.725341796875,"ival-sub",0],[7.098388671875,"ival-tan",0],[2.94677734375,"ival-cos",0],[37.554931640625,"const",0],[5.792724609375,"adjust",2000],[12.077392578125,"ival-pow",0],[37.846435546875,"ival-add",0],[0.30517578125,"ival-mult",800],[1.09716796875,"ival-sin",400],[0.385986328125,"ival-mult",400],[70.035888671875,"ival-mult",0],[5.494140625,"ival-sin",0],[0.0078125,"ival-add",400],[2.98583984375,"adjust",2800],[12.411376953125,"ival-sin",2000],[0.39208984375,"ival-true",0],[0.859130859375,"exact",0],[3.882568359375,"ival-sin",800],[3.494384765625,"ival-neg",0],[9.387451171875,"ival-pow2",0]],"outcomes":[[135.216796875,1,"valid",87],[30.127197265625,2,"valid",14],[56.468505859375,3,"valid",17],[101.586181640625,0,"valid",138]],"time":409.799072265625,"type":"localize"},{"count":[[31,140]],"inputs":[["(fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps))","(fma.f64 (*.f64 eps eps) x eps)","(*.f64 eps eps)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","(/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","#s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x)))","(-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps)))","(fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))","(fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","(*.f64 (sin.f64 x) #s(literal 6 binary64))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(*.f64 #s(literal 4/3 binary64) x)","#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(*.f64 #s(literal -1/6 binary64) eps)","(*.f64 #s(literal 1/3 binary64) eps)"]],"memory":[[-680640,25018992]],"outputs":[["-1/3","(- (* 6 (* eps x)) 1/3)","(- (* x (+ (* -4/3 x) (* 6 eps))) 1/3)","(- (* x (+ (* 6 eps) (* x (- (* -1 (* eps x)) 4/3)))) 1/3)","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (* x (+ eps (* -6 (pow eps 3))))) (* eps (+ 1 (* 1/3 (pow eps 2)))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (* eps (+ eps (* -6 (pow eps 3)))))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (+ eps (* -6 (pow eps 3)))) (* x (+ (* eps (* x (- (+ eps (+ (* -1/6 eps) (pow eps 3))) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))))))","1/3","(+ 1/3 (* -6 (* eps x)))","(+ 1/3 (* x (- (* 4/3 x) (* 6 eps))))","(+ 1/3 (* x (- (* x (+ 4/3 (* eps x))) (* 6 eps))))","(- (* -4/3 (pow x 2)) 1/3)","(- (* (pow x 2) (- (* -17/9 (pow x 2)) 4/3)) 1/3)","(- (* (pow x 2) (- (* (pow x 2) (- (* -248/135 (pow x 2)) 17/9)) 4/3)) 1/3)","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(+ 1 (* x (+ eps (* x (+ 1 (* 4/3 (* eps x)))))))","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (* -1/3 eps) (* -1 eps))))))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (+ (* -1/3 eps) (* (pow x 2) (- (* 2/45 eps) (+ (* -1 (- (* -1/3 eps) (* -1 eps))) (* 1/3 eps))))) (* -1 eps))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 2/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* (pow x 2) (+ 17/45 (* 62/315 (pow x 2))))))))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(* 1/3 eps)","(+ (* 1/3 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/6 eps) (* 1/24 eps)))))","(+ (* -6 (* (pow eps 2) x)) (* 1/3 eps))","(+ (* 1/3 eps) (* x (+ (* -6 (pow eps 2)) (* 4/3 (* eps x)))))","(+ (* 1/3 eps) (* x (+ (* -6 (pow eps 2)) (* x (+ (* 4/3 eps) (* (pow eps 2) x))))))","(* 6 x)","(* x (+ 6 (* -1 (pow x 2))))","(* x (+ 6 (* (pow x 2) (- (* 1/20 (pow x 2)) 1))))","(* x (+ 6 (* (pow x 2) (- (* (pow x 2) (+ 1/20 (* -1/840 (pow x 2)))) 1))))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(* 4/3 x)","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(+ 1/3 (* -2/45 (pow x 2)))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x)))))","(* eps (+ (* -1 (* (pow eps 2) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x))))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (pow eps 2) x)","(* x (+ (/ eps x) (pow eps 2)))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* 4/3 (* eps (pow x 3)))","(* (pow x 3) (+ (* 4/3 eps) (/ 1 x)))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (/ eps (pow x 2)))))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (+ (/ 1 (pow x 3)) (/ eps (pow x 2))))))","(+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2)))","(/ (pow (sin x) 2) (pow (cos x) 2))","(pow (sin x) 2)","(* (pow x 2) (- (* 1/120 eps) (+ (* -1/6 eps) (* 1/24 eps))))","(* (pow x 2) (- (+ (* 1/120 eps) (* 1/3 (/ eps (pow x 2)))) (+ (* -1/6 eps) (* 1/24 eps))))","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x)))))))","(* 6 (sin x))","(pow (sin x) 4)","(pow (cos x) 2)","(* -2/45 (pow x 2))","(* (pow x 2) (- (* 1/3 (/ 1 (pow x 2))) 2/45))","(+ 1 (/ (* eps (sin x)) (cos x)))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* -1 (* x (+ (* -1 (/ eps x)) (* -1 (pow eps 2)))))","(* -1 (* (pow x 3) (- (* -4/3 eps) (/ 1 x))))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (/ eps x)) x)))))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (* -1 (/ (- (* -1 eps) (/ 1 x)) x))) x)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (+ (* -6 (* eps (sin x))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(- (* -6 (* eps (sin x))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* eps x)))","(pow eps 2)","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps (* x (+ 1 (* 4/3 (pow x 2))))) (pow x 2)))","(* 2/15 eps)","(* -1/8 eps)","(* eps (+ 1/3 (* 2/15 (pow x 2))))","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(* eps (+ (* -6 (* eps (sin x))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(* -1/6 eps)","(* 6 (* eps (sin x)))","(* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (+ (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)) (* 6 (sin x)))))","(* -6 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(* (pow eps 4) (+ (* -6 (sin x)) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(* (pow eps 4) (+ (* -6 (sin x)) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(* -6 (* eps (sin x)))","(* eps (- (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (* 6 (sin x))))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* (pow eps 2) (+ x (/ 1 eps)))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* eps (* x (+ 1 (* 4/3 (pow x 2)))))","(* eps (+ (* x (+ 1 (* 4/3 (pow x 2)))) (+ (/ 1 eps) (/ (pow x 2) eps))))","(* -6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(/ (* eps (sin x)) (cos x))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(* -1 (* eps (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)))))","(* (pow eps 4) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* (pow eps 4) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* -1 (* eps (- (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) (* -6 (sin x)))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(* -1 (* eps (* x (- (* -4/3 (pow x 2)) 1))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (pow x 2)) eps)) (* x (- (* -4/3 (pow x 2)) 1)))))","(* -1 (* eps (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)))","(* -1 (* eps (- (* -2/15 (pow x 2)) 1/3)))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))"]],"series":[[8.22216796875,"((+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps eps) x) eps) (* eps eps) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (+ (* 1/24 eps) (* -1/6 eps)) (+ (* (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (* x x)) (* 1/3 eps)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (- (tan (+ x eps)) (tan x)) (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) 6) (pow (sin x) 4) (* 4/3 x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* -1/6 eps) (* 1/3 eps))","eps","-inf"],[9.031005859375,"((+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps eps) x) eps) (* eps eps) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (+ (* 1/24 eps) (* -1/6 eps)) (+ (* (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (* x x)) (* 1/3 eps)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (- (tan (+ x eps)) (tan x)) (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) 6) (pow (sin x) 4) (* 4/3 x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* -1/6 eps) (* 1/3 eps))","eps","inf"],[7.7861328125,"((+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps eps) x) eps) (* eps eps) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (+ (* 1/24 eps) (* -1/6 eps)) (+ (* (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (* x x)) (* 1/3 eps)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (- (tan (+ x eps)) (tan x)) (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) 6) (pow (sin x) 4) (* 4/3 x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* -1/6 eps) (* 1/3 eps))","eps","0"],[10.08203125,"((+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps eps) x) eps) (* eps eps) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (+ (* 1/24 eps) (* -1/6 eps)) (+ (* (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (* x x)) (* 1/3 eps)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (- (tan (+ x eps)) (tan x)) (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) 6) (pow (sin x) 4) (* 4/3 x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* -1/6 eps) (* 1/3 eps))","x","-inf"],[9.0869140625,"((+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps eps) x) eps) (* eps eps) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (+ (* 1/24 eps) (* -1/6 eps)) (+ (* (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (* x x)) (* 1/3 eps)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (- (tan (+ x eps)) (tan x)) (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) 6) (pow (sin x) 4) (* 4/3 x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* -1/6 eps) (* 1/3 eps))","x","inf"],[8.745849609375,"((+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (+ (* (* eps eps) x) eps) (* eps eps) (- (tan (+ x eps)) (tan x)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (- (tan (+ x eps)) (tan x)) (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (/ (pow (sin x) 2) (pow (cos x) 2)) (pow (sin x) 2) (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (+ (* 1/24 eps) (* -1/6 eps)) (+ (* (- (* 1/120 eps) (+ (* 1/24 eps) (* -1/6 eps))) (* x x)) (* 1/3 eps)) (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (- (tan (+ x eps)) (tan x)) (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) (* (sin x) 6) (pow (sin x) 4) (* 4/3 x) (pow (cos x) 2) (+ (* -2/45 (* x x)) 1/3) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (* -1/6 eps) (* 1/3 eps))","x","0"]],"time":57.257080078125,"type":"series"},{"count":[[140,139]],"egraph":[[0,8252,2678,0.089555222],[2,6028,2870,0.027336437],[1,1815,2932,0.020327381],[0,568,3085,0.005838806]],"inputs":[["-1/3","(- (* 6 (* eps x)) 1/3)","(- (* x (+ (* -4/3 x) (* 6 eps))) 1/3)","(- (* x (+ (* 6 eps) (* x (- (* -1 (* eps x)) 4/3)))) 1/3)","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (* x (+ eps (* -6 (pow eps 3))))) (* eps (+ 1 (* 1/3 (pow eps 2)))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (* eps (+ eps (* -6 (pow eps 3)))))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (+ eps (* -6 (pow eps 3)))) (* x (+ (* eps (* x (- (+ eps (+ (* -1/6 eps) (pow eps 3))) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))))))","1/3","(+ 1/3 (* -6 (* eps x)))","(+ 1/3 (* x (- (* 4/3 x) (* 6 eps))))","(+ 1/3 (* x (- (* x (+ 4/3 (* eps x))) (* 6 eps))))","(- (* -4/3 (pow x 2)) 1/3)","(- (* (pow x 2) (- (* -17/9 (pow x 2)) 4/3)) 1/3)","(- (* (pow x 2) (- (* (pow x 2) (- (* -248/135 (pow x 2)) 17/9)) 4/3)) 1/3)","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps x)))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(+ 1 (* x (+ eps (* x (+ 1 (* 4/3 (* eps x)))))))","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (* -1/3 eps) (* -1 eps))))))","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (+ (* -1/3 eps) (* (pow x 2) (- (* 2/45 eps) (+ (* -1 (- (* -1/3 eps) (* -1 eps))) (* 1/3 eps))))) (* -1 eps))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 2/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* (pow x 2) (+ 17/45 (* 62/315 (pow x 2))))))))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(* 1/3 eps)","(+ (* 1/3 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/6 eps) (* 1/24 eps)))))","(+ (* -6 (* (pow eps 2) x)) (* 1/3 eps))","(+ (* 1/3 eps) (* x (+ (* -6 (pow eps 2)) (* 4/3 (* eps x)))))","(+ (* 1/3 eps) (* x (+ (* -6 (pow eps 2)) (* x (+ (* 4/3 eps) (* (pow eps 2) x))))))","(* 6 x)","(* x (+ 6 (* -1 (pow x 2))))","(* x (+ 6 (* (pow x 2) (- (* 1/20 (pow x 2)) 1))))","(* x (+ 6 (* (pow x 2) (- (* (pow x 2) (+ 1/20 (* -1/840 (pow x 2)))) 1))))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(* 4/3 x)","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(+ 1/3 (* -2/45 (pow x 2)))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x)))))","(* eps (+ (* -1 (* (pow eps 2) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x))))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* (pow eps 2) x)","(* x (+ (/ eps x) (pow eps 2)))","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* 4/3 (* eps (pow x 3)))","(* (pow x 3) (+ (* 4/3 eps) (/ 1 x)))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (/ eps (pow x 2)))))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (+ (/ 1 (pow x 3)) (/ eps (pow x 2))))))","(+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2)))","(/ (pow (sin x) 2) (pow (cos x) 2))","(pow (sin x) 2)","(* (pow x 2) (- (* 1/120 eps) (+ (* -1/6 eps) (* 1/24 eps))))","(* (pow x 2) (- (+ (* 1/120 eps) (* 1/3 (/ eps (pow x 2)))) (+ (* -1/6 eps) (* 1/24 eps))))","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x)))))))","(* 6 (sin x))","(pow (sin x) 4)","(pow (cos x) 2)","(* -2/45 (pow x 2))","(* (pow x 2) (- (* 1/3 (/ 1 (pow x 2))) 2/45))","(+ 1 (/ (* eps (sin x)) (cos x)))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* -1 (* x (+ (* -1 (/ eps x)) (* -1 (pow eps 2)))))","(* -1 (* (pow x 3) (- (* -4/3 eps) (/ 1 x))))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (/ eps x)) x)))))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (* -1 (/ (- (* -1 eps) (/ 1 x)) x))) x)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (+ (* -6 (* eps (sin x))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(- (* -6 (* eps (sin x))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* eps x)))","(pow eps 2)","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps (* x (+ 1 (* 4/3 (pow x 2))))) (pow x 2)))","(* 2/15 eps)","(* -1/8 eps)","(* eps (+ 1/3 (* 2/15 (pow x 2))))","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(* eps (+ (* -6 (* eps (sin x))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(* -1/6 eps)","(* 6 (* eps (sin x)))","(* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (+ (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)) (* 6 (sin x)))))","(* -6 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(* (pow eps 4) (+ (* -6 (sin x)) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(* (pow eps 4) (+ (* -6 (sin x)) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(* -6 (* eps (sin x)))","(* eps (- (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (* 6 (sin x))))","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* (pow eps 2) (+ x (/ 1 eps)))","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(* eps (* x (+ 1 (* 4/3 (pow x 2)))))","(* eps (+ (* x (+ 1 (* 4/3 (pow x 2)))) (+ (/ 1 eps) (/ (pow x 2) eps))))","(* -6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(/ (* eps (sin x)) (cos x))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(* -1 (* eps (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)))))","(* (pow eps 4) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* (pow eps 4) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(* -1 (* eps (- (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) (* -6 (sin x)))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(* -1 (* eps (* x (- (* -4/3 (pow x 2)) 1))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (pow x 2)) eps)) (* x (- (* -4/3 (pow x 2)) 1)))))","(* -1 (* eps (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)))","(* -1 (* eps (- (* -2/15 (pow x 2)) 1/3)))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))"]],"memory":[[5793696,52452976]],"method":["egg-herbie"],"outputs":[["-1/3","#s(literal -1/3 binary64)","(- (* 6 (* eps x)) 1/3)","(fma.f64 (*.f64 #s(literal 6 binary64) x) eps #s(literal -1/3 binary64))","(- (* x (+ (* -4/3 x) (* 6 eps))) 1/3)","(fma.f64 (fma.f64 #s(literal -4/3 binary64) x (*.f64 #s(literal 6 binary64) eps)) x #s(literal -1/3 binary64))","(- (* x (+ (* 6 eps) (* x (- (* -1 (* eps x)) 4/3)))) 1/3)","(fma.f64 (fma.f64 (-.f64 #s(literal -4/3 binary64) (*.f64 eps x)) x (*.f64 #s(literal 6 binary64) eps)) x #s(literal -1/3 binary64))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)","(+ (* eps (* x (+ eps (* -6 (pow eps 3))))) (* eps (+ 1 (* 1/3 (pow eps 2)))))","(*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -6 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (* eps (+ eps (* -6 (pow eps 3)))))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -6 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (+ eps (* -6 (pow eps 3)))) (* x (+ (* eps (* x (- (+ eps (+ (* -1/6 eps) (pow eps 3))) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) eps (fma.f64 #s(literal 5/6 binary64) eps (pow.f64 eps #s(literal 3 binary64)))) x) eps (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 4/3 binary64) eps)) x (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -6 binary64) eps) eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -6 (* eps x)))","(fma.f64 #s(literal -6 binary64) (*.f64 eps x) #s(literal 1/3 binary64))","(+ 1/3 (* x (- (* 4/3 x) (* 6 eps))))","(fma.f64 (fma.f64 #s(literal -6 binary64) eps (*.f64 #s(literal 4/3 binary64) x)) x #s(literal 1/3 binary64))","(+ 1/3 (* x (- (* x (+ 4/3 (* eps x))) (* 6 eps))))","(fma.f64 (fma.f64 #s(literal -6 binary64) eps (*.f64 (fma.f64 eps x #s(literal 4/3 binary64)) x)) x #s(literal 1/3 binary64))","(- (* -4/3 (pow x 2)) 1/3)","(fma.f64 (*.f64 x x) #s(literal -4/3 binary64) #s(literal -1/3 binary64))","(- (* (pow x 2) (- (* -17/9 (pow x 2)) 4/3)) 1/3)","(fma.f64 (fma.f64 #s(literal -17/9 binary64) (*.f64 x x) #s(literal -4/3 binary64)) (*.f64 x x) #s(literal -1/3 binary64))","(- (* (pow x 2) (- (* (pow x 2) (- (* -248/135 (pow x 2)) 17/9)) 4/3)) 1/3)","(fma.f64 (fma.f64 (fma.f64 #s(literal -248/135 binary64) (*.f64 x x) #s(literal -17/9 binary64)) (*.f64 x x) #s(literal -4/3 binary64)) (*.f64 x x) #s(literal -1/3 binary64))","(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 eps)) (sin.f64 eps) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/2 binary64))))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+ eps (* (pow eps 2) x))","(fma.f64 (*.f64 eps eps) x eps)","(+ eps (* x (+ (* eps x) (pow eps 2))))","(fma.f64 (*.f64 eps (+.f64 eps x)) x eps)","(+ eps (* x (+ (* x (+ eps (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))))) (pow eps 2))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 eps eps) x) #s(literal 4/3 binary64) eps) x (*.f64 eps eps)) x eps)","1","#s(literal 1 binary64)","(+ 1 (* eps x))","(fma.f64 eps x #s(literal 1 binary64))","(+ 1 (* x (+ eps x)))","(fma.f64 (+.f64 eps x) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* x (+ 1 (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* x (+ 1 (* 4/3 (* eps x)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","(+ eps (* eps (pow x 2)))","(fma.f64 (*.f64 x x) eps eps)","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (* -1/3 eps) (* -1 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ eps (* (pow x 2) (- (+ (* -1/3 eps) (* (pow x 2) (- (* 2/45 eps) (+ (* -1 (- (* -1/3 eps) (* -1 eps))) (* 1/3 eps))))) (* -1 eps))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 #s(literal 2/45 binary64) eps (*.f64 #s(literal -1/3 binary64) eps)) (*.f64 eps #s(literal -2/3 binary64))) (*.f64 x x) (*.f64 #s(literal 2/3 binary64) eps)) (*.f64 x x) eps) (*.f64 x x) eps)","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 2/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/3 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* 17/45 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 2/3 (* (pow x 2) (+ 17/45 (* 62/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 2/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))","(* 1/3 eps)","(*.f64 #s(literal 1/3 binary64) eps)","(+ (* 1/3 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/6 eps) (* 1/24 eps)))))","(*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps)","(+ (* -6 (* (pow eps 2) x)) (* 1/3 eps))","(fma.f64 (*.f64 #s(literal -6 binary64) (*.f64 eps eps)) x (*.f64 #s(literal 1/3 binary64) eps))","(+ (* 1/3 eps) (* x (+ (* -6 (pow eps 2)) (* 4/3 (* eps x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps (*.f64 #s(literal -6 binary64) (*.f64 eps eps))) x (*.f64 #s(literal 1/3 binary64) eps))","(+ (* 1/3 eps) (* x (+ (* -6 (pow eps 2)) (* x (+ (* 4/3 eps) (* (pow eps 2) x))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) x (*.f64 #s(literal 4/3 binary64) eps)) x (*.f64 #s(literal -6 binary64) (*.f64 eps eps))) x (*.f64 #s(literal 1/3 binary64) eps))","(* 6 x)","(*.f64 #s(literal 6 binary64) x)","(* x (+ 6 (* -1 (pow x 2))))","(*.f64 (-.f64 #s(literal 6 binary64) (*.f64 x x)) x)","(* x (+ 6 (* (pow x 2) (- (* 1/20 (pow x 2)) 1))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/20 binary64) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 6 binary64)) x)","(* x (+ 6 (* (pow x 2) (- (* (pow x 2) (+ 1/20 (* -1/840 (pow x 2)))) 1))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/840 binary64) (*.f64 x x) #s(literal 1/20 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 6 binary64)) x)","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -34/945 binary64) (*.f64 x x) #s(literal 1/5 binary64)) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* 4/3 x)","(*.f64 #s(literal 4/3 binary64) x)","(+ 1 (* -1 (pow x 2)))","(-.f64 #s(literal 1 binary64) (*.f64 x x))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1/3 (* -2/45 (pow x 2)))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x)))))","(fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(* eps (+ (* -1 (* (pow eps 2) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x))))))) (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x))))))","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))","(+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* eps (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))","(* (pow eps 2) x)","(*.f64 (*.f64 eps eps) x)","(* x (+ (/ eps x) (pow eps 2)))","(*.f64 (fma.f64 eps eps (/.f64 eps x)) x)","(* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(* 4/3 (* eps (pow x 3)))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) eps) #s(literal 4/3 binary64))","(* (pow x 3) (+ (* 4/3 eps) (/ 1 x)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x)","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (/ eps (pow x 2)))))","(*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 4/3 eps) (+ (/ 1 x) (+ (/ 1 (pow x 3)) (/ eps (pow x 2))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 eps x) x)) (fma.f64 #s(literal 4/3 binary64) eps (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(+ eps (/ (* eps (pow (sin x) 2)) (pow (cos x) 2)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(/ (pow (sin x) 2) (pow (cos x) 2))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow (sin x) 2)","(pow.f64 (sin.f64 x) #s(literal 2 binary64))","(* (pow x 2) (- (* 1/120 eps) (+ (* -1/6 eps) (* 1/24 eps))))","(*.f64 #s(literal 2/15 binary64) (*.f64 (*.f64 x x) eps))","(* (pow x 2) (- (+ (* 1/120 eps) (* 1/3 (/ eps (pow x 2)))) (+ (* -1/6 eps) (* 1/24 eps))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 eps x) x) #s(literal 1/3 binary64) (*.f64 #s(literal 2/15 binary64) eps)) x) x)","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (+ (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* 6 (* eps (sin x)))))))","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) eps)","(* 6 (sin x))","(*.f64 #s(literal 6 binary64) (sin.f64 x))","(pow (sin x) 4)","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow (cos x) 2)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(* -2/45 (pow x 2))","(*.f64 #s(literal -2/45 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/3 (/ 1 (pow x 2))) 2/45))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 2/45 binary64)) x) x)","(+ 1 (/ (* eps (sin x)) (cos x)))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* -1 (* x (+ (* -1 (/ eps x)) (* -1 (pow eps 2)))))","(*.f64 (fma.f64 eps eps (/.f64 eps x)) x)","(* -1 (* (pow x 3) (- (* -4/3 eps) (/ 1 x))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (/ eps x)) x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -4/3 eps) (* -1 (/ (+ 1 (* -1 (/ (- (* -1 eps) (/ 1 x)) x))) x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) eps) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (+ 1 (+ (* eps (+ (* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (+ 1 (+ (* eps (+ (* eps (+ (* -6 (* eps (sin x))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(- (* -6 (* eps (sin x))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (+.f64 (-.f64 #s(literal 1/6 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) (neg.f64 eps) (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (+ 1 (* eps x)))","(fma.f64 (*.f64 eps eps) x eps)","(pow eps 2)","(*.f64 eps eps)","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(+ 1 (pow x 2))","(fma.f64 x x #s(literal 1 binary64))","(+ 1 (+ (* eps (* x (+ 1 (* 4/3 (pow x 2))))) (pow x 2)))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 4/3 binary64) x) eps (fma.f64 x x #s(literal 1 binary64)))","(* 2/15 eps)","(*.f64 #s(literal 2/15 binary64) eps)","(* -1/8 eps)","(*.f64 #s(literal -1/8 binary64) eps)","(* eps (+ 1/3 (* 2/15 (pow x 2))))","(*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps)","(* -1 (* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)","(* eps (+ (* -6 (* eps (sin x))) (* -1 (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps)","(* -1/6 eps)","(*.f64 #s(literal -1/6 binary64) eps)","(* 6 (* eps (sin x)))","(*.f64 (*.f64 (sin.f64 x) eps) #s(literal 6 binary64))","(* eps (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (+ (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)) (* 6 (sin x)))))","(*.f64 (fma.f64 #s(literal 6 binary64) (sin.f64 x) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps)","(* -6 (* (pow eps 4) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -6 binary64)) (sin.f64 x))","(* (pow eps 4) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(*.f64 (fma.f64 #s(literal -6 binary64) (sin.f64 x) (/.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -6 (sin x)) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))))))","(*.f64 (fma.f64 #s(literal -6 binary64) (sin.f64 x) (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) (*.f64 eps eps)) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -6 (sin x)) (+ (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (+ (/ 1 (pow eps 3)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (cos x))) (/ (pow (sin x) 2) (* (pow eps 3) (pow (cos x) 2))))))))","(*.f64 (fma.f64 #s(literal -6 binary64) (sin.f64 x) (-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) (*.f64 eps eps))) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -6 (* eps (sin x)))","(*.f64 (*.f64 (sin.f64 x) eps) #s(literal -6 binary64))","(* eps (- (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)) (* 6 (sin x))))","(*.f64 (fma.f64 #s(literal -6 binary64) (sin.f64 x) (/.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps)","(/ (* (pow eps 2) (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) (*.f64 eps eps))","(* (pow eps 2) (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps) eps eps)","(* (pow eps 2) (+ x (/ 1 eps)))","(fma.f64 (*.f64 eps eps) x eps)","(/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))","(*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)))","(* eps (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))","(* eps (* x (+ 1 (* 4/3 (pow x 2)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 4/3 binary64) x) eps)","(* eps (+ (* x (+ 1 (* 4/3 (pow x 2)))) (+ (/ 1 eps) (/ (pow x 2) eps))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 4/3 binary64) x) eps (fma.f64 (/.f64 (*.f64 x x) eps) eps #s(literal 1 binary64)))","(* -6 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal -6 binary64))","(* (pow eps 2) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps))))","(*.f64 (*.f64 (fma.f64 #s(literal -6 binary64) (sin.f64 x) (/.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps) eps)","(/ (* eps (sin x)) (cos x))","(*.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(* -1 (* eps (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) eps)))))","(*.f64 (fma.f64 #s(literal 6 binary64) (sin.f64 x) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps)","(* (pow eps 4) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(*.f64 (fma.f64 #s(literal -6 binary64) (sin.f64 x) (/.f64 (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -6 (sin x)) (* -1 (/ (+ (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)) (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (pow (cos x) 2))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) eps))))","(*.f64 (fma.f64 #s(literal -6 binary64) (sin.f64 x) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) eps) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* eps (- (+ (* -1 (/ (+ (/ (pow (sin x) 4) (pow (cos x) 2)) (pow (sin x) 2)) (* eps (pow (cos x) 2)))) (* -1/3 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) (* -6 (sin x)))))","(*.f64 (fma.f64 #s(literal -6 binary64) (sin.f64 x) (/.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps)","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* -1 (* eps (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps)","(* -1 (* eps (* x (- (* -4/3 (pow x 2)) 1))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -4/3 binary64) #s(literal -1 binary64)) x) (neg.f64 eps))","(* -1 (* eps (+ (* -1 (/ (+ 1 (pow x 2)) eps)) (* x (- (* -4/3 (pow x 2)) 1)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -4/3 binary64) #s(literal -1 binary64)) x (/.f64 (fma.f64 (neg.f64 x) x #s(literal -1 binary64)) eps)) (neg.f64 eps))","(* -1 (* eps (- (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) 1)))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(* -1 (* eps (- (* -2/15 (pow x 2)) 1/3)))","(*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (neg.f64 eps))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":256.197998046875,"type":"simplify"},{"count":[[31,269]],"inputs":[["(fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps))","(fma.f64 (*.f64 eps eps) x eps)","(*.f64 eps eps)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps)","#s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)","(/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))))","#s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x)))","(-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps)))","(fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))","(fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps)","(*.f64 (sin.f64 x) #s(literal 6 binary64))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(*.f64 #s(literal 4/3 binary64) x)","#s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","#s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(*.f64 #s(literal -1/6 binary64) eps)","(*.f64 #s(literal 1/3 binary64) eps)"]],"memory":[[-15127472,33972432]],"outputs":[["#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx 6 #s(approx 6 #s(literal 6 binary64)))","#s(approx 6 #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx 6 (*.f64 #s(approx 6 #s(literal 6 binary64)) #s(literal 6 binary64)))","(*.f64 #s(approx 6 #s(literal 6 binary64)) #s(literal 6 binary64))","#s(approx 6 #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx 6 (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) #s(literal 6 binary64) #s(literal 6 binary64)))","(fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) #s(literal 6 binary64) #s(literal 6 binary64))","(/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64)))","#s(approx 6 #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","(*.f64 (*.f64 #s(literal 6 binary64) #s(approx 6 #s(literal 6 binary64))) #s(literal 6 binary64))","#s(approx 6 #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx 6 #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx 6 #s(literal 6 binary64))","#s(approx 6 (*.f64 (*.f64 #s(literal 6 binary64) #s(approx 6 #s(literal 6 binary64))) #s(literal 6 binary64)))","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1/3 binary64)","#s(literal 4 binary64)","#s(literal 4/3 binary64)","#s(literal -1/315 binary64)","#s(literal 2/45 binary64)","#s(literal -2/45 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1/120 binary64)","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)"]],"time":8097.52294921875,"type":"rewrite"},{"compiler":[[10184,1079]],"memory":[[2192688,17829552]],"time":25.385986328125,"type":"eval"},{"alts":[["(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","fresh",24.6364625139351,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",24.80525489337457,"binary64"],["(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","fresh",24.639188534907582,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps))","fresh",0.44128062820266845,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","fresh",0.8254775309245777,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","done",1.3452407331912544,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","fresh",1.3936795149119963,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","fresh",1.4740789618464638,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","fresh",1.3798887021400807,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","fresh",1.5680252618100408,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","fresh",52.01172519871359,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","fresh",1.4474936957052749,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","done",1.4633932541673358,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","fresh",1.4733795248261097,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","fresh",1.507148337370854,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","fresh",1.6755072214703857,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.9351758927018552,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.4407602541243289,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","fresh",1.1320050810639222,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","fresh",1.0206099169281269,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","fresh",0.4507143684342264,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","fresh",0.9062206735548441,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","fresh",0.44909312820266845,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","fresh",59.837095486329474,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","fresh",59.83704370999515,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","fresh",59.837095486329474,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","fresh",59.83704370999515,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","fresh",1.6755312343419697,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","fresh",1.675507311887192,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","fresh",1.725140063865088,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","done",0.28899315415879956,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","fresh",0.3530025198224749,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","fresh",1.675507584386129,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)))","fresh",0.33720281557260023,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","fresh",0.34918373040017264,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","fresh",1.5032710754625893,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","done",1.725217133793873,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","done",0.4513781379711105,"binary64"],["#s(approx 4 #s(literal 2 binary64))","done",60.61919522398487,"binary64"]],"compiler":[[4267,507],[25,14],[7,6],[18,12],[37,20],[20,14],[56,32],[63,37],[45,27],[46,28],[41,26],[18,12],[41,25],[36,23],[31,21],[24,16],[20,15],[91,43],[137,49],[48,30],[43,28],[40,25],[36,24],[63,35],[65,40],[59,36],[64,40],[60,38],[34,22],[25,18],[154,52],[237,75],[275,83],[252,74],[151,64],[146,65],[41,24],[39,23],[54,32],[3,5]],"count":[[186,39]],"kept":[{"done":[5,5],"fresh":[23,18],"new":[153,14],"picked":[5,2]}],"memory":[[4335552,30574160]],"min-error":[[0.006191259768442017,"binary64"]],"time":43.035888671875,"type":"prune"},{"accuracy":[0.28899315415879956],"baseline":[0.28899315415879956],"branch":[["x",0.28899315415879956,1,"binary64"],["eps",0.28899315415879956,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.28899315415879956,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[61,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))"]],"memory":[[-1125296,22189360]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))"]],"repr":["binary64"],"time":42.942138671875,"times":[[12.319091796875,"x"],[13.136962890625,"eps"],[12.404052734375,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.33720281557260023],"baseline":[0.33720281557260023],"branch":[["x",0.33720281557260023,1,"binary64"],["eps",0.33720281557260023,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.33720281557260023,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[58,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))"]],"memory":[[5738864,21265248]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)))"]],"repr":["binary64"],"time":39.44189453125,"times":[[11.587890625,"x"],[11.458984375,"eps"],[12.211181640625,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.34918373040017264],"baseline":[0.34918373040017264],"branch":[["x",0.34918373040017264,1,"binary64"],["eps",0.34918373040017264,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.34918373040017264,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[56,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))"]],"memory":[[-5550048,20787392]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))"]],"repr":["binary64"],"time":39.93408203125,"times":[[11.968994140625,"x"],[12.669921875,"eps"],[11.239013671875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.3530025198224749],"baseline":[0.3530025198224749],"branch":[["x",0.3530025198224748,1,"binary64"],["eps",0.3530025198224749,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.3530025198224749,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[54,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 6 binary64)) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 #s(approx (pow (sin x) 4) (*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))"]],"memory":[[1988992,20085760]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))"]],"repr":["binary64"],"time":39.916015625,"times":[[13.055908203125,"x"],[11.149169921875,"eps"],[11.72607421875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.3530025198224749],"baseline":[0.3530025198224749],"branch":[["x",0.3530025198224749,1,"binary64"],["eps",0.3530025198224749,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.3530025198224749,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[51,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))"]],"memory":[[-5341776,19134912]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))"]],"repr":["binary64"],"time":34.43798828125,"times":[[10.14892578125,"x"],[10.30908203125,"eps"],[10.52099609375,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.4407602541243289],"baseline":[0.4407602541243289],"branch":[["x",0.44076025412432895,1,"binary64"],["eps",0.4407602541243289,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.4407602541243289,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[50,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(-.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) eps) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))"]],"memory":[[2135680,18856528]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))"]],"repr":["binary64"],"time":34.955078125,"times":[[10.56787109375,"x"],[10.5810546875,"eps"],[10.300048828125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.4507143684342264],"baseline":[0.4507143684342264],"branch":[["x",0.45071436843422646,1,"binary64"],["eps",0.4507143684342264,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.4507143684342264,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[44,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))"]],"memory":[[1124624,17096576]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))"]],"repr":["binary64"],"time":30.864013671875,"times":[[9.14599609375,"x"],[9.18115234375,"eps"],[9.34912109375,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.4513781379711104],"baseline":[0.4513781379711105],"branch":[["x",0.4513781379711104,1,"binary64"],["eps",0.4513781379711105,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.4513781379711105,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[42,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))"]],"memory":[[-1159344,16571408]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))"]],"repr":["binary64"],"time":31.822998046875,"times":[[9.64990234375,"x"],[9.944091796875,"eps"],[9.320068359375,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.8254775309245777],"baseline":[0.8254775309245777],"branch":[["eps",0.8254775309245777,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.8254775309245777,1,"binary64"],["x",0.8254775309245777,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[41,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 eps x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) eps eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) eps) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal -1/6 binary64) eps))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64)))) eps))","(-.f64 (neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))))) (tan.f64 x))"]],"memory":[[236224,16300464]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))"]],"repr":["binary64"],"time":30.058837890625,"times":[[8.51513671875,"eps"],[9.05908203125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"],[8.988037109375,"x"]],"type":"regimes"},{"accuracy":[0.825477959923993],"baseline":[0.825477959923993],"branch":[["x",0.825477959923993,1,"binary64"],["eps",0.825477959923993,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.825477959923993,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[34,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))"]],"memory":[[5145520,14331008]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))"]],"repr":["binary64"],"time":24.80810546875,"times":[[7.319091796875,"x"],[7.777099609375,"eps"],[7.344970703125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.3258240603452105],"baseline":[1.3258240603452105],"branch":[["x",1.3258240603452103,1,"binary64"],["eps",1.3258240603452103,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.3258240603452105,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[33,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))"]],"memory":[[-2261712,14055888]],"oracle":[61.083273758277514],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))"]],"repr":["binary64"],"time":25.77490234375,"times":[[7.26513671875,"x"],[8.254150390625,"eps"],[7.576904296875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.3452407331912544],"baseline":[1.3452407331912544],"branch":[["x",1.3452407331912544,1,"binary64"],["eps",1.3452407331912546,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.3452407331912546,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[30,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))"]],"memory":[[-4501552,13097744]],"oracle":[60.96781597231196],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))"]],"repr":["binary64"],"time":23.653076171875,"times":[[7.993896484375,"x"],[6.656005859375,"eps"],[6.81103515625,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.3798887021400807],"baseline":[1.3798887021400807],"branch":[["eps",1.3798887021400807,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.3798887021400807,1,"binary64"],["x",1.379888702140081,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[26,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 #s(approx (+ (* -2/45 (* x x)) 1/3) (*.f64 #s(literal -2/45 binary64) (*.f64 x x))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))"]],"memory":[[4021776,12019248]],"oracle":[60.96781597231196],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))"]],"repr":["binary64"],"time":20.51806640625,"times":[[5.617919921875,"eps"],[6.636962890625,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"],[6.052978515625,"x"]],"type":"regimes"},{"accuracy":[1.4474936957052746],"baseline":[1.4474936957052749],"branch":[["x",1.4474936957052744,1,"binary64"],["eps",1.4474936957052746,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.4474936957052746,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[24,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) (fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 eps (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 2/3 binary64) eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 #s(literal -1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (neg.f64 (fma.f64 #s(literal -4/3 binary64) eps (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 eps x)) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (fma.f64 #s(literal 4/3 binary64) eps (+.f64 (/.f64 (/.f64 eps x) x) (/.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal 3 binary64))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) eps eps))"]],"memory":[[-4931840,11474592]],"oracle":[60.96781597231196],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))"]],"repr":["binary64"],"time":18.574951171875,"times":[[5.52587890625,"x"],[5.4970703125,"eps"],[5.4599609375,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.463393254167336],"baseline":[1.4633932541673358],"branch":[["x",1.4633932541673358,1,"binary64"],["eps",1.463393254167336,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.463393254167336,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[14,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))"]],"memory":[[-745568,8438224]],"oracle":[60.96277775673015],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))"]],"repr":["binary64"],"time":12.47607421875,"times":[[3.5009765625,"x"],[4.057861328125,"eps"],[3.483154296875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.4733795248261097],"baseline":[1.4733795248261097],"branch":[["x",1.4733795248261097,1,"binary64"],["eps",1.4733795248261097,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.4733795248261097,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[13,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x eps) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) eps) x (*.f64 eps eps)) x eps)))"]],"memory":[[-32032,8262400]],"oracle":[60.956221285830175],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))"]],"repr":["binary64"],"time":11.60693359375,"times":[[3.461181640625,"x"],[3.216796875,"eps"],[3.498046875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.503271075462589],"baseline":[1.5032710754625893],"branch":[["x",1.503271075462589,1,"binary64"],["eps",1.5032710754625893,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.5032710754625893,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[10,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) (fma.f64 (+.f64 eps x) x #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 #s(approx (+ (* (* (neg eps) eps) (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2))))) (* (+ (* (sin x) (/ eps (cos x))) 1) (+ (* (sin x) (/ (sin x) (pow (cos x) 2))) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(literal 2 binary64) #s(approx 4 #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx 6 #s(literal 6 binary64)) #s(approx 6 #s(literal 6 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(approx (+ (* (+ (* (+ (* (* 4/3 x) eps) 1) x) eps) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) eps #s(literal 1 binary64)) x) x))) eps))"]],"memory":[[7351728,7351728]],"oracle":[60.95193486704999],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))"]],"repr":["binary64"],"time":9.4599609375,"times":[[2.8310546875,"x"],[2.824951171875,"eps"],[2.85400390625,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.507148337370854],"baseline":[1.507148337370854],"branch":[["eps",1.507148337370854,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.507148337370854,1,"binary64"],["x",1.5071483373708543,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[4,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))"]],"memory":[[-2687136,5608128]],"oracle":[60.66189349336405],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))"]],"repr":["binary64"],"time":5.804931640625,"times":[[1.590087890625,"eps"],[1.763916015625,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"],[1.867919921875,"x"]],"type":"regimes"},{"accuracy":[1.6755312343419695],"baseline":[1.6755312343419697],"branch":[["x",1.6755312343419695,1,"binary64"],["eps",1.6755312343419695,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.6755312343419695,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[3,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps eps) x eps)))"]],"memory":[[-2976080,5346512]],"oracle":[60.66087655375352],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))"]],"repr":["binary64"],"time":5.508056640625,"times":[[1.633056640625,"x"],[1.614013671875,"eps"],[1.726806640625,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[60.619195223984875],"baseline":[60.61919522398487],"branch":[["x",60.619195223984875,1,"binary64"],["eps",60.619195223984875,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",60.619195223984875,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[1,1]],"inputs":[["#s(approx 4 #s(literal 2 binary64))"]],"link":["."],"memory":[[4813664,4813664]],"name":["2tan (problem 3.3.2)"],"oracle":[60.61919522398487],"outputs":[["#s(approx 4 #s(literal 2 binary64))"]],"repr":["binary64"],"time":3.623046875,"times":[[1.046875,"x"],[1.01904296875,"eps"],[1.06591796875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"egraph":[[4,7100,1470,0.023266478],[3,2763,1470,0.025876882],[2,763,1535,0.011336652],[1,338,1554,0.005098416],[0,214,1554,0.003532811]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx 4 #s(literal 2 binary64))"]],"memory":[[-316000,15843200]],"method":["egg-herbie"],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (neg.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 eps)) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))","#s(approx 4 #s(literal 2 binary64))"]],"stop":[["node limit",1]],"time":98.412841796875,"type":"simplify"},{"compiler":[[1597,220]],"memory":[[-3848704,4235424]],"stop":[["fuel",1]],"time":6.043212890625,"type":"soundness"},{"compiler":[[1597,220],[1597,220],[9,6],[9,6],[7,6],[7,6]],"memory":[[5625840,76319760]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":118.659912109375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.015869140625,"type":"end"}]